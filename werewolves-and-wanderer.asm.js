// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return xhr.response;
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 25584;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([4,0,0,0,8,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,6,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,7,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,4,0,0,0,13,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,0,0,0,0,19,0,0,0,16,0,0,0,4,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,12,0,0,0,4,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,29,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,33,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,34,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,35,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,40,0,0,0,41,0,0,0,16,0,0,0,4,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,48,0,0,0,49,0,0,0,0,0,0,0,50,0,0,0,4,0,0,0,4,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,2,0,2,3,0,0,0,0,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,3,2,0,0,0,0,6,0,2,0,0,7,0,0,2,8,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,1,0,0,0,0,0,0,0,2,4,0,0,12,0,2,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,168,7,0,0,13,0,0,0,0,1,2,3,3,3,4,3,3,3,3,3,3,5,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,106,73,0,0,192,1,0,0,16,8,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,0,0,0,0,255,3,0,0,0,0,0,0,0,0,255,3,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,192,1,0,192,255,0,0,0,0,0,0,255,3,255,3,0,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,255,255,255,255,231,1,0,0,0,0,0,0,128,0,0,0,254,3,0,7,0,0,255,3,0,0,255,3,0,0,0,0,0,0,0,0,255,255,255,255,255,255,31,0,2,4,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,192,255,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,192,255,0,0,255,3,0,0,0,0,255,3,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,192,255,255,255,255,255,255,0,62,0,0,1,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,255,7,0,0,0,131,0,0,0,0,0,128,0,0,0,0,55,0,0,0,8,0,0,0,4,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,55,0,0,0,4,0,0,0,4,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,55,0,0,0,4,0,0,0,4,0,0,0,62,0,0,0,55,0,0,0,4,0,0,0,4,0,0,0,63,0,0,0,73,34,0,0,11,0,0,0,32,0,0,0,12,9,0,0,3,0,0,0,84,34,0,0,44,0,0,0,128,34,0,0,11,0,0,0,139,34,0,0,2,0,0,0,44,9,0,0,3,0,0,0,141,34,0,0,2,0,0,0,143,34,0,0,3,0,0,0,146,34,0,0,1,0,0,0,76,9,0,0,1,0,0,0,147,34,0,0,37,0,0,0,92,9,0,0,1,0,0,0,146,34,0,0,1,0,0,0,108,9,0,0,1,0,0,0,184,34,0,0,42,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,140,9,0,0,2,0,0,0,32,35,0,0,11,0,0,0,43,35,0,0,2,0,0,0,164,9,0,0,2,0,0,0,67,35,0,0,6,0,0,0,43,35,0,0,2,0,0,0,120,35,0,0,33,0,0,0,101,35,0,0,19,0,0,0,77,0,0,0,73,35,0,0,28,0,0,0,101,35,0,0,19,0,0,0,79,0,0,0,228,9,0,0,2,0,0,0,220,95,0,0,0,0,0,0,146,34,0,0,1,0,0,0,169,35,0,0,10,0,0,0,23,0,0,0,73,35,0,0,28,0,0,0,182,35,0,0,96,0,0,0,7,1,0,0,73,34,0,0,11,0,0,0,26,0,0,0,73,34,0,0,11,0,0,0,27,0,0,0,220,95,0,0,0,0,0,0,100,10,0,0,1,0,0,0,84,10,0,0,2,0,0,0,76,10,0,0,1,0,0,0,170,46,0,0,10,0,0,0,180,46,0,0,1,0,0,0,181,46,0,0,2,0,0,0,183,46,0,0,9,0,0,0,116,10,0,0,3,0,0,0,193,46,0,0,27,0,0,0,220,46,0,0,5,0,0,0,225,46,0,0,10,0,0,0,28,11,0,0,2,0,0,0,156,10,0,0,1,0,0,0,235,46,0,0,10,0,0,0,245,46,0,0,33,0,0,0,22,47,0,0,17,0,0,0,91,0,0,0,245,46,0,0,33,0,0,0,22,47,0,0,17,0,0,0,92,0,0,0,73,35,0,0,28,0,0,0,22,47,0,0,17,0,0,0,91,0,0,0,245,46,0,0,33,0,0,0,22,47,0,0,17,0,0,0,93,0,0,0,245,46,0,0,33,0,0,0,22,47,0,0,17,0,0,0,94,0,0,0,245,46,0,0,33,0,0,0,22,47,0,0,17,0,0,0,95,0,0,0,39,47,0,0,14,0,0,0,53,47,0,0,3,0,0,0,48,11,0,0,5,0,0,0,0,0,0,0,0,0,0,0,88,11,0,0,1,0,0,0,56,47,0,0,31,0,0,0,22,47,0,0,17,0,0,0,114,0,0,0,87,47,0,0,28,0,0,0,73,35,0,0,28,0,0,0,22,47,0,0,17,0,0,0,184,0,0,0,120,35,0,0,33,0,0,0,22,47,0,0,17,0,0,0,185,0,0,0,32,12,0,0,2,0,0,0,0,12,0,0,2,0,0,0,248,11,0,0,1,0,0,0,240,11,0,0,1,0,0,0,232,11,0,0,1,0,0,0,224,11,0,0,1,0,0,0,56,47,0,0,31,0,0,0,115,47,0,0,13,0,0,0,131,0,0,0,73,35,0,0,28,0,0,0,115,47,0,0,13,0,0,0,125,0,0,0,128,47,0,0,2,0,0,0,130,47,0,0,54,0,0,0,184,47,0,0,23,0,0,0,207,47,0,0,21,0,0,0,228,47,0,0,5,0,0,0,233,47,0,0,18,0,0,0,24,12,0,0,1,0,0,0,220,95,0,0,0,0,0,0,74,48,0,0,26,0,0,0,100,48,0,0,15,0,0,0,180,12,0,0,2,0,0,0,172,12,0,0,1,0,0,0,164,12,0,0,1,0,0,0,156,12,0,0,1,0,0,0,148,12,0,0,1,0,0,0,245,46,0,0,33,0,0,0,115,47,0,0,13,0,0,0,98,0,0,0,56,47,0,0,31,0,0,0,115,47,0,0,13,0,0,0,98,0,0,0,120,35,0,0,33,0,0,0,115,47,0,0,13,0,0,0,102,0,0,0,115,48,0,0,35,0,0,0,150,48,0,0,25,0,0,0,175,48,0,0,25,0,0,0,200,48,0,0,12,0,0,0,212,48,0,0,4,0,0,0,216,48,0,0,10,0,0,0,224,11,0,0,1,0,0,0,36,13,0,0,1,0,0,0,28,13,0,0,1,0,0,0,20,13,0,0,1,0,0,0,12,13,0,0,1,0,0,0,4,13,0,0,1,0,0,0,252,12,0,0,1,0,0,0,248,48,0,0,51,0,0,0,43,49,0,0,32,0,0,0,75,49,0,0,36,0,0,0,111,49,0,0,32,0,0,0,143,49,0,0,21,0,0,0,164,49,0,0,45,0,0,0,9,52,0,0,1,0,0,0,5,52,0,0,4,0,0,0,4,52,0,0,1,0,0,0,0,52,0,0,4,0,0,0,255,51,0,0,1,0,0,0,110,51,0,0,5,0,0,0,100,13,0,0,1,0,0,0,221,49,0,0,39,0,0,0,140,13,0,0,1,0,0,0,124,13,0,0,2,0,0,0,152,50,0,0,14,0,0,0,181,46,0,0,2,0,0,0,166,50,0,0,17,0,0,0,183,50,0,0,103,0,0,0,112,5,0,0,192,13,0,0,3,0,0,0,176,13,0,0,2,0,0,0,94,51,0,0,11,0,0,0,146,34,0,0,1,0,0,0,105,51,0,0,5,0,0,0,143,34,0,0,3,0,0,0,146,34,0,0,1,0,0,0,169,35,0,0,10,0,0,0,19,0,0,0,236,13,0,0,1,0,0,0,115,51,0,0,140,0,0,0,92,9,0,0,1,0,0,0,112,14,0,0,2,0,0,0,104,14,0,0,1,0,0,0,96,14,0,0,1,0,0,0,88,14,0,0,1,0,0,0,120,35,0,0,33,0,0,0,22,47,0,0,17,0,0,0,169,0,0,0,245,46,0,0,33,0,0,0,22,47,0,0,17,0,0,0,170,0,0,0,73,35,0,0,28,0,0,0,22,47,0,0,17,0,0,0,170,0,0,0,39,52,0,0,40,0,0,0,79,52,0,0,19,0,0,0,98,52,0,0,28,0,0,0,126,52,0,0,39,0,0,0,181,46,0,0,2,0,0,0,64,15,0,0,1,0,0,0,92,9,0,0,1,0,0,0,92,9,0,0,1,0,0,0,240,14,0,0,2,0,0,0,216,14,0,0,2,0,0,0,92,9,0,0,1,0,0,0,120,35,0,0,33,0,0,0,165,52,0,0,16,0,0,0,71,0,0,0,73,35,0,0,28,0,0,0,165,52,0,0,16,0,0,0,78,0,0,0,181,52,0,0,11,0,0,0,181,46,0,0,2,0,0,0,24,12,0,0,1,0,0,0,11,53,0,0,16,0,0,0,181,46,0,0,2,0,0,0,27,53,0,0,97,0,0,0,25,1,0,0,167,53,0,0,25,0,0,0,183,50,0,0,103,0,0,0,213,7,0,0,40,15,0,0,3,0,0,0,192,53,0,0,4,0,0,0,196,53,0,0,3,0,0,0,199,53,0,0,1,0,0,0,200,53,0,0,24,0,0,0,76,18,0,0,1,0,0,0,68,18,0,0,1,0,0,0,60,18,0,0,1,0,0,0,52,18,0,0,1,0,0,0,36,18,0,0,2,0,0,0,28,18,0,0,1,0,0,0,20,18,0,0,1,0,0,0,92,9,0,0,1,0,0,0,88,17,0,0,1,0,0,0,48,16,0,0,1,0,0,0,92,9,0,0,1,0,0,0,4,16,0,0,1,0,0,0,252,15,0,0,1,0,0,0,244,15,0,0,1,0,0,0,228,15,0,0,2,0,0,0,220,15,0,0,1,0,0,0,73,35,0,0,28,0,0,0,224,53,0,0,19,0,0,0,190,0,0,0,243,53,0,0,18,0,0,0,5,54,0,0,13,0,0,0,18,54,0,0,9,0,0,0,27,54,0,0,38,0,0,0,65,54,0,0,40,0,0,0,105,54,0,0,23,0,0,0,73,34,0,0,11,0,0,0,22,0,0,0,32,16,0,0,2,0,0,0,197,54,0,0,27,0,0,0,181,46,0,0,2,0,0,0,127,55,0,0,43,0,0,0,56,17,0,0,1,0,0,0,40,17,0,0,2,0,0,0,80,16,0,0,2,0,0,0,170,55,0,0,21,0,0,0,191,55,0,0,4,0,0,0,56,47,0,0,31,0,0,0,115,47,0,0,13,0,0,0,45,0,0,0,245,46,0,0,33,0,0,0,115,47,0,0,13,0,0,0,45,0,0,0,56,47,0,0,31,0,0,0,115,47,0,0,13,0,0,0,53,0,0,0,245,46,0,0,33,0,0,0,115,47,0,0,13,0,0,0,53,0,0,0,56,47,0,0,31,0,0,0,115,47,0,0,13,0,0,0,51,0,0,0,245,46,0,0,33,0,0,0,115,47,0,0,13,0,0,0,51,0,0,0,56,47,0,0,31,0,0,0,115,47,0,0,13,0,0,0,49,0,0,0,245,46,0,0,33,0,0,0,115,47,0,0,13,0,0,0,49,0,0,0,56,47,0,0,31,0,0,0,115,47,0,0,13,0,0,0,47,0,0,0,73,35,0,0,28,0,0,0,115,47,0,0,13,0,0,0,47,0,0,0,195,55,0,0,9,0,0,0,204,55,0,0,2,0,0,0,206,55,0,0,39,0,0,0,72,17,0,0,2,0,0,0,245,55,0,0,31,0,0,0,181,46,0,0,2,0,0,0,20,56,0,0,32,0,0,0,4,18,0,0,2,0,0,0,236,17,0,0,3,0,0,0,228,17,0,0,1,0,0,0,212,17,0,0,2,0,0,0,196,17,0,0,2,0,0,0,120,35,0,0,33,0,0,0,58,56,0,0,11,0,0,0,8,0,0,0,120,35,0,0,33,0,0,0,58,56,0,0,11,0,0,0,13,0,0,0,167,53,0,0,25,0,0,0,69,56,0,0,98,0,0,0,129,4,0,0,220,95,0,0,0,0,0,0,167,56,0,0,5,0,0,0,172,56,0,0,17,0,0,0,181,46,0,0,2,0,0,0,192,56,0,0,23,0,0,0,220,95,0,0,0,0,0,0,215,56,0,0,19,0,0,0,181,46,0,0,2,0,0,0,234,56,0,0,9,0,0,0,243,56,0,0,33,0,0,0,20,57,0,0,12,0,0,0,32,57,0,0,39,0,0,0,71,57,0,0,21,0,0,0,204,55,0,0,2,0,0,0,92,57,0,0,35,0,0,0,127,57,0,0,22,0,0,0,149,57,0,0,18,0,0,0,167,57,0,0,29,0,0,0,92,18,0,0,1,0,0,0,225,57,0,0,11,0,0,0,108,18,0,0,1,0,0,0,236,57,0,0,23,0,0,0,3,59,0,0,44,0,0,0,47,59,0,0,11,0,0,0,58,59,0,0,2,0,0,0,168,59,0,0,107,0,0,0,54,0,0,0,168,59,0,0,107,0,0,0,59,0,0,0,34,65,0,0,50,0,0,0,10,61,0,0,43,0,0,0,75,61,0,0,32,0,0,0,53,61,0,0,21,0,0,0,74,61,0,0,1,0,0,0,0,0,0,0,14,0,0,0,198,62,0,0,8,0,0,0,206,62,0,0,15,0,0,0,221,62,0,0,3,0,0,0,224,62,0,0,1,0,0,0,74,61,0,0,1,0,0,0,194,61,0,0,51,0,0,0,181,62,0,0,17,0,0,0,159,62,0,0,22,0,0,0,10,0,0,0,152,62,0,0,2,0,0,0,154,62,0,0,2,0,0,0,156,62,0,0,3,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,32,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,143,62,0,0,9,0,0,0,19,60,0,0,113,0,0,0,21,0,0,0,11,63,0,0,115,0,0,0,188,0,0,0,228,63,0,0,102,0,0,0,176,2,0,0,60,59,0,0,108,0,0,0,41,0,0,0,60,59,0,0,108,0,0,0,43,0,0,0,60,59,0,0,108,0,0,0,45,0,0,0,60,59,0,0,108,0,0,0,47,0,0,0,0,0,0,0,36,0,0,0,218,64,0,0,36,0,0,0,254,64,0,0,3,0,0,0,123,64,0,0,95,0,0,0,219,0,0,0,0,0,0,0,37,0,0,0,220,95,0,0,0,0,0,0,9,67,0,0,11,0,0,0,35,62,0,0,1,0,0,0,165,66,0,0,100,0,0,0,202,0,0,0,220,95,0,0,0,0,0,0,38,67,0,0,103,0,0,0,98,0,0,0,33,68,0,0,104,0,0,0,237,0,0,0,0,0,0,0,14,0,0,0,75,69,0,0,27,0,0,0,231,68,0,0,100,0,0,0,181,2,0,0,191,69,0,0,101,0,0,0,7,1,0,0,191,69,0,0,101,0,0,0,43,1,0,0,2,0,0,0,191,69,0,0,101,0,0,0,93,1,0,0,75,70,0,0,114,0,0,0,55,0,0,0,227,70,0,0,114,0,0,0,51,0,0,0,123,71,0,0,105,0,0,0,83,0,0,0,110,72,0,0,28,0,0,0,7,72,0,0,103,0,0,0,48,4,0,0,8,73,0,0,98,0,0,0,146,2,0,0,158,72,0,0,106,0,0,0,67,0,0,0,158,72,0,0,106,0,0,0,63,0,0,0,235,75,0,0,32,0,0,0,11,76,0,0,105,0,0,0,33,0,0,0,116,76,0,0,40,0,0,0,11,76,0,0,105,0,0,0,49,0,0,0,156,76,0,0,17,0,0,0,173,76,0,0,101,0,0,0,202,0,0,0,18,77,0,0,36,0,0,0,173,76,0,0,101,0,0,0,248,1,0,0,156,76,0,0,17,0,0,0,173,76,0,0,101,0,0,0,59,2,0,0,54,0,0,0,220,95,0,0,0,0,0,0,54,77,0,0,2,0,0,0,183,77,0,0,40,0,0,0,56,77,0,0,104,0,0,0,88,5,0,0,223,77,0,0,49,0,0,0,56,77,0,0,104,0,0,0,89,5,0,0,160,77,0,0,23,0,0,0,56,77,0,0,104,0,0,0,90,5,0,0,113,78,0,0,40,0,0,0,16,78,0,0,97,0,0,0,90,1,0,0,153,78,0,0,43,0,0,0,196,78,0,0,99,0,0,0,67,1,0,0,39,79,0,0,99,0,0,0,100,3,0,0,212,21,0,0,2,0,0,0,220,95,0,0,0,0,0,0,138,79,0,0,2,0,0,0,238,79,0,0,52,0,0,0,140,79,0,0,98,0,0,0,21,2,0,0,134,80,0,0,32,0,0,0,166,80,0,0,18,0,0,0,128,81,0,0,6,0,0,0,134,81,0,0,34,0,0,0,140,79,0,0,98,0,0,0,66,2,0,0,168,81,0,0,22,0,0,0,190,81,0,0,13,0,0,0,140,79,0,0,98,0,0,0,72,2,0,0,208,81,0,0,11,0,0,0,255,82,0,0,22,0,0,0,15,82,0,0,1,0,0,0,34,80,0,0,100,0,0,0,218,6,0,0,221,82,0,0,14,0,0,0,235,82,0,0,4,0,0,0,239,82,0,0,16,0,0,0,15,82,0,0,1,0,0,0,34,80,0,0,100,0,0,0,222,6,0,0,208,81,0,0,11,0,0,0,219,81,0,0,38,0,0,0,1,82,0,0,8,0,0,0,9,82,0,0,6,0,0,0,15,82,0,0,1,0,0,0,34,80,0,0,100,0,0,0,235,6,0,0,16,82,0,0,100,0,0,0,112,3,0,0,16,82,0,0,100,0,0,0,100,3,0,0,116,82,0,0,105,0,0,0,26,0,0,0,220,95,0,0,0,0,0,0,21,83,0,0,1,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,32,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,220,95,0,0,0,0,0,0,220,95,0,0,0,0,0,0,220,95,0,0,0,0,0,0,220,95,0,0,0,0,0,0,196,78,0,0,99,0,0,0,203,2,0,0,220,95,0,0,0,0,0,0,21,83,0,0,1,0,0,0,138,79,0,0,2,0,0,0,1,0,0,0,0,0,0,0,32,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,32,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,32,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,220,95,0,0,0,0,0,0,23,83,0,0,1,0,0,0,138,79,0,0,2,0,0,0,220,95,0,0,0,0,0,0,220,95,0,0,0,0,0,0,61,84,0,0,1,0,0,0,173,84,0,0,60,0,0,0,73,84,0,0,100,0,0,0,193,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,66,0,0,0,228,95,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,25,0,0,173,0,120,3,121,3,139,3,141,3,162,3,48,5,87,5,88,5,96,5,136,5,139,5,140,5,144,5,28,6,29,6,221,6,14,7,15,7,75,7,76,7,46,8,47,8,63,8,92,8,93,8,181,8,226,8,132,9,141,9,142,9,145,9,146,9,169,9,177,9,186,9,187,9,197,9,198,9,201,9,202,9,222,9,228,9,229,9,4,10,17,10,18,10,41,10,49,10,52,10,55,10,58,10,59,10,61,10,73,10,74,10,93,10,132,10,142,10,146,10,169,10,177,10,180,10,186,10,187,10,198,10,202,10,206,10,207,10,228,10,229,10,4,11,13,11,14,11,17,11,18,11,41,11,49,11,52,11,58,11,59,11,69,11,70,11,73,11,74,11,94,11,100,11,101,11,132,11,145,11,155,11,157,11,201,11,206,11,207,11,4,12,13,12,17,12,41,12,69,12,73,12,87,12,100,12,101,12,132,12,141,12,145,12,169,12,180,12,186,12,187,12,197,12,201,12,223,12,228,12,229,12,240,12,4,13,13,13,17,13,59,13,60,13,69,13,73,13,100,13,101,13,128,13,129,13,132,13,178,13,188,13,190,13,191,13,213,13,215,13,240,13,241,13,131,14,133,14,134,14,137,14,139,14,140,14,152,14,160,14,164,14,166,14,168,14,169,14,172,14,186,14,190,14,191,14,197,14,199,14,206,14,207,14,218,14,219,14,72,15,152,15,189,15,205,15,198,16,206,16,207,16,73,18,78,18,79,18,87,18,89,18,94,18,95,18,137,18,142,18,143,18,177,18,182,18,183,18,191,18,193,18,198,18,199,18,215,18,17,19,22,19,23,19,91,19,92,19,246,19,247,19,254,19,255,19,128,22,13,23,109,23,113,23,222,23,223,23,14,24,15,24,31,25,110,25,111,25,28,26,29,26,95,26,125,26,126,26,174,26,175,26,247,28,22,31,23,31,30,31,31,31,70,31,71,31,78,31,79,31,88,31,90,31,92,31,94,31,126,31,127,31,181,31,197,31,212,31,213,31,220,31,240,31,241,31,245,31,114,32,115,32,143,32,255,35,116,43,117,43,150,43,151,43,201,43,47,44,95,44,38,45,46,45,47,45,167,45,175,45,183,45,191,45,199,45,207,45,215,45,223,45,154,46,64,48,151,48,152,48,143,49,31,50,255,50,175,167,254,168,255,168,206,169,255,169,78,170,79,170,90,170,91,170,7,171,8,171,15,171,16,171,39,171,47,171,238,171,239,171,110,250,111,250,55,251,61,251,63,251,66,251,69,251,144,253,145,253,254,253,255,253,83,254,103,254,117,254,200,255,201,255,208,255,209,255,216,255,217,255,231,255,254,255,255,255,0,0,32,0,127,0,34,0,128,3,4,0,200,5,8,0,235,5,5,0,245,5,17,0,178,7,14,0,251,7,5,0,95,8,65,0,190,8,22,0,179,9,3,0,207,9,8,0,216,9,4,0,252,9,5,0,11,10,4,0,67,10,4,0,78,10,3,0,82,10,7,0,95,10,7,0,118,10,11,0,209,10,15,0,242,10,7,0,250,10,7,0,78,11,8,0,88,11,4,0,120,11,10,0,139,11,3,0,150,11,3,0,160,11,3,0,165,11,3,0,171,11,3,0,186,11,4,0,195,11,3,0,209,11,6,0,216,11,14,0,251,11,5,0,58,12,3,0,78,12,7,0,91,12,5,0,112,12,8,0,206,12,7,0,215,12,7,0,243,12,14,0,80,13,4,0,151,13,3,0,199,13,3,0,203,13,4,0,224,13,6,0,245,13,12,0,59,14,4,0,92,14,37,0,142,14,6,0,224,14,32,0,109,15,4,0,219,15,37,0,200,16,5,0,125,19,3,0,154,19,6,0,157,22,3,0,249,22,7,0,21,23,11,0,55,23,9,0,84,23,12,0,116,23,12,0,234,23,6,0,250,23,6,0,26,24,6,0,120,24,8,0,171,24,5,0,246,24,10,0,44,25,4,0,60,25,4,0,65,25,3,0,117,25,11,0,172,25,4,0,202,25,6,0,219,25,3,0,138,26,6,0,154,26,6,0,191,26,65,0,76,27,4,0,125,27,3,0,244,27,8,0,56,28,3,0,74,28,3,0,137,28,55,0,200,28,8,0,250,28,6,0,246,29,5,0,255,31,17,0,40,32,8,0,95,32,17,0,157,32,3,0,191,32,17,0,241,32,15,0,140,33,4,0,39,36,25,0,75,36,21,0,186,43,3,0,210,43,26,0,240,43,16,0,244,44,5,0,40,45,5,0,104,45,7,0,113,45,14,0,151,45,9,0,69,46,59,0,244,46,12,0,214,47,26,0,252,47,5,0,0,49,5,0,46,49,3,0,187,49,5,0,228,49,12,0,182,77,10,0,214,159,42,0,141,164,3,0,199,164,9,0,44,166,20,0,248,166,8,0,184,167,63,0,44,168,4,0,58,168,6,0,120,168,8,0,198,168,8,0,218,168,6,0,84,169,11,0,125,169,3,0,218,169,4,0,55,170,9,0,195,170,24,0,247,170,10,0,23,171,9,0,102,171,10,0,250,171,6,0,164,215,12,0,199,215,4,0,252,215,4,33,218,250,38,0,7,251,12,0,24,251,5,0,194,251,17,0,64,253,16,0,200,253,40,0,26,254,6,0,108,254,4,0,253,254,4,0,191,255,3,0,221,255,3,0,239,255,13,0,12,0,39,0,59,0,62,0,78,0,79,0,143,1,158,3,158,4,159,4,6,8,7,8,9,8,54,8,61,8,62,8,86,8,243,8,208,9,209,9,4,10,20,10,24,10,86,11,87,11,189,16,53,17,206,17,207,17,224,17,18,18,135,18,137,18,142,18,158,18,4,19,13,19,14,19,17,19,18,19,41,19,49,19,52,19,58,19,59,19,69,19,70,19,73,19,74,19,78,19,79,19,100,19,101,19,90,20,92,20,182,21,183,21,9,28,55,28,144,28,145,28,168,28,111,36,95,106,238,106,239,106,90,107,98,107,154,188,155,188,39,209,40,209,85,212,157,212,160,212,161,212,163,212,164,212,167,212,168,212,173,212,186,212,188,212,196,212,6,213,11,213,12,213,21,213,29,213,58,213,63,213,69,213,81,213,166,214,167,214,204,215,205,215,160,218,7,224,25,224,26,224,34,224,37,224,197,232,198,232,4,238,32,238,35,238,37,238,38,238,40,238,51,238,56,238,58,238,72,238,74,238,76,238,80,238,83,238,85,238,86,238,88,238,90,238,92,238,94,238,96,238,99,238,101,238,102,238,107,238,115,238,120,238,125,238,127,238,138,238,164,238,170,238,175,240,176,240,192,240,208,240,47,241,31,249,49,249,50,249,63,249,94,0,34,0,251,0,5,0,3,1,4,0,52,1,3,0,156,1,4,0,161,1,47,0,254,1,130,0,157,2,3,0,209,2,15,0,252,2,4,0,36,3,12,0,75,3,5,0,123,3,5,0,196,3,4,0,214,3,42,0,170,4,6,0,212,4,4,0,252,4,4,0,40,5,8,0,100,5,11,0,112,5,144,0,55,7,9,0,86,7,10,0,104,7,152,0,57,8,3,0,159,8,8,0,176,8,48,0,246,8,5,0,28,9,3,0,58,9,5,0,64,9,64,0,184,9,4,0,7,10,5,0,52,10,4,0,59,10,4,0,72,10,8,0,89,10,7,0,160,10,32,0,231,10,4,0,247,10,9,0,54,11,3,0,115,11,5,0,146,11,7,0,157,11,12,0,176,11,80,0,73,12,55,0,179,12,13,0,243,12,7,0,0,13,96,1,127,14,129,1,78,16,4,0,112,16,15,0,194,16,14,0,233,16,7,0,250,16,6,0,68,17,12,0,119,17,9,0,245,17,11,0,63,18,65,0,170,18,6,0,235,18,5,0,250,18,6,0,81,19,6,0,88,19,5,0,109,19,3,0,117,19,139,0,94,20,34,0,200,20,8,0,218,20,166,0,222,21,34,0,69,22,11,0,90,22,6,0,109,22,19,0,184,22,8,0,202,22,54,0,26,23,3,0,44,23,4,0,64,23,96,1,243,24,12,0,0,25,192,1,249,26,7,1,70,28,10,0,109,28,3,0,183,28,73,3,154,35,102,0,117,36,11,0,68,37,188,10,47,52,209,15,71,70,185,33,57,106,7,0,106,106,4,0,112,106,96,0,246,106,10,0,70,107,10,0,120,107,5,0,144,107,112,3,69,111,11,0,127,111,16,0,160,111,64,0,225,111,31,0,237,135,19,0,243,138,13,37,2,176,254,11,107,188,5,0,125,188,3,0,137,188,7,0,160,188,96,19,246,208,10,0,115,209,8,0,233,209,23,0,70,210,186,0,87,211,9,0,114,211,142,0,71,213,3,0,140,218,15,0,176,218,80,5,43,224,213,7,215,232,41,0,75,233,5,0,90,233,4,0,96,233,160,4,60,238,6,0,67,238,4,0,156,238,5,0,188,238,52,0,242,238,14,1,44,240,4,0,148,240,12,0,246,240,10,0,13,241,3,0,108,241,4,0,173,241,57,0,3,242,13,0,60,242,4,0,73,242,7,0,82,242,174,0,211,246,13,0,237,246,3,0,247,246,9,0,116,247,12,0,213,247,43,0,12,248,4,0,72,248,8,0,90,248,6,0,136,248,8,0,174,248,98,0,40,249,8,0,76,249,4,0,95,249,33,0,146,249,46,0,193,249,63,6,97,108,114,101,97,100,121,32,98,111,114,114,111,119,101,100,99,97,110,110,111,116,32,97,99,99,101,115,115,32,97,32,84,76,83,32,118,97,108,117,101,32,100,117,114,105,110,103,32,111,114,32,97,102,116,101,114,32,105,116,32,105,115,32,100,101,115,116,114,111,121,101,100,1,103,100,98,95,108,111,97,100,95,114,117,115,116,95,112,114,101,116,116,121,95,112,114,105,110,116,101,114,115,46,112,121,0,115,114,99,92,114,111,111,109,46,114,115,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,96,40,108,101,102,116,32,61,61,32,114,105,103,104,116,41,96,32,40,108,101,102,116,58,32,96,96,44,32,114,105,103,104,116,58,32,96,96,41,32,32,32,45,32,10,72,101,114,101,39,115,32,119,104,97,116,32,73,32,117,110,100,101,114,115,116,97,110,100,32,114,105,103,104,116,32,110,111,119,58,10,10,73,32,104,97,118,101,32,110,111,32,105,100,101,97,32,119,104,97,116,32,121,111,117,39,114,101,32,116,97,108,107,105,110,103,32,97,98,111,117,116,46,10,99,97,108,108,101,100,32,96,82,101,115,117,108,116,58,58,117,110,119,114,97,112,40,41,96,32,111,110,32,97,110,32,96,69,114,114,96,32,118,97,108,117,101,116,101,114,109,105,110,97,116,101,95,112,114,111,103,114,97,109,40,41,115,101,116,95,112,114,111,109,112,116,40,41,59,104,97,115,95,105,110,112,117,116,40,41,103,101,116,95,105,110,112,117,116,40,41,115,108,101,101,112,40,97,116,116,101,109,112,116,32,116,111,32,97,100,100,32,119,105,116,104,32,111,118,101,114,102,108,111,119,115,114,99,92,112,108,97,116,102,111,114,109,47,109,111,100,46,114,115,97,116,116,101,109,112,116,32,116,111,32,115,117,98,116,114,97,99,116,32,119,105,116,104,32,111,118,101,114,102,108,111,119,99,108,101,97,114,95,115,99,114,101,101,110,40,41,15,3,115,114,99,92,109,97,112,46,114,115,5,8,10,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,46,114,115,69,110,116,114,97,110,99,101,89,111,117,32,97,114,101,32,97,116,32,116,104,101,32,101,110,116,114,97,110,99,101,32,116,111,32,97,32,102,111,114,98,105,100,100,105,110,103,45,108,111,111,107,105,110,103,32,115,116,111,110,101,32,99,97,115,116,108,101,46,32,89,111,117,32,97,114,101,32,102,97,99,105,110,103,32,101,97,115,116,46,72,97,108,108,119,97,121,89,111,117,32,97,114,101,32,105,110,32,116,104,101,32,104,97,108,108,119,97,121,46,32,84,104,101,114,101,32,105,115,32,97,32,100,111,111,114,32,116,111,32,116,104,101,32,115,111,117,116,104,46,32,84,104,114,111,117,103,104,32,116,104,101,32,119,105,110,100,111,119,115,32,116,111,32,116,104,101,32,110,111,114,116,104,32,121,111,117,32,99,97,110,32,115,101,101,32,97,32,115,101,99,114,101,116,32,104,101,114,98,32,103,97,114,100,101,110,46,65,117,100,105,101,110,99,101,32,67,104,97,109,98,101,114,84,104,105,115,32,105,115,32,116,104,101,32,97,117,100,105,101,110,99,101,32,99,104,97,109,98,101,114,46,32,84,104,101,114,101,32,105,115,32,97,32,119,105,110,100,111,119,32,116,111,32,116,104,101,32,119,101,115,116,46,32,66,121,32,108,111,111,107,105,110,103,32,116,111,32,116,104,101,32,114,105,103,104,116,32,116,104,114,111,117,103,104,32,105,116,32,121,111,117,32,99,97,110,32,115,101,101,32,116,104,101,32,101,110,116,114,97,110,99,101,32,116,111,32,116,104,101,32,99,97,115,116,108,101,46,32,68,111,111,114,115,32,108,101,97,118,101,32,116,104,105,115,32,114,111,111,109,32,116,111,32,116,104,101,32,110,111,114,116,104,44,32,101,97,115,116,44,32,97,110,100,32,115,111,117,116,104,46,71,114,101,97,116,32,72,97,108,108,89,111,117,32,97,114,101,32,105,110,32,116,104,101,32,103,114,101,97,116,32,104,97,108,108,44,32,97,110,32,76,45,115,104,97,112,101,100,32,114,111,111,109,46,32,84,104,101,114,101,32,97,114,101,32,100,111,111,114,115,32,116,111,32,116,104,101,32,101,97,115,116,32,97,110,100,32,116,111,32,116,104,101,32,110,111,114,116,104,46,32,73,110,32,116,104,101,32,97,108,99,111,118,101,32,105,115,32,97,32,100,111,111,114,32,116,111,32,116,104,101,32,119,101,115,116,46,80,114,105,118,97,116,101,32,77,101,101,116,105,110,103,32,82,111,111,109,84,104,105,115,32,105,115,32,116,104,101,32,109,111,110,97,114,99,104,39,115,32,112,114,105,118,97,116,101,32,109,101,101,116,105,110,103,32,114,111,111,109,46,32,84,104,101,114,101,32,105,115,32,97,32,115,105,110,103,108,101,32,101,120,105,116,32,116,111,32,116,104,101,32,115,111,117,116,104,46,73,110,110,101,114,32,72,97,108,108,119,97,121,84,104,105,115,32,105,110,110,101,114,32,104,97,108,108,119,97,121,32,99,111,110,116,97,105,110,115,32,97,32,100,111,111,114,32,116,111,32,116,104,101,32,110,111,114,116,104,44,32,97,110,100,32,111,110,101,32,116,111,32,116,104,101,32,119,101,115,116,44,32,97,110,100,32,97,32,99,105,114,99,117,108,97,114,32,115,116,97,105,114,119,101,108,108,32,112,97,115,115,101,115,32,116,104,114,111,117,103,104,32,116,104,101,32,114,111,111,109,46,32,89,111,117,32,99,97,110,32,115,101,101,32,97,110,32,111,114,110,97,109,101,110,116,97,108,32,108,97,107,101,32,116,104,114,111,117,103,104,32,116,104,101,32,119,105,110,100,111,119,115,32,116,111,32,116,104,101,32,115,111,117,116,104,46,75,105,116,99,104,101,110,84,104,105,115,32,105,115,32,116,104,101,32,99,97,115,116,108,101,39,115,32,107,105,116,99,104,101,110,46,32,84,104,114,111,117,103,104,32,119,105,110,100,111,119,115,32,105,110,32,116,104,101,32,110,111,114,116,104,32,119,97,108,108,32,121,111,117,32,99,97,110,32,115,101,101,32,97,32,115,101,99,114,101,116,32,104,101,114,98,32,103,97,114,100,101,110,46,32,65,32,100,111,111,114,32,108,101,97,118,101,115,32,116,104,101,32,107,105,116,99,104,101,110,32,116,111,32,116,104,101,32,115,111,117,116,104,46,83,116,111,114,101,32,82,111,111,109,89], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([111,117,32,97,114,101,32,105,110,32,116,104,101,32,115,116,111,114,101,32,114,111,111,109,44,32,97,109,105,100,115,116,32,115,112,105,99,101,115,44,32,118,101,103,101,116,97,98,108,101,115,44,32,97,110,100,32,118,97,115,116,32,115,97,99,107,115,32,111,102,32,102,108,111,117,114,32,97,110,100,32,111,116,104,101,114,32,112,114,111,118,105,115,105,111,110,115,46,32,84,104,101,114,101,32,105,115,32,97,32,100,111,111,114,32,116,111,32,116,104,101,32,110,111,114,116,104,32,97,110,100,32,111,110,101,32,116,111,32,116,104,101,32,115,111,117,116,104,46,82,101,97,114,32,86,101,115,116,105,98,117,108,101,89,111,117,32,97,114,101,32,105,110,32,116,104,101,32,114,101,97,114,32,118,101,115,116,105,98,117,108,101,46,32,84,104,101,114,101,32,97,114,101,32,119,105,110,100,111,119,115,32,116,111,32,116,104,101,32,115,111,117,116,104,32,102,114,111,109,32,119,104,105,99,104,32,121,111,117,32,99,97,110,32,115,101,101,32,116,104,101,32,111,114,110,97,109,101,110,116,97,108,32,108,97,107,101,46,32,84,104,101,114,101,32,105,115,32,97,110,32,101,120,105,116,32,116,111,32,116,104,101,32,101,97,115,116,44,32,97,110,100,32,111,110,101,32,116,111,32,116,104,101,32,110,111,114,116,104,46,68,117,110,103,101,111,110,89,111,117,32,97,114,101,32,105,110,32,116,104,101,32,100,97,110,107,44,32,100,97,114,107,32,100,117,110,103,101,111,110,46,32,84,104,101,114,101,32,105,115,32,97,32,115,105,110,103,108,101,32,101,120,105,116,44,32,97,32,115,109,97,108,108,32,104,111,108,101,32,105,110,32,116,104,101,32,119,97,108,108,32,116,111,119,97,114,100,115,32,116,104,101,32,119,101,115,116,46,71,117,97,114,100,114,111,111,109,89,111,117,32,97,114,101,32,105,110,32,116,104,101,32,112,114,105,115,111,110,32,103,117,97,114,100,114,111,111,109,44,32,105,110,32,116,104,101,32,98,97,115,101,109,101,110,116,32,111,102,32,116,104,101,32,99,97,115,116,108,101,46,32,84,104,101,32,115,116,97,105,114,119,101,108,108,32,101,110,100,115,32,105,110,32,116,104,105,115,32,114,111,111,109,46,32,84,104,101,114,101,32,105,115,32,111,110,101,32,111,116,104,101,114,32,101,120,105,116,44,32,97,32,115,109,97,108,108,32,104,111,108,101,32,105,110,32,116,104,101,32,101,97,115,116,32,119,97,108,108,46,77,97,115,116,101,114,32,66,101,100,114,111,111,109,89,111,117,32,97,114,101,32,105,110,32,116,104,101,32,109,97,115,116,101,114,32,98,101,100,114,111,111,109,32,111,110,32,116,104,101,32,117,112,112,101,114,32,108,101,118,101,108,32,111,102,32,116,104,101,32,99,97,115,116,108,101,46,46,46,46,32,76,111,111,107,105,110,103,32,100,111,119,110,32,102,114,111,109,32,116,104,101,32,119,105,110,100,111,119,32,116,111,32,116,104,101,32,119,101,115,116,32,121,111,117,32,99,97,110,32,115,101,101,32,116,104,101,32,101,110,116,114,97,110,99,101,32,116,111,32,116,104,101,32,99,97,115,116,108,101,44,32,119,104,105,108,101,32,116,104,101,32,115,101,99,114,101,116,32,104,101,114,98,32,103,97,114,100,101,110,32,105,115,32,118,105,115,105,98,108,101,32,98,101,108,111,119,32,116,104,101,32,110,111,114,116,104,32,119,105,110,100,111,119,46,32,84,104,101,114,101,32,97,114,101,32,100,111,111,114,115,32,116,111,32,116,104,101,32,101,97,115,116,32,97,110,100,32,116,111,32,116,104,101,32,115,111,117,116,104,46,46,46,46,85,112,112,101,114,32,72,97,108,108,119,97,121,84,104,105,115,32,105,115,32,116,104,101,32,76,45,115,104,97,112,101,100,32,117,112,112,101,114,32,104,97,108,108,119,97,121,46,32,84,111,32,116,104,101,32,110,111,114,116,104,32,105,115,32,97,32,100,111,111,114,44,32,97,110,100,32,116,104,101,114,101,32,105,115,32,97,32,115,116,97,105,114,119,101,108,108,32,105,110,32,116,104,101,32,104,97,108,108,32,97,115,32,119,101,108,108,46,32,89,111,117,32,99,97,110,32,115,101,101,32,116,104,101,32,108,97,107,101,32,116,104,114,111,117,103,104,32,116,104,101,32,115,111,117,116,104,32,119,105,110,100,111,119,115,46,84,114,101,97,115,117,114,121,84,104,105,115,32,114,111,111,109,32,119,97,115,32,117,115,101,100,32,97,115,32,116,104,101,32,99,97,115,116,108,101,32,116,114,101,97,115,117,114,121,32,105,110,32,98,121,45,103,111,110,101,32,121,101,97,114,115,46,46,46,46,32,84,104,101,114,101,32,97,114,101,32,110,111,32,119,105,110,100,111,119,115,44,32,106,117,115,116,32,101,120,105,116,115,32,116,111,32,116,104,101,32,110,111,114,116,104,32,97,110,100,32,116,111,32,116,104,101,32,101,97,115,116,46,67,104,97,109,98,101,114,109,97,105,100,115,39,32,66,101,100,114,111,111,109,79,111,111,111,104,46,46,46,46,32,89,111,117,32,97,114,101,32,105,110,32,116,104,101,32,99,104,97,109,98,101,114,109,97,105,100,115,39,32,98,101,100,114,111,111,109,46,32,84,104,101,114,101,32,105,115,32,97,110,32,101,120,105,116,32,116,111,32,116,104,101,32,119,101,115,116,32,97,110,100,32,97,32,100,111,111,114,32,116,111,32,116,104,101,32,115,111,117,116,104,46,46,46,46,68,114,101,115,115,105,110,103,32,67,104,97,109,98,101,114,84,104,105,115,32,116,105,110,121,32,114,111,111,109,32,111,110,32,116,104,101,32,117,112,112,101,114,32,108,101,118,101,108,32,105,115,32,116,104,101,32,100,114,101,115,115,105,110,103,32,99,104,97,109,98,101,114,46,32,84,104,101,114,101,32,105,115,32,97,32,119,105,110,100,111,119,32,116,111,32,116,104,101,32,110,111,114,116,104,44,32,119,105,116,104,32,97,32,118,105,101,119,32,111,102,32,116,104,101,32,104,101,114,98,32,103,97,114,100,101,110,32,100,111,119,110,32,98,101,108,111,119,46,32,65,32,100,111,111,114,32,108,101,97,118,101,115,32,116,111,32,116,104,101,32,115,111,117,116,104,46,83,109,97,108,108,32,82,111,111,109,84,104,105,115,32,105,115,32,116,104,101,32,115,109,97,108,108,32,114,111,111,109,32,111,117,116,115,105,100,101,32,116,104,101,32,99,97,115,116,108,101,32,108,105,102,116,32,119,104,105,99,104,32,99,97,110,32,98,101,32,101,110,116,101,114,101,100,32,98,121,32,97,32,100,111,111,114,32,116,111,32,116,104,101,32,110,111,114,116,104,46,32,65,110,111,116,104,101,114,32,100,111,111,114,32,108,101,97,100,115,32,116,111,32,116,104,101,32,119,101,115,116,46,32,89,111,117,32,99,97,110,32,115,101,101,32,116,104,101,32,108,97,107,101,32,116,104,114,111,117,103,104,32,116,104,101,32,115,111,117,116,104,101,114,110,32,119,105,110,100,111,119,115,46,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,115,101,108,102,46,101,120,105,116,115,91,100,32,97,115,32,117,115,105,122,101,93,46,105,115,95,110,111,110,101,40,41,110,111,32,109,111,110,101,121,46,10,36,46,10,89,111,117,32,104,97,118,101,32,115,89,111,117,114,32,112,114,111,118,105,115,105,111,110,115,32,115,97,99,107,32,104,111,108,100,115,32,32,117,110,105,116,32,111,102,32,102,111,111,100,46,10,70,97,114,101,119,101,108,108,46,10,97,116,116,101,109,112,116,32,116,111,32,109,117,108,116,105,112,108,121,32,119,105,116,104,32,111,118,101,114,102,108,111,119,115,114,99,92,103,97,109,101,95,115,116,97,116,101,46,114,115,89,111,117,114,32,115,99,111,114,101,32,105,115,32,46,10,10,97,116,116,101,109,112,116,32,116,111,32,100,105,118,105,100,101,32,119,105,116,104,32,111,118,101,114,102,108,111,119,89,79,85,32,72,65,86,69,32,84,82,73,69,68,32,84,79,32,67,72,69,65,84,32,77,69,33,10,115,114,99,92,99,111,109,98,97,116,46,114,115,10,10,10,73,116,32,97,112,112,101,97,114,115,32,116,111,32,98,101,32,105,110,32,97,32,103,101,110,101,114,111,117,115,32,109,111,111,100,32,97,110,100,32,119,97,110,100,101,114,115,32,111,102,102,46,10,10,89,111,117,32,97,114,101,32,97,116,32,105,116,115,32,109,101,114,99,121,33,10,10,89,111,117,32,97,114,101,32,118,105,99,116,111,114,105,111,117,115,33,10,10,84,104,101,32,32,107,110,111,99,107,115,32,121,111,117,32,100,111,119,110,33,10,102,101,114,111,99,105,111,117,115,32,119,101,114,101,119,111,108,102,102,97,110,97,116,105,99,97,108,32,102,108,101,115,104,103,111,114,103,101,114,109,97,108,111,118,101,110,116,121,32,109,97,108,100,101,109,101,114,100,101,118,97,115,116,97,116,105,110,103,32,105,99,101,45,100,114,97,103,111,110,10,87,111,117,110,100,101,100,32,97,110,100,32,97,115,104,97,109,101,100,44,32,116,104,101,32,32,115,99,117,114,114,105,101,115,32,111,102,102,46,10,10,84,104,101,32,109,111,110,115,116,101,114,32,108,97,110,100,115,32,97,32,107,105,108,108,105,110,103,32,98,108,111,119,33,10,10,84,104,101,32,109,111,110,115,116,101,114,32,119,111,117,110,100,115,32,121,111,117,33,10,10,89,111,117,32,109,97,110,97,103,101,32,116,111,32,119,111,117,110,100,32,105,116,33,10,89,111,117,32,97,116,116,97,99,107,33,10,84,104,101,32,32,97,116,116,97,99,107,115,33,10,80,114,101,115,115,32,101,110,116,101,114,32,116,111,32,102,105,103,104,116,33,32,89,111,117,32,97,114,101,32,100,117,97,108,45,119,105,101,108,100,105,110,103,32,97,32,115,119,111,114,100,32,97,110,100,32,97,120,101,32,108,105,107,101,32,97,32,98,111,115,115,46,10,89,111,117,32,109,117,115,116,32,102,105,103,104,116,32,119,105,116,104,32,121,111,117,114,32,115,119,111,114,100,46,10,89,111,117,32,104,97,118,101,32,111,110,108,121,32,97,110,32,97,120,101,32,116,111,32,102,105,103,104,116,32,119,105,116,104,46,10,89,111,117,32,109,117,115,116,32,102,105,103,104,116,32,119,105,116,104,32,98,97,114,101,32,104,97,110,100,115,46,10,89,111,117,32,104,97,118,101,32,110,111,32,119,101,97,112,111,110,115,46,10,89,111,117,114,32,97,114,109,111,114,32,105,110,99,114,101,97,115,101,115,32,121,111,117,114,32,99,104,97,110,99,101,32,111,102,32,115,117,99,99,101,115,115,46,10,100,101,98,117,103,62,32,103,111,116,111,32,85,110,114,101,99,111,103,110,105,122,101,100,32,99,111,109,109,97,110,100,46,32,84,121,112,101,32,63,32,102,111,114,32,104,101,108,112,46,10,65,117,100,105,101,110,99,101,67,104,97,109,98,101,114,71,114,101,97,116,72,97,108,108,80,114,105,118,97,116,101,77,101,101,116,105,110,103,73,110,110,101,114,72,97,108,108,119,97,121,83,116,111,114,101,82,111,111,109,76,105,102,116,82,101,97,114,86,101,115,116,105,98,117,108,101,69,120,105,116,77,97,115,116,101,114,66,101,100,114,111,111,109,85,112,112,101,114,72,97,108,108,119,97,121,67,104,97,109,98,101,114,109,97,105,100,115,66,101,100,114,111,111,109,68,114,101,115,115,105,110,103,67,104,97,109,98,101,114,83,109,97,108,108,82,111,111,109,84,101,108,101,112,111,114,116,101,100,32,116,111,32,85,110,107,110,111,119,110,32,114,111,111,109,32,105,100,46,10,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,108,108,101,99,116,105,111,110,115,47,118,101,99,46,114,115,99,97,112,97,99,105,116,121,32,111,118,101,114,102,108,111,119,84,114,101,97,115,117,114,101,84,101,114,114,111,114,87,101,114,101,119,111,108,102,70,108,101,115,104,103,111,114,103,101,114,77,97,108,100,101,109,101,114,68,114,97,103,111,110,32,32,67,111,110,116,97,105,110,115,32,82,111,111,109,32,114,111,111,109,115,68,101,98,117,103,32,109,111,100,101,32,99,111,109,109,97,110,100,115,58,10,10,113,117,105,116,32,32,32,32,32,32,32,32,32,32,32,32,45,32,101,120,105,116,32,100,101,98,117,103,32,109,111,100,101,10,103,111,116,111,32,60,114,111,111,109,32,105,100,62,32,32,45,32,116,101,108,101,112,111,114,116,32,116,111,32,97,32,114,111,111,109,10,114,111,111,109,115,32,32,32,32,32,32,32,32,32,32,32,45,32,108,105,115,116,32,114,111,111,109,115,32,43,32,116,104,101,105,114,32,99,111,110,116,101,110,116,115,10,10,63,104,101,108,112,104,113,117,105,116,113,72,111,119,32,109,97,110,121,32,100,111,32,121,111,117,32,119,97,110,116,32,116,111,32,101,97,116,63,32,65,102,116,101,114,32,115,111,109,101,32,109,117,110,99,104,105,110,103,44,32,121,111,117,32,102,101,101,108,32,115,116,114,111,110,103,101,114,46,10,70,105,110,101,44,32,98,101,32,116,104,97,116,32,119,97,121,46,10,71,73,86,69,32,77,69,32,65,32,80,79,83,73,84,73,86,69,32,73,78,84,69,71,69,82,46,10,84,104,97,116,32,100,111,101,115,32,110,111,116,32,101,118,101,110,32,108,111,111,107,32,108,105,107,101,32,97,32,110,117,109,98,101,114,44,32,115,114,99,92,105,110,118,101,110,116,111,114,121,46,114,115,89,111,117,32,98,111,117,103,104,116,32,97,32,102,108,97,109,105,110,103,32,116,111,114,99,104,97,110,32,97,120,101,97,32,115,119,111,114,100,111,110,101,32,117,110,105,116,32,111,102,32,102,111,111,100,116,104,101,32,109,97,103,105,99,32,97,109,117,108,101,116,97,32,115,117,105,116,32,111,102,32,97,114,109,111,114,89,111,117,32,97,108,114,101,97,100,121,32,111,119,110,32,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,97,115,99,105,105,46,114,115,87,104,97,116,32,100,111,32,121,111,117,32,119,97,110,116,32,116,111,32,98,117,121,63,32,99,111,110,116,105,110,117,101,32,97,100,118,101,110,116,117,114,101,97,116,116,101,109,112,116,32,116,111,32,100,105,118,105,100,101,32,98,121,32,122,101,114,111,98,117,121,32,32,40,36,41,80,114,111,118,105,115,105,111,110,115,32,38,32,105,110,118,101,110,116,111,114,121,10,10,115,114,99,92,112,114,105,109,97,114,121,95,109,111,100,101,46,114,115,89,111,117,32,104,97,118,101,32,110,111,32,102,111,111,100,33,10,89,111,117,32,97,114,101,32,110,111,119,32,36,32,114,105,99,104,101,114,46,10,84,104,101,114,101,32,105,115,32,110,111,32,116,114,101,97,115,117,114,101,32,116,111,32,112,105,99,107,32,117,112,32,104,101,114,101,46,10,73,116,39,115,32,116,111,111,32,100,97,114,107,32,116,111,32,115,101,101,32,97,110,121,32,116,114,101,97,115,117,114,101,32,104,101,114,101,46,10,89,111,117,32,99,97,110,39,116,32,103,111,32,116,104,97,116,32,119,97,121,46,10,89,111,117,32,105,110,118,111,107,101,32,116,104,101,32,109,97,103,105,99,32,97,109,117,108,101,116,32,97,110,100,32,97,114,101,32,119,104,105,115,107,101,100,32,97,119,97,121,32,116,111,32,115,111,109,101,119,104,101,114,101,32,101,108,115,101,46,46,46,89,111,117,32,100,111,110,39,116,32,104,97,118,101,32,116,104,101,32,97,109,117,108,101,116,44,32,103,111,32,110,111,114,116,104,103,111,32,115,111,117,116,104,103,111,32,101,97,115,116,103,111,32,119,101,115,116,103,111,32,117,112,103,111,32,100,111,119,110,99,111,110,115,117,109,101,32,102,111,111,100,117,115,101,32,109,97,103,105,99,32,97,109,117,108,101,116,32,40,105,102,32,101,113,117,105,112,112,101,100,41,105,110,118,101,110,116,111,114,121,47,98,117,121,32,112,114,111,118,105,115,105,111,110,115,112,105,99,107,32,117,112,32,116,114,101,97,115,117,114,101,108,111,111,107,32,97,114,111,117,110,100,87,104,97,116,32,100,111,32,121,111,117,32,119,97,110,116,32,116,111,32,100,111,63,32,10,40,89,111,117,32,99,97,110,32,112,114,101,115,115,32,39,104,39,32,102,111,114,32,104,101,108,112,32,97,116,32,97,110,121,32,116,105,109,101,46,41,10,10,84,104,101,32,100,97,110,103,101,114,32,108,101,118,101,108,32,105,115,32,33,33,10,10,10,73,116,32,105,115,32,97,32,33,10,10,68,97,110,103,101,114,46,46,46,32,84,104,101,114,101,32,105,115,32,97,32,109,111,110,115,116,101,114,32,104,101,114,101,46,46,46,46,10,10,84,104,101,114,101,32,105,115,32,116,114,101,97,115,117,114,101,32,104,101,114,101,32,119,111,114,116,104,32,36,73,116,32,105,115,32,116,111,111,32,100,97,114,107,32,116,111,32,115,101,101,32,97,110,121,116,104,105,110,103,46,10,97,110,100,32,44,32,115,114,99,92,117,116,105,108,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,46,114,115,32,97,110,100,32,89,111,117,32,97,114,101,32,99,97,114,114,121,105,110,103,32,1,2,4,89,111,117,32,97,114,101,32,119,101,97,114,105,110,103,32,97,114,109,111,114,46,10,44,32,121,111,117,114,32,115,116,114,101,110,103,116,104,32,105,115,32,87,97,114,110,105,110,103,44,32,33,32,89,111,117,114,32,115,116,114,101,110,103,116,104,32,105,115,32,114,117,110,110,105,110,103,32,108,111,119,46,10,10,10,87,101,108,108,32,100,111,110,101,33,10,10,89,111,117,32,109,97,110,97,103,101,100,32,116,111,32,103,101,116,32,111,117,116,32,111,102,32,116,104,101,32,99,97,115,116,108,101,46,10,10,89,111,117,32,104,97,118,101,32,115,117,99,99,101,101,100,101,100,44,32,84,104,97,116,32,119,97,115,32,116,104,101,32,101,120,105,116,32,102,114,111,109,32,116,104,101,32,99,97,115,116,108,101,46,10,73,116,32,115,108,111,119,108,121,32,100,101,115,99,101,110,100,115,46,46,46,10,10,89,111,117,39,118,101,32,100,111,110,101,32,105,116,33,33,10,89,111,117,32,104,97,118,101,32,101,110,116,101,114,101,100,32,116,104,101,32,108,105,102,116,46,46,46,10,87,104,97,116,32,105,115,32,121,111,117,114,32,110,97,109,101,44,32,101,120,112,108,111,114,101,114,63,32,80,97,114,100,111,110,32,109,101,63,10,89,111,117,32,104,97,118,101,32,100,105,101,100,46,46,46,46,46,46,46,46,46,10,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,96,40,108,101,102,116,32,61,61,32,114,105,103,104,116,41,96,32,40,108,101,102,116,58,32,96,96,44,32,114,105,103,104,116,58,32,96,96,41,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,47,117,110,105,120,47,99,111,110,100,118,97,114,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,47,117,110,105,120,47,114,119,108,111,99,107,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,47,117,110,105,120,47,116,104,114,101,97,100,95,108,111,99,97,108,46,114,115,99,97,110,110,111,116,32,97,99,99,101,115,115,32,97,32,84,76,83,32,118,97,108,117,101,32,100,117,114,105,110,103,32,111,114,32,97,102,116,101,114,32,105,116,32,105,115,32,100,101,115,116,114,111,121,101,100,114,119,108,111,99,107,32,109,97,120,105,109,117,109,32,114,101,97,100,101,114,32,99,111,117,110,116,32,101,120,99,101,101,100,101,100,114,119,108,111,99,107,32,114,101,97,100,32,108,111,99,107,32,119,111,117,108,100,32,114,101,115,117,108,116,32,105,110,32,100,101,97,100,108,111,99,107,116,104,114,101,97,100,32,112,97,110,105,99,107,101,100,32,119,104,105,108,101,32,112,97,110,105,99,107,105,110,103,46,32,97,98,111,114,116,105,110,103,46,10,102,97,116,97,108,32,114,117,110,116,105,109,101,32,101,114,114,111,114,58,32,10,102,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,116,101,32,112,97,110,105,99,44,32,101,114,114,111,114,32,82,85,83,84,95,66,65,67,75,84,82,65,67,69,48,66,111,120,60,65,110,121,62,60,117,110,110,97,109,101,100,62,102,111,114,109,97,116,116,101,114,32,101,114,114,111,114,83,116,114,105,110,103,69,114,114,111,114,102,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,119,104,111,108,101,32,98,117,102,102,101,114,1,110,111,116,101,58,32,82,117,110,32,119,105,116,104,32,96,82,85,83,84,95,66,65,67,75,84,82,65,67,69,61,49,96,32,102,111,114,32,97,32,98,97,99,107,116,114,97,99,101,46,10,69,95,90,78,90,78,58,58,95,36,46,36,36,83,80,36,64,36,66,80,36,42,36,82,70,36,38,36,76,84,36,60,36,71,84,36,62,36,76,80,36,40,36,82,80,36,41,36,67,36,44,36,117,55,101,36,126,36,117,50,48,36,32,36,117,50,55,36,39,36,117,53,98,36,91,36,117,53,100,36,93,36,117,55,98,36,123,36,117,55,100,36,125,36,117,51,98,36,59,36,117,50,98,36,43,36,117,50,50,36,34,99,97,108,108,101,100,32,96,82,101,115,117,108,116,58,58,117,110,119,114,97,112,40,41,96,32,111,110,32,97,110,32,96,69,114,114,96,32,118,97,108,117,101,60,117,110,107,110,111,119,110,62,32,32,58,32,32,45,32,32,46,46,46,32,60,102,114,97,109,101,115,32,111,109,105,116,116,101,100,62,10,115,116,97,99,107,32,98,97,99,107,116,114,97,99,101,58,10,116,104,114,101,97,100,32,39,39,32,112,97,110,105,99,107,101,100,32,97,116,32,39,39,44,32,58,97,108,114,101,97,100,121,32,98,111,114,114,111,119,101,100,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,107,101,121,32,33,61,32,48,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,95,99,111,109,109,111,110,47,116,104,114,101,97,100,95,108,111,99,97,108,46,114,115,116,104,114,101,97,100,32,110,97,109,101,32,109,97,121,32,110,111,116,32,99,111,110,116,97,105,110,32,105,110,116,101,114,105,111,114,32,110,117,108,108,32,98,121,116,101,115,102,97,105,108,101,100,32,116,111,32,103,101,110,101,114,97,116,101,32,117,110,105,113,117,101,32,116,104,114,101,97,100,32,73,68,58,32,98,105,116,115,112,97,99,101,32,101,120,104,97,117,115,116,101,100,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,116,104,114,101,97,100,47,109,111,100,46,114,115,99,97,112,97,99,105,116,121,32,111,118,101,114,102,108,111,119,78,117,108,69,114,114,111,114,97,108,114,101,97,100,121,32,109,117,116,97,98,108,121,32,98,111,114,114,111,119,101,100,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,101,110,118,46,114,115,102,97,105,108,101,100,32,116,111,32,103,101,116,32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,32,96,96,58,32,100,97,116,97,32,112,114,111,118,105,100,101,100,32,99,111,110,116,97,105,110,115,32,97,32,110,117,108,32,98,121,116,101,116,104,114,101,97,100,32,112,97,110,105,99,107,101,100,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,112,97,110,105,99,46,32,97,98,111,114,116,105,110,103,46,10,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,101,110,116,101,114,101,100,32,117,110,114,101,97,99,104,97,98,108,101,32,99,111,100,101,117,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,111,116,104,101,114,32,111,115,32,101,114,114,111,114,111,112,101,114,97,116,105,111,110,32,105,110,116,101,114,114,117,112,116,101,100,119,114,105,116,101,32,122,101,114,111,116,105,109,101,100,32,111,117,116,105,110,118,97,108,105,100,32,100,97,116,97,105,110,118,97,108,105,100,32,105,110,112,117,116,32,112,97,114,97,109,101,116,101,114,111,112,101,114,97,116,105,111,110,32,119,111,117,108,100,32,98,108,111,99,107,101,110,116,105,116,121,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,98,114,111,107,101,110,32,112,105,112,101,97,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,97,100,100,114,101,115,115,32,105,110,32,117,115,101,110,111,116,32,99,111,110,110,101,99,116,101,100,99,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,99,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,99,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,112,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,101,110,116,105,116,121,32,110,111,116,32,102,111,117,110,100,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,105,111,47,101,114,114,111,114,46,114,115,32,40,111,115,32,101,114,114,111,114,32,115,116,114,101,114,114,111,114,95,114,32,102,97,105,108,117,114,101,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,47,117,110,105,120,47,111,115,46,114,115,117,115,101,32,111,102,32,115,116,100,58,58,116,104,114,101,97,100,58,58,99,117,114,114,101,110,116,40,41,32,105,115,32,110,111,116,32,112,111,115,115,105,98,108,101,32,97,102,116,101,114,32,116,104,101,32,116,104,114,101,97,100,39,115,32,108,111,99,97,108,32,100,97,116,97,32,104,97,115,32,98,101,101,110,32,100,101,115,116,114,111,121,101,100,97,116,116,101,109,112,116,101,100,32,116,111,32,117,115,101,32,97,32,99,111,110,100,105,116,105,111,110,32,118,97,114,105,97,98,108,101,32,119,105,116,104,32,116,119,111,32,109,117,116,101,120,101,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,110,99,47,99,111,110,100,118,97,114,46,114,115,80,111,105,115,111,110,69,114,114,111,114,32,123,32,105,110,110,101,114,58,32,46,46,32,125,99,97,110,110,111,116,32,97,99,99,101,115,115,32,115,116,100,111,117,116,32,100,117,114,105,110,103,32,115,104,117,116,100,111,119,110,102,97,105,108,101,100,32,116,111,32,119,114,105,116,101,32,116,104,101,32,98,117,102,102,101,114,101,100,32,100,97,116,97,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,105,111,47,115,116,100,105,111,46,114,115,102,97,105,108,101,100,32,112,114,105,110,116,105,110,103,32,116,111,32,115,116,100,111,117,116,58,32,79,110,99,101,32,105,110,115,116,97,110,99,101,32,104,97,115,32,112,114,101,118,105,111,117,115,108,121,32,98,101,101,110,32,112,111,105,115,111,110,101,100,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,115,116,97,116,101,32,38,32,83,84,65,84,69,95,77,65,83,75,32,61,61,32,82,85,78,78,73,78,71,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,110,99,47,111,110,99,101,46,114,115,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,40,113,117,101,117,101,32,97,115,32,117,115,105,122,101,41,32,33,61,32,49,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,95,99,111,109,109,111,110,47,97,116,95,101,120,105,116,95,105,109,112,46,114,115,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,99,46,98,111,114,114,111,119,40,41,46,105,115,95,110,111,110,101,40,41,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,95,99,111,109,109,111,110,47,116,104,114,101,97,100,95,105,110,102,111,46,114,115,109,97,105,110,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,40,42,112,116,114,41,46,105,115,95,110,111,110,101,40,41,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,47,115,121,115,47,117,110,105,120,47,97,114,103,115,46,114,115,102,97,116,97,108,32,114,117,110,116,105,109,101,32,101,114,114,111,114,58,32,111,117,116,32,111,102,32,109,101,109,111,114,121,10,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,108,108,101,99,116,105,111,110,115,47,118,101,99,46,114,115,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,101,110,100,32,60,61,32,108,101,110,99,97,112,97,99,105,116,121,32,111,118,101,114,102,108,111,119,239,191,189,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,115,116,100,95,117,110,105,99,111,100,101,47,116,97,98,108,101,115,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,46,114,115,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,3,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,7,0,0,8,0,0,0,6,0,0,0,0,0,8,0,8,0,0,0,0,0,8,0,9,6,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,33,112,116,114,46,105,115,95,110,117,108,108,40,41,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,112,97,110,105,99,95,117,110,119,105,110,100,47,101,109,99,99,46,114,115,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,101,110,116,101,114,101,100,32,117,110,114,101,97,99,104,97,98,108,101,32,99,111,100,101,99,97,112,97,99,105,116,121,32,111,118,101,114,102,108,111,119,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,97,108,108,111,99,47,114,97,119,95,118,101,99,46,114,115,84,114,105,101,100,32,116,111,32,115,104,114,105,110,107,32,116,111,32,97,32,108,97,114,103,101,114,32,99,97,112,97,99,105,116,121,46,46,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115,105,110,118,97,108,105,100,32,109,101,109,111,114,121,32,111,114,100,101,114,105,110,103,116,104,101,114,101,32,105,115,32,110,111,32,115,117,99,104,32,116,104,105,110,103,32,97,115,32,97,32,114,101,108,101,97,115,101,32,108,111,97,100,116,104,101,114,101,32,105,115,32,110,111,32,115,117,99,104,32,116,104,105,110,103,32,97,115,32,97,110,32,97,99,113,117,105,114,101,47,114,101,108,101,97,115,101,32,108,111,97,100,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115,116,111,95,100,105,103,105,116,58,32,114,97,100,105,120,32,105,115,32,116,111,111,32,104,105,103,104,32,40,109,97,120,105,109,117,109,32,51,54,41,99,97,108,108,101,100,32,96,79,112,116,105,111,110,58,58,117,110,119,114,97,112,40,41,96,32,111,110,32,97,32,96,78,111,110,101,96,32,118,97,108,117,101,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115,58,32,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,46,114,115,100,101,115,116,105,110,97,116,105,111,110,32,97,110,100,32,115,111,117,114,99,101,32,115,108,105], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([99,101,115,32,104,97,118,101,32,100,105,102,102,101,114,101,110,116,32,108,101,110,103,116,104,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,58,32,116,104,101,32,108,101,110,32,105,115,32,32,98,117,116,32,116,104,101,32,105,110,100,101,120,32,105,115,32,48,48,48,49,48,50,48,51,48,52,48,53,48,54,48,55,48,56,48,57,49,48,49,49,49,50,49,51,49,52,49,53,49,54,49,55,49,56,49,57,50,48,50,49,50,50,50,51,50,52,50,53,50,54,50,55,50,56,50,57,51,48,51,49,51,50,51,51,51,52,51,53,51,54,51,55,51,56,51,57,52,48,52,49,52,50,52,51,52,52,52,53,52,54,52,55,52,56,52,57,53,48,53,49,53,50,53,51,53,52,53,53,53,54,53,55,53,56,53,57,54,48,54,49,54,50,54,51,54,52,54,53,54,54,54,55,54,56,54,57,55,48,55,49,55,50,55,51,55,52,55,53,55,54,55,55,55,56,55,57,56,48,56,49,56,50,56,51,56,52,56,53,56,54,56,55,56,56,56,57,57,48,57,49,57,50,57,51,57,52,57,53,57,54,57,55,57,56,57,57,105,110,100,101,120,32,32,111,117,116,32,111,102,32,114,97,110,103,101,32,102,111,114,32,115,108,105,99,101,32,111,102,32,108,101,110,103,116,104,32,115,108,105,99,101,32,105,110,100,101,120,32,115,116,97,114,116,115,32,97,116,32,32,98,117,116,32,101,110,100,115,32,97,116,32,91,46,46,46,93,98,121,116,101,32,105,110,100,101,120,32,32,105,115,32,110,111,116,32,97,32,99,104,97,114,32,98,111,117,110,100,97,114,121,59,32,105,116,32,105,115,32,105,110,115,105,100,101,32,32,40,98,121,116,101,115,32,41,32,111,102,32,96,96,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,95,112,114,105,118,97,116,101,46,114,115,98,101,103,105,110,32,60,61,32,101,110,100,32,40,32,60,61,32,41,32,119,104,101,110,32,115,108,105,99,105,110,103,32,96,32,105,115,32,111,117,116,32,111,102,32,98,111,117,110,100,115,32,111,102,32,96,10,41,32,32,32,32,32,66,111,114,114,111,119,69,114,114,111,114,66,111,114,114,111,119,77,117,116,69,114,114,111,114,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,32,123,10,125,32,125,44,32,91,107,105,110,100,69,109,112,116,121,48,120,47,98,117,105,108,100,115,108,97,118,101,47,114,117,115,116,45,98,117,105,108,100,98,111,116,47,115,108,97,118,101,47,115,116,97,98,108,101,45,100,105,115,116,45,114,117,115,116,99,45,99,114,111,115,115,45,114,117,115,116,98,117,105,108,100,45,108,105,110,117,120,47,98,117,105,108,100,47,115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115,102,114,111,109,95,115,116,114,95,114,97,100,105,120,95,105,110,116,58,32,109,117,115,116,32,108,105,101,32,105,110,32,116,104,101,32,114,97,110,103,101,32,96,91,50,44,32,51,54,93,96,32,45,32,102,111,117,110,100,32,80,97,114,115,101,73,110,116,69,114,114,111,114,73,110,118,97,108,105,100,68,105,103,105,116,79,118,101,114,102,108,111,119,85,110,100,101,114,102,108,111,119,85,116,102,56,69,114,114,111,114,118,97,108,105,100,95,117,112,95,116,111,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Add"] = _i64Add;

  function _pthread_mutex_destroy() {}

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((Runtime.setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((Runtime.setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((Runtime.setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((Runtime.setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

  function __Unwind_FindEnclosingFunction() {
      return 0; // we cannot succeed
    }

   
  Module["_pthread_mutex_lock"] = _pthread_mutex_lock;

  function _pthread_mutexattr_settype() {}

  function _emscripten_run_script_string(ptr) {
      var s = eval(Pointer_stringify(ptr)) + '';
      var me = _emscripten_run_script_string;
      var len = lengthBytesUTF8(s);
      if (!me.bufferSize || me.bufferSize < len+1) {
        if (me.bufferSize) _free(me.buffer);
        me.bufferSize = len+1;
        me.buffer = _malloc(me.bufferSize);
      }
      stringToUTF8(s, me.buffer, me.bufferSize);
      return me.buffer;
    }

  function _abort() {
      Module['abort']();
    }

  function _pthread_cond_destroy() { return 0; }

  function _pthread_condattr_destroy() { return 0; }

  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }

  function _pthread_condattr_setclock() { return 0; }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___lock() {}

  function ___unlock() {}

  function _pthread_mutexattr_init() {}

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

  function _pthread_key_delete(key) {
      if (key in PTHREAD_SPECIFIC) {
        delete PTHREAD_SPECIFIC[key];
        return 0;
      }
      return ERRNO_CODES.EINVAL;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _pthread_mutexattr_destroy() {}

   
  Module["_memmove"] = _memmove;

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              window.postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else window.postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_cancel_main_loop() {
      Browser.mainLoop.pause();
      Browser.mainLoop.func = null;
    }

  function __Unwind_GetIPInfo() {
      abort('Unwind_GetIPInfo');
    }

  function _llvm_trap() {
      abort('trap!');
    }

  var _llvm_ctlz_i32=true;


  
  
  function __emscripten_traverse_stack(args) {
      if (!args || !args.callee || !args.callee.name) {
        return [null, '', ''];
      }
  
      var funstr = args.callee.toString();
      var funcname = args.callee.name;
      var str = '(';
      var first = true;
      for(i in args) {
        var a = args[i];
        if (!first) {
          str += ", ";
        }
        first = false;
        if (typeof a === 'number' || typeof a === 'string') {
          str += a;
        } else {
          str += '(' + typeof a + ')';
        }
      }
      str += ')';
      var caller = args.callee.caller;
      args = caller ? caller.arguments : [];
      if (first)
        str = '';
      return [args, funcname, str];
    }function _emscripten_get_callstack_js(flags) {
      var callstack = jsStackTrace();
  
      // Find the symbols in the callstack that corresponds to the functions that report callstack information, and remove everyhing up to these from the output.
      var iThisFunc = callstack.lastIndexOf('_emscripten_log');
      var iThisFunc2 = callstack.lastIndexOf('_emscripten_get_callstack');
      var iNextLine = callstack.indexOf('\n', Math.max(iThisFunc, iThisFunc2))+1;
      callstack = callstack.slice(iNextLine);
  
      // If user requested to see the original source stack, but no source map information is available, just fall back to showing the JS stack.
      if (flags & 8/*EM_LOG_C_STACK*/ && typeof emscripten_source_map === 'undefined') {
        Runtime.warnOnce('Source map information is not available, emscripten_log with EM_LOG_C_STACK will be ignored. Build with "--pre-js $EMSCRIPTEN/src/emscripten-source-map.min.js" linker flag to add source map loading to code.');
        flags ^= 8/*EM_LOG_C_STACK*/;
        flags |= 16/*EM_LOG_JS_STACK*/;
      }
  
      var stack_args = null;
      if (flags & 128 /*EM_LOG_FUNC_PARAMS*/) {
        // To get the actual parameters to the functions, traverse the stack via the unfortunately deprecated 'arguments.callee' method, if it works:
        var stack_args = __emscripten_traverse_stack(arguments);
        while (stack_args[1].indexOf('_emscripten_') >= 0)
          stack_args = __emscripten_traverse_stack(stack_args[0]);
      }
      
      // Process all lines:
      lines = callstack.split('\n');
      callstack = '';
      var newFirefoxRe = new RegExp('\\s*(.*?)@(.*?):([0-9]+):([0-9]+)'); // New FF30 with column info: extract components of form '       Object._main@http://server.com:4324:12'
      var firefoxRe = new RegExp('\\s*(.*?)@(.*):(.*)(:(.*))?'); // Old FF without column info: extract components of form '       Object._main@http://server.com:4324'
      var chromeRe = new RegExp('\\s*at (.*?) \\\((.*):(.*):(.*)\\\)'); // Extract components of form '    at Object._main (http://server.com/file.html:4324:12)'
      
      for(l in lines) {
        var line = lines[l];
  
        var jsSymbolName = '';
        var file = '';
        var lineno = 0;
        var column = 0;
  
        var parts = chromeRe.exec(line);
        if (parts && parts.length == 5) {
          jsSymbolName = parts[1];
          file = parts[2];
          lineno = parts[3];
          column = parts[4];
        } else {
          parts = newFirefoxRe.exec(line);
          if (!parts) parts = firefoxRe.exec(line);
          if (parts && parts.length >= 4) {
            jsSymbolName = parts[1];
            file = parts[2];
            lineno = parts[3];
            column = parts[4]|0; // Old Firefox doesn't carry column information, but in new FF30, it is present. See https://bugzilla.mozilla.org/show_bug.cgi?id=762556
          } else {
            // Was not able to extract this line for demangling/sourcemapping purposes. Output it as-is.
            callstack += line + '\n';
            continue;
          }
        }
  
        // Try to demangle the symbol, but fall back to showing the original JS symbol name if not available.
        var cSymbolName = (flags & 32/*EM_LOG_DEMANGLE*/) ? demangle(jsSymbolName) : jsSymbolName;
        if (!cSymbolName) {
          cSymbolName = jsSymbolName;
        }
  
        var haveSourceMap = false;
  
        if (flags & 8/*EM_LOG_C_STACK*/) {
          var orig = emscripten_source_map.originalPositionFor({line: lineno, column: column});
          haveSourceMap = (orig && orig.source);
          if (haveSourceMap) {
            if (flags & 64/*EM_LOG_NO_PATHS*/) {
              orig.source = orig.source.substring(orig.source.replace(/\\/g, "/").lastIndexOf('/')+1);
            }
            callstack += '    at ' + cSymbolName + ' (' + orig.source + ':' + orig.line + ':' + orig.column + ')\n';
          }
        }
        if ((flags & 16/*EM_LOG_JS_STACK*/) || !haveSourceMap) {
          if (flags & 64/*EM_LOG_NO_PATHS*/) {
            file = file.substring(file.replace(/\\/g, "/").lastIndexOf('/')+1);
          }
          callstack += (haveSourceMap ? ('     = '+jsSymbolName) : ('    at '+cSymbolName)) + ' (' + file + ':' + lineno + ':' + column + ')\n';
        }
        
        // If we are still keeping track with the callstack by traversing via 'arguments.callee', print the function parameters as well.
        if (flags & 128 /*EM_LOG_FUNC_PARAMS*/ && stack_args[0]) {
          if (stack_args[1] == jsSymbolName && stack_args[2].length > 0) {
            callstack = callstack.replace(/\s+$/, '');
            callstack += ' with values: ' + stack_args[1] + stack_args[2] + '\n';
          }
          stack_args = __emscripten_traverse_stack(stack_args[0]);
        }
      }
      // Trim extra whitespace at the end of the output.
      callstack = callstack.replace(/\s+$/, '');
      return callstack;
    }function __Unwind_Backtrace(func, arg) {
      var trace = _emscripten_get_callstack_js();
      var parts = trace.split('\n');
      for (var i = 0; i < parts.length; i++) {
        var ret = Module['dynCall_iii'](func, 0, arg);
        if (ret !== 0) return;
      }
    }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _pthread_rwlock_rdlock() { return 0; }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

   
  Module["_pthread_mutex_unlock"] = _pthread_mutex_unlock;

  function _pthread_cond_signal() { return 0; }

  function _pthread_cond_init() { return 0; }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _llvm_nacl_atomic_cmpxchg_i8=undefined;

  
  
   
  Module["_i64Subtract"] = _i64Subtract;
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  function _emscripten_run_script(ptr) {
      eval(Pointer_stringify(ptr));
    }

   
  Module["_sbrk"] = _sbrk;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _emscripten_run_script_int(ptr) {
      return eval(Pointer_stringify(ptr))|0;
    }

  function _dladdr(addr, info) {
      // report all function pointers as coming from this program itself XXX not really correct in any way
      var fname = allocate(intArrayFromString(Module['thisProgram'] || './this.program'), 'i8', ALLOC_NORMAL); // XXX leak
      HEAP32[((addr)>>2)]=fname;
      HEAP32[(((addr)+(4))>>2)]=0;
      HEAP32[(((addr)+(8))>>2)]=0;
      HEAP32[(((addr)+(12))>>2)]=0;
      return 1;
    }

  function ___gxx_personality_v0() {
    }

   
  Module["___uremdi3"] = ___uremdi3;

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_cond_wait() { return 0; }

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function _pthread_condattr_init() { return 0; }

   
  Module["_llvm_bswap_i16"] = _llvm_bswap_i16;


  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_random() {
      return Math.random();
    }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _llvm_nacl_atomic_cmpxchg_i32=undefined;

  function _pthread_rwlock_unlock() { return 0; }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
___buildEnvironment(ENV);;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_pthread_cond_wait": _pthread_cond_wait, "_emscripten_run_script_string": _emscripten_run_script_string, "_emscripten_run_script": _emscripten_run_script, "_pthread_key_create": _pthread_key_create, "__Unwind_FindEnclosingFunction": __Unwind_FindEnclosingFunction, "_emscripten_get_callstack_js": _emscripten_get_callstack_js, "___gxx_personality_v0": ___gxx_personality_v0, "_pthread_rwlock_unlock": _pthread_rwlock_unlock, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___buildEnvironment": ___buildEnvironment, "_pthread_cond_init": _pthread_cond_init, "__Unwind_GetIPInfo": __Unwind_GetIPInfo, "_pthread_mutexattr_destroy": _pthread_mutexattr_destroy, "__emscripten_traverse_stack": __emscripten_traverse_stack, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "___cxa_free_exception": ___cxa_free_exception, "_pthread_key_delete": _pthread_key_delete, "_emscripten_cancel_main_loop": _emscripten_cancel_main_loop, "___cxa_allocate_exception": ___cxa_allocate_exception, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___resumeException": ___resumeException, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_pthread_condattr_setclock": _pthread_condattr_setclock, "___setErrNo": ___setErrNo, "_pthread_getspecific": _pthread_getspecific, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "_pthread_rwlock_rdlock": _pthread_rwlock_rdlock, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_mutex_destroy": _pthread_mutex_destroy, "_abort": _abort, "_pthread_condattr_init": _pthread_condattr_init, "_pthread_mutexattr_settype": _pthread_mutexattr_settype, "_getenv": _getenv, "_emscripten_run_script_int": _emscripten_run_script_int, "___syscall54": ___syscall54, "___unlock": ___unlock, "___syscall140": ___syscall140, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_get_now": _emscripten_get_now, "_pthread_mutexattr_init": _pthread_mutexattr_init, "_pthread_setspecific": _pthread_setspecific, "_dladdr": _dladdr, "___cxa_throw": ___cxa_throw, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall4": ___syscall4, "_pthread_cond_destroy": _pthread_cond_destroy, "_pthread_condattr_destroy": _pthread_condattr_destroy, "_emscripten_random": _emscripten_random, "_llvm_trap": _llvm_trap, "_pthread_mutex_init": _pthread_mutex_init, "__Unwind_Backtrace": __Unwind_Backtrace, "___syscall146": ___syscall146, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _emscripten_run_script_string=env._emscripten_run_script_string;
  var _emscripten_run_script=env._emscripten_run_script;
  var _pthread_key_create=env._pthread_key_create;
  var __Unwind_FindEnclosingFunction=env.__Unwind_FindEnclosingFunction;
  var _emscripten_get_callstack_js=env._emscripten_get_callstack_js;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _pthread_rwlock_unlock=env._pthread_rwlock_unlock;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___buildEnvironment=env.___buildEnvironment;
  var _pthread_cond_init=env._pthread_cond_init;
  var __Unwind_GetIPInfo=env.__Unwind_GetIPInfo;
  var _pthread_mutexattr_destroy=env._pthread_mutexattr_destroy;
  var __emscripten_traverse_stack=env.__emscripten_traverse_stack;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var _pthread_key_delete=env._pthread_key_delete;
  var _emscripten_cancel_main_loop=env._emscripten_cancel_main_loop;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___resumeException=env.___resumeException;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _pthread_condattr_setclock=env._pthread_condattr_setclock;
  var ___setErrNo=env.___setErrNo;
  var _pthread_getspecific=env._pthread_getspecific;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var _pthread_rwlock_rdlock=env._pthread_rwlock_rdlock;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_mutex_destroy=env._pthread_mutex_destroy;
  var _abort=env._abort;
  var _pthread_condattr_init=env._pthread_condattr_init;
  var _pthread_mutexattr_settype=env._pthread_mutexattr_settype;
  var _getenv=env._getenv;
  var _emscripten_run_script_int=env._emscripten_run_script_int;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var ___syscall140=env.___syscall140;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_get_now=env._emscripten_get_now;
  var _pthread_mutexattr_init=env._pthread_mutexattr_init;
  var _pthread_setspecific=env._pthread_setspecific;
  var _dladdr=env._dladdr;
  var ___cxa_throw=env.___cxa_throw;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall4=env.___syscall4;
  var _pthread_cond_destroy=env._pthread_cond_destroy;
  var _pthread_condattr_destroy=env._pthread_condattr_destroy;
  var _emscripten_random=env._emscripten_random;
  var _llvm_trap=env._llvm_trap;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var __Unwind_Backtrace=env.__Unwind_Backtrace;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN13drop_contents17h2c129cc35e7403c4E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN13drop_contents17h317219d4bded1dc8E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17hfc6aea5a847ca39dE($0);
 return;
}
function __ZN13drop_contents17hfc6aea5a847ca39dE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN2ww8platform10emscripten22set_main_loop_callback17h4d0d30734935962dE($0) {
 $0 = $0|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_5 = 0, $abi_cast = 0, $arg0 = 0, $callback = 0, $personalityslot = 0, $personalityslot$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $personalityslot = sp + 24|0;
 $_5 = sp + 16|0;
 $callback = sp + 8|0;
 $abi_cast = sp + 32|0;
 $arg0 = sp;
 HEAP32[$abi_cast>>2] = $0;
 ;HEAP32[$arg0>>2]=HEAP32[$abi_cast>>2]|0;
 ;HEAP32[$callback>>2]=HEAP32[$arg0>>2]|0;
 HEAP32[$_5>>2] = $callback;
 $1 = HEAP32[$_5>>2]|0;
 __THREW__ = 0;
 invoke_vii(67,(2420|0),($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  __THREW__ = 0;
  invoke_viii(68,(69|0),15,1);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if (!($5)) {
   STACKTOP = sp;return;
  }
 }
 $6 = ___cxa_find_matching_catch_2()|0;
 $7 = tempRet0;
 HEAP32[$personalityslot>>2] = $6;
 $personalityslot$index1 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index1>>2] = $7;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN2ww8platform10emscripten22set_main_loop_callback28__u7b__u7b_closure_u7d__u7d_17h659e7a21d9dd259dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $__debuginfo_env_ptr = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0;
 var $log = 0, $personalityslot = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $personalityslot = sp + 16|0;
 $_10 = sp + 8|0;
 $abi_cast = sp + 24|0;
 $arg0 = sp;
 HEAP32[$abi_cast>>2] = $0;
 ;HEAP32[$arg0>>2]=HEAP32[$abi_cast>>2]|0;
 $__debuginfo_env_ptr = $arg0;
 $arg1 = $1;
 $2 = $arg1;
 $log = $2;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = $log;
 __ZN37__LT_core__cell__RefCell_LT_T_GT__GT_10borrow_mut17hb64cdc1cad68a80bE($_10,$4);
 __THREW__ = 0;
 $5 = (invoke_ii(70,($_10|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = tempRet0;
  HEAP32[$personalityslot>>2] = $10;
  $personalityslot$index4 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index4>>2] = $11;
  __ZN4drop17h1863166ca397e003E($_10);
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 HEAP32[$5>>2] = $3;
 __THREW__ = 0;
 invoke_vi(71,($_10|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 HEAP32[$personalityslot>>2] = $12;
 $personalityslot$index6 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index6>>2] = $13;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN2ww8platform10emscripten22set_main_loop_callback7wrapper17h1d3b3ecee5938a61E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4with17hbeea2e111c724d36E(2420);
 return;
}
function __ZN2ww8platform10emscripten22set_main_loop_callback7wrapper28__u7b__u7b_closure_u7d__u7d_17h304161c5df279480E($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_8 = 0, $arg1 = 0, $closure = 0, $personalityslot = 0;
 var $personalityslot$index4 = 0, $personalityslot$index6 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 8|0;
 $_8 = sp;
 $arg1 = $0;
 $1 = $arg1;
 $z = $1;
 $2 = $z;
 __ZN37__LT_core__cell__RefCell_LT_T_GT__GT_10borrow_mut17hb64cdc1cad68a80bE($_8,$2);
 __THREW__ = 0;
 $3 = (invoke_ii(72,($_8|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = tempRet0;
  HEAP32[$personalityslot>>2] = $10;
  $personalityslot$index4 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index4>>2] = $11;
  __ZN4drop17h1863166ca397e003E($_8);
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $6 = HEAP32[$3>>2]|0;
 $closure = $6;
 __THREW__ = 0;
 invoke_vi(71,($_8|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  $9 = $closure;
  __ZN23werewolves_and_wanderer4main28__u7b__u7b_closure_u7d__u7d_17h6555a8c7057c8a7bE($9);
  STACKTOP = sp;return;
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 HEAP32[$personalityslot>>2] = $12;
 $personalityslot$index6 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index6>>2] = $13;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN34__LT_core__cell__Cell_LT_T_GT__GT_3get17hd9125395bb7b2195E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3get17h04b380db108e340aE($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN34__LT_core__cell__Cell_LT_T_GT__GT_3set17hca5a3c7be3baf61cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $arg1 = 0, $self = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $value = $3;
 $4 = $value;
 $5 = $self;
 $6 = (__ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3get17h04b380db108e340aE($5)|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN37__LT_core__cell__RefCell_LT_T_GT__GT_10borrow_mut17hb64cdc1cad68a80bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_3 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 8|0;
 $_3 = sp;
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN37__LT_core__cell__RefCell_LT_T_GT__GT_14try_borrow_mut17hf6e6e69483c5793cE($_3,$3);
 __THREW__ = 0;
 invoke_viiii(73,($0|0),($_3|0),(8670|0),16);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  HEAP32[$personalityslot>>2] = $6;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $7;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN37__LT_core__cell__RefCell_LT_T_GT__GT_14try_borrow_mut17hf6e6e69483c5793cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val11 = 0, $$expand_i1_val12 = 0, $$expand_i1_val13 = 0, $$expand_i1_val9 = 0, $$field = 0, $$field4 = 0, $$index3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13 = 0, $_16 = 0;
 var $_17 = 0, $_3 = 0, $_7 = 0, $abi_cast = 0, $arg0 = 0, $b = 0, $personalityslot = 0, $personalityslot$index6 = 0, $personalityslot$index8 = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $personalityslot = sp + 32|0;
 $abi_cast = sp + 48|0;
 $_13 = sp + 24|0;
 $_7 = sp + 16|0;
 $b = sp + 8|0;
 $_3 = sp;
 $arg0 = $1;
 $_17 = 0;
 $_16 = 0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $_16 = 1;
 $4 = (__ZN4core4cell12BorrowRefMut3new17hbc2a60ad8044ea89E($3)|0);
 HEAP32[$abi_cast>>2] = $4;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 $5 = HEAP32[$_3>>2]|0;
 $6 = ($5|0)!=(0|0);
 $$expand_i1_val = $6&1;
 $$expand_i1_val9 = 1;
 $switch2 = ($$expand_i1_val&255)<($$expand_i1_val9&255);
 do {
  if ($switch2) {
   HEAP32[$0>>2] = 0;
   label = 7;
  } else {
   $_16 = 0;
   $_17 = 1;
   ;HEAP32[$b>>2]=HEAP32[$_3>>2]|0;
   $9 = $self;
   $10 = ((($9)) + 4|0);
   __THREW__ = 0;
   $11 = (invoke_ii(74,($10|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    $_17 = 0;
    ;HEAP32[$_13>>2]=HEAP32[$b>>2]|0;
    HEAP32[$_7>>2] = $11;
    $14 = ((($_7)) + 4|0);
    ;HEAP32[$14>>2]=HEAP32[$_13>>2]|0;
    ;HEAP32[$0>>2]=HEAP32[$_7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_7+4>>2]|0;
    label = 7;
    break;
   }
   $25 = ___cxa_find_matching_catch_2()|0;
   $26 = tempRet0;
   HEAP32[$personalityslot>>2] = $25;
   $personalityslot$index6 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index6>>2] = $26;
   $27 = $_17;
   $28 = $27&1;
   if ($28) {
    $_17 = 0;
    __ZN4drop17h2c129cc35e7403c4E($b);
   }
   $7 = HEAP32[$_3>>2]|0;
   $8 = ($7|0)!=(0|0);
   $$expand_i1_val10 = $8&1;
   $$expand_i1_val11 = 1;
   $switch = ($$expand_i1_val10&255)<($$expand_i1_val11&255);
   if ($switch) {
    __ZN4drop17hb7e7ef405614b0b2E($_3);
    break;
   }
   $17 = $_16;
   $18 = $17&1;
   if ($18) {
    $_16 = 0;
    __ZN4drop17h2c129cc35e7403c4E($_3);
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $15 = HEAP32[$_3>>2]|0;
  $16 = ($15|0)!=(0|0);
  $$expand_i1_val12 = $16&1;
  $$expand_i1_val13 = 1;
  $switch1 = ($$expand_i1_val12&255)<($$expand_i1_val13&255);
  if ($switch1) {
   __THREW__ = 0;
   invoke_vi(75,($_3|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    STACKTOP = sp;return;
   }
  } else {
   $21 = $_16;
   $22 = $21&1;
   if (!($22)) {
    STACKTOP = sp;return;
   }
   $_16 = 0;
   __THREW__ = 0;
   invoke_vi(76,($_3|0));
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if (!($24)) {
    STACKTOP = sp;return;
   }
  }
  $29 = ___cxa_find_matching_catch_2()|0;
  $30 = tempRet0;
  HEAP32[$personalityslot>>2] = $29;
  $personalityslot$index8 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index8>>2] = $30;
 }
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_6as_ref17hf28b6a605cfe0e01E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_0 = 0, $arg0 = 0, $self = 0, $switch = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp + 4|0;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP32[$2>>2]|0;
 $switch = ($3>>>0)<(1);
 if ($switch) {
  HEAP32[$_0>>2] = 0;
 } else {
  $4 = $self;
  $5 = ((($4)) + 4|0);
  $x = $5;
  $6 = $x;
  HEAP32[$_0>>2] = $6;
 }
 $7 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17h162b53e09b2bd54cE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$expand_i1_val8 = 0, $$expand_i1_val9 = 0, $$field = 0, $$field4 = 0, $$index3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_8 = 0, $arg0 = 0, $arg1 = 0, $msg = 0, $personalityslot = 0, $personalityslot$index6 = 0, $self = 0, $switch1 = 0, $switch2 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $personalityslot = sp + 16|0;
 $msg = sp + 8|0;
 $self = sp + 28|0;
 $arg1 = sp;
 $arg0 = sp + 24|0;
 HEAP32[$arg0>>2] = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_8 = 0;
 $_8 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;
 $4 = HEAP32[$arg1>>2]|0;
 $5 = ((($arg1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$msg>>2] = $4;
 $7 = ((($msg)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ($8|0)!=(0|0);
 $$expand_i1_val = $9&1;
 $$expand_i1_val7 = 1;
 $switch1 = ($$expand_i1_val&255)<($$expand_i1_val7&255);
 if (!($switch1)) {
  $_8 = 0;
  $18 = HEAP32[$self>>2]|0;
  $val = $18;
  $19 = $val;
  STACKTOP = sp;return ($19|0);
 }
 $10 = HEAP32[$msg>>2]|0;
 $11 = ((($msg)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 invoke_vii(77,($10|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 HEAP32[$personalityslot>>2] = $14;
 $personalityslot$index6 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index6>>2] = $15;
 $16 = HEAP32[$self>>2]|0;
 $17 = ($16|0)!=(0|0);
 $$expand_i1_val8 = $17&1;
 $$expand_i1_val9 = 1;
 $switch2 = ($$expand_i1_val8&255)<($$expand_i1_val9&255);
 if (!($switch2)) {
  $20 = $_8;
  $21 = $20&1;
  if ($21) {
   $_8 = 0;
  }
 }
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
 return (0)|0;
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_6unwrap17h891553b5011c6070E($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$expand_i1_val8 = 0, $$expand_i1_val9 = 0, $$field = 0, $$field4 = 0, $$index3 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_7 = 0, $arg0 = 0;
 var $personalityslot = 0, $personalityslot$index6 = 0, $self = 0, $switch1 = 0, $switch2 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp;
 $self = sp + 12|0;
 $arg0 = sp + 8|0;
 HEAP32[$arg0>>2] = $0;
 $_7 = 0;
 $_7 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;
 $1 = HEAP32[$self>>2]|0;
 $2 = ($1|0)!=(0|0);
 $$expand_i1_val = $2&1;
 $$expand_i1_val7 = 1;
 $switch1 = ($$expand_i1_val&255)<($$expand_i1_val7&255);
 if (!($switch1)) {
  $_7 = 0;
  $8 = HEAP32[$self>>2]|0;
  $val = $8;
  $9 = $val;
  STACKTOP = sp;return ($9|0);
 }
 __THREW__ = 0;
 invoke_vi(78,(5548|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = ___cxa_find_matching_catch_2()|0;
 $5 = tempRet0;
 HEAP32[$personalityslot>>2] = $4;
 $personalityslot$index6 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index6>>2] = $5;
 $6 = HEAP32[$self>>2]|0;
 $7 = ($6|0)!=(0|0);
 $$expand_i1_val8 = $7&1;
 $$expand_i1_val9 = 1;
 $switch2 = ($$expand_i1_val8&255)<($$expand_i1_val9&255);
 if (!($switch2)) {
  $10 = $_7;
  $11 = $10&1;
  if ($11) {
   $_7 = 0;
  }
 }
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
 return (0)|0;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h5379b0007464b0ceE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hd011941c31bf60a1E($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3get17h04b380db108e340aE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 STACKTOP = sp;return ($2|0);
}
function __ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3get17h5197c20167e701faE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 STACKTOP = sp;return ($2|0);
}
function __ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3get17hb2706f04494bf187E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 STACKTOP = sp;return ($2|0);
}
function __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4init17h2d5db368fc3da676E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_13 = 0, $_15 = 0, $_17 = 0, $_9 = 0, $arg0 = 0, $arg1 = 0, $personalityslot = 0, $personalityslot$index4 = 0, $ptr = 0;
 var $self = 0, $slot = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $personalityslot = sp + 48|0;
 $_13 = sp + 40|0;
 $_12 = sp + 24|0;
 $_9 = sp + 8|0;
 $value = sp;
 $arg0 = $0;
 $arg1 = $1;
 $_17 = 0;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $slot = $3;
 $4 = $self;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 __THREW__ = 0;
 invoke_vi($6|0,($value|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  $_17 = 1;
  $9 = $slot;
  __THREW__ = 0;
  $10 = (invoke_ii(79,($9|0))|0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   $ptr = $10;
   $13 = $ptr;
   $_17 = 0;
   ;HEAP32[$_13>>2]=HEAP32[$value>>2]|0;HEAP32[$_13+4>>2]=HEAP32[$value+4>>2]|0;
   HEAP32[$_12>>2] = 1;
   $14 = ((($_12)) + 4|0);
   ;HEAP32[$14>>2]=HEAP32[$_13>>2]|0;HEAP32[$14+4>>2]=HEAP32[$_13+4>>2]|0;
   __THREW__ = 0;
   invoke_viii(80,($_9|0),($13|0),($_12|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if (!($16)) {
    $17 = $ptr;
    __THREW__ = 0;
    $18 = (invoke_ii(81,($17|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     $_15 = $18;
     $21 = $_15;
     __THREW__ = 0;
     $22 = (invoke_ii(82,($21|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      STACKTOP = sp;return ($22|0);
     }
    }
   }
  }
 }
 $25 = ___cxa_find_matching_catch_2()|0;
 $26 = tempRet0;
 HEAP32[$personalityslot>>2] = $25;
 $personalityslot$index4 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index4>>2] = $26;
 $27 = $_17;
 $28 = $27&1;
 if (!($28)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_17 = 0;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
 return (0)|0;
}
function __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4with17hbeea2e111c724d36E($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_14 = 0, $_21 = 0;
 var $_22 = 0, $_8 = 0, $arg0 = 0, $inner = 0, $personalityslot = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0, $self = 0, $slot = 0, $slot1 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $personalityslot = sp + 8|0;
 $_12 = sp;
 $_8 = sp + 32|0;
 $slot = sp + 24|0;
 $arg0 = $0;
 $_21 = 0;
 $_22 = 0;
 $1 = $arg0;
 $self = $1;
 $_21 = 1;
 $2 = $self;
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 $4 = (invoke_i($3|0)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  label = 14;
 } else {
  HEAP32[$slot>>2] = $4;
  ;HEAP32[$_8>>2]=HEAP32[$slot>>2]|0;
  $7 = HEAP32[$_8>>2]|0;
  __THREW__ = 0;
  $8 = (invoke_iiii(83,($7|0),(8686|0),57)|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   label = 14;
  } else {
   $slot1 = $8;
   $_21 = 0;
   $_22 = 1;
   $11 = $slot1;
   __THREW__ = 0;
   $12 = (invoke_ii(79,($11|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   do {
    if (!($14)) {
     $15 = HEAP32[$12>>2]|0;
     $switch = ($15>>>0)<(1);
     if ($switch) {
      $16 = $self;
      $17 = $slot1;
      __THREW__ = 0;
      $18 = (invoke_iii(84,($16|0),($17|0))|0);
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      if ($20) {
       break;
      }
      $_14 = $18;
     } else {
      $21 = ((($12)) + 4|0);
      $inner = $21;
      $22 = $inner;
      $_14 = $22;
     }
     $23 = $_14;
     HEAP32[$_12>>2] = $23;
     $_22 = 0;
     $24 = HEAP32[$_12>>2]|0;
     __THREW__ = 0;
     invoke_vi(85,($24|0));
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if (!($26)) {
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $31 = ___cxa_find_matching_catch_2()|0;
   $32 = tempRet0;
   HEAP32[$personalityslot>>2] = $31;
   $personalityslot$index6 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index6>>2] = $32;
   $33 = $_22;
   $34 = $33&1;
   if ($34) {
    $_22 = 0;
   }
  }
 }
 if ((label|0) == 14) {
  $29 = ___cxa_find_matching_catch_2()|0;
  $30 = tempRet0;
  HEAP32[$personalityslot>>2] = $29;
  $personalityslot$index4 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index4>>2] = $30;
 }
 $27 = $_21;
 $28 = $27&1;
 if (!($28)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_21 = 0;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4with17hd740b52515a3abebE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_12 = 0;
 var $_14 = 0, $_21 = 0, $_22 = 0, $_8 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $f = 0, $inner = 0, $personalityslot = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0, $self = 0, $slot = 0, $slot1 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $personalityslot = sp + 32|0;
 $_12 = sp + 24|0;
 $_11 = sp + 16|0;
 $_8 = sp + 60|0;
 $slot = sp + 52|0;
 $f = sp + 8|0;
 $abi_cast = sp + 44|0;
 $arg1 = sp;
 $arg0 = $0;
 HEAP32[$abi_cast>>2] = $1;
 ;HEAP32[$arg1>>2]=HEAP32[$abi_cast>>2]|0;
 $_21 = 0;
 $_22 = 0;
 $2 = $arg0;
 $self = $2;
 $_21 = 1;
 ;HEAP32[$f>>2]=HEAP32[$arg1>>2]|0;
 $3 = $self;
 $4 = HEAP32[$3>>2]|0;
 __THREW__ = 0;
 $5 = (invoke_i($4|0)|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  label = 14;
 } else {
  HEAP32[$slot>>2] = $5;
  ;HEAP32[$_8>>2]=HEAP32[$slot>>2]|0;
  $8 = HEAP32[$_8>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iiii(83,($8|0),(8686|0),57)|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 14;
  } else {
   $slot1 = $9;
   $_21 = 0;
   $_22 = 1;
   ;HEAP32[$_11>>2]=HEAP32[$f>>2]|0;
   $12 = $slot1;
   __THREW__ = 0;
   $13 = (invoke_ii(79,($12|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   do {
    if (!($15)) {
     $16 = HEAP32[$13>>2]|0;
     $switch = ($16>>>0)<(1);
     if ($switch) {
      $17 = $self;
      $18 = $slot1;
      __THREW__ = 0;
      $19 = (invoke_iii(84,($17|0),($18|0))|0);
      $20 = __THREW__; __THREW__ = 0;
      $21 = $20&1;
      if ($21) {
       break;
      }
      $_14 = $19;
     } else {
      $22 = ((($13)) + 4|0);
      $inner = $22;
      $23 = $inner;
      $_14 = $23;
     }
     $24 = $_14;
     HEAP32[$_12>>2] = $24;
     $_22 = 0;
     $25 = HEAP32[$_11>>2]|0;
     $26 = HEAP32[$_12>>2]|0;
     __THREW__ = 0;
     invoke_vii(86,($25|0),($26|0));
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if (!($28)) {
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $33 = ___cxa_find_matching_catch_2()|0;
   $34 = tempRet0;
   HEAP32[$personalityslot>>2] = $33;
   $personalityslot$index6 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index6>>2] = $34;
   $35 = $_22;
   $36 = $35&1;
   if ($36) {
    $_22 = 0;
   }
  }
 }
 if ((label|0) == 14) {
  $31 = ___cxa_find_matching_catch_2()|0;
  $32 = tempRet0;
  HEAP32[$personalityslot>>2] = $31;
  $personalityslot$index4 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index4>>2] = $32;
 }
 $29 = $_21;
 $30 = $29&1;
 if (!($30)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_21 = 0;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_6expect17ha0bf73898eb5cf38E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val11 = 0, $$expand_i1_val7 = 0, $$expand_i1_val8 = 0, $$expand_i1_val9 = 0, $$field = 0, $$field4 = 0, $$index3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_11 = 0, $_7 = 0, $arg0 = 0, $arg1 = 0, $msg = 0, $personalityslot = 0, $personalityslot$index6 = 0, $self = 0, $switch = 0;
 var $switch1 = 0, $switch2 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $personalityslot = sp + 48|0;
 $_7 = sp + 40|0;
 $t = sp + 32|0;
 $msg = sp + 24|0;
 $self = sp + 16|0;
 $arg1 = sp + 8|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;
 HEAP32[$arg1>>2] = $2;
 $4 = ((($arg1)) + 4|0);
 HEAP32[$4>>2] = $3;
 $_11 = 0;
 $_10 = 0;
 $_10 = 1;
 $_11 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$msg>>2] = $5;
 $8 = ((($msg)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$self>>2]|0;
 $10 = ($9|0)==(0|0);
 $$expand_i1_val = $10&1;
 $$expand_i1_val7 = 1;
 $switch1 = ($$expand_i1_val&255)<($$expand_i1_val7&255);
 if ($switch1) {
  $_11 = 0;
  ;HEAP32[$t>>2]=HEAP32[$self>>2]|0;HEAP32[$t+4>>2]=HEAP32[$self+4>>2]|0;
  ;HEAP32[$_7>>2]=HEAP32[$t>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$t+4>>2]|0;
  ;HEAP32[$0>>2]=HEAP32[$_7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_7+4>>2]|0;
  $11 = HEAP32[$self>>2]|0;
  $12 = ($11|0)==(0|0);
  $$expand_i1_val8 = $12&1;
  $$expand_i1_val9 = 1;
  $switch = ($$expand_i1_val8&255)<($$expand_i1_val9&255);
  if ($switch) {
   STACKTOP = sp;return;
  }
  $_10 = 0;
  STACKTOP = sp;return;
 }
 $_10 = 0;
 $13 = HEAP32[$msg>>2]|0;
 $14 = ((($msg)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 __THREW__ = 0;
 invoke_vii(87,($13|0),($15|0));
 $16 = __THREW__; __THREW__ = 0;
 $17 = ___cxa_find_matching_catch_2()|0;
 $18 = tempRet0;
 HEAP32[$personalityslot>>2] = $17;
 $personalityslot$index6 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index6>>2] = $18;
 $19 = HEAP32[$self>>2]|0;
 $20 = ($19|0)==(0|0);
 $$expand_i1_val10 = $20&1;
 $$expand_i1_val11 = 1;
 $switch2 = ($$expand_i1_val10&255)<($$expand_i1_val11&255);
 if ($switch2) {
  $21 = $_11;
  $22 = $21&1;
  if ($22) {
   $_11 = 0;
   __ZN4drop17h1863166ca397e003E($self);
  }
 } else {
  $23 = $_10;
  $24 = $23&1;
  if ($24) {
   $_10 = 0;
  }
 }
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4core3fmt10ArgumentV13new17h985b93776cbea59aE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$transmute_temp>>2] = $5;
 $6 = HEAP32[$transmute_temp>>2]|0;
 $7 = $x;
 HEAP32[$transmute_temp1>>2] = $7;
 $8 = HEAP32[$transmute_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN4core3fmt10ArgumentV13new17hf9d968c6b2d5ba69E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$transmute_temp>>2] = $5;
 $6 = HEAP32[$transmute_temp>>2]|0;
 $7 = $x;
 HEAP32[$transmute_temp1>>2] = $7;
 $8 = HEAP32[$transmute_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_6 = 0, $arg0 = 0, $arg1 = 0, $args = 0, $pieces = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_6 = sp + 32|0;
 $args = sp + 24|0;
 $pieces = sp + 16|0;
 $arg1 = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $5 = ((($arg0)) + 4|0);
 HEAP32[$5>>2] = $2;
 HEAP32[$arg1>>2] = $3;
 $6 = ((($arg1)) + 4|0);
 HEAP32[$6>>2] = $4;
 $7 = HEAP32[$arg0>>2]|0;
 $8 = ((($arg0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$pieces>>2] = $7;
 $10 = ((($pieces)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$arg1>>2]|0;
 $12 = ((($arg1)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$args>>2] = $11;
 $14 = ((($args)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$pieces>>2]|0;
 $16 = ((($pieces)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$_6>>2] = 0;
 $18 = HEAP32[$args>>2]|0;
 $19 = ((($args)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$0>>2] = $15;
 $21 = ((($0)) + 4|0);
 HEAP32[$21>>2] = $17;
 $22 = ((($0)) + 8|0);
 ;HEAP32[$22>>2]=HEAP32[$_6>>2]|0;HEAP32[$22+4>>2]=HEAP32[$_6+4>>2]|0;
 $23 = ((($0)) + 16|0);
 HEAP32[$23>>2] = $18;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = $20;
 STACKTOP = sp;return;
}
function __ZN4core3mem13uninitialized17hf7f2d6a3f31c020fE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4core3mem4swap17hf4c0713837ce1513E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_26 = 0, $_27 = 0, $arg0 = 0;
 var $arg1 = 0, $personalityslot = 0, $personalityslot$index4 = 0, $t = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $personalityslot = sp + 32|0;
 $_26 = sp + 16|0;
 $t = sp;
 $arg0 = $0;
 $arg1 = $1;
 $_27 = 0;
 $2 = $arg0;
 $x = $2;
 $3 = $arg1;
 $y = $3;
 __THREW__ = 0;
 invoke_vi(88,($t|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $_27 = 1;
  $6 = $x;
  ;HEAP32[$t>>2]=HEAP32[$6>>2]|0;HEAP32[$t+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$t+8>>2]=HEAP32[$6+8>>2]|0;
  $7 = $y;
  $8 = $x;
  ;HEAP32[$8>>2]=HEAP32[$7>>2]|0;HEAP32[$8+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$7+8>>2]|0;
  $9 = $y;
  ;HEAP32[$9>>2]=HEAP32[$t>>2]|0;HEAP32[$9+4>>2]=HEAP32[$t+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$t+8>>2]|0;
  $_27 = 0;
  ;HEAP32[$_26>>2]=HEAP32[$t>>2]|0;HEAP32[$_26+4>>2]=HEAP32[$t+4>>2]|0;HEAP32[$_26+8>>2]=HEAP32[$t+8>>2]|0;
  __THREW__ = 0;
  invoke_vi(89,($_26|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   STACKTOP = sp;return;
  }
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 HEAP32[$personalityslot>>2] = $12;
 $personalityslot$index4 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index4>>2] = $13;
 $14 = $_27;
 $15 = $14&1;
 if (!($15)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_27 = 0;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4core3mem6forget17hd44d3812666f2672E($0) {
 $0 = $0|0;
 var $_3 = 0, $arg0 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_3 = sp + 32|0;
 $t = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$0>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$0+8>>2]|0;
 ;HEAP32[$t>>2]=HEAP32[$arg0>>2]|0;HEAP32[$t+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$t+8>>2]=HEAP32[$arg0+8>>2]|0;
 ;HEAP32[$_3>>2]=HEAP32[$t>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$t+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$t+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN4core3mem7replace17h37e1d91d49acefd7E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_9 = 0, $arg0 = 0, $arg1 = 0, $dest = 0, $personalityslot = 0, $personalityslot$index4 = 0, $src = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $personalityslot = sp + 48|0;
 $_9 = sp + 32|0;
 $src = sp + 16|0;
 $arg1 = sp;
 $arg0 = $1;
 ;HEAP32[$arg1>>2]=HEAP32[$2>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$2+8>>2]|0;
 $_10 = 0;
 $3 = $arg0;
 $dest = $3;
 $_10 = 1;
 ;HEAP32[$src>>2]=HEAP32[$arg1>>2]|0;HEAP32[$src+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$src+8>>2]=HEAP32[$arg1+8>>2]|0;
 $4 = $dest;
 __THREW__ = 0;
 invoke_vii(90,($4|0),($src|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $_10 = 0;
  ;HEAP32[$_9>>2]=HEAP32[$src>>2]|0;HEAP32[$_9+4>>2]=HEAP32[$src+4>>2]|0;HEAP32[$_9+8>>2]=HEAP32[$src+8>>2]|0;
  ;HEAP32[$0>>2]=HEAP32[$_9>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_9+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_9+8>>2]|0;
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch_2()|0;
 $8 = tempRet0;
 HEAP32[$personalityslot>>2] = $7;
 $personalityslot$index4 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index4>>2] = $8;
 $9 = $_10;
 $10 = $9&1;
 if (!($10)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_10 = 0;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4core3mem7size_of17ha1a4ad572810c75bE() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 1;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem8align_of17h71d2400425f2cdfaE() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 1;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h869c35611dfe069eE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr8null_mut17h7faf78f1abea90c9E()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr8null_mut17h7faf78f1abea90c9E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN4core4cell12BorrowRefMut3new17hbc2a60ad8044ea89E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_0 = 0, $_3 = 0, $_7 = 0, $arg0 = 0, $borrow = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_7 = sp + 8|0;
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $borrow = $1;
 $2 = $borrow;
 $3 = (__ZN34__LT_core__cell__Cell_LT_T_GT__GT_3get17hd9125395bb7b2195E($2)|0);
 $_3 = $3;
 $4 = $_3;
 $cond = ($4|0)==(0);
 if ($cond) {
  $5 = $borrow;
  __ZN34__LT_core__cell__Cell_LT_T_GT__GT_3set17hca5a3c7be3baf61cE($5,-1);
  $6 = $borrow;
  HEAP32[$_7>>2] = $6;
  ;HEAP32[$_0>>2]=HEAP32[$_7>>2]|0;
  $7 = HEAP32[$_0>>2]|0;
  STACKTOP = sp;return ($7|0);
 } else {
  HEAP32[$_0>>2] = 0;
  $7 = HEAP32[$_0>>2]|0;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZN4core5slice18from_raw_parts_mut17h602943c90067062dE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 8|0;
 $_6 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_6>>2] = $4;
 $6 = ((($_6)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_6)) + 4|0);
 $8 = HEAP32[$_6>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$transmute_temp>>2] = $8;
 $10 = ((($transmute_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$transmute_temp>>2]|0;
 $12 = ((($transmute_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN4core6result13unwrap_failed17h8e1b7688e33f5345E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_11 = 0, $_5 = 0, $__arg0 = 0, $__arg1 = 0, $arg0 = 0;
 var $error = 0, $msg = 0, $personalityslot = 0, $personalityslot$index1 = 0, $tmp_ret = 0, $tmp_ret1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $tmp_ret1 = sp + 80|0;
 $personalityslot = sp + 72|0;
 $tmp_ret = sp + 64|0;
 $_11 = sp + 56|0;
 $_10 = sp + 40|0;
 $_5 = sp + 16|0;
 $error = sp + 16|0;
 $msg = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$msg>>2] = $3;
 $6 = ((($msg)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[1395]|0;
 $8 = HEAP32[(5584)>>2]|0;
 HEAP32[$_11>>2] = $msg;
 $9 = ((($_11)) + 4|0);
 HEAP32[$9>>2] = $error;
 $10 = HEAP32[$_11>>2]|0;
 $__arg0 = $10;
 $11 = ((($_11)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $__arg1 = $12;
 $13 = $__arg0;
 __THREW__ = 0;
 invoke_viii(91,($tmp_ret|0),($13|0),(92|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  $16 = ((($tmp_ret)) + 4|0);
  $17 = HEAP32[$tmp_ret>>2]|0;
  $18 = HEAP32[$16>>2]|0;
  $19 = $__arg1;
  __THREW__ = 0;
  invoke_viii(93,($tmp_ret1|0),($19|0),(94|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   $22 = ((($tmp_ret1)) + 4|0);
   $23 = HEAP32[$tmp_ret1>>2]|0;
   $24 = HEAP32[$22>>2]|0;
   HEAP32[$_10>>2] = $17;
   $25 = ((($_10)) + 4|0);
   HEAP32[$25>>2] = $18;
   $26 = ((($_10)) + 8|0);
   HEAP32[$26>>2] = $23;
   $27 = ((($26)) + 4|0);
   HEAP32[$27>>2] = $24;
   __THREW__ = 0;
   invoke_viiiii(95,($_5|0),($7|0),($8|0),($_10|0),2);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if (!($29)) {
    __THREW__ = 0;
    invoke_vii(96,($_5|0),(5568|0));
    $30 = __THREW__; __THREW__ = 0;
   }
  }
 }
 $31 = ___cxa_find_matching_catch_2()|0;
 $32 = tempRet0;
 HEAP32[$personalityslot>>2] = $31;
 $personalityslot$index1 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index1>>2] = $32;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4drop17h1863166ca397e003E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZN4drop17h2c129cc35e7403c4E($1);
 return;
}
function __ZN4drop17h2c129cc35e7403c4E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(97,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN13drop_contents17h2c129cc35e7403c4E($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h2c129cc35e7403c4E($0);
  return;
 }
}
function __ZN4drop17h317219d4bded1dc8E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(98,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN13drop_contents17h317219d4bded1dc8E($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h317219d4bded1dc8E($0);
  return;
 }
}
function __ZN4drop17h3a27973cde23d0abE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h317219d4bded1dc8E($0);
 return;
}
function __ZN4drop17h893c6cd9675242b9E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 __ZN4drop17h3a27973cde23d0abE($1);
 return;
}
function __ZN4drop17hb7e7ef405614b0b2E($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $1 = 0, $2 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 $$expand_i1_val = $2&1;
 $$expand_i1_val2 = 1;
 $switch = ($$expand_i1_val&255)<($$expand_i1_val2&255);
 if ($switch) {
  return;
 }
 __ZN4drop17h2c129cc35e7403c4E($0);
 return;
}
function __ZN4drop17hfc6aea5a847ca39dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(99,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN13drop_contents17hfc6aea5a847ca39dE($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZN13drop_contents17hfc6aea5a847ca39dE($0);
  return;
 }
}
function __ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_3new17ha40b949813545919E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $rooms = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $rooms = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$rooms>>2] = $4;
 $7 = ((($rooms)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$rooms>>2]|0;
 $9 = ((($rooms)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$0>>2] = $8;
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h51a2f6e15ea41474E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $abi_cast = sp + 20|0;
 $_0 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $f = $3;
 $4 = $self;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $f;
 $9 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17h53ffdc2cd959b259E($5,$7,$8)|0);
 HEAP8[$abi_cast>>0] = $9;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
 $10 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($10|0);
}
function __ZN5alloc4heap10deallocate17haa41e924c0cbc050E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $align = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $old_size = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $3 = $arg0;
 $ptr = $3;
 $4 = $arg1;
 $old_size = $4;
 $5 = $arg2;
 $align = $5;
 $6 = $ptr;
 $7 = $old_size;
 $8 = $align;
 ___rust_deallocate($6,$7,$8);
 STACKTOP = sp;return;
}
function __ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hd011941c31bf60a1E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hd6aaf017962a7029E($2)|0);
 $transmute_temp = $3;
 $4 = $transmute_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17hdc85bd2e897e8f1aE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h8caf224665bf1c9eE($1,$3);
 STACKTOP = sp;return;
}
function __ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h1cd7a09ae111f7ebE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_4 = 0, $align = 0, $arg0 = 0, $elem_size = 0, $num_bytes = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17ha1a4ad572810c75bE()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $self;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $_4 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $_4 = 0;
 }
 $9 = $_4;
 $10 = $9&1;
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (__ZN4core3mem8align_of17h71d2400425f2cdfaE()|0);
 $align = $11;
 $12 = $elem_size;
 $13 = $self;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $num_bytes = $16;
 $17 = $self;
 $18 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hd011941c31bf60a1E($17)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $num_bytes;
 $21 = $align;
 __ZN5alloc4heap10deallocate17haa41e924c0cbc050E($19,$20,$21);
 STACKTOP = sp;return;
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hd6aaf017962a7029E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17hcae4282feada7f71E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h5379b0007464b0ceE($3)|0);
 $ptr = $4;
 $5 = $ptr;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h869c35611dfe069eE($5)|0);
 $6 = $ptr;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice18from_raw_parts_mut17h602943c90067062dE($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN74__LT_core__cell__BorrowRefMut_LT__u27_b_GT__u20_as_u20_core__ops__Drop_GT_4drop17hb12697e7ebc09ef5E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $borrow = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZN34__LT_core__cell__Cell_LT_T_GT__GT_3get17hd9125395bb7b2195E($3)|0);
 $borrow = $4;
 $5 = $self;
 $6 = HEAP32[$5>>2]|0;
 __ZN34__LT_core__cell__Cell_LT_T_GT__GT_3set17hca5a3c7be3baf61cE($6,0);
 STACKTOP = sp;return;
}
function __ZN78__LT_core__cell__RefMut_LT__u27_b_C__u20_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h947a0a5111ec7413E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN81__LT_core__cell__RefMut_LT__u27_b_C__u20_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h3348ce00fc504f0dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h8caf224665bf1c9eE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17hcae4282feada7f71E($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN23werewolves_and_wanderer4main17h8e4d9627c0b1bf56E() {
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13 = 0, $_15 = 0;
 var $map = 0, $personalityslot = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0, $rooms = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(704|0);
 $personalityslot = sp + 688|0;
 $_13 = sp + 680|0;
 $state = sp + 616|0;
 $map = sp + 608|0;
 $rooms = sp;
 $_15 = 0;
 __ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_12create_rooms17h6f62a7adfb5f2399E($rooms);
 __ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_3new17ha40b949813545919E($map,$rooms,19);
 __ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_8populate17h8e04f123c38433bcE($map);
 __THREW__ = 0;
 invoke_vii(100,($state|0),($map|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 do {
  if ($1) {
   label = 8;
  } else {
   $_15 = 1;
   __THREW__ = 0;
   invoke_v(101);
   $2 = __THREW__; __THREW__ = 0;
   $3 = $2&1;
   if ($3) {
    label = 8;
   } else {
    HEAP32[$_13>>2] = $state;
    $4 = HEAP32[$_13>>2]|0;
    __THREW__ = 0;
    invoke_vi(102,($4|0));
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     label = 8;
    } else {
     $_15 = 0;
     __THREW__ = 0;
     invoke_vi(103,($state|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if ($8) {
      $13 = ___cxa_find_matching_catch_2()|0;
      $14 = tempRet0;
      HEAP32[$personalityslot>>2] = $13;
      $personalityslot$index6 = ((($personalityslot)) + 4|0);
      HEAP32[$personalityslot$index6>>2] = $14;
      break;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  HEAP32[$personalityslot>>2] = $9;
  $personalityslot$index4 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index4>>2] = $10;
  $11 = $_15;
  $12 = $11&1;
  if ($12) {
   $_15 = 0;
   __ZN4drop17h893c6cd9675242b9E($state);
  }
 }
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN23werewolves_and_wanderer4main28__u7b__u7b_closure_u7d__u7d_17h6555a8c7057c8a7bE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZN2ww10game_state9GameState11is_finished17h47bcec93474bc98bE($2)|0);
 if ($3) {
  __ZN2ww8platform10emscripten17terminate_program17hde6ec3ca22ab22baE();
  STACKTOP = sp;return;
 } else {
  $4 = $arg0;
  $5 = HEAP32[$4>>2]|0;
  __ZN2ww10game_state9GameState4tick17hf2f51b2e337d36c2E($5);
  STACKTOP = sp;return;
 }
}
function _main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[8743]|0;
 $3 = (__ZN3std2rt10lang_start17h6a4f927dfd0d9229E(104,$0,$1)|0);
 return ($3|0);
}
function __ZN2ww8platform10emscripten18MAIN_LOOP_CALLBACK7__getit17h0018d6d769f9bbaaE() {
 var $0 = 0, $1 = 0, $_0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = (__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h95dc0013c9ea0caeE(2428)|0);
 $_0 = $0;
 $1 = $_0;
 STACKTOP = sp;return ($1|0);
}
function __ZN2ww8platform10emscripten18MAIN_LOOP_CALLBACK6__init17h5a6a0fe6b9c2894aE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN4core3ptr8null_mut17h5c78bbfdcf5cfab0E()|0);
 __ZN37__LT_core__cell__RefCell_LT_T_GT__GT_3new17h407752db0577301cE($0,$1);
 return;
}
function __ZN4core3ptr8null_mut17h5c78bbfdcf5cfab0E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN37__LT_core__cell__RefCell_LT_T_GT__GT_3new17h407752db0577301cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $_5 = 0, $abi_cast = 0, $abi_cast2 = 0;
 var $arg0 = 0, $personalityslot = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $abi_cast2 = sp + 36|0;
 $abi_cast = sp + 32|0;
 $personalityslot = sp + 16|0;
 $_5 = sp + 8|0;
 $_3 = sp;
 $arg0 = $1;
 $2 = $arg0;
 $value = $2;
 $3 = $value;
 __THREW__ = 0;
 $4 = (invoke_ii(105,($3|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  HEAP32[$personalityslot>>2] = $11;
  $personalityslot$index4 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index4>>2] = $12;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 HEAP32[$abi_cast>>2] = $4;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 __THREW__ = 0;
 $7 = (invoke_ii(106,0)|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  HEAP32[$abi_cast2>>2] = $7;
  ;HEAP32[$_5>>2]=HEAP32[$abi_cast2>>2]|0;
  ;HEAP32[$0>>2]=HEAP32[$_5>>2]|0;
  $10 = ((($0)) + 4|0);
  ;HEAP32[$10>>2]=HEAP32[$_3>>2]|0;
  STACKTOP = sp;return;
 }
 $13 = ___cxa_find_matching_catch_2()|0;
 $14 = tempRet0;
 HEAP32[$personalityslot>>2] = $13;
 $personalityslot$index6 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index6>>2] = $14;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3new17hd5002d4ac70ce0adE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_0 = 0, $arg0 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $value = $1;
 $2 = $value;
 HEAP32[$_0>>2] = $2;
 $3 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN34__LT_core__cell__Cell_LT_T_GT__GT_3new17hb89016dfe9aa6290E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_0 = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $abi_cast = sp + 20|0;
 $_3 = sp + 8|0;
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $value = $1;
 $2 = $value;
 $3 = (__ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3new17hbd53ebb85219fd5aE($2)|0);
 HEAP32[$abi_cast>>2] = $3;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 ;HEAP32[$_0>>2]=HEAP32[$_3>>2]|0;
 $4 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3new17hbd53ebb85219fd5aE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_0 = 0, $arg0 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $value = $1;
 $2 = $value;
 HEAP32[$_0>>2] = $2;
 $3 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h95dc0013c9ea0caeE($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0;
 var $_18 = 0, $_20 = 0, $_21 = 0, $_30 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0, $ptr = 0, $ptr1 = 0, $ptr2 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $personalityslot = sp + 32|0;
 $_21 = sp + 16|0;
 $_20 = sp;
 $ptr1 = sp + 56|0;
 $_0 = sp + 44|0;
 $arg0 = $0;
 $_30 = 0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN3std10sys_common12thread_local9StaticKey3get17h3c7d8432158d405aE($2)|0);
 $ptr = $3;
 $4 = $ptr;
 $5 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17hf8df9cff5ec2d9cfE($4)|0);
 $6 = $5 ^ 1;
 if ($6) {
  $7 = $ptr;
  $8 = $7;
  $9 = ($8|0)==(1);
  if ($9) {
   HEAP32[$_0>>2] = 0;
   $16 = HEAP32[$_0>>2]|0;
   STACKTOP = sp;return ($16|0);
  } else {
   $14 = $ptr;
   $15 = ((($14)) + 4|0);
   HEAP32[$_0>>2] = $15;
   $16 = HEAP32[$_0>>2]|0;
   STACKTOP = sp;return ($16|0);
  }
 }
 $10 = (__ZN5alloc4heap15exchange_malloc17hd01efcfa98f30e00E(16,4)|0);
 $_18 = $10;
 $11 = $self;
 HEAP32[$_21>>2] = 0;
 __THREW__ = 0;
 invoke_vii(107,($_20|0),($_21|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $32 = ___cxa_find_matching_catch_2()|0;
  $33 = tempRet0;
  HEAP32[$personalityslot>>2] = $32;
  $personalityslot$index4 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index4>>2] = $33;
  $34 = $_18;
  __ZN5alloc4heap8box_free17h3c664f264606061fE($34);
 } else {
  $19 = $_18;
  HEAP32[$19>>2] = $11;
  $20 = ((($19)) + 4|0);
  ;HEAP32[$20>>2]=HEAP32[$_20>>2]|0;HEAP32[$20+4>>2]=HEAP32[$_20+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$_20+8>>2]|0;
  $_30 = 1;
  $21 = $_18;
  HEAP32[$ptr1>>2] = $21;
  $_30 = 0;
  $22 = HEAP32[$ptr1>>2]|0;
  __THREW__ = 0;
  $23 = (invoke_ii(108,($22|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if (!($25)) {
   $ptr2 = $23;
   $26 = $self;
   $27 = $ptr2;
   __THREW__ = 0;
   invoke_vii(109,($26|0),($27|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if (!($29)) {
    $30 = $ptr2;
    $31 = ((($30)) + 4|0);
    HEAP32[$_0>>2] = $31;
    $16 = HEAP32[$_0>>2]|0;
    STACKTOP = sp;return ($16|0);
   }
  }
  $35 = ___cxa_find_matching_catch_2()|0;
  $36 = tempRet0;
  HEAP32[$personalityslot>>2] = $35;
  $personalityslot$index6 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index6>>2] = $36;
 }
 $17 = $_30;
 $18 = $17&1;
 if (!($18)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_30 = 0;
 __ZN4drop17h785b3f160ee48200E($ptr1);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
 return (0)|0;
}
function __ZN3std10sys_common12thread_local9StaticKey3get17h3c7d8432158d405aE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN3std10sys_common12thread_local9StaticKey3key17haf028382af53a07cE($2)|0);
 $4 = (__ZN3std3sys3imp12thread_local3get17hcaabc8eb0eb551acE($3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17hf8df9cff5ec2d9cfE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr8null_mut17ha3bbff90f8c561e0E()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN5alloc4heap15exchange_malloc17hd01efcfa98f30e00E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $align = 0, $arg0 = 0, $arg1 = 0, $ptr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $size = $2;
 $3 = $arg1;
 $align = $3;
 $4 = $size;
 $5 = ($4|0)==(0);
 if ($5) {
  $_0 = (1);
  $12 = $_0;
  STACKTOP = sp;return ($12|0);
 }
 $6 = $size;
 $7 = $align;
 $8 = (__ZN5alloc4heap8allocate17h7ecb09ae67165feeE($6,$7)|0);
 $ptr = $8;
 $9 = $ptr;
 $10 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17hd8e9e87391b89bc2E($9)|0);
 if ($10) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 }
 $11 = $ptr;
 $_0 = $11;
 $12 = $_0;
 STACKTOP = sp;return ($12|0);
}
function __ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3new17h0c4a8208fcd2cb27E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $_3 = 0, $arg0 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_3 = sp + 32|0;
 $value = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;
 ;HEAP32[$value>>2]=HEAP32[$arg0>>2]|0;HEAP32[$value+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$value+8>>2]=HEAP32[$arg0+8>>2]|0;
 ;HEAP32[$_3>>2]=HEAP32[$value>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$value+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$value+8>>2]|0;
 ;HEAP32[$0>>2]=HEAP32[$_3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_3+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN5alloc4heap8box_free17h3c664f264606061fE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $align = 0, $arg0 = 0, $ptr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $size = 16;
 $align = 4;
 $2 = $size;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $ptr;
 $5 = $size;
 $6 = $align;
 __ZN5alloc4heap10deallocate17haa41e924c0cbc050E_3($4,$5,$6);
 STACKTOP = sp;return;
}
function __ZN35__LT_alloc__boxed__Box_LT_T_GT__GT_8into_raw17hf6623cd94a84e7c9E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $b = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $b = $1;
 $2 = $b;
 $transmute_temp = $2;
 $3 = $transmute_temp;
 STACKTOP = sp;return ($3|0);
}
function __ZN3std10sys_common12thread_local9StaticKey3set17h4fea6024d6333c16E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $arg1 = 0, $self = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $val = $3;
 $4 = $self;
 $5 = (__ZN3std10sys_common12thread_local9StaticKey3key17haf028382af53a07cE($4)|0);
 $6 = $val;
 __ZN3std3sys3imp12thread_local3set17hefd96cdd4beb287cE($5,$6);
 STACKTOP = sp;return;
}
function __ZN4drop17h785b3f160ee48200E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __ZN5alloc4heap8box_free17h3c664f264606061fE($1);
 return;
}
function __ZN3std10sys_common12thread_local9StaticKey3key17haf028382af53a07cE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_3 = 0, $_5 = 0, $arg0 = 0, $cond = 0, $n = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $_5 = 0;
 $3 = $_5;
 $4 = (__ZN4core4sync6atomic11AtomicUsize4load17h9d4b728d0db66a6bE($2,$3)|0);
 $_3 = $4;
 $5 = $_3;
 $cond = ($5|0)==(0);
 if ($cond) {
  $6 = $self;
  $7 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hb781edeaf6c88045E($6)|0);
  $_0 = $7;
  $10 = $_0;
  STACKTOP = sp;return ($10|0);
 } else {
  $8 = $_3;
  $n = $8;
  $9 = $n;
  $_0 = $9;
  $10 = $_0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function __ZN3std3sys3imp12thread_local3set17hefd96cdd4beb287cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $arg1 = 0, $key = 0, $r = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $key = $2;
 $3 = $arg1;
 $value = $3;
 $4 = $key;
 $5 = $value;
 $6 = (_pthread_setspecific(($4|0),($5|0))|0);
 $r = $6;
 STACKTOP = sp;return;
}
function __ZN4core4sync6atomic11AtomicUsize4load17h9d4b728d0db66a6bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_8 = 0, $arg0 = 0, $arg1 = 0, $order = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $order = $3;
 $4 = $self;
 $5 = (__ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3get17h07df8991d20e6859E($4)|0);
 $6 = $order;
 $_8 = $6;
 $7 = $_8;
 $8 = (__ZN4core4sync6atomic11atomic_load17h495efccdaabe6770E($5,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3get17h07df8991d20e6859E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 STACKTOP = sp;return ($2|0);
}
function __ZN4core4sync6atomic11atomic_load17h495efccdaabe6770E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $arg0 = 0, $arg1 = 0, $dst = 0, $order = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $dst = $2;
 $3 = $arg1;
 $order = $3;
 $4 = $order;
 switch ($4<<24>>24) {
 case 0:  {
  $7 = $dst;
  $8 = HEAP32[$7>>2]|0;
  $_0 = $8;
  $11 = $_0;
  STACKTOP = sp;return ($11|0);
  break;
 }
 case 1:  {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(5468);
  // unreachable;
  break;
 }
 case 2:  {
  $5 = $dst;
  $6 = HEAP32[$5>>2]|0;
  $_0 = $6;
  $11 = $_0;
  STACKTOP = sp;return ($11|0);
  break;
 }
 case 3:  {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(5488);
  // unreachable;
  break;
 }
 case 4:  {
  $9 = $dst;
  $10 = HEAP32[$9>>2]|0;
  $_0 = $10;
  $11 = $_0;
  STACKTOP = sp;return ($11|0);
  break;
 }
 case 5:  {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(5508);
  // unreachable;
  break;
 }
 default: {
  // unreachable;
 }
 }
 return (0)|0;
}
function __ZN5alloc4heap10deallocate17haa41e924c0cbc050E_3($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $align = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $old_size = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $3 = $arg0;
 $ptr = $3;
 $4 = $arg1;
 $old_size = $4;
 $5 = $arg2;
 $align = $5;
 $6 = $ptr;
 $7 = $old_size;
 $8 = $align;
 ___rust_deallocate($6,$7,$8);
 STACKTOP = sp;return;
}
function __ZN5alloc4heap8allocate17h7ecb09ae67165feeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $align$i = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $arg1$i = 0, $size = 0, $size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $size = $2;
 $3 = $arg1;
 $align = $3;
 $4 = $size;
 $5 = $align;
 $arg0$i = $4;
 $arg1$i = $5;
 $6 = $arg0$i;
 $size$i = $6;
 $7 = $arg1$i;
 $align$i = $7;
 $8 = $size;
 $9 = $align;
 $10 = (___rust_allocate($8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17hd8e9e87391b89bc2E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr8null_mut17h5791f07b509476ecE()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr8null_mut17h5791f07b509476ecE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN4core3ptr8null_mut17ha3bbff90f8c561e0E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN3std3sys3imp12thread_local3get17hcaabc8eb0eb551acE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $key = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $key = $1;
 $2 = $key;
 $3 = (_pthread_getspecific(($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN3std6thread5local2os13destroy_value17h54ffd38e1f21b646E($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_16 = 0, $arg0 = 0, $key = 0, $personalityslot = 0, $personalityslot$index4 = 0, $ptr = 0, $ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp;
 $ptr1 = sp + 16|0;
 $arg0 = $0;
 $_16 = 0;
 $1 = $arg0;
 $ptr = $1;
 $2 = $ptr;
 __THREW__ = 0;
 $3 = (invoke_ii(110,($2|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  HEAP32[$ptr1>>2] = $3;
  $_16 = 1;
  $6 = HEAP32[$ptr1>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $key = $7;
  $8 = $key;
  __THREW__ = 0;
  invoke_vii(109,($8|0),((1)|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $_16 = 0;
   $11 = HEAP32[$ptr1>>2]|0;
   __THREW__ = 0;
   invoke_vi(111,($11|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    $14 = $key;
    __THREW__ = 0;
    $15 = (invoke_i(112)|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     __THREW__ = 0;
     invoke_vii(109,($14|0),($15|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if (!($19)) {
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $20 = ___cxa_find_matching_catch_2()|0;
 $21 = tempRet0;
 HEAP32[$personalityslot>>2] = $20;
 $personalityslot$index4 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index4>>2] = $21;
 $22 = $_16;
 $23 = $22&1;
 if (!($23)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_16 = 0;
 __ZN4drop17h785b3f160ee48200E($ptr1);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN35__LT_alloc__boxed__Box_LT_T_GT__GT_8from_raw17h9526b4845d357ff5E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $raw = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $raw = $1;
 $2 = $raw;
 $transmute_temp = $2;
 $3 = $transmute_temp;
 STACKTOP = sp;return ($3|0);
}
function __ZN4core3mem4drop17h30468ed7e083db7aE($0) {
 $0 = $0|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_x = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $personalityslot = sp;
 $_x = sp + 12|0;
 $arg0 = $0;
 $1 = $arg0;
 HEAP32[$_x>>2] = $1;
 __THREW__ = 0;
 invoke_vi(113,($_x|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$personalityslot>>2] = $4;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $5;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN2ww9direction9Direction8opposite17h5f90d22cd00065a9E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_0 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 switch ($2<<24>>24) {
 case 0:  {
  $_0 = 1;
  break;
 }
 case 1:  {
  $_0 = 0;
  break;
 }
 case 2:  {
  $_0 = 3;
  break;
 }
 case 3:  {
  $_0 = 2;
  break;
 }
 case 4:  {
  $_0 = 5;
  break;
 }
 case 5:  {
  $_0 = 4;
  break;
 }
 default: {
  // unreachable;
 }
 }
 $3 = $_0;
 STACKTOP = sp;return ($3|0);
}
function __ZN2ww8platform10emscripten6random17hc7c10d096c2e458bE() {
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_emscripten_random());
 return (+$0);
}
function __ZN2ww8platform10emscripten10run_script17hf613816769d0fc19E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$sreg$field = 0, $$sreg$field5 = 0, $$sreg$index4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_7 = 0, $_8 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index7 = 0, $personalityslot$index9 = 0, $script = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp;
 $personalityslot = sp + 56|0;
 $_8 = sp + 32|0;
 $_7 = sp + 24|0;
 $script = sp + 16|0;
 $arg0 = sp + 8|0;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$script>>2] = $4;
 $7 = ((($script)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$script>>2]|0;
 $9 = ((($script)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN3std3ffi5c_str7CString3new17hd33aee44e274fd82E($_8,$8,$10);
 __THREW__ = 0;
 invoke_vii(114,($_7|0),($_8|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 do {
  if (!($12)) {
   __THREW__ = 0;
   invoke_vii(115,($2|0),($_7|0));
   $$sreg$field = HEAP32[$2>>2]|0;
   $$sreg$index4 = ((($2)) + 4|0);
   $$sreg$field5 = HEAP32[$$sreg$index4>>2]|0;
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if (!($14)) {
    __THREW__ = 0;
    $15 = (invoke_iii(116,($$sreg$field|0),($$sreg$field5|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     __THREW__ = 0;
     invoke_vi(117,($15|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if (!($19)) {
      __THREW__ = 0;
      invoke_vi(118,($_7|0));
      $20 = __THREW__; __THREW__ = 0;
      $21 = $20&1;
      if ($21) {
       break;
      }
      STACKTOP = sp;return;
     }
    }
   }
   $24 = ___cxa_find_matching_catch_2()|0;
   $25 = tempRet0;
   HEAP32[$personalityslot>>2] = $24;
   $personalityslot$index9 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index9>>2] = $25;
   __ZN4drop17hef2163b33501e4d7E($_7);
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index1 = ((($personalityslot)) + 4|0);
   $$field2 = HEAP32[$$index1>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
 } while(0);
 $22 = ___cxa_find_matching_catch_2()|0;
 $23 = tempRet0;
 HEAP32[$personalityslot>>2] = $22;
 $personalityslot$index7 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index7>>2] = $23;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN3std3ffi5c_str7CString3new17hd33aee44e274fd82E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $arg0 = 0, $personalityslot = 0;
 var $personalityslot$index1 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $personalityslot = sp + 32|0;
 $_3 = sp + 16|0;
 $t = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$t>>2] = $4;
 $7 = ((($t)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$t>>2]|0;
 $9 = ((($t)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 invoke_viii(119,($_3|0),($8|0),($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  __THREW__ = 0;
  invoke_vii(120,($0|0),($_3|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   STACKTOP = sp;return;
  }
 }
 $15 = ___cxa_find_matching_catch_2()|0;
 $16 = tempRet0;
 HEAP32[$personalityslot>>2] = $15;
 $personalityslot$index1 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index1>>2] = $16;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_6unwrap17h84af5b9b5f885ce8E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field4 = 0, $$index3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_10 = 0, $_5 = 0, $_8 = 0, $_9 = 0, $arg0 = 0, $e = 0, $personalityslot = 0, $personalityslot$index6 = 0, $personalityslot$index8 = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $personalityslot = sp + 96|0;
 $_8 = sp + 80|0;
 $_5 = sp + 72|0;
 $e = sp + 56|0;
 $t = sp + 48|0;
 $self = sp + 24|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg0+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$arg0+16>>2]=HEAP32[$1+16>>2]|0;
 $_10 = 0;
 $_9 = 0;
 $_9 = 1;
 $_10 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;HEAP32[$self+12>>2]=HEAP32[$arg0+12>>2]|0;HEAP32[$self+16>>2]=HEAP32[$arg0+16>>2]|0;
 $2 = HEAP32[$self>>2]|0;
 $switch1 = ($2>>>0)<(1);
 do {
  if ($switch1) {
   $_10 = 0;
   $3 = ((($self)) + 4|0);
   ;HEAP32[$t>>2]=HEAP32[$3>>2]|0;HEAP32[$t+4>>2]=HEAP32[$3+4>>2]|0;
   ;HEAP32[$_5>>2]=HEAP32[$t>>2]|0;HEAP32[$_5+4>>2]=HEAP32[$t+4>>2]|0;
   ;HEAP32[$0>>2]=HEAP32[$_5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_5+4>>2]|0;
   $4 = HEAP32[$self>>2]|0;
   $switch = ($4>>>0)<(1);
   if ($switch) {
    STACKTOP = sp;return;
   }
   $_9 = 0;
   $16 = ((($self)) + 4|0);
   __THREW__ = 0;
   invoke_vi(122,($16|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $19 = ___cxa_find_matching_catch_2()|0;
    $20 = tempRet0;
    HEAP32[$personalityslot>>2] = $19;
    $personalityslot$index8 = ((($personalityslot)) + 4|0);
    HEAP32[$personalityslot$index8>>2] = $20;
    break;
   } else {
    STACKTOP = sp;return;
   }
  } else {
   $_9 = 0;
   $5 = ((($self)) + 4|0);
   ;HEAP32[$e>>2]=HEAP32[$5>>2]|0;HEAP32[$e+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$e+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$e+12>>2]=HEAP32[$5+12>>2]|0;
   ;HEAP32[$_8>>2]=HEAP32[$e>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$e+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$e+8>>2]|0;HEAP32[$_8+12>>2]=HEAP32[$e+12>>2]|0;
   __THREW__ = 0;
   invoke_viii(121,(8930|0),43,($_8|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = ___cxa_find_matching_catch_2()|0;
   $8 = tempRet0;
   HEAP32[$personalityslot>>2] = $7;
   $personalityslot$index6 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index6>>2] = $8;
   $9 = HEAP32[$self>>2]|0;
   $switch2 = ($9>>>0)<(1);
   if ($switch2) {
    $10 = $_10;
    $11 = $10&1;
    if (!($11)) {
     break;
    }
    $_10 = 0;
    $12 = ((($self)) + 4|0);
    __ZN4drop17hef2163b33501e4d7E($12);
    break;
   } else {
    $13 = $_9;
    $14 = $13&1;
    if (!($14)) {
     break;
    }
    $_9 = 0;
    $15 = ((($self)) + 4|0);
    __ZN4drop17h7be469282d9f6135E($15);
    break;
   }
  }
 } while(0);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4drop17hef2163b33501e4d7E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(123,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN13drop_contents17hef2163b33501e4d7E($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZN13drop_contents17hef2163b33501e4d7E($0);
  return;
 }
}
function __ZN60__LT_std__ffi__c_str__CString_u20_as_u20_core__ops__Drop_GT_4drop17heb3849e008dc2039E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17h940747ae8e72915cE($3,$5,0)|0);
 HEAP8[$6>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN13drop_contents17hef2163b33501e4d7E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h11d58c43382c878eE($0);
 return;
}
function __ZN4drop17h11d58c43382c878eE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN5alloc4heap8box_free17h53849c7d70dc1237E($1,$3);
 return;
}
function __ZN5alloc4heap8box_free17h53849c7d70dc1237E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $arg0 = 0, $ptr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $ptr = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$ptr>>2] = $3;
 $6 = ((($ptr)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($ptr)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8;
 $size = $9;
 $align = 1;
 $10 = $size;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$ptr>>2]|0;
 $13 = $size;
 $14 = $align;
 __ZN5alloc4heap10deallocate17haa41e924c0cbc050E_3($12,$13,$14);
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17h940747ae8e72915cE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0;
 var $index = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $arg1 = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $arg1;
 $index = $8;
 $9 = HEAP32[$self>>2]|0;
 $10 = ((($self)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $index;
 __THREW__ = 0;
 $13 = (invoke_iiii(124,($9|0),($11|0),($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  HEAP32[$personalityslot>>2] = $16;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $17;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17he36baae0fc8f3a94E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0;
 var $index = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $arg1 = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $arg1;
 $index = $8;
 $9 = $index;
 $10 = HEAP32[$self>>2]|0;
 $11 = ((($self)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 $13 = (invoke_iiii(125,($9|0),($10|0),($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  HEAP32[$personalityslot>>2] = $16;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $17;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17h9386c62bd6c518efE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $self = 0, $slice = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $slice = sp + 8|0;
 $arg1 = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = $arg0;
 $self = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$slice>>2] = $5;
 $8 = ((($slice)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$slice>>2]|0;
 $10 = ((($slice)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h4ab51adc17983fdaE($9,$11)|0);
 $13 = $self;
 $14 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17hebe800c933a769c6E($12,$13)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h4ab51adc17983fdaE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17hebe800c933a769c6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + ($5)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core6result13unwrap_failed17h04d3ddfb0e3269ecE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_11 = 0, $_5 = 0, $__arg0 = 0, $__arg1 = 0, $arg0 = 0;
 var $arg1 = 0, $error = 0, $msg = 0, $personalityslot = 0, $personalityslot$index1 = 0, $tmp_ret = 0, $tmp_ret1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $tmp_ret1 = sp + 112|0;
 $personalityslot = sp + 104|0;
 $tmp_ret = sp + 96|0;
 $_11 = sp + 88|0;
 $_10 = sp + 72|0;
 $_5 = sp + 48|0;
 $error = sp + 32|0;
 $msg = sp + 24|0;
 $arg1 = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 ;HEAP32[$arg1>>2]=HEAP32[$2>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$arg1+12>>2]=HEAP32[$2+12>>2]|0;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$msg>>2] = $4;
 $7 = ((($msg)) + 4|0);
 HEAP32[$7>>2] = $6;
 ;HEAP32[$error>>2]=HEAP32[$arg1>>2]|0;HEAP32[$error+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$error+8>>2]=HEAP32[$arg1+8>>2]|0;HEAP32[$error+12>>2]=HEAP32[$arg1+12>>2]|0;
 $8 = HEAP32[1395]|0;
 $9 = HEAP32[(5584)>>2]|0;
 HEAP32[$_11>>2] = $msg;
 $10 = ((($_11)) + 4|0);
 HEAP32[$10>>2] = $error;
 $11 = HEAP32[$_11>>2]|0;
 $__arg0 = $11;
 $12 = ((($_11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $__arg1 = $13;
 $14 = $__arg0;
 __THREW__ = 0;
 invoke_viii(126,($tmp_ret|0),($14|0),(127|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if (!($16)) {
  $17 = ((($tmp_ret)) + 4|0);
  $18 = HEAP32[$tmp_ret>>2]|0;
  $19 = HEAP32[$17>>2]|0;
  $20 = $__arg1;
  __THREW__ = 0;
  invoke_viii(128,($tmp_ret1|0),($20|0),(129|0));
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if (!($22)) {
   $23 = ((($tmp_ret1)) + 4|0);
   $24 = HEAP32[$tmp_ret1>>2]|0;
   $25 = HEAP32[$23>>2]|0;
   HEAP32[$_10>>2] = $18;
   $26 = ((($_10)) + 4|0);
   HEAP32[$26>>2] = $19;
   $27 = ((($_10)) + 8|0);
   HEAP32[$27>>2] = $24;
   $28 = ((($27)) + 4|0);
   HEAP32[$28>>2] = $25;
   __THREW__ = 0;
   invoke_viiiii(130,($_5|0),($8|0),($9|0),($_10|0),2);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if (!($30)) {
    __THREW__ = 0;
    invoke_vii(96,($_5|0),(5568|0));
    $31 = __THREW__; __THREW__ = 0;
   }
  }
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = tempRet0;
 HEAP32[$personalityslot>>2] = $32;
 $personalityslot$index1 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index1>>2] = $33;
 __ZN4drop17h7be469282d9f6135E($error);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4drop17h7be469282d9f6135E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZN4drop17hd7bb59ff66a6e5a9E($1);
 return;
}
function __ZN4drop17hd7bb59ff66a6e5a9E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(131,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN13drop_contents17hd7bb59ff66a6e5a9E($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZN13drop_contents17hd7bb59ff66a6e5a9E($0);
  return;
 }
}
function __ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h7026c3db4a288476E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h0e104eb13f446020E($1,$3);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17hd7bb59ff66a6e5a9E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17hae7a269ee3c855caE($0);
 return;
}
function __ZN4drop17hae7a269ee3c855caE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(132,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN13drop_contents17hae7a269ee3c855caE($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZN13drop_contents17hae7a269ee3c855caE($0);
  return;
 }
}
function __ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h72aeeff4426c23c4E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_4 = 0, $align = 0, $arg0 = 0, $elem_size = 0, $num_bytes = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17h6cde1ee6d900fb7fE()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $self;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $_4 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $_4 = 0;
 }
 $9 = $_4;
 $10 = $9&1;
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (__ZN4core3mem8align_of17h1a0162c006f124b9E()|0);
 $align = $11;
 $12 = $elem_size;
 $13 = $self;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $num_bytes = $16;
 $17 = $self;
 $18 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h93c86bb769406de3E($17)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $num_bytes;
 $21 = $align;
 __ZN5alloc4heap10deallocate17haa41e924c0cbc050E_3($19,$20,$21);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17hae7a269ee3c855caE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4core3mem7size_of17h6cde1ee6d900fb7fE() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 1;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem8align_of17h1a0162c006f124b9E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 1;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h93c86bb769406de3E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hbedaffb07fb930c7E($2)|0);
 $transmute_temp = $3;
 $4 = $transmute_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hbedaffb07fb930c7E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h0e104eb13f446020E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17ha21b65c68a8816cbE($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17ha21b65c68a8816cbE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h2197c429996431f2E($3)|0);
 $ptr = $4;
 $5 = $ptr;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17hd8e9e87391b89bc2E($5)|0);
 $6 = $ptr;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice18from_raw_parts_mut17ha342aa6cf572bffaE($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h2197c429996431f2E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h93c86bb769406de3E($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4core5slice18from_raw_parts_mut17ha342aa6cf572bffaE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 8|0;
 $_6 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_6>>2] = $4;
 $6 = ((($_6)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_6)) + 4|0);
 $8 = HEAP32[$_6>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$transmute_temp>>2] = $8;
 $10 = ((($transmute_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$transmute_temp>>2]|0;
 $12 = ((($transmute_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17hcd4b2ba84906fb97E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $abi_cast = sp + 20|0;
 $_0 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $f = $3;
 $4 = $self;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $f;
 $9 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17h53ffdc2cd959b259E($5,$7,$8)|0);
 HEAP8[$abi_cast>>0] = $9;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
 $10 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($10|0);
}
function __ZN4core3fmt10ArgumentV13new17hbee887761b52d43aE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$transmute_temp>>2] = $5;
 $6 = HEAP32[$transmute_temp>>2]|0;
 $7 = $x;
 HEAP32[$transmute_temp1>>2] = $7;
 $8 = HEAP32[$transmute_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN4core3fmt10ArgumentV13new17h36a0f98c2347b476E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$transmute_temp>>2] = $5;
 $6 = HEAP32[$transmute_temp>>2]|0;
 $7 = $x;
 HEAP32[$transmute_temp1>>2] = $7;
 $8 = HEAP32[$transmute_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_6 = 0, $arg0 = 0, $arg1 = 0, $args = 0, $pieces = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_6 = sp + 32|0;
 $args = sp + 24|0;
 $pieces = sp + 16|0;
 $arg1 = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $5 = ((($arg0)) + 4|0);
 HEAP32[$5>>2] = $2;
 HEAP32[$arg1>>2] = $3;
 $6 = ((($arg1)) + 4|0);
 HEAP32[$6>>2] = $4;
 $7 = HEAP32[$arg0>>2]|0;
 $8 = ((($arg0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$pieces>>2] = $7;
 $10 = ((($pieces)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$arg1>>2]|0;
 $12 = ((($arg1)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$args>>2] = $11;
 $14 = ((($args)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$pieces>>2]|0;
 $16 = ((($pieces)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$_6>>2] = 0;
 $18 = HEAP32[$args>>2]|0;
 $19 = ((($args)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$0>>2] = $15;
 $21 = ((($0)) + 4|0);
 HEAP32[$21>>2] = $17;
 $22 = ((($0)) + 8|0);
 ;HEAP32[$22>>2]=HEAP32[$_6>>2]|0;HEAP32[$22+4>>2]=HEAP32[$_6+4>>2]|0;
 $23 = ((($0)) + 16|0);
 HEAP32[$23>>2] = $18;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = $20;
 STACKTOP = sp;return;
}
function __ZN50__LT_T_u20_as_u20_core__convert__Into_LT_U_GT__GT_4into17h4023c69fa1edb57aE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 invoke_viii(133,($0|0),($8|0),($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  HEAP32[$personalityslot>>2] = $13;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $14;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN2ww8platform10emscripten14run_script_int17hb108a8f97088debdE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$sreg$field = 0, $$sreg$field5 = 0, $$sreg$index4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_7 = 0, $_8 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index7 = 0, $personalityslot$index9 = 0, $script = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp;
 $personalityslot = sp + 56|0;
 $_8 = sp + 32|0;
 $_7 = sp + 24|0;
 $script = sp + 16|0;
 $arg0 = sp + 8|0;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$script>>2] = $4;
 $7 = ((($script)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$script>>2]|0;
 $9 = ((($script)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN3std3ffi5c_str7CString3new17hd33aee44e274fd82E($_8,$8,$10);
 __THREW__ = 0;
 invoke_vii(114,($_7|0),($_8|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 do {
  if (!($12)) {
   __THREW__ = 0;
   invoke_vii(115,($2|0),($_7|0));
   $$sreg$field = HEAP32[$2>>2]|0;
   $$sreg$index4 = ((($2)) + 4|0);
   $$sreg$field5 = HEAP32[$$sreg$index4>>2]|0;
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if (!($14)) {
    __THREW__ = 0;
    $15 = (invoke_iii(116,($$sreg$field|0),($$sreg$field5|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     __THREW__ = 0;
     $18 = (invoke_ii(134,($15|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if (!($20)) {
      __THREW__ = 0;
      invoke_vi(118,($_7|0));
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if ($22) {
       break;
      }
      STACKTOP = sp;return ($18|0);
     }
    }
   }
   $25 = ___cxa_find_matching_catch_2()|0;
   $26 = tempRet0;
   HEAP32[$personalityslot>>2] = $25;
   $personalityslot$index9 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index9>>2] = $26;
   __ZN4drop17hef2163b33501e4d7E($_7);
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index1 = ((($personalityslot)) + 4|0);
   $$field2 = HEAP32[$$index1>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
 } while(0);
 $23 = ___cxa_find_matching_catch_2()|0;
 $24 = tempRet0;
 HEAP32[$personalityslot>>2] = $23;
 $personalityslot$index7 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index7>>2] = $24;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
 return (0)|0;
}
function __ZN2ww8platform10emscripten17run_script_string17hb4cddc5cda9d59f5E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $$sreg$field = 0, $$sreg$field6 = 0, $$sreg$index5 = 0, $$sreg1$field = 0, $$sreg1$field9 = 0, $$sreg1$index8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_14 = 0, $_16 = 0, $_17 = 0, $_8 = 0, $_9 = 0, $arg0 = 0, $our_string = 0, $personalityslot = 0, $personalityslot$index12 = 0, $personalityslot$index14 = 0, $personalityslot$index16 = 0, $r = 0, $s = 0;
 var $s$index11 = 0, $script = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $3 = sp + 16|0;
 $4 = sp;
 $personalityslot = sp + 128|0;
 $_16 = sp + 112|0;
 $_14 = sp + 96|0;
 $our_string = sp + 80|0;
 $s = sp + 72|0;
 $_9 = sp + 48|0;
 $_8 = sp + 40|0;
 $script = sp + 32|0;
 $arg0 = sp + 24|0;
 HEAP32[$arg0>>2] = $1;
 $5 = ((($arg0)) + 4|0);
 HEAP32[$5>>2] = $2;
 $_17 = 0;
 $6 = HEAP32[$arg0>>2]|0;
 $7 = ((($arg0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$script>>2] = $6;
 $9 = ((($script)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$script>>2]|0;
 $11 = ((($script)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __ZN3std3ffi5c_str7CString3new17hd33aee44e274fd82E($_9,$10,$12);
 __THREW__ = 0;
 invoke_vii(114,($_8|0),($_9|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 do {
  if (!($14)) {
   __THREW__ = 0;
   invoke_vii(115,($4|0),($_8|0));
   $$sreg$field = HEAP32[$4>>2]|0;
   $$sreg$index5 = ((($4)) + 4|0);
   $$sreg$field6 = HEAP32[$$sreg$index5>>2]|0;
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if (!($16)) {
    __THREW__ = 0;
    $17 = (invoke_iii(116,($$sreg$field|0),($$sreg$field6|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     __THREW__ = 0;
     $20 = (invoke_ii(135,($17|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      $r = $20;
      __THREW__ = 0;
      invoke_vi(118,($_8|0));
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if ($24) {
       break;
      }
      $25 = $r;
      __ZN3std3ffi5c_str4CStr8from_ptr17h9c8435f50999c60aE($3,$25);
      $$sreg1$field = HEAP32[$3>>2]|0;
      $$sreg1$index8 = ((($3)) + 4|0);
      $$sreg1$field9 = HEAP32[$$sreg1$index8>>2]|0;
      HEAP32[$s>>2] = $$sreg1$field;
      $s$index11 = ((($s)) + 4|0);
      HEAP32[$s$index11>>2] = $$sreg1$field9;
      $26 = HEAP32[$s>>2]|0;
      $27 = ((($s)) + 4|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      invoke_viii(136,($_14|0),($26|0),($28|0));
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       __THREW__ = 0;
       invoke_vii(137,($our_string|0),($_14|0));
       $31 = __THREW__; __THREW__ = 0;
       $32 = $31&1;
       if (!($32)) {
        $_17 = 1;
        $_17 = 0;
        ;HEAP32[$_16>>2]=HEAP32[$our_string>>2]|0;HEAP32[$_16+4>>2]=HEAP32[$our_string+4>>2]|0;HEAP32[$_16+8>>2]=HEAP32[$our_string+8>>2]|0;
        ;HEAP32[$0>>2]=HEAP32[$_16>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_16+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_16+8>>2]|0;
        STACKTOP = sp;return;
       }
      }
      $37 = ___cxa_find_matching_catch_2()|0;
      $38 = tempRet0;
      HEAP32[$personalityslot>>2] = $37;
      $personalityslot$index16 = ((($personalityslot)) + 4|0);
      HEAP32[$personalityslot$index16>>2] = $38;
      $39 = $_17;
      $40 = $39&1;
      if (!($40)) {
       $$field = HEAP32[$personalityslot>>2]|0;
       $$index2 = ((($personalityslot)) + 4|0);
       $$field3 = HEAP32[$$index2>>2]|0;
       ___resumeException($$field|0);
       // unreachable;
      }
      $_17 = 0;
      __ZN4drop17hdd1638425ff7362fE($our_string);
      $$field = HEAP32[$personalityslot>>2]|0;
      $$index2 = ((($personalityslot)) + 4|0);
      $$field3 = HEAP32[$$index2>>2]|0;
      ___resumeException($$field|0);
      // unreachable;
     }
    }
   }
   $35 = ___cxa_find_matching_catch_2()|0;
   $36 = tempRet0;
   HEAP32[$personalityslot>>2] = $35;
   $personalityslot$index14 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index14>>2] = $36;
   __ZN4drop17hef2163b33501e4d7E($_8);
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index2 = ((($personalityslot)) + 4|0);
   $$field3 = HEAP32[$$index2>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
 } while(0);
 $33 = ___cxa_find_matching_catch_2()|0;
 $34 = tempRet0;
 HEAP32[$personalityslot>>2] = $33;
 $personalityslot$index12 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index12>>2] = $34;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4drop17hdd1638425ff7362fE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17hd7bb59ff66a6e5a9E($0);
 return;
}
function __ZN2ww8platform10emscripten17terminate_program17hde6ec3ca22ab22baE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN2ww8platform10emscripten10run_script17hf613816769d0fc19E(8973,19);
 _emscripten_cancel_main_loop();
 return;
}
function __ZN2ww8platform11show_prompt17hb4efc229f77a1980E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$sreg$field = 0, $$sreg$field5 = 0, $$sreg$index4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_20 = 0;
 var $_4 = 0, $_9 = 0, $__arg0 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index7 = 0, $personalityslot$index9 = 0, $prompt = 0, $script = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $2 = sp;
 $personalityslot = sp + 88|0;
 $tmp_ret = sp + 80|0;
 $_10 = sp + 72|0;
 $_9 = sp + 64|0;
 $_4 = sp + 40|0;
 $script = sp + 24|0;
 $prompt = sp + 16|0;
 $arg0 = sp + 8|0;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $_20 = 0;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$prompt>>2] = $4;
 $7 = ((($prompt)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[609]|0;
 $9 = HEAP32[(2440)>>2]|0;
 HEAP32[$_10>>2] = $prompt;
 $10 = HEAP32[$_10>>2]|0;
 $__arg0 = $10;
 $11 = $__arg0;
 __THREW__ = 0;
 invoke_viii(126,($tmp_ret|0),($11|0),(138|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  $14 = ((($tmp_ret)) + 4|0);
  $15 = HEAP32[$tmp_ret>>2]|0;
  $16 = HEAP32[$14>>2]|0;
  HEAP32[$_9>>2] = $15;
  $17 = ((($_9)) + 4|0);
  HEAP32[$17>>2] = $16;
  __THREW__ = 0;
  invoke_viiiii(130,($_4|0),($8|0),($9|0),($_9|0),1);
  $18 = __THREW__; __THREW__ = 0;
  $19 = $18&1;
  if (!($19)) {
   __THREW__ = 0;
   invoke_vii(139,($script|0),($_4|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if (!($21)) {
    $_20 = 1;
    __THREW__ = 0;
    invoke_vii(140,($2|0),($script|0));
    $$sreg$field = HEAP32[$2>>2]|0;
    $$sreg$index4 = ((($2)) + 4|0);
    $$sreg$field5 = HEAP32[$$sreg$index4>>2]|0;
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if (!($23)) {
     __THREW__ = 0;
     invoke_vii(141,($$sreg$field|0),($$sreg$field5|0));
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if (!($25)) {
      $_20 = 0;
      __THREW__ = 0;
      invoke_vi(142,($script|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       STACKTOP = sp;return;
      }
      $32 = ___cxa_find_matching_catch_2()|0;
      $33 = tempRet0;
      HEAP32[$personalityslot>>2] = $32;
      $personalityslot$index9 = ((($personalityslot)) + 4|0);
      HEAP32[$personalityslot$index9>>2] = $33;
      $$field = HEAP32[$personalityslot>>2]|0;
      $$index1 = ((($personalityslot)) + 4|0);
      $$field2 = HEAP32[$$index1>>2]|0;
      ___resumeException($$field|0);
      // unreachable;
     }
    }
   }
  }
 }
 $28 = ___cxa_find_matching_catch_2()|0;
 $29 = tempRet0;
 HEAP32[$personalityslot>>2] = $28;
 $personalityslot$index7 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index7>>2] = $29;
 $30 = $_20;
 $31 = $30&1;
 if (!($31)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_20 = 0;
 __ZN4drop17hdd1638425ff7362fE($script);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17haa5b23119fe53c19E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $abi_cast = sp + 20|0;
 $_0 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $f = $3;
 $4 = $self;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $f;
 $9 = (__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17hc4ff3f3b2f08a94fE($5,$7,$8)|0);
 HEAP8[$abi_cast>>0] = $9;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
 $10 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($10|0);
}
function __ZN11collections6string6String6as_str17h0072890a36cd2e34E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN64__LT_collections__string__String_u20_as_u20_core__ops__Deref_GT_5deref17h9de4490adad97478E($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN64__LT_collections__string__String_u20_as_u20_core__ops__Deref_GT_5deref17h9de4490adad97478E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0;
 var $retVal$index4 = 0, $self = 0, $transmute_temp$i = 0, $v$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp;
 $transmute_temp$i = sp + 24|0;
 $v$i = sp + 16|0;
 $arg0$i = sp + 8|0;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN67__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h1b206e401af9de87E($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$arg0$i>>2] = $$sreg$field;
 $4 = ((($arg0$i)) + 4|0);
 HEAP32[$4>>2] = $$sreg$field2;
 $5 = HEAP32[$arg0$i>>2]|0;
 $6 = ((($arg0$i)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$v$i>>2] = $5;
 $8 = ((($v$i)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$v$i>>2]|0;
 $10 = ((($v$i)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$transmute_temp$i>>2] = $9;
 $12 = ((($transmute_temp$i)) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$transmute_temp$i>>2]|0;
 $14 = ((($transmute_temp$i)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$retVal>>2] = $13;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN67__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h1b206e401af9de87E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $p = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h2197c429996431f2E($3)|0);
 $p = $4;
 $5 = $p;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17hd8e9e87391b89bc2E($5)|0);
 $6 = $p;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice14from_raw_parts17h6406e96cc680f98fE($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN4core5slice14from_raw_parts17h6406e96cc680f98fE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 8|0;
 $_5 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_5>>2] = $4;
 $6 = ((($_5)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_5)) + 4|0);
 $8 = HEAP32[$_5>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$transmute_temp>>2] = $8;
 $10 = ((($transmute_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$transmute_temp>>2]|0;
 $12 = ((($transmute_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN2ww8platform11hide_prompt17hde14f6abb1819565E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN2ww8platform11show_prompt17hb4efc229f77a1980E(24540,0);
 return;
}
function __ZN2ww8platform10read_input17hae23db9dad14741bE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $_5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_5 = sp;
 $1 = (__ZN2ww8platform10emscripten14run_script_int17hb108a8f97088debdE(9005,11)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  HEAP32[$0>>2] = 0;
  STACKTOP = sp;return;
 } else {
  __ZN2ww8platform10emscripten17run_script_string17hb4cddc5cda9d59f5E($_5,9016,11);
  ;HEAP32[$0>>2]=HEAP32[$_5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_5+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_5+8>>2]|0;
  STACKTOP = sp;return;
 }
}
function __ZN2ww8platform5sleep17h4a50355466f8299bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$sreg$field = 0, $$sreg$field5 = 0, $$sreg$index4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_20 = 0, $_4 = 0, $_9 = 0, $__arg0 = 0, $arg0 = 0, $ms = 0, $personalityslot = 0, $personalityslot$index7 = 0, $personalityslot$index9 = 0, $script = 0, $tmp_ret = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $2 = sp;
 $personalityslot = sp + 88|0;
 $tmp_ret = sp + 80|0;
 $_10 = sp + 72|0;
 $_9 = sp + 64|0;
 $_4 = sp + 40|0;
 $script = sp + 24|0;
 $ms = sp + 16|0;
 $arg0 = sp + 8|0;
 $3 = $arg0;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $_20 = 0;
 $7 = $arg0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $ms;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $12;
 $17 = HEAP32[615]|0;
 $18 = HEAP32[(2464)>>2]|0;
 HEAP32[$_10>>2] = $ms;
 $19 = HEAP32[$_10>>2]|0;
 $__arg0 = $19;
 $20 = $__arg0;
 __THREW__ = 0;
 invoke_viii(143,($tmp_ret|0),($20|0),(144|0));
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if (!($22)) {
  $23 = ((($tmp_ret)) + 4|0);
  $24 = HEAP32[$tmp_ret>>2]|0;
  $25 = HEAP32[$23>>2]|0;
  HEAP32[$_9>>2] = $24;
  $26 = ((($_9)) + 4|0);
  HEAP32[$26>>2] = $25;
  __THREW__ = 0;
  invoke_viiiii(130,($_4|0),($17|0),($18|0),($_9|0),1);
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if (!($28)) {
   __THREW__ = 0;
   invoke_vii(139,($script|0),($_4|0));
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if (!($30)) {
    $_20 = 1;
    __THREW__ = 0;
    invoke_vii(140,($2|0),($script|0));
    $$sreg$field = HEAP32[$2>>2]|0;
    $$sreg$index4 = ((($2)) + 4|0);
    $$sreg$field5 = HEAP32[$$sreg$index4>>2]|0;
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if (!($32)) {
     __THREW__ = 0;
     invoke_vii(141,($$sreg$field|0),($$sreg$field5|0));
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $_20 = 0;
      __THREW__ = 0;
      invoke_vi(142,($script|0));
      $35 = __THREW__; __THREW__ = 0;
      $36 = $35&1;
      if (!($36)) {
       STACKTOP = sp;return;
      }
      $41 = ___cxa_find_matching_catch_2()|0;
      $42 = tempRet0;
      HEAP32[$personalityslot>>2] = $41;
      $personalityslot$index9 = ((($personalityslot)) + 4|0);
      HEAP32[$personalityslot$index9>>2] = $42;
      $$field = HEAP32[$personalityslot>>2]|0;
      $$index1 = ((($personalityslot)) + 4|0);
      $$field2 = HEAP32[$$index1>>2]|0;
      ___resumeException($$field|0);
      // unreachable;
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch_2()|0;
 $38 = tempRet0;
 HEAP32[$personalityslot>>2] = $37;
 $personalityslot$index7 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index7>>2] = $38;
 $39 = $_20;
 $40 = $39&1;
 if (!($40)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_20 = 0;
 __ZN4drop17hdd1638425ff7362fE($script);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4core3fmt10ArgumentV13new17hd62d016521c551c9E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$transmute_temp>>2] = $5;
 $6 = HEAP32[$transmute_temp>>2]|0;
 $7 = $x;
 HEAP32[$transmute_temp1>>2] = $7;
 $8 = HEAP32[$transmute_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN2ww8platform6random17h52001b9bac3cb008E() {
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+__ZN2ww8platform10emscripten6random17hc7c10d096c2e458bE());
 return (+$0);
}
function __ZN2ww8platform10random_i3217he626159cc5ccf990E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$arith2 = 0, $$ispos = 0, $$ispos7 = 0, $$negcheck = 0, $$negcheck6 = 0, $$negtemp = 0, $$negtemp4 = 0, $$poscheck = 0, $$poscheck5 = 0, $$postemp = 0, $$postemp3 = 0, $$select = 0, $$select8 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $2 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $arg0 = 0, $arg1 = 0, $max = 0, $min = 0, $range = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $min = $2;
 $3 = $arg1;
 $max = $3;
 $4 = $max;
 $5 = $min;
 $$arith2 = (($4) - ($5))|0;
 $$postemp3 = (($4) + -2147483647)|0;
 $$negtemp4 = (($4) + -2147483648)|0;
 $$poscheck5 = ($$arith2|0)<($$postemp3|0);
 $$negcheck6 = ($$arith2|0)>($$negtemp4|0);
 $$ispos7 = ($4|0)>=(0);
 $$select8 = $$ispos7 ? $$poscheck5 : $$negcheck6;
 $6 = $$select8;
 if ($6) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(2484);
  // unreachable;
 }
 $range = $$arith2;
 $7 = $min;
 $8 = (+__ZN2ww8platform6random17h52001b9bac3cb008E());
 $9 = $range;
 $10 = (+($9|0));
 $11 = $8 * $10;
 $12 = (~~(($11)));
 $$arith = (($7) + ($12))|0;
 $$postemp = (($7) + -2147483648)|0;
 $$negtemp = (($7) + 2147483647)|0;
 $$poscheck = ($$arith|0)<($$postemp|0);
 $$negcheck = ($$arith|0)>($$negtemp|0);
 $$ispos = ($7|0)>=(0);
 $$select = $$ispos ? $$poscheck : $$negcheck;
 $13 = $$select;
 if ($13) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(2504);
  // unreachable;
 } else {
  STACKTOP = sp;return ($$arith|0);
 }
 return (0)|0;
}
function __ZN2ww8platform12clear_screen17ha9833ef1d45a571aE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN2ww8platform10emscripten10run_script17hf613816769d0fc19E(9113,14);
 return;
}
function __ZN2ww8platform21writeln_with_wrapping17hd87f6940e84ffa47E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $_8 = 0, $_9 = 0, $__arg0 = 0, $arg0 = 0, $s = 0, $tmp_ret = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $tmp_ret = sp + 56|0;
 $_9 = sp + 48|0;
 $_8 = sp + 40|0;
 $_3 = sp + 16|0;
 $s = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$s>>2] = $3;
 $6 = ((($s)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[631]|0;
 $8 = HEAP32[(2528)>>2]|0;
 HEAP32[$_9>>2] = $s;
 $9 = HEAP32[$_9>>2]|0;
 $__arg0 = $9;
 $10 = $__arg0;
 __ZN4core3fmt10ArgumentV13new17hbee887761b52d43aE($tmp_ret,$10,127);
 $11 = ((($tmp_ret)) + 4|0);
 $12 = HEAP32[$tmp_ret>>2]|0;
 $13 = HEAP32[$11>>2]|0;
 HEAP32[$_8>>2] = $12;
 $14 = ((($_8)) + 4|0);
 HEAP32[$14>>2] = $13;
 __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_3,$7,$8,$_8,1);
 __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_3);
 STACKTOP = sp;return;
}
function __ZN66__LT_ww__game_map__RoomId_u20_as_u20_ww__sized_enum__SizedEnum_GT_4size17h72df2b376d876de1E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 19;
}
function __ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_12create_rooms17h6f62a7adfb5f2399E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_1 = sp;
 __ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_3new17h331141cf7332c249E($_1);
 $1 = ((($0)) + 608|0);
 $2 = $0;
 while(1) {
  $4 = ($2|0)!=($1|0);
  if (!($4)) {
   break;
  }
  ;HEAP32[$2>>2]=HEAP32[$_1>>2]|0;HEAP32[$2+4>>2]=HEAP32[$_1+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$_1+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$_1+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$_1+16>>2]|0;HEAP32[$2+20>>2]=HEAP32[$_1+20>>2]|0;HEAP32[$2+24>>2]=HEAP32[$_1+24>>2]|0;HEAP32[$2+28>>2]=HEAP32[$_1+28>>2]|0;
  $3 = ((($2)) + 32|0);
  $2 = $3;
 }
 STACKTOP = sp;return;
}
function __ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_3new17h331141cf7332c249E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_1 = 0, $_2 = 0, $_3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_3 = sp + 24|0;
 $_2 = sp + 16|0;
 $_1 = sp;
 HEAP8[$_2>>0] = 0;
 $1 = ((($_1)) + 12|0);
 $2 = $_1;
 while(1) {
  $9 = ($2|0)!=($1|0);
  if (!($9)) {
   break;
  }
  ;HEAP8[$2>>0]=HEAP8[$_2>>0]|0;HEAP8[$2+1>>0]=HEAP8[$_2+1>>0]|0;
  $3 = ((($2)) + 2|0);
  $2 = $3;
 }
 HEAP8[$_3>>0] = 0;
 dest=$0; src=$_1; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 24540;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 24540;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 28|0);
 ;HEAP8[$8>>0]=HEAP8[$_3>>0]|0;HEAP8[$8+1>>0]=HEAP8[$_3+1>>0]|0;HEAP8[$8+2>>0]=HEAP8[$_3+2>>0]|0;
 STACKTOP = sp;return;
}
function __ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_8populate17h8e04f123c38433bcE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 __ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_20describe_and_connect17h047cc3a7141dfc47E($2);
 $3 = $self;
 __ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_14allot_treasure17h2e28437113d2a09bE($3);
 $4 = $self;
 __ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_12allot_terror17h3f8954653a08873aE($4);
 $5 = $self;
 __ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_15ensure_treasure17haab4ffc00de647cfE($5);
 STACKTOP = sp;return;
}
function __ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_20describe_and_connect17h047cc3a7141dfc47E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_100 = 0, $_101 = 0, $_102 = 0, $_105 = 0, $_106 = 0, $_107 = 0, $_110 = 0, $_111 = 0, $_112 = 0, $_115 = 0, $_116 = 0, $_117 = 0, $_12 = 0, $_120 = 0, $_121 = 0, $_122 = 0;
 var $_125 = 0, $_126 = 0, $_127 = 0, $_130 = 0, $_131 = 0, $_132 = 0, $_135 = 0, $_136 = 0, $_137 = 0, $_140 = 0, $_141 = 0, $_142 = 0, $_145 = 0, $_146 = 0, $_147 = 0, $_150 = 0, $_151 = 0, $_152 = 0, $_155 = 0, $_156 = 0;
 var $_157 = 0, $_160 = 0, $_161 = 0, $_162 = 0, $_165 = 0, $_166 = 0, $_167 = 0, $_17 = 0, $_170 = 0, $_171 = 0, $_172 = 0, $_175 = 0, $_176 = 0, $_177 = 0, $_22 = 0, $_27 = 0, $_32 = 0, $_37 = 0, $_42 = 0, $_47 = 0;
 var $_52 = 0, $_57 = 0, $_62 = 0, $_67 = 0, $_7 = 0, $_72 = 0, $_77 = 0, $_82 = 0, $_87 = 0, $_90 = 0, $_91 = 0, $_92 = 0, $_95 = 0, $_96 = 0, $_97 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $_7 = 5;
 $3 = $_7;
 $4 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($2,$3)|0);
 (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8describe17hb06c7154f5787c50E($4,9238,8,9246,82)|0);
 $5 = $self;
 $_12 = 0;
 $6 = $_12;
 $7 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($5,$6)|0);
 (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8describe17hb06c7154f5787c50E($7,9328,7,9335,120)|0);
 $8 = $self;
 $_17 = 1;
 $9 = $_17;
 $10 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($8,$9)|0);
 (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8describe17hb06c7154f5787c50E($10,9455,16,9471,188)|0);
 $11 = $self;
 $_22 = 2;
 $12 = $_22;
 $13 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($11,$12)|0);
 (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8describe17hb06c7154f5787c50E($13,9659,10,9669,127)|0);
 $14 = $self;
 $_27 = 3;
 $15 = $_27;
 $16 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($14,$15)|0);
 (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8describe17hb06c7154f5787c50E($16,9796,20,9816,80)|0);
 $17 = $self;
 $_32 = 4;
 $18 = $_32;
 $19 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($17,$18)|0);
 (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8describe17hb06c7154f5787c50E($19,9896,13,9909,184)|0);
 $20 = $self;
 $_37 = 6;
 $21 = $_37;
 $22 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($20,$21)|0);
 (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8describe17hb06c7154f5787c50E($22,10093,7,10100,137)|0);
 $23 = $self;
 $_42 = 7;
 $24 = $_42;
 $25 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($23,$24)|0);
 (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8describe17hb06c7154f5787c50E($25,10237,10,10247,150)|0);
 $26 = $self;
 $_47 = 9;
 $27 = $_47;
 $28 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($26,$27)|0);
 (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8describe17hb06c7154f5787c50E($28,10397,14,10411,157)|0);
 $29 = $self;
 $_52 = 11;
 $30 = $_52;
 $31 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($29,$30)|0);
 (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8describe17hb06c7154f5787c50E($31,10568,7,10575,101)|0);
 $32 = $self;
 $_57 = 12;
 $33 = $_57;
 $34 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($32,$33)|0);
 (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8describe17hb06c7154f5787c50E($34,10676,9,10685,152)|0);
 $35 = $self;
 $_62 = 13;
 $36 = $_62;
 $37 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($35,$36)|0);
 (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8describe17hb06c7154f5787c50E($37,10837,14,10851,260)|0);
 $38 = $self;
 $_67 = 14;
 $39 = $_67;
 $40 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($38,$39)|0);
 (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8describe17hb06c7154f5787c50E($40,11111,13,11124,153)|0);
 $41 = $self;
 $_72 = 15;
 $42 = $_72;
 $43 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($41,$42)|0);
 (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8describe17hb06c7154f5787c50E($43,11277,8,11285,125)|0);
 $44 = $self;
 $_77 = 16;
 $45 = $_77;
 $46 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($44,$45)|0);
 (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8describe17hb06c7154f5787c50E($46,11410,21,11431,104)|0);
 $47 = $self;
 $_82 = 17;
 $48 = $_82;
 $49 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($47,$48)|0);
 (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8describe17hb06c7154f5787c50E($49,11535,16,11551,161)|0);
 $50 = $self;
 $_87 = 18;
 $51 = $_87;
 $52 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($50,$51)|0);
 (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8describe17hb06c7154f5787c50E($52,11712,10,11722,174)|0);
 $53 = $self;
 $_90 = 5;
 $_91 = 2;
 $_92 = 0;
 $54 = $_90;
 $55 = $_91;
 $56 = $_92;
 (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_7connect17hfb66dafd3997a55eE($53,$54,$55,$56)|0);
 $57 = $self;
 $_95 = 0;
 $_96 = 1;
 $_97 = 1;
 $58 = $_95;
 $59 = $_96;
 $60 = $_97;
 (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_7connect17hfb66dafd3997a55eE($57,$58,$59,$60)|0);
 $61 = $self;
 $_100 = 2;
 $_101 = 0;
 $_102 = 1;
 $62 = $_100;
 $63 = $_101;
 $64 = $_102;
 (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_7connect17hfb66dafd3997a55eE($61,$62,$63,$64)|0);
 $65 = $self;
 $_105 = 2;
 $_106 = 3;
 $_107 = 1;
 $66 = $_105;
 $67 = $_106;
 $68 = $_107;
 (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_7connect17hfb66dafd3997a55eE($65,$66,$67,$68)|0);
 $69 = $self;
 $_110 = 3;
 $_111 = 1;
 $_112 = 4;
 $70 = $_110;
 $71 = $_111;
 $72 = $_112;
 (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_7connect17hfb66dafd3997a55eE($69,$70,$71,$72)|0);
 $73 = $self;
 $_115 = 4;
 $_116 = 3;
 $_117 = 2;
 $74 = $_115;
 $75 = $_116;
 $76 = $_117;
 (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_7connect17hfb66dafd3997a55eE($73,$74,$75,$76)|0);
 $77 = $self;
 $_120 = 4;
 $_121 = 4;
 $_122 = 14;
 $78 = $_120;
 $79 = $_121;
 $80 = $_122;
 (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_7connect17hfb66dafd3997a55eE($77,$78,$79,$80)|0);
 $81 = $self;
 $_125 = 6;
 $_126 = 1;
 $_127 = 7;
 $82 = $_125;
 $83 = $_126;
 $84 = $_127;
 (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_7connect17hfb66dafd3997a55eE($81,$82,$83,$84)|0);
 $85 = $self;
 $_130 = 7;
 $_131 = 1;
 $_132 = 9;
 $86 = $_130;
 $87 = $_131;
 $88 = $_132;
 (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_7connect17hfb66dafd3997a55eE($85,$86,$87,$88)|0);
 $89 = $self;
 $_135 = 9;
 $_136 = 2;
 $_137 = 10;
 $90 = $_135;
 $91 = $_136;
 $92 = $_137;
 (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_7connect17hfb66dafd3997a55eE($89,$90,$91,$92)|0);
 $93 = $self;
 $_140 = 11;
 $_141 = 3;
 $_142 = 12;
 $94 = $_140;
 $95 = $_141;
 $96 = $_142;
 (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_7connect17hfb66dafd3997a55eE($93,$94,$95,$96)|0);
 $97 = $self;
 $_145 = 12;
 $_146 = 4;
 $_147 = 4;
 $98 = $_145;
 $99 = $_146;
 $100 = $_147;
 (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_7connect17hfb66dafd3997a55eE($97,$98,$99,$100)|0);
 $101 = $self;
 $_150 = 13;
 $_151 = 1;
 $_152 = 14;
 $102 = $_150;
 $103 = $_151;
 $104 = $_152;
 (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_7connect17hfb66dafd3997a55eE($101,$102,$103,$104)|0);
 $105 = $self;
 $_155 = 13;
 $_156 = 2;
 $_157 = 16;
 $106 = $_155;
 $107 = $_156;
 $108 = $_157;
 (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_7connect17hfb66dafd3997a55eE($105,$106,$107,$108)|0);
 $109 = $self;
 $_160 = 15;
 $_161 = 0;
 $_162 = 16;
 $110 = $_160;
 $111 = $_161;
 $112 = $_162;
 (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_7connect17hfb66dafd3997a55eE($109,$110,$111,$112)|0);
 $113 = $self;
 $_165 = 15;
 $_166 = 2;
 $_167 = 18;
 $114 = $_165;
 $115 = $_166;
 $116 = $_167;
 (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_7connect17hfb66dafd3997a55eE($113,$114,$115,$116)|0);
 $117 = $self;
 $_170 = 16;
 $_171 = 0;
 $_172 = 17;
 $118 = $_170;
 $119 = $_171;
 $120 = $_172;
 (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_7connect17hfb66dafd3997a55eE($117,$118,$119,$120)|0);
 $121 = $self;
 $_175 = 18;
 $_176 = 0;
 $_177 = 8;
 $122 = $_175;
 $123 = $_176;
 $124 = $_177;
 (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_7connect17hfb66dafd3997a55eE($121,$122,$123,$124)|0);
 STACKTOP = sp;return;
}
function __ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_14allot_treasure17h2e28437113d2a09bE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 __ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_5allot17h53b46bbb136b8df9E($2,4);
 STACKTOP = sp;return;
}
function __ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_12allot_terror17h3f8954653a08873aE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 __ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_5allot17h0c5f634df78f39d6E($2,4);
 STACKTOP = sp;return;
}
function __ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_15ensure_treasure17haab4ffc00de647cfE($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_15 = 0, $_19 = 0;
 var $_4 = 0, $_5 = 0, $amount = 0, $arg0 = 0, $iter = 0, $room_id = 0, $self = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_15 = sp + 24|0;
 $iter = sp + 16|0;
 $_5 = sp + 8|0;
 $_4 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_4iter17hc2a6bb80bbb4caf4E($_5,9127,2);
 __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hfe0f0905ee708670E($_4,$_5);
 ;HEAP32[$iter>>2]=HEAP32[$_4>>2]|0;HEAP32[$iter+4>>2]=HEAP32[$_4+4>>2]|0;
 while(1) {
  $2 = (__ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h0467848ae076196cE($iter)|0);
  $_10 = $2;
  $3 = $_10;
  $4 = ($3|0)!=(0|0);
  $$expand_i1_val = $4&1;
  $$expand_i1_val1 = 1;
  $switch = ($$expand_i1_val&255)<($$expand_i1_val1&255);
  if ($switch) {
   break;
  }
  $5 = $_10;
  $6 = HEAP8[$5>>0]|0;
  $room_id = $6;
  $7 = (__ZN2ww8game_map22random_treasure_amount17h19f6638e496456eaE()|0);
  $amount = $7;
  $8 = $amount;
  HEAP8[$_15>>0] = 0;
  $9 = ((($_15)) + 1|0);
  HEAP8[$9>>0] = $8;
  $10 = $self;
  $11 = $room_id;
  $_19 = $11;
  $12 = $_19;
  $13 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($10,$12)|0);
  $14 = ((($13)) + 28|0);
  HEAP8[$14>>0] = 1;
  $15 = ((($14)) + 1|0);
  ;HEAP8[$15>>0]=HEAP8[$_15>>0]|0;HEAP8[$15+1>>0]=HEAP8[$_15+1>>0]|0;
 }
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_4iter17hc2a6bb80bbb4caf4E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17ha390683a8e7a3999E($0,$8,$10);
 STACKTOP = sp;return;
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hfe0f0905ee708670E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $_3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_3 = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;
 ;HEAP32[$_3>>2]=HEAP32[$self>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$0>>2]=HEAP32[$_3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_3+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h0467848ae076196cE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0;
 var $_0$i$i = 0, $_17 = 0, $arg0 = 0, $arg0$i = 0, $arg0$i$i = 0, $arg0$i$i$i = 0, $arg0$i1 = 0, $arg1$i$i = 0, $current$i = 0, $i$i$i = 0, $ptr = 0, $ptr$i$i = 0, $self = 0, $self$i = 0, $self$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17h4fdb3d81f52ee433E()|0);
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $self;
  $5 = HEAP32[$4>>2]|0;
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h655b73c3535dd54fE($5)|0);
  $6 = $self;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h655b73c3535dd54fE($8)|0);
 }
 $9 = $self;
 $10 = HEAP32[$9>>2]|0;
 $11 = $self;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==($13|0);
 if ($14) {
  $_0 = 0;
  $39 = $_0;
  STACKTOP = sp;return ($39|0);
 }
 $15 = $self;
 $arg0$i = $15;
 $16 = $arg0$i;
 $self$i = $16;
 $17 = $self$i;
 $18 = HEAP32[$17>>2]|0;
 $current$i = $18;
 $19 = $self$i;
 $20 = HEAP32[$19>>2]|0;
 $arg0$i$i = $20;
 $arg1$i$i = 1;
 $21 = $arg0$i$i;
 $self$i$i = $21;
 $22 = $arg1$i$i;
 $i$i$i = $22;
 $23 = $self$i$i;
 $ptr$i$i = $23;
 $24 = $ptr$i$i;
 $arg0$i$i$i = $24;
 $25 = (__ZN4core3mem7size_of17h4fdb3d81f52ee433E()|0);
 $26 = ($25|0)==(0);
 $27 = $ptr$i$i;
 $28 = $i$i$i;
 if ($26) {
  $29 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_15wrapping_offset17h97e0322aebd28d69E($27,$28)|0);
  $_0$i$i = $29;
 } else {
  $30 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h155c59c18c185264E($27,$28)|0);
  $_0$i$i = $30;
 }
 $31 = $_0$i$i;
 $32 = $self$i;
 HEAP32[$32>>2] = $31;
 $33 = $current$i;
 $ptr = $33;
 $34 = $ptr;
 $arg0$i1 = $34;
 $35 = (__ZN4core3mem7size_of17h4fdb3d81f52ee433E()|0);
 $36 = ($35|0)==(0);
 if ($36) {
  $_17 = (1);
 } else {
  $37 = $ptr;
  $_17 = $37;
 }
 $38 = $_17;
 $_0 = $38;
 $39 = $_0;
 STACKTOP = sp;return ($39|0);
}
function __ZN2ww8game_map22random_treasure_amount17h19f6638e496456eaE() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN2ww8platform10random_i3217he626159cc5ccf990E(10,110)|0);
 $1 = $0&255;
 return ($1|0);
}
function __ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_8 = 0, $arg0 = 0, $arg1 = 0, $r = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $r = $3;
 $4 = $r;
 $_8 = $4;
 $5 = $_8;
 $6 = (__ZN59__LT_ww__game_map__RoomId_u20_as_u20_ww__map__MapRoomId_GT_7room_id17h4869568c9e17f156E($5)|0);
 $7 = $self;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6>>>0)<($9>>>0);
 $11 = $10;
 if ($11) {
  $12 = $self;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($6<<5)|0);
  STACKTOP = sp;return ($14|0);
 } else {
  __ZN4core9panicking18panic_bounds_check17h196ab917033e60b3E(2548,$6,$9);
  // unreachable;
 }
 return (0)|0;
}
function __ZN59__LT_ww__game_map__RoomId_u20_as_u20_ww__map__MapRoomId_GT_7room_id17h4869568c9e17f156E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $_3 = $2;
 $3 = $_3;
 $4 = $3&255;
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3mem7size_of17h4fdb3d81f52ee433E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 1;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h655b73c3535dd54fE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr4null17h756ec861aef4c41fE()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_15wrapping_offset17h97e0322aebd28d69E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + ($5)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h155c59c18c185264E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + ($5)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3ptr4null17h756ec861aef4c41fE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17ha390683a8e7a3999E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_14 = 0, $arg0 = 0, $arg0$i = 0, $p = 0, $p1 = 0, $ptr = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = (__ZN4core3mem7size_of17h4fdb3d81f52ee433E()|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $p = (1);
 } else {
  $10 = HEAP32[$self>>2]|0;
  $11 = ((($self)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17h98a049d734d7fe0bE($10,$12)|0);
  $p1 = $13;
  $14 = $p1;
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h655b73c3535dd54fE($14)|0);
  $15 = $p1;
  $p = $15;
 }
 $16 = $p;
 $17 = $p;
 $ptr = $17;
 $18 = $ptr;
 $arg0$i = $18;
 $19 = (__ZN4core3mem7size_of17h4fdb3d81f52ee433E()|0);
 $20 = ($19|0)==(0);
 $21 = $ptr;
 $22 = HEAP32[$self>>2]|0;
 $23 = ((($self)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hc4716042582e0d83E($22,$24)|0);
 if ($20) {
  $26 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_15wrapping_offset17h97e0322aebd28d69E($21,$25)|0);
  $_14 = $26;
  HEAP32[$0>>2] = $16;
  $28 = $_14;
  $29 = ((($0)) + 4|0);
  HEAP32[$29>>2] = $28;
  STACKTOP = sp;return;
 } else {
  $27 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h155c59c18c185264E($21,$25)|0);
  $_14 = $27;
  HEAP32[$0>>2] = $16;
  $28 = $_14;
  $29 = ((($0)) + 4|0);
  HEAP32[$29>>2] = $28;
  STACKTOP = sp;return;
 }
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17h98a049d734d7fe0bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hc4716042582e0d83E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$transmute_temp>>2] = $7;
 $10 = ((($transmute_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($transmute_temp)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_5allot17h0c5f634df78f39d6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_13 = 0, $_17 = 0, $_18 = 0, $_30 = 0;
 var $_36 = 0, $abi_cast = 0, $allotter = 0, $arg = 0, $arg0 = 0, $arg1 = 0, $contents = 0, $iter = 0, $num_rooms = 0, $personalityslot = 0, $personalityslot$index1 = 0, $room = 0, $room_id = 0, $self = 0, $switch = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $abi_cast = sp + 84|0;
 $personalityslot = sp + 56|0;
 $arg = sp + 48|0;
 $tmp_ret = sp + 40|0;
 $_36 = sp + 32|0;
 $contents = sp + 24|0;
 $room_id = sp + 86|0;
 $_13 = sp + 16|0;
 $iter = sp + 8|0;
 $_10 = sp;
 $allotter = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $num_rooms = $3;
 $4 = $num_rooms;
 HEAP32[$_10>>2] = 0;
 $5 = ((($_10)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($_10)) + 4|0);
 $7 = HEAP32[$_10>>2]|0;
 $8 = HEAP32[$6>>2]|0;
 HEAP32[$arg>>2] = $7;
 $9 = ((($arg)) + 4|0);
 HEAP32[$9>>2] = $8;
 __THREW__ = 0;
 invoke_vii(145,($tmp_ret|0),($arg|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 L1: do {
  if (!($11)) {
   $12 = ((($tmp_ret)) + 4|0);
   $13 = HEAP32[$tmp_ret>>2]|0;
   $14 = HEAP32[$12>>2]|0;
   HEAP32[$iter>>2] = $13;
   $15 = ((($iter)) + 4|0);
   HEAP32[$15>>2] = $14;
   while(1) {
    __THREW__ = 0;
    invoke_vii(146,($_13|0),($iter|0));
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if ($17) {
     break L1;
    }
    $18 = HEAP32[$_13>>2]|0;
    $switch = ($18>>>0)<(1);
    if ($switch) {
     break;
    }
    while(1) {
     __THREW__ = 0;
     $19 = (invoke_i(147)|0);
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if ($21) {
      break L1;
     }
     HEAP8[$room_id>>0] = $19;
     __THREW__ = 0;
     $22 = (invoke_iii(148,($room_id|0),(9139|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if ($24) {
      break L1;
     }
     if ($22) {
      __THREW__ = 0;
      $30 = (invoke_iii(148,($room_id|0),(9141|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       break L1;
      }
      if ($30) {
       $_18 = 1;
      } else {
       label = 12;
      }
     } else {
      label = 12;
     }
     if ((label|0) == 12) {
      label = 0;
      $_18 = 0;
     }
     $33 = $_18;
     $34 = $33&1;
     if ($34) {
      __THREW__ = 0;
      $25 = (invoke_iii(148,($room_id|0),(9140|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       break L1;
      }
      if ($25) {
       $_17 = 1;
      } else {
       label = 8;
      }
     } else {
      label = 8;
     }
     if ((label|0) == 8) {
      label = 0;
      $_17 = 0;
     }
     $28 = $_17;
     $29 = $28&1;
     if (!($29)) {
      continue;
     }
     $35 = $self;
     $36 = HEAP8[$room_id>>0]|0;
     $_30 = $36;
     $37 = $_30;
     __THREW__ = 0;
     $38 = (invoke_iii(149,($35|0),($37|0))|0);
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      break L1;
     }
     $room = $38;
     $41 = $room;
     $42 = ((($41)) + 28|0);
     __THREW__ = 0;
     $43 = (invoke_ii(150,($42|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      break L1;
     }
     if ($43) {
      break;
     }
    }
    __THREW__ = 0;
    $46 = (invoke_ii(151,($allotter|0))|0);
    $47 = __THREW__; __THREW__ = 0;
    $48 = $47&1;
    if ($48) {
     break L1;
    }
    HEAP16[$abi_cast>>1] = $46;
    ;HEAP8[$contents>>0]=HEAP8[$abi_cast>>0]|0;HEAP8[$contents+1>>0]=HEAP8[$abi_cast+1>>0]|0;
    ;HEAP8[$_36>>0]=HEAP8[$contents>>0]|0;HEAP8[$_36+1>>0]=HEAP8[$contents+1>>0]|0;
    $49 = $room;
    $50 = ((($49)) + 28|0);
    HEAP8[$50>>0] = 1;
    $51 = ((($50)) + 1|0);
    ;HEAP8[$51>>0]=HEAP8[$_36>>0]|0;HEAP8[$51+1>>0]=HEAP8[$_36+1>>0]|0;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $52 = ___cxa_find_matching_catch_2()|0;
 $53 = tempRet0;
 HEAP32[$personalityslot>>2] = $52;
 $personalityslot$index1 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index1>>2] = $53;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17h1e622e95cbd3b5a1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;
 $2 = ((($arg0)) + 4|0);
 $3 = HEAP32[$arg0>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$self>>2] = $3;
 $5 = ((($self)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($self)) + 4|0);
 $7 = HEAP32[$self>>2]|0;
 $8 = HEAP32[$6>>2]|0;
 HEAP32[$0>>2] = $7;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN4core4iter5range86__LT_impl_u20_core__iter__iterator__Iterator_u20_for_u20_core__ops__Range_LT_A_GT__GT_4next17h94625b459dbe340eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_14 = 0, $arg0 = 0, $n = 0, $personalityslot = 0, $personalityslot$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp;
 $n = sp + 16|0;
 $arg0 = $1;
 $_14 = 0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = $self;
 $5 = ((($4)) + 4|0);
 $6 = (__ZN4core3cmp5impls57__LT_impl_u20_core__cmp__PartialOrd_u20_for_u20_usize_GT_2lt17h4f5e6388d854958bE($3,$5)|0);
 if (!($6)) {
  HEAP32[$0>>2] = 0;
  STACKTOP = sp;return;
 }
 $7 = $self;
 __THREW__ = 0;
 $8 = (invoke_ii(152,($7|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  HEAP32[$n>>2] = $8;
  $_14 = 1;
  $11 = $self;
  __THREW__ = 0;
  invoke_vii(153,($n|0),($11|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   $_14 = 0;
   $14 = HEAP32[$n>>2]|0;
   HEAP32[$0>>2] = 1;
   $15 = ((($0)) + 4|0);
   HEAP32[$15>>2] = $14;
   STACKTOP = sp;return;
  }
 }
 $16 = ___cxa_find_matching_catch_2()|0;
 $17 = tempRet0;
 HEAP32[$personalityslot>>2] = $16;
 $personalityslot$index4 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index4>>2] = $17;
 $18 = $_14;
 $19 = $18&1;
 if (!($19)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_14 = 0;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN2ww10sized_enum9SizedEnum6random17hce5291f2bea86cd9E() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_5 = 0, $_8 = 0, $_9 = 0, $abi_cast = 0, $r = 0, $switch1 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $abi_cast = sp + 8|0;
 $_5 = sp;
 $_9 = 0;
 while(1) {
  $0 = (__ZN66__LT_ww__game_map__RoomId_u20_as_u20_ww__sized_enum__SizedEnum_GT_4size17h72df2b376d876de1E()|0);
  $1 = (__ZN2ww8platform10random_i3217he626159cc5ccf990E(0,$0)|0);
  $r = $1;
  $2 = $r;
  $_9 = 1;
  $3 = (__ZN10num_traits4cast13FromPrimitive8from_i3217h5c93b9c75cae9d10E($2)|0);
  HEAP16[$abi_cast>>1] = $3;
  ;HEAP8[$_5>>0]=HEAP8[$abi_cast>>0]|0;HEAP8[$_5+1>>0]=HEAP8[$abi_cast+1>>0]|0;
  $4 = HEAP8[$_5>>0]|0;
  $switch1 = ($4&255)<(1);
  $_9 = 0;
  if (!($switch1)) {
   break;
  }
 }
 $5 = ((($_5)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $t = $6;
 $7 = $t;
 $_8 = $7;
 $8 = $_8;
 $_0 = $8;
 $9 = $_0;
 STACKTOP = sp;return ($9|0);
}
function __ZN4core3cmp9PartialEq2ne17hf809d2c016605710E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $other = $3;
 $4 = $self;
 $5 = $other;
 $6 = (__ZN61__LT_ww__game_map__RoomId_u20_as_u20_core__cmp__PartialEq_GT_2eq17h4c065c1128a6f94aE($4,$5)|0);
 $7 = $6 ^ 1;
 STACKTOP = sp;return ($7|0);
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_7is_none17h7f8ef4053ac9d840E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_7is_some17h3ee152df9fd2eff5E($2)|0);
 $4 = $3 ^ 1;
 STACKTOP = sp;return ($4|0);
}
function __ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_12allot_terror28__u7b__u7b_closure_u7d__u7d_17h56e6af1c5d503b28E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_0 = 0, $_2 = 0, $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp;
 $arg0 = $0;
 $1 = (__ZN2ww10sized_enum9SizedEnum6random17h555d18fc55129225E()|0);
 $_2 = $1;
 HEAP8[$_0>>0] = 1;
 $2 = $_2;
 $3 = ((($_0)) + 1|0);
 HEAP8[$3>>0] = $2;
 $4 = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
 STACKTOP = sp;return ($4|0);
}
function __ZN2ww10sized_enum9SizedEnum6random17h555d18fc55129225E() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_5 = 0, $_8 = 0, $_9 = 0, $abi_cast = 0, $r = 0, $switch1 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $abi_cast = sp + 8|0;
 $_5 = sp;
 $_9 = 0;
 while(1) {
  $0 = (__ZN69__LT_ww__monsters__MonsterId_u20_as_u20_ww__sized_enum__SizedEnum_GT_4size17h9aec3e4bcf176739E()|0);
  $1 = (__ZN2ww8platform10random_i3217he626159cc5ccf990E(0,$0)|0);
  $r = $1;
  $2 = $r;
  $_9 = 1;
  $3 = (__ZN10num_traits4cast13FromPrimitive8from_i3217h161890258bc51ef7E($2)|0);
  HEAP16[$abi_cast>>1] = $3;
  ;HEAP8[$_5>>0]=HEAP8[$abi_cast>>0]|0;HEAP8[$_5+1>>0]=HEAP8[$abi_cast+1>>0]|0;
  $4 = HEAP8[$_5>>0]|0;
  $switch1 = ($4&255)<(1);
  $_9 = 0;
  if (!($switch1)) {
   break;
  }
 }
 $5 = ((($_5)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $t = $6;
 $7 = $t;
 $_8 = $7;
 $8 = $_8;
 $_0 = $8;
 $9 = $_0;
 STACKTOP = sp;return ($9|0);
}
function __ZN69__LT_ww__monsters__MonsterId_u20_as_u20_ww__sized_enum__SizedEnum_GT_4size17h9aec3e4bcf176739E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10num_traits4cast13FromPrimitive8from_i3217h161890258bc51ef7E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $abi_cast = 0, $arg0 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $abi_cast = sp + 12|0;
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $n = $1;
 $2 = $n;
 $3 = ($2|0)<(0);
 $4 = $3 << 31 >> 31;
 $5 = (__ZN75__LT_ww__monsters__MonsterId_u20_as_u20_num_traits__cast__FromPrimitive_GT_8from_i6417h29c0e7e8e5338018E($2,$4)|0);
 HEAP16[$abi_cast>>1] = $5;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;HEAP8[$_0+1>>0]=HEAP8[$abi_cast+1>>0]|0;
 $6 = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
 STACKTOP = sp;return ($6|0);
}
function __ZN75__LT_ww__monsters__MonsterId_u20_as_u20_num_traits__cast__FromPrimitive_GT_8from_i6417h29c0e7e8e5338018E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_11 = 0, $_12 = 0, $_16 = 0, $_17 = 0, $_21 = 0, $_22 = 0, $_6 = 0, $_7 = 0, $arg0 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $n = sp + 16|0;
 $_0 = sp + 8|0;
 $arg0 = sp;
 $2 = $arg0;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = $arg0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $n;
 $13 = $12;
 HEAP32[$13>>2] = $8;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = $n;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $_6 = 0;
 $22 = $_6;
 $23 = $22&255;
 $24 = ($18|0)==($23|0);
 $25 = ($21|0)==(0);
 $26 = $24 & $25;
 if ($26) {
  $_7 = 0;
  HEAP8[$_0>>0] = 1;
  $27 = $_7;
  $28 = ((($_0)) + 1|0);
  HEAP8[$28>>0] = $27;
  $68 = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
  STACKTOP = sp;return ($68|0);
 }
 $29 = $n;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $_11 = 1;
 $35 = $_11;
 $36 = $35&255;
 $37 = ($31|0)==($36|0);
 $38 = ($34|0)==(0);
 $39 = $37 & $38;
 if ($39) {
  $_12 = 1;
  HEAP8[$_0>>0] = 1;
  $40 = $_12;
  $41 = ((($_0)) + 1|0);
  HEAP8[$41>>0] = $40;
  $68 = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
  STACKTOP = sp;return ($68|0);
 }
 $42 = $n;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $_16 = 2;
 $48 = $_16;
 $49 = $48&255;
 $50 = ($44|0)==($49|0);
 $51 = ($47|0)==(0);
 $52 = $50 & $51;
 if ($52) {
  $_17 = 2;
  HEAP8[$_0>>0] = 1;
  $53 = $_17;
  $54 = ((($_0)) + 1|0);
  HEAP8[$54>>0] = $53;
  $68 = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
  STACKTOP = sp;return ($68|0);
 }
 $55 = $n;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = (($55) + 4)|0;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $_21 = 3;
 $61 = $_21;
 $62 = $61&255;
 $63 = ($57|0)==($62|0);
 $64 = ($60|0)==(0);
 $65 = $63 & $64;
 if ($65) {
  $_22 = 3;
  HEAP8[$_0>>0] = 1;
  $66 = $_22;
  $67 = ((($_0)) + 1|0);
  HEAP8[$67>>0] = $66;
  $68 = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
  STACKTOP = sp;return ($68|0);
 } else {
  HEAP8[$_0>>0] = 0;
  $68 = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
  STACKTOP = sp;return ($68|0);
 }
 return (0)|0;
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_7is_some17h3ee152df9fd2eff5E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_0 = 0, $arg0 = 0, $self = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP8[$2>>0]|0;
 $switch = ($3&255)<(1);
 if ($switch) {
  $_0 = 0;
 } else {
  $_0 = 1;
 }
 $4 = $_0;
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function __ZN61__LT_ww__game_map__RoomId_u20_as_u20_core__cmp__PartialEq_GT_2eq17h4c065c1128a6f94aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_13 = 0;
 var $_17 = 0, $__arg_0 = 0, $__arg_1_vi = 0, $__self_vi = 0, $arg0 = 0, $arg1 = 0, $self = 0, $tmp_ret = 0, $tmp_ret1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $tmp_ret1 = sp + 16|0;
 $tmp_ret = sp + 8|0;
 $_17 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $__arg_0 = $3;
 $4 = $self;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $tmp_ret;
 $8 = $7;
 HEAP32[$8>>2] = $6;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = $tmp_ret;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $__self_vi = $13;
 $17 = $__arg_0;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $tmp_ret1;
 $21 = $20;
 HEAP32[$21>>2] = $19;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = 0;
 $24 = $tmp_ret1;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $__arg_1_vi = $26;
 $30 = $__self_vi;
 $31 = $__arg_1_vi;
 $32 = ($30|0)==($31|0);
 if ($32) {
  $_13 = 1;
 } else {
  $_13 = 0;
 }
 $33 = $_13;
 $34 = $33&1;
 if ($34) {
  $35 = $self;
  $36 = $__arg_0;
  HEAP32[$_17>>2] = $35;
  $37 = ((($_17)) + 4|0);
  HEAP32[$37>>2] = $36;
  $_0 = 1;
  $38 = $_0;
  $39 = $38&1;
  STACKTOP = sp;return ($39|0);
 } else {
  $_0 = 0;
  $38 = $_0;
  $39 = $38&1;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function __ZN10num_traits4cast13FromPrimitive8from_i3217h5c93b9c75cae9d10E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $abi_cast = 0, $arg0 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $abi_cast = sp + 12|0;
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $n = $1;
 $2 = $n;
 $3 = ($2|0)<(0);
 $4 = $3 << 31 >> 31;
 $5 = (__ZN72__LT_ww__game_map__RoomId_u20_as_u20_num_traits__cast__FromPrimitive_GT_8from_i6417h2b5742fe9ba59d7bE($2,$4)|0);
 HEAP16[$abi_cast>>1] = $5;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;HEAP8[$_0+1>>0]=HEAP8[$abi_cast+1>>0]|0;
 $6 = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
 STACKTOP = sp;return ($6|0);
}
function __ZN72__LT_ww__game_map__RoomId_u20_as_u20_num_traits__cast__FromPrimitive_GT_8from_i6417h2b5742fe9ba59d7bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $_0 = 0, $_11 = 0, $_12 = 0, $_16 = 0, $_17 = 0, $_21 = 0, $_22 = 0, $_26 = 0, $_27 = 0, $_31 = 0, $_32 = 0, $_36 = 0, $_37 = 0, $_41 = 0, $_42 = 0, $_46 = 0, $_47 = 0, $_51 = 0;
 var $_52 = 0, $_56 = 0, $_57 = 0, $_6 = 0, $_61 = 0, $_62 = 0, $_66 = 0, $_67 = 0, $_7 = 0, $_71 = 0, $_72 = 0, $_76 = 0, $_77 = 0, $_81 = 0, $_82 = 0, $_86 = 0, $_87 = 0, $_91 = 0, $_92 = 0, $_96 = 0;
 var $_97 = 0, $arg0 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $n = sp + 16|0;
 $_0 = sp + 8|0;
 $arg0 = sp;
 $2 = $arg0;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = $arg0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $n;
 $13 = $12;
 HEAP32[$13>>2] = $8;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = $n;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $_6 = 0;
 $22 = $_6;
 $23 = $22&255;
 $24 = ($18|0)==($23|0);
 $25 = ($21|0)==(0);
 $26 = $24 & $25;
 do {
  if ($26) {
   $_7 = 0;
   HEAP8[$_0>>0] = 1;
   $27 = $_7;
   $28 = ((($_0)) + 1|0);
   HEAP8[$28>>0] = $27;
  } else {
   $29 = $n;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = (($29) + 4)|0;
   $33 = $32;
   $34 = HEAP32[$33>>2]|0;
   $_11 = 1;
   $35 = $_11;
   $36 = $35&255;
   $37 = ($31|0)==($36|0);
   $38 = ($34|0)==(0);
   $39 = $37 & $38;
   if ($39) {
    $_12 = 1;
    HEAP8[$_0>>0] = 1;
    $40 = $_12;
    $41 = ((($_0)) + 1|0);
    HEAP8[$41>>0] = $40;
    break;
   }
   $42 = $n;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (($42) + 4)|0;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $_16 = 2;
   $48 = $_16;
   $49 = $48&255;
   $50 = ($44|0)==($49|0);
   $51 = ($47|0)==(0);
   $52 = $50 & $51;
   if ($52) {
    $_17 = 2;
    HEAP8[$_0>>0] = 1;
    $53 = $_17;
    $54 = ((($_0)) + 1|0);
    HEAP8[$54>>0] = $53;
    break;
   }
   $55 = $n;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 4)|0;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $_21 = 3;
   $61 = $_21;
   $62 = $61&255;
   $63 = ($57|0)==($62|0);
   $64 = ($60|0)==(0);
   $65 = $63 & $64;
   if ($65) {
    $_22 = 3;
    HEAP8[$_0>>0] = 1;
    $66 = $_22;
    $67 = ((($_0)) + 1|0);
    HEAP8[$67>>0] = $66;
    break;
   }
   $68 = $n;
   $69 = $68;
   $70 = HEAP32[$69>>2]|0;
   $71 = (($68) + 4)|0;
   $72 = $71;
   $73 = HEAP32[$72>>2]|0;
   $_26 = 4;
   $74 = $_26;
   $75 = $74&255;
   $76 = ($70|0)==($75|0);
   $77 = ($73|0)==(0);
   $78 = $76 & $77;
   if ($78) {
    $_27 = 4;
    HEAP8[$_0>>0] = 1;
    $79 = $_27;
    $80 = ((($_0)) + 1|0);
    HEAP8[$80>>0] = $79;
    break;
   }
   $81 = $n;
   $82 = $81;
   $83 = HEAP32[$82>>2]|0;
   $84 = (($81) + 4)|0;
   $85 = $84;
   $86 = HEAP32[$85>>2]|0;
   $_31 = 5;
   $87 = $_31;
   $88 = $87&255;
   $89 = ($83|0)==($88|0);
   $90 = ($86|0)==(0);
   $91 = $89 & $90;
   if ($91) {
    $_32 = 5;
    HEAP8[$_0>>0] = 1;
    $92 = $_32;
    $93 = ((($_0)) + 1|0);
    HEAP8[$93>>0] = $92;
    break;
   }
   $94 = $n;
   $95 = $94;
   $96 = HEAP32[$95>>2]|0;
   $97 = (($94) + 4)|0;
   $98 = $97;
   $99 = HEAP32[$98>>2]|0;
   $_36 = 6;
   $100 = $_36;
   $101 = $100&255;
   $102 = ($96|0)==($101|0);
   $103 = ($99|0)==(0);
   $104 = $102 & $103;
   if ($104) {
    $_37 = 6;
    HEAP8[$_0>>0] = 1;
    $105 = $_37;
    $106 = ((($_0)) + 1|0);
    HEAP8[$106>>0] = $105;
    break;
   }
   $107 = $n;
   $108 = $107;
   $109 = HEAP32[$108>>2]|0;
   $110 = (($107) + 4)|0;
   $111 = $110;
   $112 = HEAP32[$111>>2]|0;
   $_41 = 7;
   $113 = $_41;
   $114 = $113&255;
   $115 = ($109|0)==($114|0);
   $116 = ($112|0)==(0);
   $117 = $115 & $116;
   if ($117) {
    $_42 = 7;
    HEAP8[$_0>>0] = 1;
    $118 = $_42;
    $119 = ((($_0)) + 1|0);
    HEAP8[$119>>0] = $118;
    break;
   }
   $120 = $n;
   $121 = $120;
   $122 = HEAP32[$121>>2]|0;
   $123 = (($120) + 4)|0;
   $124 = $123;
   $125 = HEAP32[$124>>2]|0;
   $_46 = 8;
   $126 = $_46;
   $127 = $126&255;
   $128 = ($122|0)==($127|0);
   $129 = ($125|0)==(0);
   $130 = $128 & $129;
   if ($130) {
    $_47 = 8;
    HEAP8[$_0>>0] = 1;
    $131 = $_47;
    $132 = ((($_0)) + 1|0);
    HEAP8[$132>>0] = $131;
    break;
   }
   $133 = $n;
   $134 = $133;
   $135 = HEAP32[$134>>2]|0;
   $136 = (($133) + 4)|0;
   $137 = $136;
   $138 = HEAP32[$137>>2]|0;
   $_51 = 9;
   $139 = $_51;
   $140 = $139&255;
   $141 = ($135|0)==($140|0);
   $142 = ($138|0)==(0);
   $143 = $141 & $142;
   if ($143) {
    $_52 = 9;
    HEAP8[$_0>>0] = 1;
    $144 = $_52;
    $145 = ((($_0)) + 1|0);
    HEAP8[$145>>0] = $144;
    break;
   }
   $146 = $n;
   $147 = $146;
   $148 = HEAP32[$147>>2]|0;
   $149 = (($146) + 4)|0;
   $150 = $149;
   $151 = HEAP32[$150>>2]|0;
   $_56 = 10;
   $152 = $_56;
   $153 = $152&255;
   $154 = ($148|0)==($153|0);
   $155 = ($151|0)==(0);
   $156 = $154 & $155;
   if ($156) {
    $_57 = 10;
    HEAP8[$_0>>0] = 1;
    $157 = $_57;
    $158 = ((($_0)) + 1|0);
    HEAP8[$158>>0] = $157;
    break;
   }
   $159 = $n;
   $160 = $159;
   $161 = HEAP32[$160>>2]|0;
   $162 = (($159) + 4)|0;
   $163 = $162;
   $164 = HEAP32[$163>>2]|0;
   $_61 = 11;
   $165 = $_61;
   $166 = $165&255;
   $167 = ($161|0)==($166|0);
   $168 = ($164|0)==(0);
   $169 = $167 & $168;
   if ($169) {
    $_62 = 11;
    HEAP8[$_0>>0] = 1;
    $170 = $_62;
    $171 = ((($_0)) + 1|0);
    HEAP8[$171>>0] = $170;
    break;
   }
   $172 = $n;
   $173 = $172;
   $174 = HEAP32[$173>>2]|0;
   $175 = (($172) + 4)|0;
   $176 = $175;
   $177 = HEAP32[$176>>2]|0;
   $_66 = 12;
   $178 = $_66;
   $179 = $178&255;
   $180 = ($174|0)==($179|0);
   $181 = ($177|0)==(0);
   $182 = $180 & $181;
   if ($182) {
    $_67 = 12;
    HEAP8[$_0>>0] = 1;
    $183 = $_67;
    $184 = ((($_0)) + 1|0);
    HEAP8[$184>>0] = $183;
    break;
   }
   $185 = $n;
   $186 = $185;
   $187 = HEAP32[$186>>2]|0;
   $188 = (($185) + 4)|0;
   $189 = $188;
   $190 = HEAP32[$189>>2]|0;
   $_71 = 13;
   $191 = $_71;
   $192 = $191&255;
   $193 = ($187|0)==($192|0);
   $194 = ($190|0)==(0);
   $195 = $193 & $194;
   if ($195) {
    $_72 = 13;
    HEAP8[$_0>>0] = 1;
    $196 = $_72;
    $197 = ((($_0)) + 1|0);
    HEAP8[$197>>0] = $196;
    break;
   }
   $198 = $n;
   $199 = $198;
   $200 = HEAP32[$199>>2]|0;
   $201 = (($198) + 4)|0;
   $202 = $201;
   $203 = HEAP32[$202>>2]|0;
   $_76 = 14;
   $204 = $_76;
   $205 = $204&255;
   $206 = ($200|0)==($205|0);
   $207 = ($203|0)==(0);
   $208 = $206 & $207;
   if ($208) {
    $_77 = 14;
    HEAP8[$_0>>0] = 1;
    $209 = $_77;
    $210 = ((($_0)) + 1|0);
    HEAP8[$210>>0] = $209;
    break;
   }
   $211 = $n;
   $212 = $211;
   $213 = HEAP32[$212>>2]|0;
   $214 = (($211) + 4)|0;
   $215 = $214;
   $216 = HEAP32[$215>>2]|0;
   $_81 = 15;
   $217 = $_81;
   $218 = $217&255;
   $219 = ($213|0)==($218|0);
   $220 = ($216|0)==(0);
   $221 = $219 & $220;
   if ($221) {
    $_82 = 15;
    HEAP8[$_0>>0] = 1;
    $222 = $_82;
    $223 = ((($_0)) + 1|0);
    HEAP8[$223>>0] = $222;
    break;
   }
   $224 = $n;
   $225 = $224;
   $226 = HEAP32[$225>>2]|0;
   $227 = (($224) + 4)|0;
   $228 = $227;
   $229 = HEAP32[$228>>2]|0;
   $_86 = 16;
   $230 = $_86;
   $231 = $230&255;
   $232 = ($226|0)==($231|0);
   $233 = ($229|0)==(0);
   $234 = $232 & $233;
   if ($234) {
    $_87 = 16;
    HEAP8[$_0>>0] = 1;
    $235 = $_87;
    $236 = ((($_0)) + 1|0);
    HEAP8[$236>>0] = $235;
    break;
   }
   $237 = $n;
   $238 = $237;
   $239 = HEAP32[$238>>2]|0;
   $240 = (($237) + 4)|0;
   $241 = $240;
   $242 = HEAP32[$241>>2]|0;
   $_91 = 17;
   $243 = $_91;
   $244 = $243&255;
   $245 = ($239|0)==($244|0);
   $246 = ($242|0)==(0);
   $247 = $245 & $246;
   if ($247) {
    $_92 = 17;
    HEAP8[$_0>>0] = 1;
    $248 = $_92;
    $249 = ((($_0)) + 1|0);
    HEAP8[$249>>0] = $248;
    break;
   }
   $250 = $n;
   $251 = $250;
   $252 = HEAP32[$251>>2]|0;
   $253 = (($250) + 4)|0;
   $254 = $253;
   $255 = HEAP32[$254>>2]|0;
   $_96 = 18;
   $256 = $_96;
   $257 = $256&255;
   $258 = ($252|0)==($257|0);
   $259 = ($255|0)==(0);
   $260 = $258 & $259;
   if ($260) {
    $_97 = 18;
    HEAP8[$_0>>0] = 1;
    $261 = $_97;
    $262 = ((($_0)) + 1|0);
    HEAP8[$262>>0] = $261;
    break;
   } else {
    HEAP8[$_0>>0] = 0;
    break;
   }
  }
 } while(0);
 $263 = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
 STACKTOP = sp;return ($263|0);
}
function __ZN4core3cmp5impls57__LT_impl_u20_core__cmp__PartialOrd_u20_for_u20_usize_GT_2lt17h4f5e6388d854958bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arg0 = 0, $arg1 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $other = $3;
 $4 = $self;
 $5 = HEAP32[$4>>2]|0;
 $6 = $other;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)<($7>>>0);
 STACKTOP = sp;return ($8|0);
}
function __ZN49__LT_usize_u20_as_u20_core__iter__range__Step_GT_7add_one17he2c185f5fc4c785eE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZN40__LT_usize_u20_as_u20_core__ops__Add_GT_3add17he7a7948edb851815E($3,1)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3mem4swap17h7f94d753ca8668c1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_27 = 0;
 var $arg0 = 0, $arg1 = 0, $personalityslot = 0, $personalityslot$index4 = 0, $t = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp;
 $t = sp + 24|0;
 $arg0 = $0;
 $arg1 = $1;
 $_27 = 0;
 $2 = $arg0;
 $x = $2;
 $3 = $arg1;
 $y = $3;
 __THREW__ = 0;
 $4 = (invoke_i(154)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  HEAP32[$t>>2] = $4;
  $_27 = 1;
  $7 = $x;
  ;HEAP32[$t>>2]=HEAP32[$7>>2]|0;
  $8 = $y;
  $9 = $x;
  ;HEAP32[$9>>2]=HEAP32[$8>>2]|0;
  $10 = $y;
  ;HEAP32[$10>>2]=HEAP32[$t>>2]|0;
  $_27 = 0;
  $11 = HEAP32[$t>>2]|0;
  __THREW__ = 0;
  invoke_vi(155,($11|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   STACKTOP = sp;return;
  }
 }
 $14 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 HEAP32[$personalityslot>>2] = $14;
 $personalityslot$index4 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index4>>2] = $15;
 $16 = $_27;
 $17 = $16&1;
 if (!($17)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_27 = 0;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4core3mem13uninitialized17h5120c7d82f5fc734E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem6forget17h2d0708ed624e1e9dE($0) {
 $0 = $0|0;
 var $1 = 0, $arg0 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $t = $1;
 STACKTOP = sp;return;
}
function __ZN40__LT_usize_u20_as_u20_core__ops__Add_GT_3add17he7a7948edb851815E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$overflow = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $arg1 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $other = $3;
 $4 = $self;
 $5 = $other;
 $$arith = (($4) + ($5))|0;
 $$overflow = ($$arith>>>0)<($4>>>0);
 $6 = $$overflow;
 if ($6) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(2560);
  // unreachable;
 } else {
  STACKTOP = sp;return ($$arith|0);
 }
 return (0)|0;
}
function __ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_5allot17h53b46bbb136b8df9E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_13 = 0, $_17 = 0, $_18 = 0, $_30 = 0;
 var $_36 = 0, $abi_cast = 0, $allotter = 0, $arg = 0, $arg0 = 0, $arg1 = 0, $contents = 0, $iter = 0, $num_rooms = 0, $personalityslot = 0, $personalityslot$index1 = 0, $room = 0, $room_id = 0, $self = 0, $switch = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $abi_cast = sp + 84|0;
 $personalityslot = sp + 56|0;
 $arg = sp + 48|0;
 $tmp_ret = sp + 40|0;
 $_36 = sp + 32|0;
 $contents = sp + 24|0;
 $room_id = sp + 86|0;
 $_13 = sp + 16|0;
 $iter = sp + 8|0;
 $_10 = sp;
 $allotter = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $num_rooms = $3;
 $4 = $num_rooms;
 HEAP32[$_10>>2] = 0;
 $5 = ((($_10)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($_10)) + 4|0);
 $7 = HEAP32[$_10>>2]|0;
 $8 = HEAP32[$6>>2]|0;
 HEAP32[$arg>>2] = $7;
 $9 = ((($arg)) + 4|0);
 HEAP32[$9>>2] = $8;
 __THREW__ = 0;
 invoke_vii(145,($tmp_ret|0),($arg|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 L1: do {
  if (!($11)) {
   $12 = ((($tmp_ret)) + 4|0);
   $13 = HEAP32[$tmp_ret>>2]|0;
   $14 = HEAP32[$12>>2]|0;
   HEAP32[$iter>>2] = $13;
   $15 = ((($iter)) + 4|0);
   HEAP32[$15>>2] = $14;
   while(1) {
    __THREW__ = 0;
    invoke_vii(146,($_13|0),($iter|0));
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if ($17) {
     break L1;
    }
    $18 = HEAP32[$_13>>2]|0;
    $switch = ($18>>>0)<(1);
    if ($switch) {
     break;
    }
    while(1) {
     __THREW__ = 0;
     $19 = (invoke_i(147)|0);
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if ($21) {
      break L1;
     }
     HEAP8[$room_id>>0] = $19;
     __THREW__ = 0;
     $22 = (invoke_iii(148,($room_id|0),(9139|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if ($24) {
      break L1;
     }
     if ($22) {
      __THREW__ = 0;
      $30 = (invoke_iii(148,($room_id|0),(9141|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       break L1;
      }
      if ($30) {
       $_18 = 1;
      } else {
       label = 12;
      }
     } else {
      label = 12;
     }
     if ((label|0) == 12) {
      label = 0;
      $_18 = 0;
     }
     $33 = $_18;
     $34 = $33&1;
     if ($34) {
      __THREW__ = 0;
      $25 = (invoke_iii(148,($room_id|0),(9140|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       break L1;
      }
      if ($25) {
       $_17 = 1;
      } else {
       label = 8;
      }
     } else {
      label = 8;
     }
     if ((label|0) == 8) {
      label = 0;
      $_17 = 0;
     }
     $28 = $_17;
     $29 = $28&1;
     if (!($29)) {
      continue;
     }
     $35 = $self;
     $36 = HEAP8[$room_id>>0]|0;
     $_30 = $36;
     $37 = $_30;
     __THREW__ = 0;
     $38 = (invoke_iii(149,($35|0),($37|0))|0);
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      break L1;
     }
     $room = $38;
     $41 = $room;
     $42 = ((($41)) + 28|0);
     __THREW__ = 0;
     $43 = (invoke_ii(150,($42|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      break L1;
     }
     if ($43) {
      break;
     }
    }
    __THREW__ = 0;
    $46 = (invoke_ii(156,($allotter|0))|0);
    $47 = __THREW__; __THREW__ = 0;
    $48 = $47&1;
    if ($48) {
     break L1;
    }
    HEAP16[$abi_cast>>1] = $46;
    ;HEAP8[$contents>>0]=HEAP8[$abi_cast>>0]|0;HEAP8[$contents+1>>0]=HEAP8[$abi_cast+1>>0]|0;
    ;HEAP8[$_36>>0]=HEAP8[$contents>>0]|0;HEAP8[$_36+1>>0]=HEAP8[$contents+1>>0]|0;
    $49 = $room;
    $50 = ((($49)) + 28|0);
    HEAP8[$50>>0] = 1;
    $51 = ((($50)) + 1|0);
    ;HEAP8[$51>>0]=HEAP8[$_36>>0]|0;HEAP8[$51+1>>0]=HEAP8[$_36+1>>0]|0;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $52 = ___cxa_find_matching_catch_2()|0;
 $53 = tempRet0;
 HEAP32[$personalityslot>>2] = $52;
 $personalityslot$index1 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index1>>2] = $53;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_14allot_treasure28__u7b__u7b_closure_u7d__u7d_17h7f6cfd25a6a136ecE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_0 = 0, $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp;
 $arg0 = $0;
 $1 = (__ZN2ww8game_map22random_treasure_amount17h19f6638e496456eaE()|0);
 HEAP8[$_0>>0] = 0;
 $2 = ((($_0)) + 1|0);
 HEAP8[$2>>0] = $1;
 $3 = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
 STACKTOP = sp;return ($3|0);
}
function __ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8describe17hb06c7154f5787c50E($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_20 = 0, $_25 = 0, $_26 = 0, $_9 = 0, $__arg0 = 0, $__arg1 = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0;
 var $desc = 0, $left_val = 0, $name = 0, $right_val = 0, $self = 0, $tmp_ret = 0, $tmp_ret1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $tmp_ret1 = sp + 96|0;
 $tmp_ret = sp + 88|0;
 $_26 = sp + 80|0;
 $_25 = sp + 64|0;
 $_20 = sp + 40|0;
 $right_val = sp + 116|0;
 $left_val = sp + 112|0;
 $_9 = sp + 32|0;
 $desc = sp + 24|0;
 $name = sp + 16|0;
 $arg2 = sp + 8|0;
 $arg1 = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $5 = ((($arg1)) + 4|0);
 HEAP32[$5>>2] = $2;
 HEAP32[$arg2>>2] = $3;
 $6 = ((($arg2)) + 4|0);
 HEAP32[$6>>2] = $4;
 $7 = $arg0;
 $self = $7;
 $8 = HEAP32[$arg1>>2]|0;
 $9 = ((($arg1)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$name>>2] = $8;
 $11 = ((($name)) + 4|0);
 HEAP32[$11>>2] = $10;
 $12 = HEAP32[$arg2>>2]|0;
 $13 = ((($arg2)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$desc>>2] = $12;
 $15 = ((($desc)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = $self;
 $17 = ((($16)) + 12|0);
 HEAP32[$_9>>2] = $17;
 $18 = ((($_9)) + 4|0);
 HEAP32[$18>>2] = 2604;
 $19 = HEAP32[$_9>>2]|0;
 HEAP32[$left_val>>2] = $19;
 $20 = ((($_9)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$right_val>>2] = $21;
 $22 = HEAP32[$left_val>>2]|0;
 $23 = HEAP32[$right_val>>2]|0;
 $24 = (__ZN4core3cmp5impls91__LT_impl_u20_core__cmp__PartialEq_LT__RF__u27_b_u20_B_GT__u20_for_u20__RF__u27_a_u20_A_GT_2eq17hdabca33c5847e2deE($22,$23)|0);
 $25 = $24 ^ 1;
 if ($25) {
  $26 = HEAP32[577]|0;
  $27 = HEAP32[(2312)>>2]|0;
  HEAP32[$_26>>2] = $left_val;
  $28 = ((($_26)) + 4|0);
  HEAP32[$28>>2] = $right_val;
  $29 = HEAP32[$_26>>2]|0;
  $__arg0 = $29;
  $30 = ((($_26)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $__arg1 = $31;
  $32 = $__arg0;
  __ZN4core3fmt10ArgumentV13new17h7f06547f008c6718E($tmp_ret,$32,157);
  $33 = ((($tmp_ret)) + 4|0);
  $34 = HEAP32[$tmp_ret>>2]|0;
  $35 = HEAP32[$33>>2]|0;
  $36 = $__arg1;
  __ZN4core3fmt10ArgumentV13new17h7f06547f008c6718E($tmp_ret1,$36,157);
  $37 = ((($tmp_ret1)) + 4|0);
  $38 = HEAP32[$tmp_ret1>>2]|0;
  $39 = HEAP32[$37>>2]|0;
  HEAP32[$_25>>2] = $34;
  $40 = ((($_25)) + 4|0);
  HEAP32[$40>>2] = $35;
  $41 = ((($_25)) + 8|0);
  HEAP32[$41>>2] = $38;
  $42 = ((($41)) + 4|0);
  HEAP32[$42>>2] = $39;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_20,$26,$27,$_25,2);
  __ZN3std9panicking15begin_panic_fmt17h089a948b9fd65060E($_20,2296);
  // unreachable;
 } else {
  $43 = HEAP32[$name>>2]|0;
  $44 = ((($name)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $self;
  $47 = ((($46)) + 12|0);
  HEAP32[$47>>2] = $43;
  $48 = ((($47)) + 4|0);
  HEAP32[$48>>2] = $45;
  $49 = HEAP32[$desc>>2]|0;
  $50 = ((($desc)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $self;
  $53 = ((($52)) + 20|0);
  HEAP32[$53>>2] = $49;
  $54 = ((($53)) + 4|0);
  HEAP32[$54>>2] = $51;
  $55 = $self;
  STACKTOP = sp;return ($55|0);
 }
 return (0)|0;
}
function __ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_7connect17hfb66dafd3997a55eE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $_14 = 0, $_15 = 0, $_16 = 0, $_21 = 0, $_22 = 0, $_23 = 0, $_24 = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $arg3 = 0, $d = 0, $from = 0, $self = 0, $to = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $arg3 = $3;
 $4 = $arg0;
 $self = $4;
 $5 = $arg1;
 $from = $5;
 $6 = $arg2;
 $d = $6;
 $7 = $arg3;
 $to = $7;
 $8 = $self;
 $9 = $from;
 $_14 = $9;
 $10 = $_14;
 $11 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($8,$10)|0);
 $12 = $d;
 $_15 = $12;
 $13 = $to;
 $_16 = $13;
 $14 = $_15;
 $15 = $_16;
 (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8set_exit17h946e5e6eb063b022E($11,$14,$15)|0);
 $16 = $self;
 $17 = $to;
 $_21 = $17;
 $18 = $_21;
 $19 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($16,$18)|0);
 $20 = $d;
 $_23 = $20;
 $21 = $_23;
 $22 = (__ZN2ww9direction9Direction8opposite17h5f90d22cd00065a9E($21)|0);
 $_22 = $22;
 $23 = $from;
 $_24 = $23;
 $24 = $_22;
 $25 = $_24;
 (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8set_exit17h946e5e6eb063b022E($19,$24,$25)|0);
 $26 = $self;
 STACKTOP = sp;return ($26|0);
}
function __ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8set_exit17h946e5e6eb063b022E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $_13 = 0, $_18 = 0, $_20 = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $d = 0, $r = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $d = $4;
 $5 = $arg2;
 $r = $5;
 $6 = $d;
 $_13 = $6;
 $7 = $_13;
 $8 = $7&255;
 $9 = ($8>>>0)<(6);
 $10 = $9;
 if (!($10)) {
  __ZN4core9panicking18panic_bounds_check17h196ab917033e60b3E(2580,$8,6);
  // unreachable;
 }
 $11 = $self;
 $12 = (($11) + ($8<<1)|0);
 $13 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_7is_none17hdeb68b0889d70831E($12)|0);
 $14 = $13 ^ 1;
 if ($14) {
  __ZN3std9panicking11begin_panic17hf72be10d610fdcf9E(11896,50,2580);
  // unreachable;
 }
 $15 = $r;
 $_18 = $15;
 $16 = $d;
 $_20 = $16;
 $17 = $_20;
 $18 = $17&255;
 $19 = ($18>>>0)<(6);
 $20 = $19;
 if ($20) {
  $21 = $self;
  $22 = (($21) + ($18<<1)|0);
  HEAP8[$22>>0] = 1;
  $23 = $_18;
  $24 = ((($22)) + 1|0);
  HEAP8[$24>>0] = $23;
  $25 = $self;
  STACKTOP = sp;return ($25|0);
 } else {
  __ZN4core9panicking18panic_bounds_check17h196ab917033e60b3E(2592,$18,6);
  // unreachable;
 }
 return (0)|0;
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_7is_none17hdeb68b0889d70831E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_7is_some17h1a2bd0f219293325E($2)|0);
 $4 = $3 ^ 1;
 STACKTOP = sp;return ($4|0);
}
function __ZN3std9panicking11begin_panic17hf72be10d610fdcf9E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $file_line = 0, $msg = 0, $personalityslot = 0, $personalityslot$index1 = 0, $x$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $x$i = sp + 32|0;
 $arg0$i = sp + 24|0;
 $personalityslot = sp + 16|0;
 $msg = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $arg1 = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$msg>>2] = $4;
 $7 = ((($msg)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $arg1;
 $file_line = $8;
 $9 = HEAP32[$msg>>2]|0;
 $10 = ((($msg)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$arg0$i>>2] = $9;
 $12 = ((($arg0$i)) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$arg0$i>>2]|0;
 $14 = ((($arg0$i)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$x$i>>2] = $13;
 $16 = ((($x$i)) + 4|0);
 HEAP32[$16>>2] = $15;
 __THREW__ = 0;
 $17 = (invoke_iii(158,8,4)|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  $20 = HEAP32[$x$i>>2]|0;
  $21 = ((($x$i)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$17>>2] = $20;
  $23 = ((($17)) + 4|0);
  HEAP32[$23>>2] = $22;
  $24 = $file_line;
  __THREW__ = 0;
  invoke_viii(159,($17|0),(8|0),($24|0));
  $25 = __THREW__; __THREW__ = 0;
 }
 $26 = ___cxa_find_matching_catch_2()|0;
 $27 = tempRet0;
 HEAP32[$personalityslot>>2] = $26;
 $personalityslot$index1 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index1>>2] = $27;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4drop17habb2ce726888e3b1E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h1cc01d057112a4f5E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $abi_cast = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $abi_cast = sp + 8|0;
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3any6TypeId2of17h3f781497a10069e3E()|0);
 $3 = tempRet0;
 $4 = $abi_cast;
 $5 = $4;
 HEAP32[$5>>2] = $2;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $3;
 ;HEAP32[$_0>>2]=HEAP32[$abi_cast>>2]|0;HEAP32[$_0+4>>2]=HEAP32[$abi_cast+4>>2]|0;
 $8 = $_0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 tempRet0 = ($13);
 STACKTOP = sp;return ($10|0);
}
function __ZN4core3any6TypeId2of17h3f781497a10069e3E() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = sp + 8|0;
 $_0 = sp;
 $0 = $tmp_ret;
 $1 = $0;
 HEAP32[$1>>2] = 1475156443;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 1099202904;
 $4 = $tmp_ret;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = $_0;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = $_0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 tempRet0 = ($19);
 STACKTOP = sp;return ($16|0);
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_7is_some17h1a2bd0f219293325E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_0 = 0, $arg0 = 0, $self = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP8[$2>>0]|0;
 $switch = ($3&255)<(1);
 if ($switch) {
  $_0 = 0;
 } else {
  $_0 = 1;
 }
 $4 = $_0;
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function __ZN4core3cmp5impls91__LT_impl_u20_core__cmp__PartialEq_LT__RF__u27_b_u20_B_GT__u20_for_u20__RF__u27_a_u20_A_GT_2eq17hdabca33c5847e2deE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $other = $3;
 $4 = $self;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $other;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($8)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN4core3str6traits54__LT_impl_u20_core__cmp__PartialEq_u20_for_u20_str_GT_2eq17h5aa3f49f0648a92fE($5,$7,$9,$11)|0);
 STACKTOP = sp;return ($12|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h38c177e8f2debe3bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_0 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $abi_cast = sp + 20|0;
 $_0 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $f = $3;
 $4 = $self;
 $5 = HEAP32[$4>>2]|0;
 $6 = $f;
 $7 = (__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17haa5b23119fe53c19E($5,$6)|0);
 HEAP8[$abi_cast>>0] = $7;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
 $8 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZN4core3fmt10ArgumentV13new17h7f06547f008c6718E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$transmute_temp>>2] = $5;
 $6 = HEAP32[$transmute_temp>>2]|0;
 $7 = $x;
 HEAP32[$transmute_temp1>>2] = $7;
 $8 = HEAP32[$transmute_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN4core3str6traits54__LT_impl_u20_core__cmp__PartialEq_u20_for_u20_str_GT_2eq17h5aa3f49f0648a92fE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $other = 0;
 var $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $other = sp + 24|0;
 $self = sp + 16|0;
 $arg1 = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $4 = ((($arg0)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$arg1>>2] = $2;
 $5 = ((($arg1)) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = HEAP32[$arg0>>2]|0;
 $7 = ((($arg0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$self>>2] = $6;
 $9 = ((($self)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$arg1>>2]|0;
 $11 = ((($arg1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$other>>2] = $10;
 $13 = ((($other)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$self>>2]|0;
 $15 = ((($self)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$other>>2]|0;
 $18 = ((($other)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZN4core3str8eq_slice17h7e547392248f8d7bE($14,$16,$17,$19)|0);
 STACKTOP = sp;return ($20|0);
}
function __ZN4core3str8eq_slice17h7e547392248f8d7bE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field7 = 0, $$sreg1$index6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $_6$index5 = 0, $_9 = 0, $_9$index9 = 0, $a = 0, $arg0 = 0, $arg1 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 16|0;
 $5 = sp;
 $_9 = sp + 64|0;
 $_6 = sp + 56|0;
 $b = sp + 48|0;
 $a = sp + 40|0;
 $arg1 = sp + 32|0;
 $arg0 = sp + 24|0;
 HEAP32[$arg0>>2] = $0;
 $6 = ((($arg0)) + 4|0);
 HEAP32[$6>>2] = $1;
 HEAP32[$arg1>>2] = $2;
 $7 = ((($arg1)) + 4|0);
 HEAP32[$7>>2] = $3;
 $8 = HEAP32[$arg0>>2]|0;
 $9 = ((($arg0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$a>>2] = $8;
 $11 = ((($a)) + 4|0);
 HEAP32[$11>>2] = $10;
 $12 = HEAP32[$arg1>>2]|0;
 $13 = ((($arg1)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$b>>2] = $12;
 $15 = ((($b)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$a>>2]|0;
 $17 = ((($a)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_8as_bytes17h4b4339e2c1ddc0b5E($5,$16,$18);
 $$sreg$field = HEAP32[$5>>2]|0;
 $$sreg$index2 = ((($5)) + 4|0);
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0;
 HEAP32[$_6>>2] = $$sreg$field;
 $_6$index5 = ((($_6)) + 4|0);
 HEAP32[$_6$index5>>2] = $$sreg$field3;
 $19 = HEAP32[$b>>2]|0;
 $20 = ((($b)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_8as_bytes17h4b4339e2c1ddc0b5E($4,$19,$21);
 $$sreg1$field = HEAP32[$4>>2]|0;
 $$sreg1$index6 = ((($4)) + 4|0);
 $$sreg1$field7 = HEAP32[$$sreg1$index6>>2]|0;
 HEAP32[$_9>>2] = $$sreg1$field;
 $_9$index9 = ((($_9)) + 4|0);
 HEAP32[$_9$index9>>2] = $$sreg1$field7;
 $22 = (__ZN4core3cmp5impls91__LT_impl_u20_core__cmp__PartialEq_LT__RF__u27_b_u20_B_GT__u20_for_u20__RF__u27_a_u20_A_GT_2eq17h1a2bc816459a0df6E($_6,$_9)|0);
 STACKTOP = sp;return ($22|0);
}
function __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_8as_bytes17h4b4339e2c1ddc0b5E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $retVal$index1 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$transmute_temp>>2] = $7;
 $10 = ((($transmute_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$transmute_temp>>2]|0;
 $12 = ((($transmute_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN4core3cmp5impls91__LT_impl_u20_core__cmp__PartialEq_LT__RF__u27_b_u20_B_GT__u20_for_u20__RF__u27_a_u20_A_GT_2eq17h1a2bc816459a0df6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $other = $3;
 $4 = $self;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $other;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($8)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN4core5slice81__LT_impl_u20_core__cmp__PartialEq_LT__u5b_B_u5d__GT__u20_for_u20__u5b_A_u5d__GT_2eq17h2b4f2154e9a41391E($5,$7,$9,$11)|0);
 STACKTOP = sp;return ($12|0);
}
function __ZN4core5slice81__LT_impl_u20_core__cmp__PartialEq_LT__u5b_B_u5d__GT__u20_for_u20__u5b_A_u5d__GT_2eq17h2b4f2154e9a41391E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $other = 0;
 var $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $other = sp + 24|0;
 $self = sp + 16|0;
 $arg1 = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $4 = ((($arg0)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$arg1>>2] = $2;
 $5 = ((($arg1)) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = HEAP32[$arg0>>2]|0;
 $7 = ((($arg0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$self>>2] = $6;
 $9 = ((($self)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$arg1>>2]|0;
 $11 = ((($arg1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$other>>2] = $10;
 $13 = ((($other)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$self>>2]|0;
 $15 = ((($self)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$other>>2]|0;
 $18 = ((($other)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__ZN68__LT__u5b_A_u5d__u20_as_u20_core__slice__SlicePartialEq_LT_A_GT__GT_5equal17h6d34c2c4b68bcc43E($14,$16,$17,$19)|0);
 STACKTOP = sp;return ($20|0);
}
function __ZN68__LT__u5b_A_u5d__u20_as_u20_core__slice__SlicePartialEq_LT_A_GT__GT_5equal17h6d34c2c4b68bcc43E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $arg0 = 0, $arg1 = 0, $other = 0, $self = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $other = sp + 24|0;
 $self = sp + 16|0;
 $arg1 = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $4 = ((($arg0)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$arg1>>2] = $2;
 $5 = ((($arg1)) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = HEAP32[$arg0>>2]|0;
 $7 = ((($arg0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$self>>2] = $6;
 $9 = ((($self)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$arg1>>2]|0;
 $11 = ((($arg1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$other>>2] = $10;
 $13 = ((($other)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$self>>2]|0;
 $15 = ((($self)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17heae38b00d24427d9E($14,$16)|0);
 $18 = HEAP32[$other>>2]|0;
 $19 = ((($other)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17heae38b00d24427d9E($18,$20)|0);
 $22 = ($17|0)!=($21|0);
 if ($22) {
  $_0 = 0;
  $32 = $_0;
  $33 = $32&1;
  STACKTOP = sp;return ($33|0);
 }
 $23 = HEAP32[$self>>2]|0;
 $24 = ((($self)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17hba296da3e1414b7bE($23,$25)|0);
 $27 = HEAP32[$other>>2]|0;
 $28 = ((($other)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17hba296da3e1414b7bE($27,$29)|0);
 $31 = ($26|0)==($30|0);
 if ($31) {
  $_0 = 1;
  $32 = $_0;
  $33 = $32&1;
  STACKTOP = sp;return ($33|0);
 } else {
  $34 = HEAP32[$self>>2]|0;
  $35 = ((($self)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (__ZN4core3mem11size_of_val17hbf391dc96cf82395E($34,$36)|0);
  $size = $37;
  $38 = HEAP32[$self>>2]|0;
  $39 = ((($self)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17hba296da3e1414b7bE($38,$40)|0);
  $42 = HEAP32[$other>>2]|0;
  $43 = ((($other)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17hba296da3e1414b7bE($42,$44)|0);
  $46 = $size;
  $47 = (_memcmp($41,$45,$46)|0);
  $48 = ($47|0)==(0);
  $49 = $48&1;
  $_0 = $49;
  $32 = $_0;
  $33 = $32&1;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17heae38b00d24427d9E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$transmute_temp>>2] = $7;
 $10 = ((($transmute_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($transmute_temp)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17hba296da3e1414b7bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3mem11size_of_val17hbf391dc96cf82395E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $tmp_ret = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $val = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$val>>2] = $3;
 $6 = ((($val)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($val)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8;
 $tmp_ret = $9;
 $10 = $tmp_ret;
 STACKTOP = sp;return ($10|0);
}
function __ZN2ww10game_state9GameState3new17h2aaaff1098d34a47E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_4 = 0, $_5 = 0;
 var $_6 = 0, $arg0 = 0, $map = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_5 = sp + 16|0;
 $_4 = sp;
 $arg0 = $1;
 $2 = $arg0;
 $map = $2;
 $3 = $map;
 __ZN93__LT_collections__string__String_u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17hab70a9f6912d519dE($_4,24540,0);
 HEAP32[$_5>>2] = 0;
 $_6 = 5;
 HEAP32[$0>>2] = $3;
 $4 = ((($0)) + 4|0);
 ;HEAP32[$4>>2]=HEAP32[$_5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$_5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$_5+8>>2]|0;
 $5 = ((($0)) + 16|0);
 HEAP8[$5>>0] = 0;
 $6 = ((($0)) + 20|0);
 ;HEAP32[$6>>2]=HEAP32[$_4>>2]|0;HEAP32[$6+4>>2]=HEAP32[$_4+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$_4+8>>2]|0;
 $7 = ((($0)) + 32|0);
 HEAP32[$7>>2] = 100;
 $8 = ((($0)) + 36|0);
 HEAP32[$8>>2] = 75;
 $9 = ((($0)) + 40|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 44|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 48|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($0)) + 52|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($0)) + 53|0);
 HEAP8[$13>>0] = 0;
 $14 = ((($0)) + 54|0);
 HEAP8[$14>>0] = 0;
 $15 = ((($0)) + 55|0);
 HEAP8[$15>>0] = 0;
 $16 = ((($0)) + 56|0);
 HEAP8[$16>>0] = 0;
 $17 = $_6;
 $18 = ((($0)) + 57|0);
 HEAP8[$18>>0] = $17;
 $19 = ((($0)) + 58|0);
 HEAP8[$19>>0] = 1;
 STACKTOP = sp;return;
}
function __ZN2ww10game_state9GameState14can_player_see17h36f56cd5a1d096adE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 57|0);
 $4 = (__ZN61__LT_ww__game_map__RoomId_u20_as_u20_core__cmp__PartialEq_GT_2eq17h4c065c1128a6f94aE($3,9139)|0);
 if (!($4)) {
  $5 = $self;
  $6 = ((($5)) + 56|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&1;
  if (!($8)) {
   $_0 = 0;
   $9 = $_0;
   $10 = $9&1;
   STACKTOP = sp;return ($10|0);
  }
 }
 $_0 = 1;
 $9 = $_0;
 $10 = $9&1;
 STACKTOP = sp;return ($10|0);
}
function __ZN2ww10game_state9GameState8set_mode17h3a836e9183396082E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_5 = 0, $arg0 = 0, $arg1 = 0, $mode = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_5 = sp + 32|0;
 $mode = sp + 16|0;
 $arg1 = sp;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$1+8>>2]|0;
 $2 = $arg0;
 $self = $2;
 ;HEAP32[$mode>>2]=HEAP32[$arg1>>2]|0;HEAP32[$mode+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$mode+8>>2]=HEAP32[$arg1+8>>2]|0;
 $3 = $self;
 $4 = ((($3)) + 58|0);
 HEAP8[$4>>0] = 1;
 ;HEAP32[$_5>>2]=HEAP32[$mode>>2]|0;HEAP32[$_5+4>>2]=HEAP32[$mode+4>>2]|0;HEAP32[$_5+8>>2]=HEAP32[$mode+8>>2]|0;
 $5 = $self;
 $6 = ((($5)) + 4|0);
 ;HEAP32[$6>>2]=HEAP32[$_5>>2]|0;HEAP32[$6+4>>2]=HEAP32[$_5+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$_5+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN2ww10game_state9GameState12print_wealth17hdf0aa4d03fe90c40E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13 = 0;
 var $_18 = 0, $_19 = 0, $_26 = 0, $_4 = 0, $__arg0 = 0, $arg0 = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $tmp_ret = sp + 88|0;
 $_26 = sp + 64|0;
 $_19 = sp + 56|0;
 $_18 = sp + 48|0;
 $_13 = sp + 24|0;
 $_4 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = HEAP32[653]|0;
 $3 = HEAP32[(2616)>>2]|0;
 __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_4,$2,$3,23968,0);
 __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_4);
 $4 = $self;
 $5 = ((($4)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = HEAP32[655]|0;
  $9 = HEAP32[(2624)>>2]|0;
  $10 = $self;
  $11 = ((($10)) + 36|0);
  HEAP32[$_19>>2] = $11;
  $12 = HEAP32[$_19>>2]|0;
  $__arg0 = $12;
  $13 = $__arg0;
  __ZN4core3fmt10ArgumentV13new17hd2627092d7876577E($tmp_ret,$13,160);
  $14 = ((($tmp_ret)) + 4|0);
  $15 = HEAP32[$tmp_ret>>2]|0;
  $16 = HEAP32[$14>>2]|0;
  HEAP32[$_18>>2] = $15;
  $17 = ((($_18)) + 4|0);
  HEAP32[$17>>2] = $16;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_13,$8,$9,$_18,1);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_13);
  STACKTOP = sp;return;
 } else {
  $18 = HEAP32[657]|0;
  $19 = HEAP32[(2632)>>2]|0;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_26,$18,$19,23968,0);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_26);
  STACKTOP = sp;return;
 }
}
function __ZN4core3fmt10ArgumentV13new17hd2627092d7876577E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$transmute_temp>>2] = $5;
 $6 = HEAP32[$transmute_temp>>2]|0;
 $7 = $x;
 HEAP32[$transmute_temp1>>2] = $7;
 $8 = HEAP32[$transmute_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN2ww10game_state9GameState10print_food17h5b0b08a1349eb93bE($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_13 = 0, $_4 = 0, $_9 = 0, $__arg0 = 0, $__arg1 = 0, $arg0 = 0, $self = 0, $tmp_ret = 0, $tmp_ret1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $tmp_ret1 = sp + 64|0;
 $tmp_ret = sp + 56|0;
 $_13 = sp + 48|0;
 $_10 = sp + 40|0;
 $_9 = sp + 24|0;
 $_4 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = HEAP32[667]|0;
 $3 = HEAP32[(2672)>>2]|0;
 $4 = $self;
 $5 = ((($4)) + 40|0);
 $6 = $self;
 $7 = ((($6)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(1);
 $$sink2 = $9 ? 24540 : 11968;
 $$sink = $9 ? 0 : 1;
 HEAP32[$_13>>2] = $$sink2;
 $10 = ((($_13)) + 4|0);
 HEAP32[$10>>2] = $$sink;
 HEAP32[$_10>>2] = $5;
 $11 = ((($_10)) + 4|0);
 HEAP32[$11>>2] = $_13;
 $12 = HEAP32[$_10>>2]|0;
 $__arg0 = $12;
 $13 = ((($_10)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $__arg1 = $14;
 $15 = $__arg0;
 __ZN4core3fmt10ArgumentV13new17hd2627092d7876577E($tmp_ret,$15,160);
 $16 = ((($tmp_ret)) + 4|0);
 $17 = HEAP32[$tmp_ret>>2]|0;
 $18 = HEAP32[$16>>2]|0;
 $19 = $__arg1;
 __ZN4core3fmt10ArgumentV13new17hbee887761b52d43aE($tmp_ret1,$19,127);
 $20 = ((($tmp_ret1)) + 4|0);
 $21 = HEAP32[$tmp_ret1>>2]|0;
 $22 = HEAP32[$20>>2]|0;
 HEAP32[$_9>>2] = $17;
 $23 = ((($_9)) + 4|0);
 HEAP32[$23>>2] = $18;
 $24 = ((($_9)) + 8|0);
 HEAP32[$24>>2] = $21;
 $25 = ((($24)) + 4|0);
 HEAP32[$25>>2] = $22;
 __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_4,$2,$3,$_9,2);
 __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_4);
 STACKTOP = sp;return;
}
function __ZN2ww10game_state9GameState11finish_game17h98f8075dc0a232beE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_12 = 0, $_19 = 0, $_4 = 0, $_9 = 0;
 var $__arg0 = 0, $arg0 = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $tmp_ret = sp + 64|0;
 $_19 = sp + 40|0;
 $_12 = sp + 80|0;
 $_10 = sp + 32|0;
 $_9 = sp + 24|0;
 $_4 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 5;
 $4 = HEAP32[675]|0;
 $5 = HEAP32[(2704)>>2]|0;
 $6 = $self;
 $7 = (__ZN2ww10game_state9GameState9get_score17h706e11dfe9b2f44aE($6)|0);
 HEAP32[$_12>>2] = $7;
 HEAP32[$_10>>2] = $_12;
 $8 = HEAP32[$_10>>2]|0;
 $__arg0 = $8;
 $9 = $__arg0;
 __ZN4core3fmt10ArgumentV13new17hd2627092d7876577E($tmp_ret,$9,160);
 $10 = ((($tmp_ret)) + 4|0);
 $11 = HEAP32[$tmp_ret>>2]|0;
 $12 = HEAP32[$10>>2]|0;
 HEAP32[$_9>>2] = $11;
 $13 = ((($_9)) + 4|0);
 HEAP32[$13>>2] = $12;
 __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_4,$4,$5,$_9,1);
 __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_4);
 $14 = HEAP32[677]|0;
 $15 = HEAP32[(2712)>>2]|0;
 __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_19,$14,$15,23968,0);
 __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_19);
 STACKTOP = sp;return;
}
function __ZN2ww10game_state9GameState9get_score17h706e11dfe9b2f44aE($0) {
 $0 = $0|0;
 var $$arith = 0, $$arith11 = 0, $$arith2 = 0, $$arith20 = 0, $$arith29 = 0, $$arith32 = 0, $$arith40 = 0, $$arith48 = 0, $$arith56 = 0, $$denom = 0, $$denom34 = 0, $$denom42 = 0, $$denom50 = 0, $$denom58 = 0, $$div = 0, $$div35 = 0, $$div43 = 0, $$div51 = 0, $$div59 = 0, $$ispos = 0;
 var $$ispos16 = 0, $$ispos25 = 0, $$ispos7 = 0, $$iszero = 0, $$iszero33 = 0, $$iszero41 = 0, $$iszero49 = 0, $$iszero57 = 0, $$negcheck = 0, $$negcheck15 = 0, $$negcheck24 = 0, $$negcheck6 = 0, $$negtemp = 0, $$negtemp13 = 0, $$negtemp22 = 0, $$negtemp4 = 0, $$overflow = 0, $$overflow37 = 0, $$overflow45 = 0, $$overflow53 = 0;
 var $$overflow61 = 0, $$poscheck = 0, $$poscheck14 = 0, $$poscheck23 = 0, $$poscheck5 = 0, $$postemp = 0, $$postemp12 = 0, $$postemp21 = 0, $$postemp3 = 0, $$same = 0, $$same36 = 0, $$same44 = 0, $$same52 = 0, $$same60 = 0, $$select = 0, $$select17 = 0, $$select26 = 0, $$select8 = 0, $1 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $$arith56 = ($4*3)|0;
 $$iszero57 = ($4|0)==(0);
 $$denom58 = $$iszero57 ? 1 : $4;
 $$div59 = (($$arith56|0) / ($$denom58|0))&-1;
 $$same60 = ($$div59|0)!=(3);
 $$overflow61 = $$iszero57 ? 0 : $$same60;
 $5 = $$overflow61;
 if ($5) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(2724);
  // unreachable;
 }
 $6 = $self;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $$arith48 = ($8*5)|0;
 $$iszero49 = ($8|0)==(0);
 $$denom50 = $$iszero49 ? 1 : $8;
 $$div51 = (($$arith48|0) / ($$denom50|0))&-1;
 $$same52 = ($$div51|0)!=(5);
 $$overflow53 = $$iszero49 ? 0 : $$same52;
 $9 = $$overflow53;
 if ($9) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(2744);
  // unreachable;
 }
 $$arith20 = (($$arith56) + ($$arith48))|0;
 $$postemp21 = (($$arith56) + -2147483648)|0;
 $$negtemp22 = (($$arith56) + 2147483647)|0;
 $$poscheck23 = ($$arith20|0)<($$postemp21|0);
 $$negcheck24 = ($$arith20|0)>($$negtemp22|0);
 $$ispos25 = ($$arith56|0)>=(0);
 $$select26 = $$ispos25 ? $$poscheck23 : $$negcheck24;
 $10 = $$select26;
 if ($10) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(2764);
  // unreachable;
 }
 $11 = $self;
 $12 = ((($11)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $$arith40 = $13<<1;
 $$iszero41 = ($13|0)==(0);
 $$denom42 = $$iszero41 ? 1 : $13;
 $$div43 = (($$arith40|0) / ($$denom42|0))&-1;
 $$same44 = ($$div43|0)!=(2);
 $$overflow45 = $$iszero41 ? 0 : $$same44;
 $14 = $$overflow45;
 if ($14) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(2784);
  // unreachable;
 }
 $$arith11 = (($$arith20) + ($$arith40))|0;
 $$postemp12 = (($$arith20) + -2147483648)|0;
 $$negtemp13 = (($$arith20) + 2147483647)|0;
 $$poscheck14 = ($$arith11|0)<($$postemp12|0);
 $$negcheck15 = ($$arith11|0)>($$negtemp13|0);
 $$ispos16 = ($$arith20|0)>=(0);
 $$select17 = $$ispos16 ? $$poscheck14 : $$negcheck15;
 $15 = $$select17;
 if ($15) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(2764);
  // unreachable;
 }
 $16 = $self;
 $17 = ((($16)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 $$arith32 = $18;
 $$iszero33 = ($18|0)==(0);
 $$denom34 = $$iszero33 ? 1 : $18;
 $$div35 = (($$arith32|0) / ($$denom34|0))&-1;
 $$same36 = ($$div35|0)!=(1);
 $$overflow37 = $$iszero33 ? 0 : $$same36;
 $19 = $$overflow37;
 if ($19) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(2804);
  // unreachable;
 }
 $$arith2 = (($$arith11) + ($$arith32))|0;
 $$postemp3 = (($$arith11) + -2147483648)|0;
 $$negtemp4 = (($$arith11) + 2147483647)|0;
 $$poscheck5 = ($$arith2|0)<($$postemp3|0);
 $$negcheck6 = ($$arith2|0)>($$negtemp4|0);
 $$ispos7 = ($$arith11|0)>=(0);
 $$select8 = $$ispos7 ? $$poscheck5 : $$negcheck6;
 $20 = $$select8;
 if ($20) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(2764);
  // unreachable;
 }
 $21 = $self;
 $22 = ((($21)) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $$arith29 = ($23*30)|0;
 $$iszero = ($23|0)==(0);
 $$denom = $$iszero ? 1 : $23;
 $$div = (($$arith29|0) / ($$denom|0))&-1;
 $$same = ($$div|0)!=(30);
 $$overflow = $$iszero ? 0 : $$same;
 $24 = $$overflow;
 if ($24) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(2824);
  // unreachable;
 }
 $$arith = (($$arith2) + ($$arith29))|0;
 $$postemp = (($$arith2) + -2147483648)|0;
 $$negtemp = (($$arith2) + 2147483647)|0;
 $$poscheck = ($$arith|0)<($$postemp|0);
 $$negcheck = ($$arith|0)>($$negtemp|0);
 $$ispos = ($$arith2|0)>=(0);
 $$select = $$ispos ? $$poscheck : $$negcheck;
 $25 = $$select;
 if ($25) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(2764);
  // unreachable;
 } else {
  STACKTOP = sp;return ($$arith|0);
 }
 return (0)|0;
}
function __ZN2ww10game_state9GameState11is_finished17h47bcec93474bc98bE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[715]|0;
 $5 = (__ZN65__LT_ww__game_state__GameMode_u20_as_u20_core__cmp__PartialEq_GT_2eq17h016c8f4f895efc97E($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN65__LT_ww__game_state__GameMode_u20_as_u20_core__cmp__PartialEq_GT_2eq17h016c8f4f895efc97E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_13 = 0, $_17 = 0, $__arg_0 = 0, $__arg_1_0 = 0, $__arg_1_vi = 0, $__self_0 = 0, $__self_vi = 0, $arg0 = 0, $arg1 = 0, $cond = 0;
 var $cond1 = 0, $self = 0, $tmp_ret = 0, $tmp_ret1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $tmp_ret1 = sp + 16|0;
 $tmp_ret = sp + 8|0;
 $_17 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $__arg_0 = $3;
 $4 = $self;
 $5 = HEAP32[$4>>2]|0;
 $6 = $tmp_ret;
 $7 = $6;
 HEAP32[$7>>2] = $5;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = $tmp_ret;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $__self_vi = $12;
 $16 = $__arg_0;
 $17 = HEAP32[$16>>2]|0;
 $18 = $tmp_ret1;
 $19 = $18;
 HEAP32[$19>>2] = $17;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = 0;
 $22 = $tmp_ret1;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 4)|0;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $__arg_1_vi = $24;
 $28 = $__self_vi;
 $29 = $__arg_1_vi;
 $30 = ($28|0)==($29|0);
 if ($30) {
  $_13 = 1;
 } else {
  $_13 = 0;
 }
 $31 = $_13;
 $32 = $31&1;
 if (!($32)) {
  $_0 = 0;
  $49 = $_0;
  $50 = $49&1;
  STACKTOP = sp;return ($50|0);
 }
 $33 = $self;
 $34 = $__arg_0;
 HEAP32[$_17>>2] = $33;
 $35 = ((($_17)) + 4|0);
 HEAP32[$35>>2] = $34;
 $36 = HEAP32[$_17>>2]|0;
 $37 = HEAP32[$36>>2]|0;
 $cond = ($37|0)==(4);
 if ($cond) {
  $38 = ((($_17)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$39>>2]|0;
  $cond1 = ($40|0)==(4);
  if ($cond1) {
   $41 = HEAP32[$_17>>2]|0;
   $42 = ((($41)) + 4|0);
   $__self_0 = $42;
   $43 = ((($_17)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 4|0);
   $__arg_1_0 = $45;
   $46 = $__self_0;
   $47 = $__arg_1_0;
   $48 = (__ZN64__LT_ww__combat__CombatState_u20_as_u20_core__cmp__PartialEq_GT_2eq17h09a6e7d49a8eaa38E($46,$47)|0);
   if ($48) {
    $_0 = 1;
    $49 = $_0;
    $50 = $49&1;
    STACKTOP = sp;return ($50|0);
   } else {
    $_0 = 0;
    $49 = $_0;
    $50 = $49&1;
    STACKTOP = sp;return ($50|0);
   }
  }
 }
 $_0 = 1;
 $49 = $_0;
 $50 = $49&1;
 STACKTOP = sp;return ($50|0);
}
function __ZN64__LT_ww__combat__CombatState_u20_as_u20_core__cmp__PartialEq_GT_2eq17h09a6e7d49a8eaa38E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_11 = 0, $_12 = 0, $__arg_0 = 0, $__self_0_0 = 0, $__self_0_1 = 0, $__self_0_2 = 0, $__self_1_0 = 0, $__self_1_1 = 0, $__self_1_2 = 0, $arg0 = 0;
 var $arg1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $__arg_0 = $3;
 $4 = $__arg_0;
 $__self_1_0 = $4;
 $5 = $__arg_0;
 $6 = ((($5)) + 1|0);
 $__self_1_1 = $6;
 $7 = $__arg_0;
 $8 = ((($7)) + 4|0);
 $__self_1_2 = $8;
 $9 = $self;
 $__self_0_0 = $9;
 $10 = $self;
 $11 = ((($10)) + 1|0);
 $__self_0_1 = $11;
 $12 = $self;
 $13 = ((($12)) + 4|0);
 $__self_0_2 = $13;
 $14 = $__self_0_0;
 $15 = $__self_1_0;
 $16 = (__ZN64__LT_ww__combat__CombatPhase_u20_as_u20_core__cmp__PartialEq_GT_2eq17h9abd4a81d9fbbcedE($14,$15)|0);
 if ($16) {
  $_12 = 1;
 } else {
  $_12 = 0;
 }
 $29 = $_12;
 $30 = $29&1;
 if ($30) {
  $24 = $__self_0_1;
  $25 = $__self_1_1;
  $26 = (__ZN64__LT_ww__monsters__MonsterId_u20_as_u20_core__cmp__PartialEq_GT_2eq17h2a9687922616b93aE($24,$25)|0);
  if ($26) {
   $_11 = 1;
  } else {
   label = 7;
  }
 } else {
  label = 7;
 }
 if ((label|0) == 7) {
  $_11 = 0;
 }
 $27 = $_11;
 $28 = $27&1;
 if ($28) {
  $17 = $__self_0_2;
  $18 = HEAP32[$17>>2]|0;
  $19 = $__self_1_2;
  $20 = HEAP32[$19>>2]|0;
  $21 = ($18|0)==($20|0);
  if ($21) {
   $_0 = 1;
   $22 = $_0;
   $23 = $22&1;
   STACKTOP = sp;return ($23|0);
  }
 }
 $_0 = 0;
 $22 = $_0;
 $23 = $22&1;
 STACKTOP = sp;return ($23|0);
}
function __ZN64__LT_ww__combat__CombatPhase_u20_as_u20_core__cmp__PartialEq_GT_2eq17h9abd4a81d9fbbcedE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_13 = 0;
 var $_17 = 0, $__arg_0 = 0, $__arg_1_vi = 0, $__self_vi = 0, $arg0 = 0, $arg1 = 0, $self = 0, $tmp_ret = 0, $tmp_ret1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $tmp_ret1 = sp + 16|0;
 $tmp_ret = sp + 8|0;
 $_17 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $__arg_0 = $3;
 $4 = $self;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $tmp_ret;
 $8 = $7;
 HEAP32[$8>>2] = $6;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = $tmp_ret;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $__self_vi = $13;
 $17 = $__arg_0;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $tmp_ret1;
 $21 = $20;
 HEAP32[$21>>2] = $19;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = 0;
 $24 = $tmp_ret1;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $__arg_1_vi = $26;
 $30 = $__self_vi;
 $31 = $__arg_1_vi;
 $32 = ($30|0)==($31|0);
 if ($32) {
  $_13 = 1;
 } else {
  $_13 = 0;
 }
 $33 = $_13;
 $34 = $33&1;
 if ($34) {
  $35 = $self;
  $36 = $__arg_0;
  HEAP32[$_17>>2] = $35;
  $37 = ((($_17)) + 4|0);
  HEAP32[$37>>2] = $36;
  $_0 = 1;
  $38 = $_0;
  $39 = $38&1;
  STACKTOP = sp;return ($39|0);
 } else {
  $_0 = 0;
  $38 = $_0;
  $39 = $38&1;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function __ZN64__LT_ww__monsters__MonsterId_u20_as_u20_core__cmp__PartialEq_GT_2eq17h2a9687922616b93aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_13 = 0;
 var $_17 = 0, $__arg_0 = 0, $__arg_1_vi = 0, $__self_vi = 0, $arg0 = 0, $arg1 = 0, $self = 0, $tmp_ret = 0, $tmp_ret1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $tmp_ret1 = sp + 16|0;
 $tmp_ret = sp + 8|0;
 $_17 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $__arg_0 = $3;
 $4 = $self;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $tmp_ret;
 $8 = $7;
 HEAP32[$8>>2] = $6;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = $tmp_ret;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $__self_vi = $13;
 $17 = $__arg_0;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $tmp_ret1;
 $21 = $20;
 HEAP32[$21>>2] = $19;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = 0;
 $24 = $tmp_ret1;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $__arg_1_vi = $26;
 $30 = $__self_vi;
 $31 = $__arg_1_vi;
 $32 = ($30|0)==($31|0);
 if ($32) {
  $_13 = 1;
 } else {
  $_13 = 0;
 }
 $33 = $_13;
 $34 = $33&1;
 if ($34) {
  $35 = $self;
  $36 = $__arg_0;
  HEAP32[$_17>>2] = $35;
  $37 = ((($_17)) + 4|0);
  HEAP32[$37>>2] = $36;
  $_0 = 1;
  $38 = $_0;
  $39 = $38&1;
  STACKTOP = sp;return ($39|0);
 } else {
  $_0 = 0;
  $38 = $_0;
  $39 = $38&1;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function __ZN2ww10game_state9GameState25accuse_player_of_cheating17hedcf8b8e600ae065E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_4 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = HEAP32[719]|0;
 $3 = HEAP32[(2880)>>2]|0;
 __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_4,$2,$3,23968,0);
 __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_4);
 $4 = $self;
 $5 = ((($4)) + 36|0);
 HEAP32[$5>>2] = 0;
 $6 = $self;
 $7 = ((($6)) + 56|0);
 HEAP8[$7>>0] = 0;
 $8 = $self;
 $9 = ((($8)) + 54|0);
 HEAP8[$9>>0] = 0;
 $10 = $self;
 $11 = ((($10)) + 52|0);
 HEAP8[$11>>0] = 0;
 $12 = $self;
 $13 = ((($12)) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(-2147483648);
 $16 = 0 & $15;
 $17 = $16;
 if ($17) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(2884);
  // unreachable;
 } else {
  $18 = $self;
  $19 = ((($18)) + 40|0);
  $20 = (($14|0) / 4)&-1;
  HEAP32[$19>>2] = $20;
  $21 = $self;
  $22 = ((($21)) + 53|0);
  HEAP8[$22>>0] = 0;
  $23 = $self;
  $24 = ((($23)) + 55|0);
  HEAP8[$24>>0] = 0;
  __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
  STACKTOP = sp;return;
 }
}
function __ZN2ww10game_state9GameState5pause17h4700730896badf5fE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN2ww8platform11hide_prompt17hde14f6abb1819565E();
 __ZN2ww8platform5sleep17h4a50355466f8299bE(2500,0);
 return;
}
function __ZN2ww10game_state9GameState12process_move17h4946846e8e1152f7E($0) {
 $0 = $0|0;
 var $$arith = 0, $$arith2 = 0, $$ispos = 0, $$ispos7 = 0, $$negcheck = 0, $$negcheck6 = 0, $$negtemp = 0, $$negtemp4 = 0, $$poscheck = 0, $$poscheck5 = 0, $$postemp = 0, $$postemp3 = 0, $$select = 0, $$select8 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $$arith = (($4) + 1)|0;
 $$postemp = (($4) + -2147483648)|0;
 $$negtemp = (($4) + 2147483647)|0;
 $$poscheck = ($$arith|0)<($$postemp|0);
 $$negcheck = ($$arith|0)>($$negtemp|0);
 $$ispos = ($4|0)>=(0);
 $$select = $$ispos ? $$poscheck : $$negcheck;
 $5 = $$select;
 if ($5) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(2912);
  // unreachable;
 }
 $6 = $self;
 $7 = ((($6)) + 44|0);
 HEAP32[$7>>2] = $$arith;
 $8 = $self;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $$arith2 = (($10) - 5)|0;
 $$postemp3 = (($10) + -2147483647)|0;
 $$negtemp4 = (($10) + -2147483648)|0;
 $$poscheck5 = ($$arith2|0)<($$postemp3|0);
 $$negcheck6 = ($$arith2|0)>($$negtemp4|0);
 $$ispos7 = ($10|0)>=(0);
 $$select8 = $$ispos7 ? $$poscheck5 : $$negcheck6;
 $11 = $$select8;
 if ($11) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(2932);
  // unreachable;
 } else {
  $12 = $self;
  $13 = ((($12)) + 32|0);
  HEAP32[$13>>2] = $$arith2;
  STACKTOP = sp;return;
 }
}
function __ZN2ww10game_state9GameState4tick17hf2f51b2e337d36c2E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0;
 var $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $state = sp;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(1);
 if ($5) {
  $6 = $self;
  __ZN2ww10game_state9GameState3die17h47608db0376e3890E($6);
 }
 $7 = $self;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 switch ($9|0) {
 case 0:  {
  $10 = $self;
  __ZN2ww10game_state9GameState18tick_ask_name_mode17h20e2dd128c085a0dE($10);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $11 = $self;
  __ZN2ww12primary_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_17tick_primary_mode17h75ac99956e1a856aE($11);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $12 = $self;
  __ZN2ww9inventory57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_19tick_inventory_mode17h2ada868f18b43918E($12);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $13 = $self;
  __ZN2ww10game_state9GameState18tick_eat_food_mode17h1effdf9872a8674fE($13);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $15 = $self;
  $16 = ((($15)) + 4|0);
  $17 = ((($16)) + 4|0);
  ;HEAP32[$state>>2]=HEAP32[$17>>2]|0;HEAP32[$state+4>>2]=HEAP32[$17+4>>2]|0;
  $18 = $self;
  __ZN2ww6combat57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_16tick_combat_mode17h3f5b3896f965aa2cE($18,$state);
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $14 = $self;
  __ZN2ww10debug_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_15tick_debug_mode17h6f66f75f72a3ccb7E($14);
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  // unreachable;
 }
 }
}
function __ZN2ww10game_state9GameState3die17h47608db0376e3890E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_4 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = HEAP32[1177]|0;
 $3 = HEAP32[(4712)>>2]|0;
 __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_4,$2,$3,23968,0);
 __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_4);
 __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
 $4 = $self;
 __ZN2ww10game_state9GameState11finish_game17h98f8075dc0a232beE($4);
 STACKTOP = sp;return;
}
function __ZN2ww10game_state9GameState18tick_ask_name_mode17h20e2dd128c085a0dE($0) {
 $0 = $0|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_6 = 0, $_7 = 0, $_8 = 0, $abi_cast = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $abi_cast = sp + 48|0;
 $personalityslot = sp + 32|0;
 $_8 = sp + 24|0;
 $_7 = sp + 8|0;
 $_6 = sp;
 $self = sp + 44|0;
 $arg0 = $0;
 $1 = $arg0;
 HEAP32[$self>>2] = $1;
 __ZN2ww8platform11show_prompt17hb4efc229f77a1980E(14788,29);
 __ZN2ww8platform10read_input17hae23db9dad14741bE($_7);
 HEAP32[$_8>>2] = $self;
 $2 = HEAP32[$_8>>2]|0;
 __THREW__ = 0;
 $3 = (invoke_iii(161,($_7|0),($2|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  HEAP32[$personalityslot>>2] = $6;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $7;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  HEAP8[$abi_cast>>0] = $3;
  ;HEAP8[$_6>>0]=HEAP8[$abi_cast>>0]|0;
  STACKTOP = sp;return;
 }
}
function __ZN2ww12primary_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_17tick_primary_mode17h75ac99956e1a856aE($0) {
 $0 = $0|0;
 var $$arith = 0, $$ispos = 0, $$negcheck = 0, $$negtemp = 0, $$poscheck = 0, $$postemp = 0, $$select = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_105 = 0, $_112 = 0, $_115 = 0, $_116 = 0, $_119 = 0, $_120 = 0, $_122 = 0;
 var $_126 = 0, $_133 = 0, $_138 = 0, $_146 = 0, $_149 = 0, $_15 = 0, $_154 = 0, $_155 = 0, $_166 = 0, $_170 = 0, $_179 = 0, $_187 = 0, $_191 = 0, $_23 = 0, $_31 = 0, $_39 = 0, $_44 = 0, $_45 = 0, $_52 = 0, $_60 = 0;
 var $_7 = 0, $_73 = 0, $_84 = 0, $_98 = 0, $__arg0 = 0, $__arg01 = 0, $abi_cast = 0, $abi_cast3 = 0, $amt = 0, $arg0 = 0, $cmd = 0, $dir = 0, $room = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $switch3 = 0, $tmp_ret = 0, $tmp_ret2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(576|0);
 $abi_cast3 = sp + 556|0;
 $tmp_ret2 = sp + 528|0;
 $abi_cast = sp + 552|0;
 $tmp_ret = sp + 520|0;
 $_191 = sp + 504|0;
 $_187 = sp + 488|0;
 $_179 = sp + 464|0;
 $_170 = sp + 440|0;
 $_155 = sp + 432|0;
 $_154 = sp + 424|0;
 $_149 = sp + 400|0;
 $amt = sp + 564|0;
 $_138 = sp + 376|0;
 $_133 = sp + 360|0;
 $_126 = sp + 336|0;
 $_116 = sp + 304|0;
 $_115 = sp + 296|0;
 $cmd = sp + 288|0;
 $_112 = sp + 280|0;
 $_105 = sp + 256|0;
 $_98 = sp + 232|0;
 $_84 = sp + 208|0;
 $_73 = sp + 184|0;
 $_60 = sp + 160|0;
 $_52 = sp + 136|0;
 $_45 = sp + 128|0;
 $_44 = sp + 120|0;
 $_39 = sp + 96|0;
 $_31 = sp + 72|0;
 $_23 = sp + 48|0;
 $_15 = sp + 24|0;
 $_7 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 58|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 L1: do {
  if ($5) {
   $6 = $self;
   $7 = ((($6)) + 57|0);
   $8 = HEAP8[$7>>0]|0;
   switch ($8<<24>>24) {
   case 8:  {
    $9 = HEAP32[978]|0;
    $10 = HEAP32[(3916)>>2]|0;
    __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_7,$9,$10,23968,0);
    __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_7);
    __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
    $11 = HEAP32[982]|0;
    $12 = HEAP32[(3932)>>2]|0;
    __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_15,$11,$12,23968,0);
    __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_15);
    __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
    $13 = $self;
    $14 = ((($13)) + 57|0);
    HEAP8[$14>>0] = 9;
    STACKTOP = sp;return;
    break;
   }
   case 10:  {
    $15 = HEAP32[980]|0;
    $16 = HEAP32[(3924)>>2]|0;
    __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_23,$15,$16,23968,0);
    __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_23);
    __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
    $17 = HEAP32[984]|0;
    $18 = HEAP32[(3940)>>2]|0;
    __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_31,$17,$18,23968,0);
    __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_31);
    __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
    $19 = HEAP32[986]|0;
    $20 = HEAP32[(3948)>>2]|0;
    $21 = $self;
    $22 = ((($21)) + 20|0);
    HEAP32[$_45>>2] = $22;
    $23 = HEAP32[$_45>>2]|0;
    $__arg0 = $23;
    $24 = $__arg0;
    __ZN4core3fmt10ArgumentV13new17h25daa2abe202f87fE($tmp_ret,$24,162);
    $25 = ((($tmp_ret)) + 4|0);
    $26 = HEAP32[$tmp_ret>>2]|0;
    $27 = HEAP32[$25>>2]|0;
    HEAP32[$_44>>2] = $26;
    $28 = ((($_44)) + 4|0);
    HEAP32[$28>>2] = $27;
    __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_39,$19,$20,$_44,1);
    __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_39);
    $29 = HEAP32[988]|0;
    $30 = HEAP32[(3956)>>2]|0;
    __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_52,$29,$30,23968,0);
    __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_52);
    __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
    $31 = HEAP32[990]|0;
    $32 = HEAP32[(3964)>>2]|0;
    __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_60,$31,$32,23968,0);
    __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_60);
    __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
    $33 = $self;
    __ZN2ww10game_state9GameState11finish_game17h98f8075dc0a232beE($33);
    STACKTOP = sp;return;
    break;
   }
   default: {
    __ZN2ww8platform12clear_screen17ha9833ef1d45a571aE();
    $34 = $self;
    __ZN2ww12primary_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_19print_status_report17h355308555aafaeceE($34);
    $35 = HEAP32[992]|0;
    $36 = HEAP32[(3972)>>2]|0;
    __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_73,$35,$36,23968,0);
    __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_73);
    $37 = $self;
    $38 = (__ZN2ww10game_state9GameState14can_player_see17h36f56cd5a1d096adE($37)|0);
    $39 = $38 ^ 1;
    if ($39) {
     $40 = HEAP32[994]|0;
     $41 = HEAP32[(3980)>>2]|0;
     __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_84,$40,$41,23968,0);
     __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_84);
    } else {
     $42 = $self;
     __ZN2ww12primary_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_13describe_room17hc3f97d58c5550ee7E($42);
     $43 = $self;
     $44 = (__ZN2ww6combat57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_18maybe_start_combat17h4423803e04bffb9eE($43)|0);
     if ($44) {
      STACKTOP = sp;return;
     }
    }
    $45 = $self;
    $46 = ((($45)) + 16|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47&1;
    $49 = $48 ^ 1;
    if ($49) {
     $50 = HEAP32[996]|0;
     $51 = HEAP32[(3988)>>2]|0;
     __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_98,$50,$51,23968,0);
     __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_98);
     $52 = $self;
     $53 = ((($52)) + 16|0);
     HEAP8[$53>>0] = 1;
    }
    $54 = HEAP32[998]|0;
    $55 = HEAP32[(3996)>>2]|0;
    __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_105,$54,$55,23968,0);
    __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_105);
    $56 = $self;
    $57 = ((($56)) + 58|0);
    HEAP8[$57>>0] = 0;
    break L1;
   }
   }
  }
 } while(0);
 $58 = (__ZN2ww7command16CommandProcessor3get17h1ca1a44cc721190aE()|0);
 HEAP32[$abi_cast>>2] = $58;
 ;HEAP8[$_112>>0]=HEAP8[$abi_cast>>0]|0;HEAP8[$_112+1>>0]=HEAP8[$abi_cast+1>>0]|0;HEAP8[$_112+2>>0]=HEAP8[$abi_cast+2>>0]|0;
 $59 = HEAP8[$_112>>0]|0;
 $switch1 = ($59&255)<(1);
 if ($switch1) {
  STACKTOP = sp;return;
 }
 $60 = ((($_112)) + 1|0);
 ;HEAP8[$cmd>>0]=HEAP8[$60>>0]|0;HEAP8[$cmd+1>>0]=HEAP8[$60+1>>0]|0;
 $61 = HEAP8[$cmd>>0]|0;
 switch ($61<<24>>24) {
 case 0:  {
  $75 = ((($cmd)) + 1|0);
  $76 = HEAP8[$75>>0]|0;
  $dir = $76;
  $77 = $self;
  $78 = HEAP32[$77>>2]|0;
  $79 = $self;
  $80 = ((($79)) + 57|0);
  $81 = HEAP8[$80>>0]|0;
  $_119 = $81;
  $82 = $_119;
  $83 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_4room17h34a8fe8d447e3c3eE($78,$82)|0);
  ;HEAP32[$_116>>2]=HEAP32[$83>>2]|0;HEAP32[$_116+4>>2]=HEAP32[$83+4>>2]|0;HEAP32[$_116+8>>2]=HEAP32[$83+8>>2]|0;HEAP32[$_116+12>>2]=HEAP32[$83+12>>2]|0;HEAP32[$_116+16>>2]=HEAP32[$83+16>>2]|0;HEAP32[$_116+20>>2]=HEAP32[$83+20>>2]|0;HEAP32[$_116+24>>2]=HEAP32[$83+24>>2]|0;HEAP32[$_116+28>>2]=HEAP32[$83+28>>2]|0;
  $84 = $dir;
  $_120 = $84;
  $85 = $_120;
  $86 = (__ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8get_exit17hc7cc83c046e9cfc1E($_116,$85)|0);
  HEAP16[$abi_cast3>>1] = $86;
  ;HEAP8[$_115>>0]=HEAP8[$abi_cast3>>0]|0;HEAP8[$_115+1>>0]=HEAP8[$abi_cast3+1>>0]|0;
  $87 = HEAP8[$_115>>0]|0;
  $switch2 = ($87&255)<(1);
  if ($switch2) {
   $88 = HEAP32[1000]|0;
   $89 = HEAP32[(4004)>>2]|0;
   __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_126,$88,$89,23968,0);
   __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_126);
   STACKTOP = sp;return;
  } else {
   $90 = ((($_115)) + 1|0);
   $91 = HEAP8[$90>>0]|0;
   $room = $91;
   $92 = $room;
   $_122 = $92;
   $93 = $self;
   $94 = ((($93)) + 57|0);
   $95 = $_122;
   HEAP8[$94>>0] = $95;
   $96 = $self;
   $97 = ((($96)) + 58|0);
   HEAP8[$97>>0] = 1;
   $98 = $self;
   __ZN2ww10game_state9GameState12process_move17h4946846e8e1152f7E($98);
   STACKTOP = sp;return;
  }
  break;
 }
 case 1:  {
  $62 = $self;
  HEAP32[$_133>>2] = 2;
  __ZN2ww10game_state9GameState8set_mode17h3a836e9183396082E($62,$_133);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $66 = $self;
  $67 = ((($66)) + 58|0);
  HEAP8[$67>>0] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $68 = $self;
  $69 = ((($68)) + 40|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)==(0);
  if ($71) {
   $144 = HEAP32[1008]|0;
   $145 = HEAP32[(4036)>>2]|0;
   __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_179,$144,$145,23968,0);
   __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_179);
   STACKTOP = sp;return;
  } else {
   $146 = $self;
   HEAP32[$_187>>2] = 3;
   __ZN2ww10game_state9GameState8set_mode17h3a836e9183396082E($146,$_187);
   STACKTOP = sp;return;
  }
  break;
 }
 case 4:  {
  $72 = $self;
  __ZN2ww12primary_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_10use_amulet17h712ea01137121b1dE($72);
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $63 = $self;
  $64 = (__ZN2ww10game_state9GameState14can_player_see17h36f56cd5a1d096adE($63)|0);
  $65 = $64 ^ 1;
  if ($65) {
   $99 = HEAP32[1002]|0;
   $100 = HEAP32[(4012)>>2]|0;
   __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_138,$99,$100,23968,0);
   __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_138);
   STACKTOP = sp;return;
  }
  $101 = $self;
  $102 = HEAP32[$101>>2]|0;
  $103 = $self;
  $104 = ((($103)) + 57|0);
  $105 = HEAP8[$104>>0]|0;
  $_146 = $105;
  $106 = $_146;
  $107 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_4room17h34a8fe8d447e3c3eE($102,$106)|0);
  $108 = ((($107)) + 28|0);
  $109 = HEAP8[$108>>0]|0;
  $switch3 = ($109&255)<(1);
  if (!($switch3)) {
   $112 = ((($107)) + 28|0);
   $113 = ((($112)) + 1|0);
   $114 = HEAP8[$113>>0]|0;
   $switch = ($114&255)<(1);
   if ($switch) {
    $115 = ((($107)) + 28|0);
    $116 = ((($115)) + 1|0);
    $117 = ((($116)) + 1|0);
    $118 = HEAP8[$117>>0]|0;
    HEAP8[$amt>>0] = $118;
    $119 = HEAP32[1006]|0;
    $120 = HEAP32[(4028)>>2]|0;
    HEAP32[$_155>>2] = $amt;
    $121 = HEAP32[$_155>>2]|0;
    $__arg01 = $121;
    $122 = $__arg01;
    __ZN4core3fmt10ArgumentV13new17h5e4d74052f0565e7E($tmp_ret2,$122,163);
    $123 = ((($tmp_ret2)) + 4|0);
    $124 = HEAP32[$tmp_ret2>>2]|0;
    $125 = HEAP32[$123>>2]|0;
    HEAP32[$_154>>2] = $124;
    $126 = ((($_154)) + 4|0);
    HEAP32[$126>>2] = $125;
    __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_149,$119,$120,$_154,1);
    __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_149);
    $127 = HEAP8[$amt>>0]|0;
    $128 = $127&255;
    $129 = $self;
    $130 = ((($129)) + 36|0);
    $131 = HEAP32[$130>>2]|0;
    $$arith = (($131) + ($128))|0;
    $$postemp = (($131) + -2147483648)|0;
    $$negtemp = (($131) + 2147483647)|0;
    $$poscheck = ($$arith|0)<($$postemp|0);
    $$negcheck = ($$arith|0)>($$negtemp|0);
    $$ispos = ($131|0)>=(0);
    $$select = $$ispos ? $$poscheck : $$negcheck;
    $132 = $$select;
    if ($132) {
     __ZN4core9panicking5panic17hee9f4f8d26a91787E(4040);
     // unreachable;
    }
    $133 = $self;
    $134 = ((($133)) + 36|0);
    HEAP32[$134>>2] = $$arith;
    $135 = $self;
    $136 = HEAP32[$135>>2]|0;
    $137 = $self;
    $138 = ((($137)) + 57|0);
    $139 = HEAP8[$138>>0]|0;
    $_166 = $139;
    $140 = $_166;
    $141 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($136,$140)|0);
    $142 = ((($141)) + 28|0);
    HEAP8[$142>>0] = 0;
    $143 = $self;
    __ZN2ww10game_state9GameState12process_move17h4946846e8e1152f7E($143);
    STACKTOP = sp;return;
   }
  }
  $110 = HEAP32[1004]|0;
  $111 = HEAP32[(4020)>>2]|0;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_170,$110,$111,23968,0);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_170);
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $73 = $self;
  __ZN2ww10game_state9GameState11finish_game17h98f8075dc0a232beE($73);
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $74 = $self;
  HEAP32[$_191>>2] = 6;
  __ZN2ww10game_state9GameState8set_mode17h3a836e9183396082E($74,$_191);
  STACKTOP = sp;return;
  break;
 }
 default: {
  // unreachable;
 }
 }
}
function __ZN2ww9inventory57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_19tick_inventory_mode17h2ada868f18b43918E($0) {
 $0 = $0|0;
 var $$arith = 0, $$arith3 = 0, $$ispos = 0, $$ispos8 = 0, $$negcheck = 0, $$negcheck7 = 0, $$negtemp = 0, $$negtemp5 = 0, $$poscheck = 0, $$poscheck6 = 0, $$postemp = 0, $$postemp4 = 0, $$select = 0, $$select9 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_15 = 0, $_23 = 0, $_29 = 0, $_35 = 0, $_42 = 0, $_47 = 0, $_48 = 0;
 var $_6 = 0, $_62 = 0, $_67 = 0, $_68 = 0, $_78 = 0, $_85 = 0, $__arg0 = 0, $__arg01 = 0, $abi_cast = 0, $arg0 = 0, $cmd = 0, $item = 0, $price = 0, $self = 0, $switch = 0, $switch1 = 0, $tmp_ret = 0, $tmp_ret3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $tmp_ret3 = sp + 216|0;
 $tmp_ret = sp + 208|0;
 $abi_cast = sp + 244|0;
 $_85 = sp + 192|0;
 $_78 = sp + 168|0;
 $_68 = sp + 160|0;
 $_67 = sp + 152|0;
 $_62 = sp + 128|0;
 $_48 = sp + 120|0;
 $_47 = sp + 112|0;
 $_42 = sp + 88|0;
 $item = sp + 248|0;
 $cmd = sp + 80|0;
 $_29 = sp + 72|0;
 $_23 = sp + 48|0;
 $_15 = sp + 24|0;
 $_6 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 58|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if ($5) {
  $6 = HEAP32[928]|0;
  $7 = HEAP32[(3716)>>2]|0;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_6,$6,$7,23968,0);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_6);
  $8 = $self;
  __ZN2ww10game_state9GameState12print_wealth17hdf0aa4d03fe90c40E($8);
  $9 = HEAP32[930]|0;
  $10 = HEAP32[(3724)>>2]|0;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_15,$9,$10,23968,0);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_15);
  __ZN2ww7command16CommandProcessor9show_help17h22d6aa41c0a7fba6E();
  $11 = HEAP32[932]|0;
  $12 = HEAP32[(3732)>>2]|0;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_23,$11,$12,23968,0);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_23);
  $13 = $self;
  $14 = ((($13)) + 58|0);
  HEAP8[$14>>0] = 0;
 }
 $15 = (__ZN2ww7command16CommandProcessor3get17h5d4759f671873019E()|0);
 HEAP32[$abi_cast>>2] = $15;
 ;HEAP8[$_29>>0]=HEAP8[$abi_cast>>0]|0;HEAP8[$_29+1>>0]=HEAP8[$abi_cast+1>>0]|0;HEAP8[$_29+2>>0]=HEAP8[$abi_cast+2>>0]|0;
 $16 = HEAP8[$_29>>0]|0;
 $switch1 = ($16&255)<(1);
 if ($switch1) {
  STACKTOP = sp;return;
 }
 $17 = ((($_29)) + 1|0);
 ;HEAP8[$cmd>>0]=HEAP8[$17>>0]|0;HEAP8[$cmd+1>>0]=HEAP8[$17+1>>0]|0;
 $18 = HEAP8[$cmd>>0]|0;
 $switch = ($18&255)<(1);
 if (!($switch)) {
  $19 = $self;
  HEAP32[$_85>>2] = 1;
  __ZN2ww10game_state9GameState8set_mode17h3a836e9183396082E($19,$_85);
  STACKTOP = sp;return;
 }
 $20 = ((($cmd)) + 1|0);
 $21 = HEAP8[$20>>0]|0;
 HEAP8[$item>>0] = $21;
 $22 = (__ZN2ww5items4Item5price17h139a8fd652ec7d14E($item)|0);
 $price = $22;
 $23 = HEAP8[$item>>0]|0;
 switch ($23<<24>>24) {
 case 0:  {
  $24 = $self;
  $25 = ((($24)) + 56|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&1;
  $28 = $27&1;
  $_35 = $28;
  break;
 }
 case 1:  {
  $29 = $self;
  $30 = ((($29)) + 54|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&1;
  $33 = $32&1;
  $_35 = $33;
  break;
 }
 case 2:  {
  $34 = $self;
  $35 = ((($34)) + 52|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&1;
  $38 = $37&1;
  $_35 = $38;
  break;
 }
 case 3:  {
  $_35 = 0;
  break;
 }
 case 4:  {
  $39 = $self;
  $40 = ((($39)) + 53|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&1;
  $43 = $42&1;
  $_35 = $43;
  break;
 }
 case 5:  {
  $44 = $self;
  $45 = ((($44)) + 55|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&1;
  $48 = $47&1;
  $_35 = $48;
  break;
 }
 default: {
  // unreachable;
 }
 }
 $49 = $_35;
 $50 = $49&1;
 L20: do {
  if ($50) {
   $51 = HEAP32[934]|0;
   $52 = HEAP32[(3740)>>2]|0;
   HEAP32[$_48>>2] = $item;
   $53 = HEAP32[$_48>>2]|0;
   $__arg0 = $53;
   $54 = $__arg0;
   __ZN4core3fmt10ArgumentV13new17he36a66e0c3cb6d17E($tmp_ret3,$54,164);
   $55 = ((($tmp_ret3)) + 4|0);
   $56 = HEAP32[$tmp_ret3>>2]|0;
   $57 = HEAP32[$55>>2]|0;
   HEAP32[$_47>>2] = $56;
   $58 = ((($_47)) + 4|0);
   HEAP32[$58>>2] = $57;
   __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_42,$51,$52,$_47,1);
   __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_42);
  } else {
   $59 = $self;
   $60 = ((($59)) + 36|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $price;
   $63 = ($61|0)<($62|0);
   if ($63) {
    $64 = $self;
    __ZN2ww10game_state9GameState25accuse_player_of_cheating17hedcf8b8e600ae065E($64);
    break;
   }
   $65 = $price;
   $66 = $self;
   $67 = ((($66)) + 36|0);
   $68 = HEAP32[$67>>2]|0;
   $$arith3 = (($68) - ($65))|0;
   $$postemp4 = (($68) + -2147483647)|0;
   $$negtemp5 = (($68) + -2147483648)|0;
   $$poscheck6 = ($$arith3|0)<($$postemp4|0);
   $$negcheck7 = ($$arith3|0)>($$negtemp5|0);
   $$ispos8 = ($68|0)>=(0);
   $$select9 = $$ispos8 ? $$poscheck6 : $$negcheck7;
   $69 = $$select9;
   if ($69) {
    __ZN4core9panicking5panic17hee9f4f8d26a91787E(3760);
    // unreachable;
   }
   $70 = $self;
   $71 = ((($70)) + 36|0);
   HEAP32[$71>>2] = $$arith3;
   $72 = HEAP32[936]|0;
   $73 = HEAP32[(3748)>>2]|0;
   HEAP32[$_68>>2] = $item;
   $74 = HEAP32[$_68>>2]|0;
   $__arg01 = $74;
   $75 = $__arg01;
   __ZN4core3fmt10ArgumentV13new17he36a66e0c3cb6d17E($tmp_ret,$75,164);
   $76 = ((($tmp_ret)) + 4|0);
   $77 = HEAP32[$tmp_ret>>2]|0;
   $78 = HEAP32[$76>>2]|0;
   HEAP32[$_67>>2] = $77;
   $79 = ((($_67)) + 4|0);
   HEAP32[$79>>2] = $78;
   __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_62,$72,$73,$_67,1);
   __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_62);
   $80 = $self;
   __ZN2ww10game_state9GameState12print_wealth17hdf0aa4d03fe90c40E($80);
   $81 = HEAP8[$item>>0]|0;
   switch ($81<<24>>24) {
   case 0:  {
    $82 = $self;
    $83 = ((($82)) + 56|0);
    HEAP8[$83>>0] = 1;
    break L20;
    break;
   }
   case 1:  {
    $84 = $self;
    $85 = ((($84)) + 54|0);
    HEAP8[$85>>0] = 1;
    break L20;
    break;
   }
   case 2:  {
    $86 = $self;
    $87 = ((($86)) + 52|0);
    HEAP8[$87>>0] = 1;
    break L20;
    break;
   }
   case 3:  {
    $88 = $self;
    $89 = ((($88)) + 40|0);
    $90 = HEAP32[$89>>2]|0;
    $$arith = (($90) + 1)|0;
    $$postemp = (($90) + -2147483648)|0;
    $$negtemp = (($90) + 2147483647)|0;
    $$poscheck = ($$arith|0)<($$postemp|0);
    $$negcheck = ($$arith|0)>($$negtemp|0);
    $$ispos = ($90|0)>=(0);
    $$select = $$ispos ? $$poscheck : $$negcheck;
    $91 = $$select;
    if ($91) {
     __ZN4core9panicking5panic17hee9f4f8d26a91787E(3780);
     // unreachable;
    } else {
     $96 = $self;
     $97 = ((($96)) + 40|0);
     HEAP32[$97>>2] = $$arith;
     break L20;
    }
    break;
   }
   case 4:  {
    $92 = $self;
    $93 = ((($92)) + 53|0);
    HEAP8[$93>>0] = 1;
    break L20;
    break;
   }
   case 5:  {
    $94 = $self;
    $95 = ((($94)) + 55|0);
    HEAP8[$95>>0] = 1;
    break L20;
    break;
   }
   default: {
    // unreachable;
   }
   }
  }
 } while(0);
 $98 = HEAP32[938]|0;
 $99 = HEAP32[(3756)>>2]|0;
 __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_78,$98,$99,23968,0);
 __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_78);
 STACKTOP = sp;return;
}
function __ZN2ww10game_state9GameState18tick_eat_food_mode17h1effdf9872a8674fE($0) {
 $0 = $0|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_17 = 0;
 var $_18 = 0, $_19 = 0, $_8 = 0, $abi_cast = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $abi_cast = sp + 72|0;
 $personalityslot = sp + 56|0;
 $_19 = sp + 48|0;
 $_18 = sp + 32|0;
 $_17 = sp + 24|0;
 $_8 = sp;
 $self = sp + 68|0;
 $arg0 = $0;
 $1 = $arg0;
 HEAP32[$self>>2] = $1;
 $2 = HEAP32[$self>>2]|0;
 $3 = ((($2)) + 58|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if ($5) {
  $6 = HEAP32[$self>>2]|0;
  __ZN2ww10game_state9GameState10print_food17h5b0b08a1349eb93bE($6);
  $7 = HEAP32[893]|0;
  $8 = HEAP32[(3576)>>2]|0;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_8,$7,$8,23968,0);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_8);
  $9 = HEAP32[$self>>2]|0;
  $10 = ((($9)) + 58|0);
  HEAP8[$10>>0] = 0;
 }
 __ZN2ww8platform11show_prompt17hb4efc229f77a1980E(13322,29);
 __ZN2ww8platform10read_input17hae23db9dad14741bE($_18);
 HEAP32[$_19>>2] = $self;
 $11 = HEAP32[$_19>>2]|0;
 __THREW__ = 0;
 $12 = (invoke_iii(165,($_18|0),($11|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  HEAP32[$personalityslot>>2] = $15;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $16;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  HEAP8[$abi_cast>>0] = $12;
  ;HEAP8[$_17>>0]=HEAP8[$abi_cast>>0]|0;
  STACKTOP = sp;return;
 }
}
function __ZN2ww10debug_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_15tick_debug_mode17h6f66f75f72a3ccb7E($0) {
 $0 = $0|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_6 = 0, $_7 = 0, $_8 = 0, $abi_cast = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $abi_cast = sp + 48|0;
 $personalityslot = sp + 32|0;
 $_8 = sp + 24|0;
 $_7 = sp + 8|0;
 $_6 = sp;
 $self = sp + 44|0;
 $arg0 = $0;
 $1 = $arg0;
 HEAP32[$self>>2] = $1;
 __ZN2ww8platform11show_prompt17hb4efc229f77a1980E(12753,7);
 __ZN2ww8platform10read_input17hae23db9dad14741bE($_7);
 HEAP32[$_8>>2] = $self;
 $2 = HEAP32[$_8>>2]|0;
 __THREW__ = 0;
 $3 = (invoke_iii(166,($_7|0),($2|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  HEAP32[$personalityslot>>2] = $6;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $7;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  HEAP8[$abi_cast>>0] = $3;
  ;HEAP8[$_6>>0]=HEAP8[$abi_cast>>0]|0;
  STACKTOP = sp;return;
 }
}
function __ZN2ww6combat57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_16tick_combat_mode17h3f5b3896f965aa2cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $self = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $state = $3;
 $4 = $state;
 $5 = HEAP8[$4>>0]|0;
 switch ($5<<24>>24) {
 case 0:  {
  $6 = $self;
  $7 = $state;
  __ZN2ww6combat57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_22tick_preparation_phase17h2776c408e20d390bE($6,$7);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $8 = $self;
  $9 = $state;
  __ZN2ww6combat57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_17tick_battle_phase17h2fc8a9a1e550fb24E($8,$9);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $10 = $self;
  $11 = $state;
  __ZN2ww6combat57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_20tick_aftermath_phase17h5bb4254d6a942f1fE($10,$11);
  STACKTOP = sp;return;
  break;
 }
 default: {
  // unreachable;
 }
 }
}
function __ZN2ww6combat57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_22tick_preparation_phase17h2776c408e20d390bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_8 = 0, $_9 = 0, $abi_cast = 0, $arg = 0;
 var $arg0 = 0, $arg1 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $abi_cast = sp + 64|0;
 $personalityslot = sp + 40|0;
 $arg = sp + 32|0;
 $_10 = sp + 24|0;
 $_9 = sp + 8|0;
 $_8 = sp;
 $state = sp + 60|0;
 $self = sp + 56|0;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 HEAP32[$self>>2] = $2;
 $3 = $arg1;
 HEAP32[$state>>2] = $3;
 __ZN2ww8platform11show_prompt17hb4efc229f77a1980E(12514,22);
 __ZN2ww8platform10read_input17hae23db9dad14741bE($_9);
 HEAP32[$_10>>2] = $self;
 $4 = ((($_10)) + 4|0);
 HEAP32[$4>>2] = $state;
 $5 = ((($_10)) + 4|0);
 $6 = HEAP32[$_10>>2]|0;
 $7 = HEAP32[$5>>2]|0;
 HEAP32[$arg>>2] = $6;
 $8 = ((($arg)) + 4|0);
 HEAP32[$8>>2] = $7;
 __THREW__ = 0;
 $9 = (invoke_iii(167,($_9|0),($arg|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = tempRet0;
  HEAP32[$personalityslot>>2] = $12;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $13;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  HEAP8[$abi_cast>>0] = $9;
  ;HEAP8[$_8>>0]=HEAP8[$abi_cast>>0]|0;
  STACKTOP = sp;return;
 }
}
function __ZN2ww6combat57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_17tick_battle_phase17h2fc8a9a1e550fb24E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$arith2 = 0, $$denom = 0, $$div = 0, $$ispos = 0, $$iszero = 0, $$negcheck = 0, $$negtemp = 0, $$overflow = 0, $$poscheck = 0, $$postemp = 0, $$same = 0, $$select = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $_13 = 0, $_18 = 0, $_19 = 0, $_26 = 0, $_37 = 0, $_59 = 0;
 var $_66 = 0, $_76 = 0, $_77 = 0, $_8 = 0, $__arg0 = 0, $arg0 = 0, $arg1 = 0, $ff = 0, $phase = 0, $self = 0, $state = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $tmp_ret = sp + 144|0;
 $_76 = sp + 136|0;
 $_66 = sp + 112|0;
 $_59 = sp + 88|0;
 $_37 = sp + 64|0;
 $_26 = sp + 40|0;
 $_19 = sp + 32|0;
 $_18 = sp + 24|0;
 $_13 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $state = $3;
 $4 = $state;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $ff = $6;
 $7 = $state;
 $8 = HEAP8[$7>>0]|0;
 $_8 = $8;
 $9 = $_8;
 $phase = $9;
 $10 = (+__ZN2ww8platform6random17h52001b9bac3cb008E());
 $11 = $10 > 0.5;
 if ($11) {
  $12 = HEAP32[780]|0;
  $13 = HEAP32[(3124)>>2]|0;
  $14 = $state;
  $15 = ((($14)) + 1|0);
  HEAP32[$_19>>2] = $15;
  $16 = HEAP32[$_19>>2]|0;
  $__arg0 = $16;
  $17 = $__arg0;
  __ZN4core3fmt10ArgumentV13new17hd7bb120a03608de5E($tmp_ret,$17,168);
  $18 = ((($tmp_ret)) + 4|0);
  $19 = HEAP32[$tmp_ret>>2]|0;
  $20 = HEAP32[$18>>2]|0;
  HEAP32[$_18>>2] = $19;
  $21 = ((($_18)) + 4|0);
  HEAP32[$21>>2] = $20;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_13,$12,$13,$_18,1);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_13);
 } else {
  $22 = HEAP32[782]|0;
  $23 = HEAP32[(3132)>>2]|0;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_26,$22,$23,23968,0);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_26);
 }
 __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
 $24 = (+__ZN2ww8platform6random17h52001b9bac3cb008E());
 $25 = $24 > 0.5;
 do {
  if ($25) {
   $26 = HEAP32[784]|0;
   $27 = HEAP32[(3140)>>2]|0;
   __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_37,$26,$27,23968,0);
   __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_37);
   $28 = $ff;
   $$arith2 = ($28*5)|0;
   $$iszero = ($28|0)==(0);
   $$denom = $$iszero ? 1 : $28;
   $$div = (($$arith2|0) / ($$denom|0))&-1;
   $$same = ($$div|0)!=(5);
   $$overflow = $$iszero ? 0 : $$same;
   $29 = $$overflow;
   if ($29) {
    __ZN4core9panicking5panic17hee9f4f8d26a91787E(3160);
    // unreachable;
   }
   $30 = ($$arith2|0)==(-2147483648);
   $31 = 0 & $30;
   $32 = $31;
   if ($32) {
    __ZN4core9panicking5panic17hee9f4f8d26a91787E(3180);
    // unreachable;
   } else {
    $33 = (($$arith2|0) / 6)&-1;
    $ff = $33;
    __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
    break;
   }
  }
 } while(0);
 $34 = (+__ZN2ww8platform6random17h52001b9bac3cb008E());
 $35 = $34 > 0.5;
 if ($35) {
  $36 = $self;
  $37 = ((($36)) + 32|0);
  $38 = HEAP32[$37>>2]|0;
  $$arith = (($38) - 5)|0;
  $$postemp = (($38) + -2147483647)|0;
  $$negtemp = (($38) + -2147483648)|0;
  $$poscheck = ($$arith|0)<($$postemp|0);
  $$negcheck = ($$arith|0)>($$negtemp|0);
  $$ispos = ($38|0)>=(0);
  $$select = $$ispos ? $$poscheck : $$negcheck;
  $39 = $$select;
  if ($39) {
   __ZN4core9panicking5panic17hee9f4f8d26a91787E(3200);
   // unreachable;
  }
  $40 = $self;
  $41 = ((($40)) + 32|0);
  HEAP32[$41>>2] = $$arith;
  $42 = $self;
  $43 = ((($42)) + 32|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)>(0);
  if ($45) {
   $46 = HEAP32[786]|0;
   $47 = HEAP32[(3148)>>2]|0;
   __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_59,$46,$47,23968,0);
   __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_59);
  } else {
   $48 = HEAP32[788]|0;
   $49 = HEAP32[(3156)>>2]|0;
   __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_66,$48,$49,23968,0);
   __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_66);
  }
  __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
 }
 $50 = (+__ZN2ww8platform6random17h52001b9bac3cb008E());
 $51 = $50 <= 0.34999999403953552;
 if (!($51)) {
  $52 = $phase;
  $_77 = $52;
  $53 = $ff;
  $54 = $_77;
  HEAP8[$_76>>0] = $54;
  $55 = $state;
  $56 = ((($55)) + 1|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = ((($_76)) + 1|0);
  HEAP8[$58>>0] = $57;
  $59 = ((($_76)) + 4|0);
  HEAP32[$59>>2] = $53;
  $60 = $self;
  $61 = ((($60)) + 4|0);
  HEAP32[$61>>2] = 4;
  $62 = ((($61)) + 4|0);
  ;HEAP32[$62>>2]=HEAP32[$_76>>2]|0;HEAP32[$62+4>>2]=HEAP32[$_76+4>>2]|0;
  STACKTOP = sp;return;
 }
 $phase = 2;
 $52 = $phase;
 $_77 = $52;
 $53 = $ff;
 $54 = $_77;
 HEAP8[$_76>>0] = $54;
 $55 = $state;
 $56 = ((($55)) + 1|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = ((($_76)) + 1|0);
 HEAP8[$58>>0] = $57;
 $59 = ((($_76)) + 4|0);
 HEAP32[$59>>2] = $53;
 $60 = $self;
 $61 = ((($60)) + 4|0);
 HEAP32[$61>>2] = 4;
 $62 = ((($61)) + 4|0);
 ;HEAP32[$62>>2]=HEAP32[$_76>>2]|0;HEAP32[$62+4>>2]=HEAP32[$_76+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN2ww6combat57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_20tick_aftermath_phase17h5bb4254d6a942f1fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$ispos = 0, $$negcheck = 0, $$negtemp = 0, $$poscheck = 0, $$postemp = 0, $$select = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_15 = 0, $_16 = 0, $_23 = 0, $_31 = 0, $_36 = 0, $_37 = 0, $_44 = 0, $_52 = 0, $_63 = 0, $_72 = 0;
 var $_75 = 0, $__arg0 = 0, $__arg01 = 0, $arg0 = 0, $arg1 = 0, $self = 0, $state = 0, $tmp_ret = 0, $tmp_ret2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $tmp_ret2 = sp + 200|0;
 $tmp_ret = sp + 192|0;
 $_75 = sp + 176|0;
 $_63 = sp + 152|0;
 $_52 = sp + 128|0;
 $_44 = sp + 104|0;
 $_37 = sp + 96|0;
 $_36 = sp + 88|0;
 $_31 = sp + 64|0;
 $_23 = sp + 40|0;
 $_16 = sp + 32|0;
 $_15 = sp + 24|0;
 $_10 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $state = $3;
 $4 = (__ZN2ww8platform10random_i3217he626159cc5ccf990E(0,16)|0);
 $5 = $state;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)>($7|0);
 if ($8) {
  $9 = HEAP32[738]|0;
  $10 = HEAP32[(2956)>>2]|0;
  $11 = $state;
  $12 = ((($11)) + 1|0);
  HEAP32[$_16>>2] = $12;
  $13 = HEAP32[$_16>>2]|0;
  $__arg0 = $13;
  $14 = $__arg0;
  __ZN4core3fmt10ArgumentV13new17hd7bb120a03608de5E($tmp_ret2,$14,168);
  $15 = ((($tmp_ret2)) + 4|0);
  $16 = HEAP32[$tmp_ret2>>2]|0;
  $17 = HEAP32[$15>>2]|0;
  HEAP32[$_15>>2] = $16;
  $18 = ((($_15)) + 4|0);
  HEAP32[$18>>2] = $17;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_10,$9,$10,$_15,1);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_10);
  $19 = HEAP32[742]|0;
  $20 = HEAP32[(2972)>>2]|0;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_23,$19,$20,23968,0);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_23);
  $21 = $self;
  $22 = ((($21)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $$arith = (($23) + 1)|0;
  $$postemp = (($23) + -2147483648)|0;
  $$negtemp = (($23) + 2147483647)|0;
  $$poscheck = ($$arith|0)<($$postemp|0);
  $$negcheck = ($$arith|0)>($$negtemp|0);
  $$ispos = ($23|0)>=(0);
  $$select = $$ispos ? $$poscheck : $$negcheck;
  $24 = $$select;
  if ($24) {
   __ZN4core9panicking5panic17hee9f4f8d26a91787E(3020);
   // unreachable;
  }
  $45 = $self;
  $46 = ((($45)) + 48|0);
  HEAP32[$46>>2] = $$arith;
  $53 = HEAP32[748]|0;
  $54 = HEAP32[(2996)>>2]|0;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_63,$53,$54,23968,0);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_63);
  __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
  $55 = $self;
  $56 = HEAP32[$55>>2]|0;
  $57 = $self;
  $58 = ((($57)) + 57|0);
  $59 = HEAP8[$58>>0]|0;
  $_72 = $59;
  $60 = $_72;
  $61 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($56,$60)|0);
  $62 = ((($61)) + 28|0);
  HEAP8[$62>>0] = 0;
  $63 = $self;
  HEAP32[$_75>>2] = 1;
  __ZN2ww10game_state9GameState8set_mode17h3a836e9183396082E($63,$_75);
  STACKTOP = sp;return;
 } else {
  $25 = HEAP32[740]|0;
  $26 = HEAP32[(2964)>>2]|0;
  $27 = $state;
  $28 = ((($27)) + 1|0);
  HEAP32[$_37>>2] = $28;
  $29 = HEAP32[$_37>>2]|0;
  $__arg01 = $29;
  $30 = $__arg01;
  __ZN4core3fmt10ArgumentV13new17hd7bb120a03608de5E($tmp_ret,$30,168);
  $31 = ((($tmp_ret)) + 4|0);
  $32 = HEAP32[$tmp_ret>>2]|0;
  $33 = HEAP32[$31>>2]|0;
  HEAP32[$_36>>2] = $32;
  $34 = ((($_36)) + 4|0);
  HEAP32[$34>>2] = $33;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_31,$25,$26,$_36,1);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_31);
  $35 = HEAP32[744]|0;
  $36 = HEAP32[(2980)>>2]|0;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_44,$35,$36,23968,0);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_44);
  __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
  $37 = HEAP32[746]|0;
  $38 = HEAP32[(2988)>>2]|0;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_52,$37,$38,23968,0);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_52);
  $39 = $self;
  $40 = ((($39)) + 32|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(-2147483648);
  $43 = 0 & $42;
  $44 = $43;
  if ($44) {
   __ZN4core9panicking5panic17hee9f4f8d26a91787E(3000);
   // unreachable;
  }
  $47 = $self;
  $48 = ((($47)) + 32|0);
  $49 = $self;
  $50 = ((($49)) + 32|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51|0) / 2)&-1;
  HEAP32[$48>>2] = $52;
  $53 = HEAP32[748]|0;
  $54 = HEAP32[(2996)>>2]|0;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_63,$53,$54,23968,0);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_63);
  __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
  $55 = $self;
  $56 = HEAP32[$55>>2]|0;
  $57 = $self;
  $58 = ((($57)) + 57|0);
  $59 = HEAP8[$58>>0]|0;
  $_72 = $59;
  $60 = $_72;
  $61 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E($56,$60)|0);
  $62 = ((($61)) + 28|0);
  HEAP8[$62>>0] = 0;
  $63 = $self;
  HEAP32[$_75>>2] = 1;
  __ZN2ww10game_state9GameState8set_mode17h3a836e9183396082E($63,$_75);
  STACKTOP = sp;return;
 }
}
function __ZN62__LT_ww__monsters__MonsterId_u20_as_u20_core__fmt__Display_GT_3fmt17h25e718e44c4112b8E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_11 = 0;
 var $_12 = 0, $_14 = 0, $_14$index4 = 0, $_6 = 0, $__arg0 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $f = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $2 = sp;
 $abi_cast = sp + 92|0;
 $tmp_ret = sp + 64|0;
 $_14 = sp + 56|0;
 $_12 = sp + 48|0;
 $_11 = sp + 40|0;
 $_6 = sp + 16|0;
 $_0 = sp + 8|0;
 $arg0 = $0;
 $arg1 = $1;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 $6 = HEAP32[772]|0;
 $7 = HEAP32[(3092)>>2]|0;
 $8 = $self;
 __ZN2ww8monsters9MonsterId6as_str17h20dac69eff697740E($2,$8);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$_14>>2] = $$sreg$field;
 $_14$index4 = ((($_14)) + 4|0);
 HEAP32[$_14$index4>>2] = $$sreg$field2;
 HEAP32[$_12>>2] = $_14;
 $9 = HEAP32[$_12>>2]|0;
 $__arg0 = $9;
 $10 = $__arg0;
 __ZN4core3fmt10ArgumentV13new17hbee887761b52d43aE($tmp_ret,$10,127);
 $11 = ((($tmp_ret)) + 4|0);
 $12 = HEAP32[$tmp_ret>>2]|0;
 $13 = HEAP32[$11>>2]|0;
 HEAP32[$_11>>2] = $12;
 $14 = ((($_11)) + 4|0);
 HEAP32[$14>>2] = $13;
 __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_6,$6,$7,$_11,1);
 $15 = (__ZN4core3fmt9Formatter9write_fmt17hadece32d1a4edb44E($5,$_6)|0);
 HEAP8[$abi_cast>>0] = $15;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
 $16 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($16|0);
}
function __ZN4core3fmt10ArgumentV13new17hd7bb120a03608de5E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$transmute_temp>>2] = $5;
 $6 = HEAP32[$transmute_temp>>2]|0;
 $7 = $x;
 HEAP32[$transmute_temp1>>2] = $7;
 $8 = HEAP32[$transmute_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN2ww8monsters9MonsterId6as_str17h20dac69eff697740E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sink = 0, $$sink2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_0 = 0, $arg0 = 0, $retVal$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP8[$2>>0]|0;
 switch ($3<<24>>24) {
 case 0:  {
  $$sink = 18;$$sink2 = 12283;
  break;
 }
 case 1:  {
  $$sink = 21;$$sink2 = 12301;
  break;
 }
 case 2:  {
  $$sink = 18;$$sink2 = 12322;
  break;
 }
 case 3:  {
  $$sink = 22;$$sink2 = 12340;
  break;
 }
 default: {
  // unreachable;
 }
 }
 HEAP32[$_0>>2] = $$sink2;
 $4 = ((($_0)) + 4|0);
 HEAP32[$4>>2] = $$sink;
 $5 = HEAP32[$_0>>2]|0;
 $6 = ((($_0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$retVal>>2] = $5;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17hb618677786d618baE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val11 = 0, $$expand_i1_val12 = 0, $$expand_i1_val13 = 0, $$expand_i1_val14 = 0, $$field = 0, $$field5 = 0, $$index4 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_10 = 0, $_11 = 0, $_8 = 0, $_9 = 0, $arg = 0, $arg0 = 0, $arg1 = 0, $f = 0, $personalityslot = 0, $personalityslot$index7 = 0, $personalityslot$index9 = 0, $self = 0, $switch = 0, $switch2 = 0, $switch3 = 0, $x = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $personalityslot = sp + 112|0;
 $arg = sp + 104|0;
 $_9 = sp + 88|0;
 $_8 = sp + 72|0;
 $x = sp + 56|0;
 $f = sp + 48|0;
 $self = sp + 32|0;
 $_0 = sp + 24|0;
 $arg1 = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$0>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$0+8>>2]|0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;
 $_11 = 0;
 $_10 = 0;
 $_10 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;
 $_11 = 1;
 $2 = ((($arg1)) + 4|0);
 $3 = HEAP32[$arg1>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$f>>2] = $3;
 $5 = ((($f)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = HEAP32[$self>>2]|0;
 $7 = ($6|0)!=(0|0);
 $$expand_i1_val = $7&1;
 $$expand_i1_val10 = 1;
 $switch3 = ($$expand_i1_val&255)<($$expand_i1_val10&255);
 if ($switch3) {
  $$sink = 0;
 } else {
  $_10 = 0;
  ;HEAP32[$x>>2]=HEAP32[$self>>2]|0;HEAP32[$x+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$x+8>>2]=HEAP32[$self+8>>2]|0;
  $_11 = 0;
  $10 = ((($f)) + 4|0);
  $11 = HEAP32[$f>>2]|0;
  $12 = HEAP32[$10>>2]|0;
  ;HEAP32[$_9>>2]=HEAP32[$x>>2]|0;HEAP32[$_9+4>>2]=HEAP32[$x+4>>2]|0;HEAP32[$_9+8>>2]=HEAP32[$x+8>>2]|0;
  ;HEAP32[$_8>>2]=HEAP32[$_9>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$_9+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$_9+8>>2]|0;
  HEAP32[$arg>>2] = $11;
  $13 = ((($arg)) + 4|0);
  HEAP32[$13>>2] = $12;
  __THREW__ = 0;
  invoke_vii(169,($arg|0),($_8|0));
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $29 = ___cxa_find_matching_catch_2()|0;
   $30 = tempRet0;
   HEAP32[$personalityslot>>2] = $29;
   $personalityslot$index7 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index7>>2] = $30;
   $31 = $_11;
   $32 = $31&1;
   if ($32) {
    $_11 = 0;
   }
   $8 = HEAP32[$self>>2]|0;
   $9 = ($8|0)!=(0|0);
   $$expand_i1_val11 = $9&1;
   $$expand_i1_val12 = 1;
   $switch = ($$expand_i1_val11&255)<($$expand_i1_val12&255);
   if ($switch) {
    __ZN4drop17h8d63afbc99eb0efaE($self);
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index4 = ((($personalityslot)) + 4|0);
    $$field5 = HEAP32[$$index4>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
   $21 = $_10;
   $22 = $21&1;
   if (!($22)) {
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index4 = ((($personalityslot)) + 4|0);
    $$field5 = HEAP32[$$index4>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
   $_10 = 0;
   __ZN4drop17hdd1638425ff7362fE($self);
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index4 = ((($personalityslot)) + 4|0);
   $$field5 = HEAP32[$$index4>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  } else {
   $$sink = 1;
  }
 }
 HEAP8[$_0>>0] = $$sink;
 $16 = $_11;
 $17 = $16&1;
 if ($17) {
  $_11 = 0;
 }
 $18 = HEAP32[$self>>2]|0;
 $19 = ($18|0)!=(0|0);
 $$expand_i1_val13 = $19&1;
 $$expand_i1_val14 = 1;
 $switch2 = ($$expand_i1_val13&255)<($$expand_i1_val14&255);
 if ($switch2) {
  __THREW__ = 0;
  invoke_vi(170,($self|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if (!($24)) {
   $20 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($20|0);
  }
 } else {
  $25 = $_10;
  $26 = $25&1;
  if (!($26)) {
   $20 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($20|0);
  }
  $_10 = 0;
  __THREW__ = 0;
  invoke_vi(142,($self|0));
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if (!($28)) {
   $20 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($20|0);
  }
 }
 $33 = ___cxa_find_matching_catch_2()|0;
 $34 = tempRet0;
 HEAP32[$personalityslot>>2] = $33;
 $personalityslot$index9 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index9>>2] = $34;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index4 = ((($personalityslot)) + 4|0);
 $$field5 = HEAP32[$$index4>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
 return (0)|0;
}
function __ZN2ww6combat57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_22tick_preparation_phase28__u7b__u7b_closure_u7d__u7d_17h5d5986fa73202728E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_13 = 0, $_6 = 0, $__debuginfo_env_ptr = 0;
 var $arg0 = 0, $arg1 = 0, $personalityslot = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $personalityslot = sp + 56|0;
 $_12 = sp + 48|0;
 $_6 = sp + 24|0;
 $arg1 = sp + 8|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$0>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$0+4>>2]|0;
 $__debuginfo_env_ptr = $arg0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$1+8>>2]|0;
 $2 = HEAP32[$arg0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vi(171,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = HEAP32[817]|0;
  $7 = HEAP32[(3272)>>2]|0;
  __THREW__ = 0;
  invoke_viiiii(130,($_6|0),($6|0),($7|0),(23968|0),0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   __THREW__ = 0;
   invoke_vi(172,($_6|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $_13 = 1;
    $12 = $_13;
    HEAP8[$_12>>0] = $12;
    $13 = ((($arg0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($15)) + 1|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ((($_12)) + 1|0);
    HEAP8[$18>>0] = $17;
    $19 = ((($arg0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($21)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($_12)) + 4|0);
    HEAP32[$24>>2] = $23;
    $25 = HEAP32[$arg0>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = ((($26)) + 4|0);
    HEAP32[$27>>2] = 4;
    $28 = ((($27)) + 4|0);
    ;HEAP32[$28>>2]=HEAP32[$_12>>2]|0;HEAP32[$28+4>>2]=HEAP32[$_12+4>>2]|0;
    __THREW__ = 0;
    invoke_vi(142,($arg1|0));
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if (!($30)) {
     STACKTOP = sp;return;
    }
    $33 = ___cxa_find_matching_catch_2()|0;
    $34 = tempRet0;
    HEAP32[$personalityslot>>2] = $33;
    $personalityslot$index6 = ((($personalityslot)) + 4|0);
    HEAP32[$personalityslot$index6>>2] = $34;
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index1 = ((($personalityslot)) + 4|0);
    $$field2 = HEAP32[$$index1>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
  }
 }
 $31 = ___cxa_find_matching_catch_2()|0;
 $32 = tempRet0;
 HEAP32[$personalityslot>>2] = $31;
 $personalityslot$index4 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index4>>2] = $32;
 __ZN4drop17hdd1638425ff7362fE($arg1);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4drop17h8d63afbc99eb0efaE($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $1 = 0, $2 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 $$expand_i1_val = $2&1;
 $$expand_i1_val2 = 1;
 $switch = ($$expand_i1_val&255)<($$expand_i1_val2&255);
 if ($switch) {
  return;
 }
 __ZN4drop17hdd1638425ff7362fE($0);
 return;
}
function __ZN2ww6combat57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_7prepare17hd00d5b455d0219adE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13 = 0, $_19 = 0, $_26 = 0, $_32 = 0, $_37 = 0, $_43 = 0, $_48 = 0, $_55 = 0, $_6 = 0;
 var $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $_55 = sp + 120|0;
 $_48 = sp + 96|0;
 $_37 = sp + 72|0;
 $_26 = sp + 48|0;
 $_19 = sp + 24|0;
 $_6 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 55|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if ($5) {
  $6 = HEAP32[819]|0;
  $7 = HEAP32[(3280)>>2]|0;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_6,$6,$7,23968,0);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_6);
 }
 $8 = $self;
 $9 = ((($8)) + 54|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&1;
 $12 = $11 ^ 1;
 if ($12) {
  $13 = $self;
  $14 = ((($13)) + 52|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&1;
  $17 = $16 ^ 1;
  if ($17) {
   $_13 = 1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $_13 = 0;
 }
 $18 = $_13;
 $19 = $18&1;
 if ($19) {
  $20 = HEAP32[821]|0;
  $21 = HEAP32[(3288)>>2]|0;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_19,$20,$21,23968,0);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_19);
  $22 = HEAP32[823]|0;
  $23 = HEAP32[(3296)>>2]|0;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_26,$22,$23,23968,0);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_26);
  __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
  STACKTOP = sp;return;
 }
 $24 = $self;
 $25 = ((($24)) + 54|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&1;
 if ($27) {
  $28 = $self;
  $29 = ((($28)) + 52|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&1;
  $32 = $31 ^ 1;
  if ($32) {
   $_32 = 1;
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $_32 = 0;
 }
 $33 = $_32;
 $34 = $33&1;
 if ($34) {
  $35 = HEAP32[825]|0;
  $36 = HEAP32[(3304)>>2]|0;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_37,$35,$36,23968,0);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_37);
  __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
  STACKTOP = sp;return;
 }
 $37 = $self;
 $38 = ((($37)) + 52|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&1;
 if ($40) {
  $41 = $self;
  $42 = ((($41)) + 54|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&1;
  $45 = $44 ^ 1;
  if ($45) {
   $_43 = 1;
  } else {
   label = 17;
  }
 } else {
  label = 17;
 }
 if ((label|0) == 17) {
  $_43 = 0;
 }
 $46 = $_43;
 $47 = $46&1;
 if ($47) {
  $48 = HEAP32[827]|0;
  $49 = HEAP32[(3312)>>2]|0;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_48,$48,$49,23968,0);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_48);
  __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
  STACKTOP = sp;return;
 } else {
  $50 = HEAP32[829]|0;
  $51 = HEAP32[(3320)>>2]|0;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_55,$50,$51,23968,0);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_55);
  __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
  STACKTOP = sp;return;
 }
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17h7a017fefee213dc5E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val11 = 0, $$expand_i1_val12 = 0, $$expand_i1_val13 = 0, $$expand_i1_val14 = 0, $$field = 0, $$field5 = 0, $$index4 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_10 = 0, $_11 = 0, $_7 = 0;
 var $_8 = 0, $_9 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $f = 0, $personalityslot = 0, $personalityslot$index7 = 0, $personalityslot$index9 = 0, $self = 0, $switch = 0, $switch2 = 0, $switch3 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $personalityslot = sp + 112|0;
 $_9 = sp + 96|0;
 $_8 = sp + 80|0;
 $_7 = sp + 72|0;
 $x = sp + 56|0;
 $f = sp + 48|0;
 $self = sp + 32|0;
 $_0 = sp + 24|0;
 $abi_cast = sp + 120|0;
 $arg1 = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$0>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$0+8>>2]|0;
 HEAP32[$abi_cast>>2] = $1;
 ;HEAP32[$arg1>>2]=HEAP32[$abi_cast>>2]|0;
 $_11 = 0;
 $_10 = 0;
 $_10 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;
 $_11 = 1;
 ;HEAP32[$f>>2]=HEAP32[$arg1>>2]|0;
 $2 = HEAP32[$self>>2]|0;
 $3 = ($2|0)!=(0|0);
 $$expand_i1_val = $3&1;
 $$expand_i1_val10 = 1;
 $switch3 = ($$expand_i1_val&255)<($$expand_i1_val10&255);
 if ($switch3) {
  $$sink = 0;
 } else {
  $_10 = 0;
  ;HEAP32[$x>>2]=HEAP32[$self>>2]|0;HEAP32[$x+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$x+8>>2]=HEAP32[$self+8>>2]|0;
  $_11 = 0;
  ;HEAP32[$_7>>2]=HEAP32[$f>>2]|0;
  ;HEAP32[$_9>>2]=HEAP32[$x>>2]|0;HEAP32[$_9+4>>2]=HEAP32[$x+4>>2]|0;HEAP32[$_9+8>>2]=HEAP32[$x+8>>2]|0;
  ;HEAP32[$_8>>2]=HEAP32[$_9>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$_9+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$_9+8>>2]|0;
  $6 = HEAP32[$_7>>2]|0;
  __THREW__ = 0;
  invoke_vii(173,($6|0),($_8|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $22 = ___cxa_find_matching_catch_2()|0;
   $23 = tempRet0;
   HEAP32[$personalityslot>>2] = $22;
   $personalityslot$index7 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index7>>2] = $23;
   $24 = $_11;
   $25 = $24&1;
   if ($25) {
    $_11 = 0;
   }
   $4 = HEAP32[$self>>2]|0;
   $5 = ($4|0)!=(0|0);
   $$expand_i1_val11 = $5&1;
   $$expand_i1_val12 = 1;
   $switch = ($$expand_i1_val11&255)<($$expand_i1_val12&255);
   if ($switch) {
    __ZN4drop17h8d63afbc99eb0efaE($self);
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index4 = ((($personalityslot)) + 4|0);
    $$field5 = HEAP32[$$index4>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
   $14 = $_10;
   $15 = $14&1;
   if (!($15)) {
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index4 = ((($personalityslot)) + 4|0);
    $$field5 = HEAP32[$$index4>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
   $_10 = 0;
   __ZN4drop17hdd1638425ff7362fE($self);
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index4 = ((($personalityslot)) + 4|0);
   $$field5 = HEAP32[$$index4>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  } else {
   $$sink = 1;
  }
 }
 HEAP8[$_0>>0] = $$sink;
 $9 = $_11;
 $10 = $9&1;
 if ($10) {
  $_11 = 0;
 }
 $11 = HEAP32[$self>>2]|0;
 $12 = ($11|0)!=(0|0);
 $$expand_i1_val13 = $12&1;
 $$expand_i1_val14 = 1;
 $switch2 = ($$expand_i1_val13&255)<($$expand_i1_val14&255);
 if ($switch2) {
  __THREW__ = 0;
  invoke_vi(170,($self|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   $13 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($13|0);
  }
 } else {
  $18 = $_10;
  $19 = $18&1;
  if (!($19)) {
   $13 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($13|0);
  }
  $_10 = 0;
  __THREW__ = 0;
  invoke_vi(142,($self|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   $13 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($13|0);
  }
 }
 $26 = ___cxa_find_matching_catch_2()|0;
 $27 = tempRet0;
 HEAP32[$personalityslot>>2] = $26;
 $personalityslot$index9 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index9>>2] = $27;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index4 = ((($personalityslot)) + 4|0);
 $$field5 = HEAP32[$$index4>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
 return (0)|0;
}
function __ZN2ww10debug_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_15tick_debug_mode28__u7b__u7b_closure_u7d__u7d_17ha14f268cc79a79d6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $$sreg$field = 0, $$sreg$field6 = 0, $$sreg$index5 = 0, $$sreg1$field = 0, $$sreg1$field9 = 0, $$sreg1$index8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0;
 var $_13 = 0, $_14 = 0, $_15 = 0, $_38 = 0, $_39 = 0, $_4 = 0, $_40 = 0, $_48 = 0, $__debuginfo_env_ptr = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $input = 0, $personalityslot = 0, $personalityslot$index11 = 0, $personalityslot$index13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $2 = sp + 16|0;
 $3 = sp;
 $personalityslot = sp + 216|0;
 $_48 = sp + 192|0;
 $_40 = sp + 144|0;
 $_39 = sp + 96|0;
 $_38 = sp + 80|0;
 $_13 = sp + 64|0;
 $input = sp + 48|0;
 $arg1 = sp + 32|0;
 $abi_cast = sp + 224|0;
 $arg0 = sp + 24|0;
 HEAP32[$abi_cast>>2] = $0;
 ;HEAP32[$arg0>>2]=HEAP32[$abi_cast>>2]|0;
 $__debuginfo_env_ptr = $arg0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$1+8>>2]|0;
 ;HEAP32[$input>>2]=HEAP32[$arg1>>2]|0;HEAP32[$input+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$input+8>>2]=HEAP32[$arg1+8>>2]|0;
 __THREW__ = 0;
 $4 = (invoke_iii(174,($input|0),(3372|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L1: do {
  if (!($6)) {
   if ($4) {
    label = 2;
   } else {
    __THREW__ = 0;
    $7 = (invoke_iii(174,($input|0),(3380|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if ($9) {
     break;
    }
    if ($7) {
     label = 2;
    } else {
     $_4 = 0;
    }
   }
   if ((label|0) == 2) {
    $_4 = 1;
   }
   $10 = $_4;
   $11 = $10&1;
   do {
    if ($11) {
     $12 = HEAP32[$arg0>>2]|0;
     $13 = HEAP32[$12>>2]|0;
     HEAP32[$_13>>2] = 1;
     __THREW__ = 0;
     invoke_vii(175,($13|0),($_13|0));
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if ($15) {
      break L1;
     }
    } else {
     __THREW__ = 0;
     $16 = (invoke_iii(174,($input|0),(3388|0))|0);
     $17 = __THREW__; __THREW__ = 0;
     $18 = $17&1;
     if ($18) {
      break L1;
     }
     if ($16) {
      label = 15;
     } else {
      __THREW__ = 0;
      $24 = (invoke_iii(174,($input|0),(3404|0))|0);
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if ($26) {
       break L1;
      }
      if ($24) {
       label = 15;
      } else {
       $_15 = 0;
      }
     }
     if ((label|0) == 15) {
      $_15 = 1;
     }
     $27 = $_15;
     $28 = $27&1;
     if ($28) {
      label = 11;
     } else {
      __THREW__ = 0;
      $19 = (invoke_iii(174,($input|0),(3396|0))|0);
      $20 = __THREW__; __THREW__ = 0;
      $21 = $20&1;
      if ($21) {
       break L1;
      }
      if ($19) {
       label = 11;
      } else {
       $_14 = 0;
      }
     }
     if ((label|0) == 11) {
      $_14 = 1;
     }
     $22 = $_14;
     $23 = $22&1;
     if ($23) {
      $29 = HEAP32[$arg0>>2]|0;
      $30 = HEAP32[$29>>2]|0;
      __THREW__ = 0;
      invoke_vi(176,($30|0));
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       break L1;
      } else {
       break;
      }
     }
     __THREW__ = 0;
     $33 = (invoke_iii(174,($input|0),(3412|0))|0);
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if ($35) {
      break L1;
     }
     if ($33) {
      $36 = HEAP32[$arg0>>2]|0;
      $37 = HEAP32[$36>>2]|0;
      __THREW__ = 0;
      invoke_vi(177,($37|0));
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       break L1;
      } else {
       break;
      }
     }
     __THREW__ = 0;
     invoke_vii(178,($3|0),($input|0));
     $$sreg$field = HEAP32[$3>>2]|0;
     $$sreg$index5 = ((($3)) + 4|0);
     $$sreg$field6 = HEAP32[$$sreg$index5>>2]|0;
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      break L1;
     }
     __THREW__ = 0;
     $42 = (invoke_iiiii(179,($$sreg$field|0),($$sreg$field6|0),(12760|0),5)|0);
     $43 = __THREW__; __THREW__ = 0;
     $44 = $43&1;
     if ($44) {
      break L1;
     }
     if (!($42)) {
      __THREW__ = 0;
      $49 = (invoke_ii(180,($input|0))|0);
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if ($51) {
       break L1;
      }
      $60 = ($49>>>0)>(0);
      if (!($60)) {
       break;
      }
      $61 = HEAP32[855]|0;
      $62 = HEAP32[(3424)>>2]|0;
      __THREW__ = 0;
      invoke_viiiii(130,($_48|0),($61|0),($62|0),(23968|0),0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       break L1;
      }
      __THREW__ = 0;
      invoke_vi(172,($_48|0));
      $65 = __THREW__; __THREW__ = 0;
      $66 = $65&1;
      if ($66) {
       break L1;
      } else {
       break;
      }
     }
     $45 = HEAP32[$arg0>>2]|0;
     $46 = HEAP32[$45>>2]|0;
     __THREW__ = 0;
     invoke_vii(178,($2|0),($input|0));
     $$sreg1$field = HEAP32[$2>>2]|0;
     $$sreg1$index8 = ((($2)) + 4|0);
     $$sreg1$field9 = HEAP32[$$sreg1$index8>>2]|0;
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if ($48) {
      break L1;
     }
     __THREW__ = 0;
     invoke_viii(181,($_40|0),($$sreg1$field|0),($$sreg1$field9|0));
     $52 = __THREW__; __THREW__ = 0;
     $53 = $52&1;
     if ($53) {
      break L1;
     }
     __THREW__ = 0;
     invoke_viii(182,($_39|0),($_40|0),1);
     $54 = __THREW__; __THREW__ = 0;
     $55 = $54&1;
     if ($55) {
      break L1;
     }
     __THREW__ = 0;
     invoke_vii(183,($_38|0),($_39|0));
     $56 = __THREW__; __THREW__ = 0;
     $57 = $56&1;
     if ($57) {
      break L1;
     }
     __THREW__ = 0;
     invoke_vii(184,($46|0),($_38|0));
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      break L1;
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(142,($input|0));
   $67 = __THREW__; __THREW__ = 0;
   $68 = $67&1;
   if (!($68)) {
    STACKTOP = sp;return;
   }
   $71 = ___cxa_find_matching_catch_2()|0;
   $72 = tempRet0;
   HEAP32[$personalityslot>>2] = $71;
   $personalityslot$index13 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index13>>2] = $72;
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index2 = ((($personalityslot)) + 4|0);
   $$field3 = HEAP32[$$index2>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
 } while(0);
 $69 = ___cxa_find_matching_catch_2()|0;
 $70 = tempRet0;
 HEAP32[$personalityslot>>2] = $69;
 $personalityslot$index11 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index11>>2] = $70;
 __ZN4drop17hdd1638425ff7362fE($input);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN94__LT_collections__string__String_u20_as_u20_core__cmp__PartialEq_LT__RF__u27_a_u20_str_GT__GT_2eq17hc9e44242e708368aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $other = 0, $self = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 16|0;
 $3 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $4 = $arg0;
 $self = $4;
 $5 = $arg1;
 $other = $5;
 $6 = $self;
 __ZN92__LT_collections__string__String_u20_as_u20_core__ops__Index_LT_core__ops__RangeFull_GT__GT_5index17he5070a52e8aa9dd4E($3,$6);
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index2 = ((($3)) + 4|0);
 $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0;
 $7 = $other;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($7)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN4core3str6traits78__LT_impl_u20_core__ops__Index_LT_core__ops__RangeFull_GT__u20_for_u20_str_GT_5index17h910b7d147cf11505E($2,$8,$10);
 $$sreg1$field = HEAP32[$2>>2]|0;
 $$sreg1$index5 = ((($2)) + 4|0);
 $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0;
 $11 = (__ZN4core3str6traits54__LT_impl_u20_core__cmp__PartialEq_u20_for_u20_str_GT_2eq17h5aa3f49f0648a92fE($$sreg$field,$$sreg$field3,$$sreg1$field,$$sreg1$field6)|0);
 STACKTOP = sp;return ($11|0);
}
function __ZN2ww10debug_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_10print_help17h60cf7d12b90411b2E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $_4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_4 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = HEAP32[889]|0;
 $3 = HEAP32[(3560)>>2]|0;
 __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_4,$2,$3,23968,0);
 __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_4);
 STACKTOP = sp;return;
}
function __ZN2ww10debug_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_10list_rooms17hd2499cd1bf86fa9eE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $_13 = 0, $_14 = 0, $_16 = 0, $_5 = 0, $_9 = 0, $abi_cast = 0, $abi_cast2 = 0, $arg = 0, $arg0 = 0, $arg1 = 0, $i = 0, $iter = 0, $self = 0, $switch = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $abi_cast2 = sp + 86|0;
 $arg1 = sp + 64|0;
 $abi_cast = sp + 84|0;
 $arg = sp + 56|0;
 $tmp_ret = sp + 48|0;
 $_16 = sp + 40|0;
 $_14 = sp + 32|0;
 $_13 = sp + 24|0;
 $i = sp + 80|0;
 $_9 = sp + 16|0;
 $iter = sp + 8|0;
 $_5 = sp;
 $self = sp + 76|0;
 $arg0 = $0;
 $1 = $arg0;
 HEAP32[$self>>2] = $1;
 $2 = (__ZN66__LT_ww__game_map__RoomId_u20_as_u20_ww__sized_enum__SizedEnum_GT_4size17h72df2b376d876de1E()|0);
 HEAP32[$_5>>2] = 0;
 $3 = ((($_5)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($_5)) + 4|0);
 $5 = HEAP32[$_5>>2]|0;
 $6 = HEAP32[$4>>2]|0;
 HEAP32[$arg>>2] = $5;
 $7 = ((($arg)) + 4|0);
 HEAP32[$7>>2] = $6;
 __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17h1e622e95cbd3b5a1E($tmp_ret,$arg);
 $8 = ((($tmp_ret)) + 4|0);
 $9 = HEAP32[$tmp_ret>>2]|0;
 $10 = HEAP32[$8>>2]|0;
 HEAP32[$iter>>2] = $9;
 $11 = ((($iter)) + 4|0);
 HEAP32[$11>>2] = $10;
 while(1) {
  __ZN4core4iter5range86__LT_impl_u20_core__iter__iterator__Iterator_u20_for_u20_core__ops__Range_LT_A_GT__GT_4next17h94625b459dbe340eE($_9,$iter);
  $12 = HEAP32[$_9>>2]|0;
  $switch = ($12>>>0)<(1);
  if ($switch) {
   break;
  }
  $13 = ((($_9)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$i>>2] = $14;
  $15 = HEAP32[$i>>2]|0;
  $16 = (__ZN10num_traits4cast13FromPrimitive10from_usize17h7b04aaccb4281adbE($15)|0);
  HEAP16[$abi_cast>>1] = $16;
  ;HEAP8[$_14>>0]=HEAP8[$abi_cast>>0]|0;HEAP8[$_14+1>>0]=HEAP8[$abi_cast+1>>0]|0;
  HEAP32[$_16>>2] = $self;
  $17 = ((($_16)) + 4|0);
  HEAP32[$17>>2] = $i;
  $18 = HEAPU8[$_14>>0]|(HEAPU8[$_14+1>>0]<<8);
  $19 = ((($_16)) + 4|0);
  $20 = HEAP32[$_16>>2]|0;
  $21 = HEAP32[$19>>2]|0;
  HEAP32[$arg1>>2] = $20;
  $22 = ((($arg1)) + 4|0);
  HEAP32[$22>>2] = $21;
  $23 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_3map17h1c69abfe9c840911E($18,$arg1)|0);
  HEAP8[$abi_cast2>>0] = $23;
  ;HEAP8[$_13>>0]=HEAP8[$abi_cast2>>0]|0;
 }
 STACKTOP = sp;return;
}
function __ZN11collections3str21__LT_impl_u20_str_GT_11starts_with17h905b701b937e22e4E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $pat = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $personalityslot = sp + 32|0;
 $pat = sp + 24|0;
 $self = sp + 16|0;
 $arg1 = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $4 = ((($arg0)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$arg1>>2] = $2;
 $5 = ((($arg1)) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = HEAP32[$arg0>>2]|0;
 $7 = ((($arg0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$self>>2] = $6;
 $9 = ((($self)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$arg1>>2]|0;
 $11 = ((($arg1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$pat>>2] = $10;
 $13 = ((($pat)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$self>>2]|0;
 $15 = ((($self)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$pat>>2]|0;
 $18 = ((($pat)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 __THREW__ = 0;
 $20 = (invoke_iiiii(185,($14|0),($16|0),($17|0),($19|0))|0);
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $23 = ___cxa_find_matching_catch_2()|0;
  $24 = tempRet0;
  HEAP32[$personalityslot>>2] = $23;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $24;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZN11collections6string6String3len17hebd056027d93226dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3len17h48e7fd72494c9a0dE($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN11collections3str21__LT_impl_u20_str_GT_16split_whitespace17h64b089b160251ed8E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN54__LT_str_u20_as_u20_std_unicode__u_str__UnicodeStr_GT_16split_whitespace17h66adbc5bda083c92E($0,$8,$10);
 STACKTOP = sp;return;
}
function __ZN4core4iter8iterator8Iterator4skip17h68a105e2e990da8dE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $_5 = 0, $arg0 = 0, $arg1 = 0, $n = 0, $self = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $_5 = sp + 96|0;
 $self = sp + 48|0;
 $arg0 = sp;
 dest=$arg0; src=$1; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $arg1 = $2;
 dest=$self; src=$arg0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $3 = $arg1;
 $n = $3;
 dest=$_5; src=$self; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = $n;
 dest=$0; src=$_5; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $5 = ((($0)) + 44|0);
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN4core4iter8iterator8Iterator7collect17h7d4e7c095f564aa7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_3 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $personalityslot = sp + 144|0;
 $_3 = sp + 96|0;
 $self = sp + 48|0;
 $arg0 = sp;
 dest=$arg0; src=$1; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$self; src=$arg0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$_3; src=$self; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __THREW__ = 0;
 invoke_vii(186,($0|0),($_3|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$personalityslot>>2] = $4;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $5;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN2ww10debug_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_9goto_room17hb5521c077b63c979E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_14 = 0, $_16 = 0, $_21 = 0, $_22 = 0, $_29 = 0;
 var $_6 = 0, $__arg0 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $args = 0, $number = 0, $personalityslot = 0, $personalityslot$index5 = 0, $personalityslot$index7 = 0, $room_id = 0, $self = 0, $switch = 0, $switch1 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $tmp_ret = sp + 120|0;
 $abi_cast = sp + 144|0;
 $personalityslot = sp + 112|0;
 $_29 = sp + 88|0;
 $_22 = sp + 80|0;
 $_21 = sp + 72|0;
 $_16 = sp + 48|0;
 $room_id = sp + 146|0;
 $_11 = sp + 40|0;
 $_6 = sp + 32|0;
 $args = sp + 16|0;
 $arg1 = sp;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$1+8>>2]|0;
 $2 = $arg0;
 $self = $2;
 ;HEAP32[$args>>2]=HEAP32[$arg1>>2]|0;HEAP32[$args+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$args+8>>2]=HEAP32[$arg1+8>>2]|0;
 __THREW__ = 0;
 $3 = (invoke_iii(187,($args|0),0)|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if (!($5)) {
   $6 = HEAP32[$3>>2]|0;
   $7 = ((($3)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   __THREW__ = 0;
   invoke_viii(188,($_6|0),($6|0),($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP8[$_6>>0]|0;
    $switch = ($11&255)<(1);
    if ($switch) {
     $12 = ((($_6)) + 4|0);
     $13 = HEAP32[$12>>2]|0;
     $number = $13;
     $14 = $number;
     __THREW__ = 0;
     $15 = (invoke_ii(189,($14|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if ($17) {
      break;
     }
     HEAP16[$abi_cast>>1] = $15;
     ;HEAP8[$_11>>0]=HEAP8[$abi_cast>>0]|0;HEAP8[$_11+1>>0]=HEAP8[$abi_cast+1>>0]|0;
     $22 = HEAP8[$_11>>0]|0;
     $switch1 = ($22&255)<(1);
     if ($switch1) {
      label = 6;
     } else {
      $23 = ((($_11)) + 1|0);
      $24 = HEAP8[$23>>0]|0;
      HEAP8[$room_id>>0] = $24;
      $25 = HEAP8[$room_id>>0]|0;
      $_14 = $25;
      $26 = $self;
      $27 = ((($26)) + 57|0);
      $28 = $_14;
      HEAP8[$27>>0] = $28;
      $29 = HEAP32[861]|0;
      $30 = HEAP32[(3448)>>2]|0;
      HEAP32[$_22>>2] = $room_id;
      $31 = HEAP32[$_22>>2]|0;
      $__arg0 = $31;
      $32 = $__arg0;
      __THREW__ = 0;
      invoke_viii(190,($tmp_ret|0),($32|0),(191|0));
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       break;
      }
      $35 = ((($tmp_ret)) + 4|0);
      $36 = HEAP32[$tmp_ret>>2]|0;
      $37 = HEAP32[$35>>2]|0;
      HEAP32[$_21>>2] = $36;
      $38 = ((($_21)) + 4|0);
      HEAP32[$38>>2] = $37;
      __THREW__ = 0;
      invoke_viiiii(130,($_16|0),($29|0),($30|0),($_21|0),1);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       break;
      }
      __THREW__ = 0;
      invoke_vi(172,($_16|0));
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       break;
      }
      __THREW__ = 0;
      invoke_vi(192,($args|0));
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if (!($44)) {
       STACKTOP = sp;return;
      }
     }
    } else {
     label = 6;
    }
    if ((label|0) == 6) {
     $18 = HEAP32[859]|0;
     $19 = HEAP32[(3440)>>2]|0;
     __THREW__ = 0;
     invoke_viiiii(130,($_29|0),($18|0),($19|0),(23968|0),0);
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if ($21) {
      break;
     }
     __THREW__ = 0;
     invoke_vi(172,($_29|0));
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if ($46) {
      break;
     }
     __THREW__ = 0;
     invoke_vi(192,($args|0));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if (!($48)) {
      STACKTOP = sp;return;
     }
    }
    $51 = ___cxa_find_matching_catch_2()|0;
    $52 = tempRet0;
    HEAP32[$personalityslot>>2] = $51;
    $personalityslot$index7 = ((($personalityslot)) + 4|0);
    HEAP32[$personalityslot$index7>>2] = $52;
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index2 = ((($personalityslot)) + 4|0);
    $$field3 = HEAP32[$$index2>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
  }
 } while(0);
 $49 = ___cxa_find_matching_catch_2()|0;
 $50 = tempRet0;
 HEAP32[$personalityslot>>2] = $49;
 $personalityslot$index5 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index5>>2] = $50;
 __ZN4drop17h4913d7746a6e2c06E($args);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN80__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Index_LT_usize_GT__GT_5index17h47f7258b22b34fb3E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $index = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $index = $4;
 $5 = $self;
 __ZN67__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hcf74132cf7fda654E($2,$5);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $6 = $index;
 $7 = ($6>>>0)<($$sreg$field2>>>0);
 $8 = $7;
 if ($8) {
  $9 = (($$sreg$field) + ($6<<3)|0);
  STACKTOP = sp;return ($9|0);
 } else {
  __ZN4core9panicking18panic_bounds_check17h196ab917033e60b3E(3476,$6,$$sreg$field2);
  // unreachable;
 }
 return (0)|0;
}
function __ZN4drop17h4913d7746a6e2c06E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(193,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN13drop_contents17h4913d7746a6e2c06E($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h4913d7746a6e2c06E($0);
  return;
 }
}
function __ZN11collections3str21__LT_impl_u20_str_GT_5parse17hee49a1e0800e945fE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_5parse17h474161c6c7d52a44E($0,$8,$10);
 STACKTOP = sp;return;
}
function __ZN10num_traits4cast13FromPrimitive10from_usize17h7b04aaccb4281adbE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_0 = 0, $abi_cast = 0, $arg0 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $abi_cast = sp + 12|0;
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $n = $1;
 $2 = $n;
 $3 = (__ZN72__LT_ww__game_map__RoomId_u20_as_u20_num_traits__cast__FromPrimitive_GT_8from_u6417h4bffe725d34668ecE($2,0)|0);
 HEAP16[$abi_cast>>1] = $3;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;HEAP8[$_0+1>>0]=HEAP8[$abi_cast+1>>0]|0;
 $4 = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
 STACKTOP = sp;return ($4|0);
}
function __ZN57__LT_ww__game_map__RoomId_u20_as_u20_core__fmt__Debug_GT_3fmt17h77dff659418224bdE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_5 = 0, $__arg_0 = 0, $abi_cast = 0, $abi_cast19 = 0, $abi_cast20 = 0, $abi_cast21 = 0, $abi_cast22 = 0, $abi_cast23 = 0, $abi_cast24 = 0, $abi_cast25 = 0, $abi_cast26 = 0, $abi_cast27 = 0, $abi_cast28 = 0, $abi_cast29 = 0, $abi_cast30 = 0;
 var $abi_cast31 = 0, $abi_cast32 = 0, $abi_cast33 = 0, $abi_cast34 = 0, $abi_cast35 = 0, $abi_cast36 = 0, $arg0 = 0, $arg1 = 0, $builder = 0, $builder1 = 0, $builder10 = 0, $builder11 = 0, $builder12 = 0, $builder13 = 0, $builder14 = 0, $builder15 = 0, $builder16 = 0, $builder17 = 0, $builder18 = 0, $builder2 = 0;
 var $builder3 = 0, $builder4 = 0, $builder5 = 0, $builder6 = 0, $builder7 = 0, $builder8 = 0, $builder9 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(368|0);
 $abi_cast36 = sp + 354|0;
 $abi_cast35 = sp + 353|0;
 $abi_cast34 = sp + 352|0;
 $abi_cast33 = sp + 351|0;
 $abi_cast32 = sp + 350|0;
 $abi_cast31 = sp + 349|0;
 $abi_cast30 = sp + 348|0;
 $abi_cast29 = sp + 347|0;
 $abi_cast28 = sp + 346|0;
 $abi_cast27 = sp + 345|0;
 $abi_cast26 = sp + 344|0;
 $abi_cast25 = sp + 343|0;
 $abi_cast24 = sp + 342|0;
 $abi_cast23 = sp + 341|0;
 $abi_cast22 = sp + 340|0;
 $abi_cast21 = sp + 339|0;
 $abi_cast20 = sp + 338|0;
 $abi_cast19 = sp + 337|0;
 $abi_cast = sp + 336|0;
 $builder18 = sp + 304|0;
 $builder17 = sp + 288|0;
 $builder16 = sp + 272|0;
 $builder15 = sp + 256|0;
 $builder14 = sp + 240|0;
 $builder13 = sp + 224|0;
 $builder12 = sp + 208|0;
 $builder11 = sp + 192|0;
 $builder10 = sp + 176|0;
 $builder9 = sp + 160|0;
 $builder8 = sp + 144|0;
 $builder7 = sp + 128|0;
 $builder6 = sp + 112|0;
 $builder5 = sp + 96|0;
 $builder4 = sp + 80|0;
 $builder3 = sp + 64|0;
 $builder2 = sp + 48|0;
 $builder1 = sp + 32|0;
 $builder = sp + 16|0;
 $_5 = sp + 8|0;
 $_0 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $__arg_0 = $3;
 $4 = $self;
 HEAP32[$_5>>2] = $4;
 $5 = HEAP32[$_5>>2]|0;
 $6 = HEAP8[$5>>0]|0;
 do {
  switch ($6<<24>>24) {
  case 0:  {
   $7 = $__arg_0;
   __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder,$7,9328,7);
   $8 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder)|0);
   HEAP8[$abi_cast36>>0] = $8;
   ;HEAP8[$_0>>0]=HEAP8[$abi_cast36>>0]|0;
   $45 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($45|0);
   break;
  }
  case 1:  {
   $9 = $__arg_0;
   __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder1,$9,12804,15);
   $10 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder1)|0);
   HEAP8[$abi_cast35>>0] = $10;
   ;HEAP8[$_0>>0]=HEAP8[$abi_cast35>>0]|0;
   $45 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($45|0);
   break;
  }
  case 2:  {
   $11 = $__arg_0;
   __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder2,$11,12819,9);
   $12 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder2)|0);
   HEAP8[$abi_cast34>>0] = $12;
   ;HEAP8[$_0>>0]=HEAP8[$abi_cast34>>0]|0;
   $45 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($45|0);
   break;
  }
  case 3:  {
   $13 = $__arg_0;
   __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder3,$13,12828,14);
   $14 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder3)|0);
   HEAP8[$abi_cast33>>0] = $14;
   ;HEAP8[$_0>>0]=HEAP8[$abi_cast33>>0]|0;
   $45 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($45|0);
   break;
  }
  case 4:  {
   $15 = $__arg_0;
   __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder4,$15,12842,12);
   $16 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder4)|0);
   HEAP8[$abi_cast32>>0] = $16;
   ;HEAP8[$_0>>0]=HEAP8[$abi_cast32>>0]|0;
   $45 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($45|0);
   break;
  }
  case 5:  {
   $17 = $__arg_0;
   __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder5,$17,9238,8);
   $18 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder5)|0);
   HEAP8[$abi_cast31>>0] = $18;
   ;HEAP8[$_0>>0]=HEAP8[$abi_cast31>>0]|0;
   $45 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($45|0);
   break;
  }
  case 6:  {
   $19 = $__arg_0;
   __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder6,$19,10093,7);
   $20 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder6)|0);
   HEAP8[$abi_cast30>>0] = $20;
   ;HEAP8[$_0>>0]=HEAP8[$abi_cast30>>0]|0;
   $45 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($45|0);
   break;
  }
  case 7:  {
   $21 = $__arg_0;
   __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder7,$21,12854,9);
   $22 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder7)|0);
   HEAP8[$abi_cast29>>0] = $22;
   ;HEAP8[$_0>>0]=HEAP8[$abi_cast29>>0]|0;
   $45 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($45|0);
   break;
  }
  case 8:  {
   $23 = $__arg_0;
   __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder8,$23,12863,4);
   $24 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder8)|0);
   HEAP8[$abi_cast28>>0] = $24;
   ;HEAP8[$_0>>0]=HEAP8[$abi_cast28>>0]|0;
   $45 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($45|0);
   break;
  }
  case 9:  {
   $25 = $__arg_0;
   __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder9,$25,12867,13);
   $26 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder9)|0);
   HEAP8[$abi_cast27>>0] = $26;
   ;HEAP8[$_0>>0]=HEAP8[$abi_cast27>>0]|0;
   $45 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($45|0);
   break;
  }
  case 10:  {
   $27 = $__arg_0;
   __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder10,$27,12880,4);
   $28 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder10)|0);
   HEAP8[$abi_cast26>>0] = $28;
   ;HEAP8[$_0>>0]=HEAP8[$abi_cast26>>0]|0;
   $45 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($45|0);
   break;
  }
  case 11:  {
   $29 = $__arg_0;
   __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder11,$29,10568,7);
   $30 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder11)|0);
   HEAP8[$abi_cast25>>0] = $30;
   ;HEAP8[$_0>>0]=HEAP8[$abi_cast25>>0]|0;
   $45 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($45|0);
   break;
  }
  case 12:  {
   $31 = $__arg_0;
   __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder12,$31,10676,9);
   $32 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder12)|0);
   HEAP8[$abi_cast24>>0] = $32;
   ;HEAP8[$_0>>0]=HEAP8[$abi_cast24>>0]|0;
   $45 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($45|0);
   break;
  }
  case 13:  {
   $33 = $__arg_0;
   __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder13,$33,12884,13);
   $34 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder13)|0);
   HEAP8[$abi_cast23>>0] = $34;
   ;HEAP8[$_0>>0]=HEAP8[$abi_cast23>>0]|0;
   $45 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($45|0);
   break;
  }
  case 14:  {
   $35 = $__arg_0;
   __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder14,$35,12897,12);
   $36 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder14)|0);
   HEAP8[$abi_cast22>>0] = $36;
   ;HEAP8[$_0>>0]=HEAP8[$abi_cast22>>0]|0;
   $45 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($45|0);
   break;
  }
  case 15:  {
   $37 = $__arg_0;
   __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder15,$37,11277,8);
   $38 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder15)|0);
   HEAP8[$abi_cast21>>0] = $38;
   ;HEAP8[$_0>>0]=HEAP8[$abi_cast21>>0]|0;
   $45 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($45|0);
   break;
  }
  case 16:  {
   $39 = $__arg_0;
   __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder16,$39,12909,19);
   $40 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder16)|0);
   HEAP8[$abi_cast20>>0] = $40;
   ;HEAP8[$_0>>0]=HEAP8[$abi_cast20>>0]|0;
   $45 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($45|0);
   break;
  }
  case 17:  {
   $41 = $__arg_0;
   __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder17,$41,12928,15);
   $42 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder17)|0);
   HEAP8[$abi_cast19>>0] = $42;
   ;HEAP8[$_0>>0]=HEAP8[$abi_cast19>>0]|0;
   $45 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($45|0);
   break;
  }
  case 18:  {
   $43 = $__arg_0;
   __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder18,$43,12943,9);
   $44 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder18)|0);
   HEAP8[$abi_cast>>0] = $44;
   ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
   $45 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($45|0);
   break;
  }
  default: {
   // unreachable;
  }
  }
 } while(0);
 return (0)|0;
}
function __ZN4core3fmt10ArgumentV13new17h3f3aaa5a7922a908E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$transmute_temp>>2] = $5;
 $6 = HEAP32[$transmute_temp>>2]|0;
 $7 = $x;
 HEAP32[$transmute_temp1>>2] = $7;
 $8 = HEAP32[$transmute_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $name = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $name = sp + 8|0;
 $arg1 = sp;
 $arg0 = $1;
 HEAP32[$arg1>>2] = $2;
 $4 = ((($arg1)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = $arg0;
 $self = $5;
 $6 = HEAP32[$arg1>>2]|0;
 $7 = ((($arg1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$name>>2] = $6;
 $9 = ((($name)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = $self;
 $11 = HEAP32[$name>>2]|0;
 $12 = ((($name)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 __ZN4core3fmt8builders15debug_tuple_new17he50543912fc9d116E($0,$10,$11,$13);
 STACKTOP = sp;return;
}
function __ZN72__LT_ww__game_map__RoomId_u20_as_u20_num_traits__cast__FromPrimitive_GT_8from_u6417h4bffe725d34668ecE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $_0 = 0, $_11 = 0, $_12 = 0, $_16 = 0, $_17 = 0, $_21 = 0, $_22 = 0, $_26 = 0, $_27 = 0, $_31 = 0, $_32 = 0, $_36 = 0, $_37 = 0, $_41 = 0, $_42 = 0, $_46 = 0, $_47 = 0, $_51 = 0;
 var $_52 = 0, $_56 = 0, $_57 = 0, $_6 = 0, $_61 = 0, $_62 = 0, $_66 = 0, $_67 = 0, $_7 = 0, $_71 = 0, $_72 = 0, $_76 = 0, $_77 = 0, $_81 = 0, $_82 = 0, $_86 = 0, $_87 = 0, $_91 = 0, $_92 = 0, $_96 = 0;
 var $_97 = 0, $arg0 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $n = sp + 16|0;
 $_0 = sp + 8|0;
 $arg0 = sp;
 $2 = $arg0;
 $3 = $2;
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = $1;
 $6 = $arg0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $n;
 $13 = $12;
 HEAP32[$13>>2] = $8;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = $n;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $_6 = 0;
 $22 = $_6;
 $23 = $22&255;
 $24 = ($18|0)==($23|0);
 $25 = ($21|0)==(0);
 $26 = $24 & $25;
 do {
  if ($26) {
   $_7 = 0;
   HEAP8[$_0>>0] = 1;
   $27 = $_7;
   $28 = ((($_0)) + 1|0);
   HEAP8[$28>>0] = $27;
  } else {
   $29 = $n;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   $32 = (($29) + 4)|0;
   $33 = $32;
   $34 = HEAP32[$33>>2]|0;
   $_11 = 1;
   $35 = $_11;
   $36 = $35&255;
   $37 = ($31|0)==($36|0);
   $38 = ($34|0)==(0);
   $39 = $37 & $38;
   if ($39) {
    $_12 = 1;
    HEAP8[$_0>>0] = 1;
    $40 = $_12;
    $41 = ((($_0)) + 1|0);
    HEAP8[$41>>0] = $40;
    break;
   }
   $42 = $n;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (($42) + 4)|0;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $_16 = 2;
   $48 = $_16;
   $49 = $48&255;
   $50 = ($44|0)==($49|0);
   $51 = ($47|0)==(0);
   $52 = $50 & $51;
   if ($52) {
    $_17 = 2;
    HEAP8[$_0>>0] = 1;
    $53 = $_17;
    $54 = ((($_0)) + 1|0);
    HEAP8[$54>>0] = $53;
    break;
   }
   $55 = $n;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 4)|0;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $_21 = 3;
   $61 = $_21;
   $62 = $61&255;
   $63 = ($57|0)==($62|0);
   $64 = ($60|0)==(0);
   $65 = $63 & $64;
   if ($65) {
    $_22 = 3;
    HEAP8[$_0>>0] = 1;
    $66 = $_22;
    $67 = ((($_0)) + 1|0);
    HEAP8[$67>>0] = $66;
    break;
   }
   $68 = $n;
   $69 = $68;
   $70 = HEAP32[$69>>2]|0;
   $71 = (($68) + 4)|0;
   $72 = $71;
   $73 = HEAP32[$72>>2]|0;
   $_26 = 4;
   $74 = $_26;
   $75 = $74&255;
   $76 = ($70|0)==($75|0);
   $77 = ($73|0)==(0);
   $78 = $76 & $77;
   if ($78) {
    $_27 = 4;
    HEAP8[$_0>>0] = 1;
    $79 = $_27;
    $80 = ((($_0)) + 1|0);
    HEAP8[$80>>0] = $79;
    break;
   }
   $81 = $n;
   $82 = $81;
   $83 = HEAP32[$82>>2]|0;
   $84 = (($81) + 4)|0;
   $85 = $84;
   $86 = HEAP32[$85>>2]|0;
   $_31 = 5;
   $87 = $_31;
   $88 = $87&255;
   $89 = ($83|0)==($88|0);
   $90 = ($86|0)==(0);
   $91 = $89 & $90;
   if ($91) {
    $_32 = 5;
    HEAP8[$_0>>0] = 1;
    $92 = $_32;
    $93 = ((($_0)) + 1|0);
    HEAP8[$93>>0] = $92;
    break;
   }
   $94 = $n;
   $95 = $94;
   $96 = HEAP32[$95>>2]|0;
   $97 = (($94) + 4)|0;
   $98 = $97;
   $99 = HEAP32[$98>>2]|0;
   $_36 = 6;
   $100 = $_36;
   $101 = $100&255;
   $102 = ($96|0)==($101|0);
   $103 = ($99|0)==(0);
   $104 = $102 & $103;
   if ($104) {
    $_37 = 6;
    HEAP8[$_0>>0] = 1;
    $105 = $_37;
    $106 = ((($_0)) + 1|0);
    HEAP8[$106>>0] = $105;
    break;
   }
   $107 = $n;
   $108 = $107;
   $109 = HEAP32[$108>>2]|0;
   $110 = (($107) + 4)|0;
   $111 = $110;
   $112 = HEAP32[$111>>2]|0;
   $_41 = 7;
   $113 = $_41;
   $114 = $113&255;
   $115 = ($109|0)==($114|0);
   $116 = ($112|0)==(0);
   $117 = $115 & $116;
   if ($117) {
    $_42 = 7;
    HEAP8[$_0>>0] = 1;
    $118 = $_42;
    $119 = ((($_0)) + 1|0);
    HEAP8[$119>>0] = $118;
    break;
   }
   $120 = $n;
   $121 = $120;
   $122 = HEAP32[$121>>2]|0;
   $123 = (($120) + 4)|0;
   $124 = $123;
   $125 = HEAP32[$124>>2]|0;
   $_46 = 8;
   $126 = $_46;
   $127 = $126&255;
   $128 = ($122|0)==($127|0);
   $129 = ($125|0)==(0);
   $130 = $128 & $129;
   if ($130) {
    $_47 = 8;
    HEAP8[$_0>>0] = 1;
    $131 = $_47;
    $132 = ((($_0)) + 1|0);
    HEAP8[$132>>0] = $131;
    break;
   }
   $133 = $n;
   $134 = $133;
   $135 = HEAP32[$134>>2]|0;
   $136 = (($133) + 4)|0;
   $137 = $136;
   $138 = HEAP32[$137>>2]|0;
   $_51 = 9;
   $139 = $_51;
   $140 = $139&255;
   $141 = ($135|0)==($140|0);
   $142 = ($138|0)==(0);
   $143 = $141 & $142;
   if ($143) {
    $_52 = 9;
    HEAP8[$_0>>0] = 1;
    $144 = $_52;
    $145 = ((($_0)) + 1|0);
    HEAP8[$145>>0] = $144;
    break;
   }
   $146 = $n;
   $147 = $146;
   $148 = HEAP32[$147>>2]|0;
   $149 = (($146) + 4)|0;
   $150 = $149;
   $151 = HEAP32[$150>>2]|0;
   $_56 = 10;
   $152 = $_56;
   $153 = $152&255;
   $154 = ($148|0)==($153|0);
   $155 = ($151|0)==(0);
   $156 = $154 & $155;
   if ($156) {
    $_57 = 10;
    HEAP8[$_0>>0] = 1;
    $157 = $_57;
    $158 = ((($_0)) + 1|0);
    HEAP8[$158>>0] = $157;
    break;
   }
   $159 = $n;
   $160 = $159;
   $161 = HEAP32[$160>>2]|0;
   $162 = (($159) + 4)|0;
   $163 = $162;
   $164 = HEAP32[$163>>2]|0;
   $_61 = 11;
   $165 = $_61;
   $166 = $165&255;
   $167 = ($161|0)==($166|0);
   $168 = ($164|0)==(0);
   $169 = $167 & $168;
   if ($169) {
    $_62 = 11;
    HEAP8[$_0>>0] = 1;
    $170 = $_62;
    $171 = ((($_0)) + 1|0);
    HEAP8[$171>>0] = $170;
    break;
   }
   $172 = $n;
   $173 = $172;
   $174 = HEAP32[$173>>2]|0;
   $175 = (($172) + 4)|0;
   $176 = $175;
   $177 = HEAP32[$176>>2]|0;
   $_66 = 12;
   $178 = $_66;
   $179 = $178&255;
   $180 = ($174|0)==($179|0);
   $181 = ($177|0)==(0);
   $182 = $180 & $181;
   if ($182) {
    $_67 = 12;
    HEAP8[$_0>>0] = 1;
    $183 = $_67;
    $184 = ((($_0)) + 1|0);
    HEAP8[$184>>0] = $183;
    break;
   }
   $185 = $n;
   $186 = $185;
   $187 = HEAP32[$186>>2]|0;
   $188 = (($185) + 4)|0;
   $189 = $188;
   $190 = HEAP32[$189>>2]|0;
   $_71 = 13;
   $191 = $_71;
   $192 = $191&255;
   $193 = ($187|0)==($192|0);
   $194 = ($190|0)==(0);
   $195 = $193 & $194;
   if ($195) {
    $_72 = 13;
    HEAP8[$_0>>0] = 1;
    $196 = $_72;
    $197 = ((($_0)) + 1|0);
    HEAP8[$197>>0] = $196;
    break;
   }
   $198 = $n;
   $199 = $198;
   $200 = HEAP32[$199>>2]|0;
   $201 = (($198) + 4)|0;
   $202 = $201;
   $203 = HEAP32[$202>>2]|0;
   $_76 = 14;
   $204 = $_76;
   $205 = $204&255;
   $206 = ($200|0)==($205|0);
   $207 = ($203|0)==(0);
   $208 = $206 & $207;
   if ($208) {
    $_77 = 14;
    HEAP8[$_0>>0] = 1;
    $209 = $_77;
    $210 = ((($_0)) + 1|0);
    HEAP8[$210>>0] = $209;
    break;
   }
   $211 = $n;
   $212 = $211;
   $213 = HEAP32[$212>>2]|0;
   $214 = (($211) + 4)|0;
   $215 = $214;
   $216 = HEAP32[$215>>2]|0;
   $_81 = 15;
   $217 = $_81;
   $218 = $217&255;
   $219 = ($213|0)==($218|0);
   $220 = ($216|0)==(0);
   $221 = $219 & $220;
   if ($221) {
    $_82 = 15;
    HEAP8[$_0>>0] = 1;
    $222 = $_82;
    $223 = ((($_0)) + 1|0);
    HEAP8[$223>>0] = $222;
    break;
   }
   $224 = $n;
   $225 = $224;
   $226 = HEAP32[$225>>2]|0;
   $227 = (($224) + 4)|0;
   $228 = $227;
   $229 = HEAP32[$228>>2]|0;
   $_86 = 16;
   $230 = $_86;
   $231 = $230&255;
   $232 = ($226|0)==($231|0);
   $233 = ($229|0)==(0);
   $234 = $232 & $233;
   if ($234) {
    $_87 = 16;
    HEAP8[$_0>>0] = 1;
    $235 = $_87;
    $236 = ((($_0)) + 1|0);
    HEAP8[$236>>0] = $235;
    break;
   }
   $237 = $n;
   $238 = $237;
   $239 = HEAP32[$238>>2]|0;
   $240 = (($237) + 4)|0;
   $241 = $240;
   $242 = HEAP32[$241>>2]|0;
   $_91 = 17;
   $243 = $_91;
   $244 = $243&255;
   $245 = ($239|0)==($244|0);
   $246 = ($242|0)==(0);
   $247 = $245 & $246;
   if ($247) {
    $_92 = 17;
    HEAP8[$_0>>0] = 1;
    $248 = $_92;
    $249 = ((($_0)) + 1|0);
    HEAP8[$249>>0] = $248;
    break;
   }
   $250 = $n;
   $251 = $250;
   $252 = HEAP32[$251>>2]|0;
   $253 = (($250) + 4)|0;
   $254 = $253;
   $255 = HEAP32[$254>>2]|0;
   $_96 = 18;
   $256 = $_96;
   $257 = $256&255;
   $258 = ($252|0)==($257|0);
   $259 = ($255|0)==(0);
   $260 = $258 & $259;
   if ($260) {
    $_97 = 18;
    HEAP8[$_0>>0] = 1;
    $261 = $_97;
    $262 = ((($_0)) + 1|0);
    HEAP8[$262>>0] = $261;
    break;
   } else {
    HEAP8[$_0>>0] = 0;
    break;
   }
  }
 } while(0);
 $263 = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
 STACKTOP = sp;return ($263|0);
}
function __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_5parse17h474161c6c7d52a44E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN4core3num54__LT_impl_u20_core__str__FromStr_u20_for_u20_usize_GT_8from_str17h5121c8062a733666E($0,$8,$10);
 STACKTOP = sp;return;
}
function __ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h7826a516923ccc91E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h1b5a3b833dfbf09cE($1,$3);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17h4913d7746a6e2c06E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h87b05b07b3ad362aE($0);
 return;
}
function __ZN4drop17h87b05b07b3ad362aE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(194,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN13drop_contents17h87b05b07b3ad362aE($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h87b05b07b3ad362aE($0);
  return;
 }
}
function __ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17ha9957561f22bb2ceE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_4 = 0, $align = 0, $arg0 = 0, $elem_size = 0, $num_bytes = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17h2abed0450cf199c6E()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $self;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $_4 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $_4 = 0;
 }
 $9 = $_4;
 $10 = $9&1;
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (__ZN4core3mem8align_of17hbf4e91046a62ad7eE()|0);
 $align = $11;
 $12 = $elem_size;
 $13 = $self;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $num_bytes = $16;
 $17 = $self;
 $18 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17heab67aa292669e01E($17)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $num_bytes;
 $21 = $align;
 __ZN5alloc4heap10deallocate17haa41e924c0cbc050E_3($19,$20,$21);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17h87b05b07b3ad362aE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4core3mem7size_of17h2abed0450cf199c6E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 8;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem8align_of17hbf4e91046a62ad7eE() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17heab67aa292669e01E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h6a84dcb3cb9937f7E($2)|0);
 $transmute_temp = $3;
 $4 = $transmute_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h6a84dcb3cb9937f7E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h1b5a3b833dfbf09cE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17he1b775e0d9def71eE($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17he1b775e0d9def71eE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17hce9666229730c537E($3)|0);
 $ptr = $4;
 $5 = $ptr;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h1adc4e6ca716a994E($5)|0);
 $6 = $ptr;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice18from_raw_parts_mut17hffa11a4a18834b97E($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17hce9666229730c537E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17heab67aa292669e01E($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h1adc4e6ca716a994E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr8null_mut17h07c3e6f0424f28c4E()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core5slice18from_raw_parts_mut17hffa11a4a18834b97E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 8|0;
 $_6 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_6>>2] = $4;
 $6 = ((($_6)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_6)) + 4|0);
 $8 = HEAP32[$_6>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$transmute_temp>>2] = $8;
 $10 = ((($transmute_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$transmute_temp>>2]|0;
 $12 = ((($transmute_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN4core3ptr8null_mut17h07c3e6f0424f28c4E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN67__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hcf74132cf7fda654E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $p = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17hce9666229730c537E($3)|0);
 $p = $4;
 $5 = $p;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h1adc4e6ca716a994E($5)|0);
 $6 = $p;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice14from_raw_parts17hb0e6ac3730b07873E($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN4core5slice14from_raw_parts17hb0e6ac3730b07873E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 8|0;
 $_5 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_5>>2] = $4;
 $6 = ((($_5)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_5)) + 4|0);
 $8 = HEAP32[$_5>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$transmute_temp>>2] = $8;
 $10 = ((($transmute_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$transmute_temp>>2]|0;
 $12 = ((($transmute_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN92__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__iter__traits__FromIterator_LT_T_GT__GT_9from_iter17he2392cc97c822373E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_3 = 0, $_4 = 0, $arg0 = 0, $iter = 0, $personalityslot = 0, $personalityslot$index1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $personalityslot = sp + 192|0;
 $_4 = sp + 144|0;
 $_3 = sp + 96|0;
 $iter = sp + 48|0;
 $arg0 = sp;
 dest=$arg0; src=$1; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$iter; src=$arg0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$_4; src=$iter; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __THREW__ = 0;
 invoke_vii(195,($_3|0),($_4|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  __THREW__ = 0;
  invoke_vii(196,($0|0),($_3|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if (!($5)) {
   STACKTOP = sp;return;
  }
 }
 $6 = ___cxa_find_matching_catch_2()|0;
 $7 = tempRet0;
 HEAP32[$personalityslot>>2] = $6;
 $personalityslot$index1 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index1>>2] = $7;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17h485c2cdbd7e9c021E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $_3 = 0, $arg0 = 0, $self = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $_3 = sp + 96|0;
 $self = sp + 48|0;
 $arg0 = sp;
 dest=$arg0; src=$1; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$self; src=$arg0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$_3; src=$self; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$0; src=$_3; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function __ZN97__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT_T_C__u20_I_GT__GT_9from_iter17h221384275645b51dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val16 = 0, $$expand_i1_val17 = 0, $$expand_i1_val18 = 0, $$field = 0, $$field4 = 0, $$index3 = 0, $$sreg$field = 0, $$sreg$field7 = 0, $$sreg$index6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_24 = 0, $_27 = 0, $_28 = 0, $_29 = 0, $_30 = 0, $_31 = 0, $_32 = 0, $_33 = 0, $_4 = 0, $_8 = 0, $arg0 = 0, $element = 0, $iterator = 0, $lower = 0;
 var $personalityslot = 0, $personalityslot$index11 = 0, $personalityslot$index13 = 0, $personalityslot$index15 = 0, $personalityslot$index9 = 0, $switch = 0, $switch1 = 0, $vector = 0, $vector1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $2 = sp;
 $personalityslot = sp + 248|0;
 $_28 = sp + 232|0;
 $_27 = sp + 184|0;
 $_24 = sp + 168|0;
 $vector1 = sp + 152|0;
 $_8 = sp + 136|0;
 $element = sp + 128|0;
 $_4 = sp + 120|0;
 $vector = sp + 104|0;
 $iterator = sp + 56|0;
 $arg0 = sp + 8|0;
 dest=$arg0; src=$1; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $_32 = 0;
 $_33 = 0;
 $_30 = 0;
 $_31 = 0;
 $_29 = 0;
 $_29 = 1;
 dest=$iterator; src=$arg0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __THREW__ = 0;
 invoke_vii(197,($_4|0),($iterator|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 26;
  } else {
   $_31 = 1;
   $7 = HEAP32[$_4>>2]|0;
   $8 = ($7|0)!=(0|0);
   $$expand_i1_val = $8&1;
   $$expand_i1_val16 = 1;
   $switch = ($$expand_i1_val&255)<($$expand_i1_val16&255);
   if ($switch) {
    __THREW__ = 0;
    invoke_vi(198,($0|0));
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     label = 27;
    } else {
     $_31 = 0;
     $_29 = 0;
     __THREW__ = 0;
     invoke_vi(200,($iterator|0));
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if (!($20)) {
      STACKTOP = sp;return;
     }
     $56 = ___cxa_find_matching_catch_2()|0;
     $57 = tempRet0;
     HEAP32[$personalityslot>>2] = $56;
     $personalityslot$index15 = ((($personalityslot)) + 4|0);
     HEAP32[$personalityslot$index15>>2] = $57;
     $$field = HEAP32[$personalityslot>>2]|0;
     $$index3 = ((($personalityslot)) + 4|0);
     $$field4 = HEAP32[$$index3>>2]|0;
     ___resumeException($$field|0);
     // unreachable;
    }
   } else {
    $_31 = 0;
    $_32 = 1;
    $13 = HEAP32[$_4>>2]|0;
    $14 = ((($_4)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    HEAP32[$element>>2] = $13;
    $16 = ((($element)) + 4|0);
    HEAP32[$16>>2] = $15;
    __THREW__ = 0;
    invoke_vii(199,($_8|0),($iterator|0));
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     label = 27;
    } else {
     $21 = HEAP32[$_8>>2]|0;
     $lower = $21;
     $22 = $lower;
     __THREW__ = 0;
     $23 = (invoke_iii(201,($22|0),1)|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if (!($25)) {
      __THREW__ = 0;
      invoke_vii(202,($vector1|0),($23|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $_33 = 1;
       __THREW__ = 0;
       invoke_vii(203,($2|0),($vector1|0));
       $$sreg$field = HEAP32[$2>>2]|0;
       $$sreg$index6 = ((($2)) + 4|0);
       $$sreg$field7 = HEAP32[$$sreg$index6>>2]|0;
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if (!($29)) {
        __THREW__ = 0;
        $30 = (invoke_iiii(204,($$sreg$field|0),($$sreg$field7|0),0)|0);
        $31 = __THREW__; __THREW__ = 0;
        $32 = $31&1;
        if (!($32)) {
         $_32 = 0;
         $33 = HEAP32[$element>>2]|0;
         $34 = ((($element)) + 4|0);
         $35 = HEAP32[$34>>2]|0;
         __THREW__ = 0;
         invoke_viii(205,($30|0),($33|0),($35|0));
         $36 = __THREW__; __THREW__ = 0;
         $37 = $36&1;
         if (!($37)) {
          __THREW__ = 0;
          invoke_vii(206,($vector1|0),1);
          $38 = __THREW__; __THREW__ = 0;
          $39 = $38&1;
          if (!($39)) {
           $_33 = 0;
           ;HEAP32[$_24>>2]=HEAP32[$vector1>>2]|0;HEAP32[$_24+4>>2]=HEAP32[$vector1+4>>2]|0;HEAP32[$_24+8>>2]=HEAP32[$vector1+8>>2]|0;
           $_30 = 1;
           ;HEAP32[$vector>>2]=HEAP32[$_24>>2]|0;HEAP32[$vector+4>>2]=HEAP32[$_24+4>>2]|0;HEAP32[$vector+8>>2]=HEAP32[$_24+8>>2]|0;
           $_29 = 0;
           dest=$_27; src=$iterator; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
           __THREW__ = 0;
           invoke_vii(207,($vector|0),($_27|0));
           $40 = __THREW__; __THREW__ = 0;
           $41 = $40&1;
           if ($41) {
            label = 26;
            break;
           }
           $_30 = 0;
           ;HEAP32[$_28>>2]=HEAP32[$vector>>2]|0;HEAP32[$_28+4>>2]=HEAP32[$vector+4>>2]|0;HEAP32[$_28+8>>2]=HEAP32[$vector+8>>2]|0;
           ;HEAP32[$0>>2]=HEAP32[$_28>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_28+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_28+8>>2]|0;
           STACKTOP = sp;return;
          }
         }
        }
       }
      }
     }
     $52 = ___cxa_find_matching_catch_2()|0;
     $53 = tempRet0;
     HEAP32[$personalityslot>>2] = $52;
     $personalityslot$index13 = ((($personalityslot)) + 4|0);
     HEAP32[$personalityslot$index13>>2] = $53;
     $54 = $_33;
     $55 = $54&1;
     if ($55) {
      $_33 = 0;
      __ZN4drop17h4913d7746a6e2c06E($vector1);
     }
    }
   }
   if ((label|0) == 27) {
    $50 = ___cxa_find_matching_catch_2()|0;
    $51 = tempRet0;
    HEAP32[$personalityslot>>2] = $50;
    $personalityslot$index11 = ((($personalityslot)) + 4|0);
    HEAP32[$personalityslot$index11>>2] = $51;
   }
   $46 = $_32;
   $47 = $46&1;
   if ($47) {
    $_32 = 0;
   }
   $9 = HEAP32[$_4>>2]|0;
   $10 = ($9|0)!=(0|0);
   $$expand_i1_val17 = $10&1;
   $$expand_i1_val18 = 1;
   $switch1 = ($$expand_i1_val17&255)<($$expand_i1_val18&255);
   if (!($switch1)) {
    $44 = $_31;
    $45 = $44&1;
    if ($45) {
     $_31 = 0;
    }
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $48 = ___cxa_find_matching_catch_2()|0;
  $49 = tempRet0;
  HEAP32[$personalityslot>>2] = $48;
  $personalityslot$index9 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index9>>2] = $49;
 }
 $42 = $_30;
 $43 = $42&1;
 if ($43) {
  $_30 = 0;
  __ZN4drop17h4913d7746a6e2c06E($vector);
 }
 $5 = $_29;
 $6 = $5&1;
 if (!($6)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index3 = ((($personalityslot)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_29 = 0;
 __ZN4drop17h8fa696974923d4f0E($iterator);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN76__LT_core__iter__Skip_LT_I_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h122e3f708f928bc8E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $old_n = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = ((($3)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 $7 = $self;
 if ($6) {
  __ZN100__LT_std_unicode__u_str__SplitWhitespace_LT__u27_a_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h3f78e9d5e64b768dE($0,$7);
  STACKTOP = sp;return;
 } else {
  $8 = ((($7)) + 44|0);
  $9 = HEAP32[$8>>2]|0;
  $old_n = $9;
  $10 = $self;
  $11 = ((($10)) + 44|0);
  HEAP32[$11>>2] = 0;
  $12 = $self;
  $13 = $old_n;
  __ZN4core4iter8iterator8Iterator3nth17h68e28e67aa9da531E($0,$12,$13);
  STACKTOP = sp;return;
 }
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3new17h24d33210cf834112E($0) {
 $0 = $0|0;
 var $1 = 0, $_1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_1 = sp;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17hba933678b69e274cE($_1);
 ;HEAP32[$0>>2]=HEAP32[$_1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_1+4>>2]|0;
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN76__LT_core__iter__Skip_LT_I_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17hf838f88ca6f943e9E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_12 = 0, $_15 = 0, $_5 = 0, $arg0 = 0, $lower = 0, $lower1 = 0, $self = 0;
 var $upper = 0, $upper2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_15 = sp + 48|0;
 $_12 = sp + 40|0;
 $_11 = sp + 32|0;
 $upper2 = sp + 24|0;
 $_5 = sp + 8|0;
 $upper = sp;
 $self = sp + 60|0;
 $arg0 = $1;
 $2 = $arg0;
 HEAP32[$self>>2] = $2;
 $3 = HEAP32[$self>>2]|0;
 __ZN4core4iter8iterator8Iterator9size_hint17hc03ec3c6b543d797E($_5,$3);
 $4 = HEAP32[$_5>>2]|0;
 $lower = $4;
 $5 = ((($_5)) + 4|0);
 ;HEAP32[$upper>>2]=HEAP32[$5>>2]|0;HEAP32[$upper+4>>2]=HEAP32[$5+4>>2]|0;
 $6 = $lower;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($7)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN4core3num23__LT_impl_u20_usize_GT_14saturating_sub17h06235d38aacf1fddE($6,$9)|0);
 $lower1 = $10;
 ;HEAP32[$_11>>2]=HEAP32[$upper>>2]|0;HEAP32[$_11+4>>2]=HEAP32[$upper+4>>2]|0;
 HEAP32[$_12>>2] = $self;
 $11 = HEAP32[$_12>>2]|0;
 __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17h5cdf394512faf93dE($upper2,$_11,$11);
 $12 = $lower1;
 ;HEAP32[$_15>>2]=HEAP32[$upper2>>2]|0;HEAP32[$_15+4>>2]=HEAP32[$upper2+4>>2]|0;
 HEAP32[$0>>2] = $12;
 $13 = ((($0)) + 4|0);
 ;HEAP32[$13>>2]=HEAP32[$_15>>2]|0;HEAP32[$13+4>>2]=HEAP32[$_15+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN4drop17h8fa696974923d4f0E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17hcba633a7351b975bE($0);
 return;
}
function __ZN4core3num23__LT_impl_u20_usize_GT_14saturating_add17he71edaab7c231342E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_5 = 0, $arg0 = 0, $arg1 = 0, $other = 0, $self = 0, $switch = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_5 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $other = $3;
 $4 = $self;
 $5 = $other;
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_add17ha98cfb78e5cf5d5bE($_5,$4,$5);
 $6 = HEAP32[$_5>>2]|0;
 $switch = ($6>>>0)<(1);
 if ($switch) {
  $7 = (__ZN4core3num23__LT_impl_u20_usize_GT_9max_value17h6bf2030520fe0a12E()|0);
  $_0 = $7;
  $11 = $_0;
  STACKTOP = sp;return ($11|0);
 } else {
  $8 = ((($_5)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $x = $9;
  $10 = $x;
  $_0 = $10;
  $11 = $_0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_13with_capacity17hcf412a613ab2ab9aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $_3 = 0, $arg0 = 0, $capacity = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_3 = sp;
 $arg0 = $1;
 $2 = $arg0;
 $capacity = $2;
 $3 = $capacity;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_13with_capacity17h17df5707c793afdcE($_3,$3);
 ;HEAP32[$0>>2]=HEAP32[$_3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_3+4>>2]|0;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17h1a1b5c5686de848bE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0;
 var $index = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $arg1 = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $arg1;
 $index = $8;
 $9 = HEAP32[$self>>2]|0;
 $10 = ((($self)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $index;
 __THREW__ = 0;
 $13 = (invoke_iiii(208,($9|0),($11|0),($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  HEAP32[$personalityslot>>2] = $16;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $17;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZN4core3ptr5write17hcc2c8443ee6cad10E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $dst = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $src = sp + 8|0;
 $arg1 = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = $arg0;
 $dst = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$src>>2] = $5;
 $8 = ((($src)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = $dst;
 $10 = HEAP32[$src>>2]|0;
 $11 = ((($src)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$9>>2] = $10;
 $13 = ((($9)) + 4|0);
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7set_len17h7102df9f9e5fb25fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $len;
 $5 = $self;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN97__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT_T_C__u20_I_GT__GT_11spec_extend17h934ffc5288408ce9E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $iter = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $personalityslot = sp + 144|0;
 $_6 = sp + 96|0;
 $iter = sp + 48|0;
 $arg1 = sp;
 $arg0 = $0;
 dest=$arg1; src=$1; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $2 = $arg0;
 $self = $2;
 dest=$iter; src=$arg1; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $3 = $self;
 dest=$_6; src=$iter; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __THREW__ = 0;
 invoke_vii(209,($3|0),($_6|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  HEAP32[$personalityslot>>2] = $6;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $7;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_16extend_desugared17heb62cbebd2d6b1d7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val14 = 0, $$expand_i1_val15 = 0, $$expand_i1_val16 = 0, $$field = 0, $$field4 = 0, $$index3 = 0, $$sreg$field = 0, $$sreg$field7 = 0, $$sreg$index6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $_17 = 0, $_36 = 0, $_37 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $element = 0, $iterator = 0, $len = 0;
 var $lower = 0, $personalityslot = 0, $personalityslot$index11 = 0, $personalityslot$index13 = 0, $personalityslot$index9 = 0, $self = 0, $switch = 0, $switch1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $2 = sp;
 $personalityslot = sp + 136|0;
 $_17 = sp + 120|0;
 $element = sp + 112|0;
 $_6 = sp + 104|0;
 $iterator = sp + 56|0;
 $arg1 = sp + 8|0;
 $arg0 = $0;
 dest=$arg1; src=$1; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $_36 = 0;
 $_37 = 0;
 $3 = $arg0;
 $self = $3;
 dest=$iterator; src=$arg1; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 while(1) {
  __THREW__ = 0;
  invoke_vii(197,($_6|0),($iterator|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   label = 22;
   break;
  }
  $_36 = 1;
  $6 = HEAP32[$_6>>2]|0;
  $7 = ($6|0)!=(0|0);
  $$expand_i1_val = $7&1;
  $$expand_i1_val14 = 1;
  $switch = ($$expand_i1_val&255)<($$expand_i1_val14&255);
  $_36 = 0;
  if ($switch) {
   label = 17;
   break;
  }
  $_37 = 1;
  $10 = HEAP32[$_6>>2]|0;
  $11 = ((($_6)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$element>>2] = $10;
  $13 = ((($element)) + 4|0);
  HEAP32[$13>>2] = $12;
  $14 = $self;
  __THREW__ = 0;
  $15 = (invoke_ii(210,($14|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   label = 23;
   break;
  }
  $len = $15;
  $18 = $len;
  $19 = $self;
  __THREW__ = 0;
  $20 = (invoke_ii(211,($19|0))|0);
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   label = 23;
   break;
  }
  $23 = ($18|0)==($20|0);
  if ($23) {
   __THREW__ = 0;
   invoke_vii(199,($_17|0),($iterator|0));
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    label = 23;
    break;
   }
   $26 = HEAP32[$_17>>2]|0;
   $lower = $26;
   $27 = $self;
   $28 = $lower;
   __THREW__ = 0;
   $29 = (invoke_iii(201,($28|0),1)|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    label = 23;
    break;
   }
   __THREW__ = 0;
   invoke_vii(212,($27|0),($29|0));
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    label = 23;
    break;
   }
  }
  $34 = $self;
  __THREW__ = 0;
  invoke_vii(203,($2|0),($34|0));
  $$sreg$field = HEAP32[$2>>2]|0;
  $$sreg$index6 = ((($2)) + 4|0);
  $$sreg$field7 = HEAP32[$$sreg$index6>>2]|0;
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if ($36) {
   label = 23;
   break;
  }
  $37 = $len;
  __THREW__ = 0;
  $38 = (invoke_iiii(204,($$sreg$field|0),($$sreg$field7|0),($37|0))|0);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   label = 23;
   break;
  }
  $_37 = 0;
  $41 = HEAP32[$element>>2]|0;
  $42 = ((($element)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  __THREW__ = 0;
  invoke_viii(205,($38|0),($41|0),($43|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  if ($45) {
   label = 23;
   break;
  }
  $46 = $self;
  $47 = $len;
  $48 = (($47) + 1)|0;
  __THREW__ = 0;
  invoke_vii(206,($46|0),($48|0));
  $49 = __THREW__; __THREW__ = 0;
  $50 = $49&1;
  if ($50) {
   label = 23;
   break;
  }
 }
 if ((label|0) == 17) {
  __THREW__ = 0;
  invoke_vi(200,($iterator|0));
  $51 = __THREW__; __THREW__ = 0;
  $52 = $51&1;
  if (!($52)) {
   STACKTOP = sp;return;
  }
  $61 = ___cxa_find_matching_catch_2()|0;
  $62 = tempRet0;
  HEAP32[$personalityslot>>2] = $61;
  $personalityslot$index13 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index13>>2] = $62;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index3 = ((($personalityslot)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 else if ((label|0) == 22) {
  $55 = ___cxa_find_matching_catch_2()|0;
  $56 = tempRet0;
  HEAP32[$personalityslot>>2] = $55;
  $personalityslot$index9 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index9>>2] = $56;
 }
 else if ((label|0) == 23) {
  $57 = ___cxa_find_matching_catch_2()|0;
  $58 = tempRet0;
  HEAP32[$personalityslot>>2] = $57;
  $personalityslot$index11 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index11>>2] = $58;
  $59 = $_37;
  $60 = $59&1;
  if ($60) {
   $_37 = 0;
  }
  $8 = HEAP32[$_6>>2]|0;
  $9 = ($8|0)!=(0|0);
  $$expand_i1_val15 = $9&1;
  $$expand_i1_val16 = 1;
  $switch1 = ($$expand_i1_val15&255)<($$expand_i1_val16&255);
  if (!($switch1)) {
   $53 = $_36;
   $54 = $53&1;
   if ($54) {
    $_36 = 0;
   }
  }
 }
 __ZN4drop17h8fa696974923d4f0E($iterator);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3len17hca79356e14b920efE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_8capacity17hf3674a3ffa7d3917E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $arg0 = 0, $arg0$i = 0, $self = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $arg0$i = $2;
 $3 = $arg0$i;
 $self$i = $3;
 $4 = (__ZN4core3mem7size_of17h2abed0450cf199c6E()|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $_0$i = -1;
  $9 = $_0$i;
  STACKTOP = sp;return ($9|0);
 } else {
  $6 = $self$i;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $_0$i = $8;
  $9 = $_0$i;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h039b2a1a744e2833E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $additional = 0, $arg0 = 0, $arg1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $additional = $3;
 $4 = $self;
 $5 = $self;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $additional;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_7reserve17ha1e5c73576893b67E($4,$7,$8);
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_7reserve17ha1e5c73576893b67E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $_40 = 0, $abi_cast = 0, $align = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $arg2 = 0, $elem_size = 0, $needed_extra_cap = 0, $new_alloc_size = 0;
 var $new_cap = 0, $ptr = 0, $self = 0, $self$i = 0, $tmp_ret = 0, $used_cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $abi_cast = sp + 60|0;
 $tmp_ret = sp + 8|0;
 $_40 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $used_cap = $4;
 $5 = $arg2;
 $needed_extra_cap = $5;
 $6 = (__ZN4core3mem7size_of17h2abed0450cf199c6E()|0);
 $elem_size = $6;
 $7 = (__ZN4core3mem8align_of17hbf4e91046a62ad7eE()|0);
 $align = $7;
 $8 = $self;
 $arg0$i = $8;
 $9 = $arg0$i;
 $self$i = $9;
 $10 = (__ZN4core3mem7size_of17h2abed0450cf199c6E()|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $_0$i = -1;
 } else {
  $12 = $self$i;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $_0$i = $14;
 }
 $15 = $_0$i;
 $16 = $used_cap;
 $17 = (__ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h1f1bc21fa0db5e6aE($15,$16)|0);
 $18 = $needed_extra_cap;
 $19 = ($17>>>0)>=($18>>>0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = $self;
 $21 = $used_cap;
 $22 = $needed_extra_cap;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_18amortized_new_size17h05ad7d3a2ecac98eE($tmp_ret,$20,$21,$22);
 $23 = ((($tmp_ret)) + 4|0);
 $24 = HEAP32[$tmp_ret>>2]|0;
 $25 = HEAP32[$23>>2]|0;
 $new_cap = $24;
 $new_alloc_size = $25;
 $26 = $new_alloc_size;
 __ZN5alloc7raw_vec11alloc_guard17hfcdaec6264df46d3E($26);
 $27 = $self;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = $new_alloc_size;
  $32 = $align;
  $33 = (__ZN5alloc4heap8allocate17h7ecb09ae67165feeE($31,$32)|0);
  $ptr = $33;
 } else {
  $34 = $self;
  $35 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17hce9666229730c537E($34)|0);
  $36 = $self;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $elem_size;
  $40 = Math_imul($38, $39)|0;
  $41 = $new_alloc_size;
  $42 = $align;
  $43 = (__ZN5alloc4heap10reallocate17hd6647ec82355ed5aE($35,$40,$41,$42)|0);
  $ptr = $43;
 }
 $44 = $ptr;
 $45 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17hd8e9e87391b89bc2E($44)|0);
 if ($45) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 }
 $46 = $ptr;
 $47 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17he6aa6ee355704593E($46)|0);
 HEAP32[$abi_cast>>2] = $47;
 ;HEAP32[$_40>>2]=HEAP32[$abi_cast>>2]|0;
 $48 = $self;
 ;HEAP32[$48>>2]=HEAP32[$_40>>2]|0;
 $49 = $new_cap;
 $50 = $self;
 $51 = ((($50)) + 4|0);
 HEAP32[$51>>2] = $49;
 STACKTOP = sp;return;
}
function __ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h1f1bc21fa0db5e6aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $rhs = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $rhs = $3;
 $4 = $self;
 $5 = $rhs;
 $6 = (($4) - ($5))|0;
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_18amortized_new_size17h05ad7d3a2ecac98eE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_20 = 0, $_9 = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $double_cap = 0, $elem_size = 0, $needed_extra_cap = 0, $new_alloc_size = 0, $new_cap = 0, $required_cap = 0, $self = 0, $used_cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_20 = sp + 8|0;
 $_9 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $arg2 = $3;
 $4 = $arg0;
 $self = $4;
 $5 = $arg1;
 $used_cap = $5;
 $6 = $arg2;
 $needed_extra_cap = $6;
 $7 = (__ZN4core3mem7size_of17h2abed0450cf199c6E()|0);
 $elem_size = $7;
 $8 = $used_cap;
 $9 = $needed_extra_cap;
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_add17ha98cfb78e5cf5d5bE($_9,$8,$9);
 $10 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17hbe300160939604f9E($_9,13086,17)|0);
 $required_cap = $10;
 $11 = $self;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13<<1;
 $double_cap = $14;
 $15 = $double_cap;
 $16 = $required_cap;
 $17 = (__ZN4core3cmp3max17hde8d93c2d99ac427E($15,$16)|0);
 $new_cap = $17;
 $18 = $new_cap;
 $19 = $elem_size;
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_mul17h86749854cd7d344eE($_20,$18,$19);
 $20 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17hbe300160939604f9E($_20,13086,17)|0);
 $new_alloc_size = $20;
 $21 = $new_cap;
 $22 = $new_alloc_size;
 HEAP32[$0>>2] = $21;
 $23 = ((($0)) + 4|0);
 HEAP32[$23>>2] = $22;
 STACKTOP = sp;return;
}
function __ZN5alloc7raw_vec11alloc_guard17hfcdaec6264df46d3E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $alloc_size = 0, $arg0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $alloc_size = $1;
 $2 = (__ZN4core3mem7size_of17h8d90bf42bfb95246E()|0);
 $3 = ($2>>>0)<(8);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $alloc_size;
 $5 = ($4>>>0)<=(2147483647);
 $6 = $5 ^ 1;
 if ($6) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(5428);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN5alloc4heap10reallocate17hd6647ec82355ed5aE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $align$i = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $arg1$i = 0, $arg2 = 0;
 var $arg3 = 0, $old_size = 0, $ptr = 0, $size = 0, $size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $arg3 = $3;
 $4 = $arg0;
 $ptr = $4;
 $5 = $arg1;
 $old_size = $5;
 $6 = $arg2;
 $size = $6;
 $7 = $arg3;
 $align = $7;
 $8 = $size;
 $9 = $align;
 $arg0$i = $8;
 $arg1$i = $9;
 $10 = $arg0$i;
 $size$i = $10;
 $11 = $arg1$i;
 $align$i = $11;
 $12 = $ptr;
 $13 = $old_size;
 $14 = $size;
 $15 = $align;
 $16 = (___rust_reallocate($12,$13,$14,$15)|0);
 STACKTOP = sp;return ($16|0);
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17he6aa6ee355704593E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $_0$i = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $inner$i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0$i = sp + 16|0;
 $abi_cast = sp + 28|0;
 $_3 = sp + 8|0;
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $2 = $ptr;
 $arg0$i = $2;
 $3 = $arg0$i;
 $inner$i = $3;
 $4 = $inner$i;
 HEAP32[$_0$i>>2] = $4;
 $5 = HEAP32[$_0$i>>2]|0;
 HEAP32[$abi_cast>>2] = $5;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 ;HEAP32[$_0>>2]=HEAP32[$_3>>2]|0;
 $6 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN4core3mem7size_of17h8d90bf42bfb95246E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3num23__LT_impl_u20_usize_GT_11checked_add17ha98cfb78e5cf5d5bE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $arg0 = 0, $arg1 = 0, $b = 0, $other = 0, $self = 0, $tmp_ret = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp_ret = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $other = $4;
 $5 = $self;
 $6 = $other;
 __ZN4core3num23__LT_impl_u20_usize_GT_15overflowing_add17hd0f51335ed662ac4E($tmp_ret,$5,$6);
 $7 = ((($tmp_ret)) + 4|0);
 $8 = HEAP32[$tmp_ret>>2]|0;
 $9 = HEAP8[$7>>0]|0;
 $10 = $9&1;
 $a = $8;
 $11 = $10&1;
 $b = $11;
 $12 = $b;
 $13 = $12&1;
 if ($13) {
  HEAP32[$0>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $14 = $a;
  HEAP32[$0>>2] = 1;
  $15 = ((($0)) + 4|0);
  HEAP32[$15>>2] = $14;
  STACKTOP = sp;return;
 }
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17hbe300160939604f9E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field4 = 0, $$index3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_8 = 0, $arg0 = 0, $arg1 = 0, $msg = 0, $personalityslot = 0, $personalityslot$index6 = 0, $self = 0, $switch1 = 0, $switch2 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $personalityslot = sp + 32|0;
 $msg = sp + 24|0;
 $self = sp + 16|0;
 $arg1 = sp + 8|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$0>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$0+4>>2]|0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_8 = 0;
 $_8 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;
 $4 = HEAP32[$arg1>>2]|0;
 $5 = ((($arg1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$msg>>2] = $4;
 $7 = ((($msg)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $switch1 = ($8>>>0)<(1);
 if (!($switch1)) {
  $_8 = 0;
  $16 = ((($self)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $val = $17;
  $18 = $val;
  STACKTOP = sp;return ($18|0);
 }
 $9 = HEAP32[$msg>>2]|0;
 $10 = ((($msg)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 __THREW__ = 0;
 invoke_vii(77,($9|0),($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = ___cxa_find_matching_catch_2()|0;
 $14 = tempRet0;
 HEAP32[$personalityslot>>2] = $13;
 $personalityslot$index6 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index6>>2] = $14;
 $15 = HEAP32[$self>>2]|0;
 $switch2 = ($15>>>0)<(1);
 if (!($switch2)) {
  $19 = $_8;
  $20 = $19&1;
  if ($20) {
   $_8 = 0;
  }
 }
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
 return (0)|0;
}
function __ZN4core3cmp3max17hde8d93c2d99ac427E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_0 = 0, $_10 = 0, $_11 = 0, $arg0 = 0, $arg1 = 0, $personalityslot = 0, $personalityslot$index4 = 0, $v1 = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp;
 $v2 = sp + 24|0;
 $v1 = sp + 20|0;
 $arg0 = $0;
 $arg1 = $1;
 $_11 = 0;
 $_10 = 0;
 $_10 = 1;
 $2 = $arg0;
 HEAP32[$v1>>2] = $2;
 $_11 = 1;
 $3 = $arg1;
 HEAP32[$v2>>2] = $3;
 __THREW__ = 0;
 $4 = (invoke_iii(213,($v2|0),($v1|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  HEAP32[$personalityslot>>2] = $16;
  $personalityslot$index4 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index4>>2] = $17;
  $18 = $_11;
  $19 = $18&1;
  if ($19) {
   $_11 = 0;
  }
  $7 = $_10;
  $8 = $7&1;
  if (!($8)) {
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index1 = ((($personalityslot)) + 4|0);
   $$field2 = HEAP32[$$index1>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
  $_10 = 0;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 if ($4) {
  $_11 = 0;
  $9 = HEAP32[$v2>>2]|0;
  $_0 = $9;
 } else {
  $_10 = 0;
  $10 = HEAP32[$v1>>2]|0;
  $_0 = $10;
 }
 $11 = $_11;
 $12 = $11&1;
 if ($12) {
  $_11 = 0;
 }
 $13 = $_10;
 $14 = $13&1;
 if (!($14)) {
  $15 = $_0;
  STACKTOP = sp;return ($15|0);
 }
 $_10 = 0;
 $15 = $_0;
 STACKTOP = sp;return ($15|0);
}
function __ZN4core3num23__LT_impl_u20_usize_GT_11checked_mul17h86749854cd7d344eE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $arg0 = 0, $arg1 = 0, $b = 0, $other = 0, $self = 0, $tmp_ret = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp_ret = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $other = $4;
 $5 = $self;
 $6 = $other;
 __ZN4core3num23__LT_impl_u20_usize_GT_15overflowing_mul17h5cc70b10079fd375E($tmp_ret,$5,$6);
 $7 = ((($tmp_ret)) + 4|0);
 $8 = HEAP32[$tmp_ret>>2]|0;
 $9 = HEAP8[$7>>0]|0;
 $10 = $9&1;
 $a = $8;
 $11 = $10&1;
 $b = $11;
 $12 = $b;
 $13 = $12&1;
 if ($13) {
  HEAP32[$0>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $14 = $a;
  HEAP32[$0>>2] = 1;
  $15 = ((($0)) + 4|0);
  HEAP32[$15>>2] = $14;
  STACKTOP = sp;return;
 }
}
function __ZN4core3num23__LT_impl_u20_usize_GT_15overflowing_mul17h5cc70b10079fd375E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$arith = 0, $$denom = 0, $$div = 0, $$iszero = 0, $$overflow = 0, $$same = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $a = 0, $arg0 = 0, $arg1 = 0, $b = 0, $rhs = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp_ret = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $rhs = $4;
 $5 = $self;
 $6 = $rhs;
 $$arith = Math_imul($5, $6)|0;
 $$iszero = ($6|0)==(0);
 $$denom = $$iszero ? 1 : $6;
 $$div = (($$arith>>>0) / ($$denom>>>0))&-1;
 $$same = ($$div|0)!=($5|0);
 $$overflow = $$iszero ? 0 : $$same;
 $7 = $$overflow&1;
 HEAP32[$tmp_ret>>2] = $$arith;
 $8 = ((($tmp_ret)) + 4|0);
 HEAP8[$8>>0] = $7;
 $9 = ((($tmp_ret)) + 4|0);
 $10 = HEAP32[$tmp_ret>>2]|0;
 $11 = HEAP8[$9>>0]|0;
 $12 = $11&1;
 $a = $10;
 $13 = $12&1;
 $b = $13;
 $14 = $a;
 $15 = $b;
 $16 = $15&1;
 HEAP32[$0>>2] = $14;
 $17 = ((($0)) + 4|0);
 $18 = $16&1;
 HEAP8[$17>>0] = $18;
 STACKTOP = sp;return;
}
function __ZN4core3cmp5impls57__LT_impl_u20_core__cmp__PartialOrd_u20_for_u20_usize_GT_2ge17h1ee5d94244c32b0cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arg0 = 0, $arg1 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $other = $3;
 $4 = $self;
 $5 = HEAP32[$4>>2]|0;
 $6 = $other;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>=($7>>>0);
 STACKTOP = sp;return ($8|0);
}
function __ZN4core3num23__LT_impl_u20_usize_GT_15overflowing_add17hd0f51335ed662ac4E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$arith = 0, $$overflow = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $arg0 = 0;
 var $arg1 = 0, $b = 0, $rhs = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp_ret = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $rhs = $4;
 $5 = $self;
 $6 = $rhs;
 $$arith = (($5) + ($6))|0;
 $$overflow = ($$arith>>>0)<($5>>>0);
 $7 = $$overflow&1;
 HEAP32[$tmp_ret>>2] = $$arith;
 $8 = ((($tmp_ret)) + 4|0);
 HEAP8[$8>>0] = $7;
 $9 = ((($tmp_ret)) + 4|0);
 $10 = HEAP32[$tmp_ret>>2]|0;
 $11 = HEAP8[$9>>0]|0;
 $12 = $11&1;
 $a = $10;
 $13 = $12&1;
 $b = $13;
 $14 = $a;
 $15 = $b;
 $16 = $15&1;
 HEAP32[$0>>2] = $14;
 $17 = ((($0)) + 4|0);
 $18 = $16&1;
 HEAP8[$17>>0] = $18;
 STACKTOP = sp;return;
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17h9fa7d23017992385E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0;
 var $index = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $arg1 = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $arg1;
 $index = $8;
 $9 = $index;
 $10 = HEAP32[$self>>2]|0;
 $11 = ((($self)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 $13 = (invoke_iiii(214,($9|0),($10|0),($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  HEAP32[$personalityslot>>2] = $16;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $17;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17h51e82828835561d9E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $self = 0, $slice = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $slice = sp + 8|0;
 $arg1 = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = $arg0;
 $self = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$slice>>2] = $5;
 $8 = ((($slice)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$slice>>2]|0;
 $10 = ((($slice)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17hbb4f7af0e285be8cE($9,$11)|0);
 $13 = $self;
 $14 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h933bd129d2f9cf46E($12,$13)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17hbb4f7af0e285be8cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h933bd129d2f9cf46E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + ($5<<3)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_13with_capacity17h17df5707c793afdcE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_23 = 0;
 var $_5 = 0, $abi_cast = 0, $align = 0, $alloc_size = 0, $arg0 = 0, $cap = 0, $elem_size = 0, $ptr = 0, $ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $abi_cast = sp + 40|0;
 $_23 = sp + 8|0;
 $_5 = sp;
 $arg0 = $1;
 $2 = $arg0;
 $cap = $2;
 $3 = (__ZN4core3mem7size_of17h2abed0450cf199c6E()|0);
 $elem_size = $3;
 $4 = $cap;
 $5 = $elem_size;
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_mul17h86749854cd7d344eE($_5,$4,$5);
 $6 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17hbe300160939604f9E($_5,13086,17)|0);
 $alloc_size = $6;
 $7 = $alloc_size;
 __ZN5alloc7raw_vec11alloc_guard17hfcdaec6264df46d3E($7);
 $8 = $alloc_size;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $ptr = (1);
  } else {
   $10 = (__ZN4core3mem8align_of17hbf4e91046a62ad7eE()|0);
   $align = $10;
   $11 = $alloc_size;
   $12 = $align;
   $13 = (__ZN5alloc4heap8allocate17h7ecb09ae67165feeE($11,$12)|0);
   $ptr1 = $13;
   $14 = $ptr1;
   $15 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17hd8e9e87391b89bc2E($14)|0);
   if ($15) {
    __ZN5alloc3oom3oom17h3b36c708663c15cdE();
    // unreachable;
   } else {
    $16 = $ptr1;
    $ptr = $16;
    break;
   }
  }
 } while(0);
 $17 = $ptr;
 $18 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17he6aa6ee355704593E($17)|0);
 HEAP32[$abi_cast>>2] = $18;
 ;HEAP32[$_23>>2]=HEAP32[$abi_cast>>2]|0;
 $19 = $cap;
 ;HEAP32[$0>>2]=HEAP32[$_23>>2]|0;
 $20 = ((($0)) + 4|0);
 HEAP32[$20>>2] = $19;
 STACKTOP = sp;return;
}
function __ZN4core3num23__LT_impl_u20_usize_GT_9max_value17h6bf2030520fe0a12E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZN4drop17hcba633a7351b975bE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h05ef2e7460819160E($0);
 return;
}
function __ZN4drop17h05ef2e7460819160E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17hf6e2be8d09886bf6E($0);
 return;
}
function __ZN4drop17hf6e2be8d09886bf6E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h741fc392ad1cb476E($0);
 return;
}
function __ZN4drop17h741fc392ad1cb476E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZN4drop17hc5c1e142b7c7be64E($1);
 return;
}
function __ZN4drop17hc5c1e142b7c7be64E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4core4iter8iterator8Iterator9size_hint17hc03ec3c6b543d797E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_3 = sp;
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 HEAP32[$_3>>2] = 0;
 HEAP32[$0>>2] = 0;
 $3 = ((($0)) + 4|0);
 ;HEAP32[$3>>2]=HEAP32[$_3>>2]|0;HEAP32[$3+4>>2]=HEAP32[$_3+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN4core3num23__LT_impl_u20_usize_GT_14saturating_sub17h06235d38aacf1fddE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_5 = 0, $arg0 = 0, $arg1 = 0, $other = 0, $self = 0, $switch = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_5 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $other = $3;
 $4 = $self;
 $5 = $other;
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_sub17h48f3315103447db4E($_5,$4,$5);
 $6 = HEAP32[$_5>>2]|0;
 $switch = ($6>>>0)<(1);
 if ($switch) {
  $7 = (__ZN4core3num23__LT_impl_u20_usize_GT_9min_value17h443a99bb78d7238cE()|0);
  $_0 = $7;
  $11 = $_0;
  STACKTOP = sp;return ($11|0);
 } else {
  $8 = ((($_5)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $x = $9;
  $10 = $x;
  $_0 = $10;
  $11 = $_0;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17h5cdf394512faf93dE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field4 = 0, $$index3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_11 = 0, $_7 = 0, $_8 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $f = 0, $personalityslot = 0, $personalityslot$index6 = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $x = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $personalityslot = sp + 48|0;
 $_8 = sp + 40|0;
 $_7 = sp + 32|0;
 $f = sp + 24|0;
 $self = sp + 16|0;
 $abi_cast = sp + 56|0;
 $arg1 = sp + 8|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;
 HEAP32[$abi_cast>>2] = $2;
 ;HEAP32[$arg1>>2]=HEAP32[$abi_cast>>2]|0;
 $_11 = 0;
 $_10 = 0;
 $_10 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;
 $_11 = 1;
 ;HEAP32[$f>>2]=HEAP32[$arg1>>2]|0;
 $3 = HEAP32[$self>>2]|0;
 $switch2 = ($3>>>0)<(1);
 do {
  if ($switch2) {
   HEAP32[$0>>2] = 0;
  } else {
   $_10 = 0;
   $5 = ((($self)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $x = $6;
   $_11 = 0;
   ;HEAP32[$_7>>2]=HEAP32[$f>>2]|0;
   $7 = $x;
   HEAP32[$_8>>2] = $7;
   $8 = HEAP32[$_7>>2]|0;
   $9 = HEAP32[$_8>>2]|0;
   __THREW__ = 0;
   $10 = (invoke_iii(215,($8|0),($9|0))|0);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    HEAP32[$0>>2] = 1;
    $13 = ((($0)) + 4|0);
    HEAP32[$13>>2] = $10;
    break;
   }
   $21 = ___cxa_find_matching_catch_2()|0;
   $22 = tempRet0;
   HEAP32[$personalityslot>>2] = $21;
   $personalityslot$index6 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index6>>2] = $22;
   $23 = $_11;
   $24 = $23&1;
   if ($24) {
    $_11 = 0;
   }
   $4 = HEAP32[$self>>2]|0;
   $switch = ($4>>>0)<(1);
   if (!($switch)) {
    $17 = $_10;
    $18 = $17&1;
    if ($18) {
     $_10 = 0;
    }
   }
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index3 = ((($personalityslot)) + 4|0);
   $$field4 = HEAP32[$$index3>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
 } while(0);
 $14 = $_11;
 $15 = $14&1;
 if ($15) {
  $_11 = 0;
 }
 $16 = HEAP32[$self>>2]|0;
 $switch1 = ($16>>>0)<(1);
 if ($switch1) {
  STACKTOP = sp;return;
 }
 $19 = $_10;
 $20 = $19&1;
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $_10 = 0;
 STACKTOP = sp;return;
}
function __ZN76__LT_core__iter__Skip_LT_I_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint28__u7b__u7b_closure_u7d__u7d_17hdb2c11ffbfd97084E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__debuginfo_env_ptr = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $abi_cast = sp + 4|0;
 $arg0 = sp;
 HEAP32[$abi_cast>>2] = $0;
 ;HEAP32[$arg0>>2]=HEAP32[$abi_cast>>2]|0;
 $__debuginfo_env_ptr = $arg0;
 $arg1 = $1;
 $2 = $arg1;
 $x = $2;
 $3 = $x;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN4core3num23__LT_impl_u20_usize_GT_14saturating_sub17h06235d38aacf1fddE($3,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN4core3num23__LT_impl_u20_usize_GT_11checked_sub17h48f3315103447db4E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $arg0 = 0, $arg1 = 0, $b = 0, $other = 0, $self = 0, $tmp_ret = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp_ret = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $other = $4;
 $5 = $self;
 $6 = $other;
 __ZN4core3num23__LT_impl_u20_usize_GT_15overflowing_sub17h7636558ae5acd3c7E($tmp_ret,$5,$6);
 $7 = ((($tmp_ret)) + 4|0);
 $8 = HEAP32[$tmp_ret>>2]|0;
 $9 = HEAP8[$7>>0]|0;
 $10 = $9&1;
 $a = $8;
 $11 = $10&1;
 $b = $11;
 $12 = $b;
 $13 = $12&1;
 if ($13) {
  HEAP32[$0>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $14 = $a;
  HEAP32[$0>>2] = 1;
  $15 = ((($0)) + 4|0);
  HEAP32[$15>>2] = $14;
  STACKTOP = sp;return;
 }
}
function __ZN4core3num23__LT_impl_u20_usize_GT_9min_value17h443a99bb78d7238cE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN4core3num23__LT_impl_u20_usize_GT_15overflowing_sub17h7636558ae5acd3c7E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$arith = 0, $$overflow = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $arg0 = 0;
 var $arg1 = 0, $b = 0, $rhs = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp_ret = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $rhs = $4;
 $5 = $self;
 $6 = $rhs;
 $$arith = (($5) - ($6))|0;
 $$overflow = ($5>>>0)<($6>>>0);
 $7 = $$overflow&1;
 HEAP32[$tmp_ret>>2] = $$arith;
 $8 = ((($tmp_ret)) + 4|0);
 HEAP8[$8>>0] = $7;
 $9 = ((($tmp_ret)) + 4|0);
 $10 = HEAP32[$tmp_ret>>2]|0;
 $11 = HEAP8[$9>>0]|0;
 $12 = $11&1;
 $a = $10;
 $13 = $12&1;
 $b = $13;
 $14 = $a;
 $15 = $b;
 $16 = $15&1;
 HEAP32[$0>>2] = $14;
 $17 = ((($0)) + 4|0);
 $18 = $16&1;
 HEAP8[$17>>0] = $18;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17hba933678b69e274cE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_4 = 0, $abi_cast = 0, $cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $abi_cast = sp + 8|0;
 $_4 = sp;
 $1 = (__ZN4core3mem7size_of17h2abed0450cf199c6E()|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $cap = -1;
 } else {
  $cap = 0;
 }
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17he6aa6ee355704593E((1))|0);
 HEAP32[$abi_cast>>2] = $3;
 ;HEAP32[$_4>>2]=HEAP32[$abi_cast>>2]|0;
 $4 = $cap;
 ;HEAP32[$0>>2]=HEAP32[$_4>>2]|0;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN4core4iter8iterator8Iterator3nth17h68e28e67aa9da531E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_11 = 0, $_20 = 0, $arg0 = 0, $arg1 = 0, $iter = 0, $n = 0, $self = 0, $switch1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $x = sp + 8|0;
 $_11 = sp;
 $iter = sp + 32|0;
 $arg0 = $1;
 $arg1 = $2;
 $_20 = 0;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $n = $4;
 $5 = $self;
 $6 = (__ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17h7426475f9c14eb79E($5)|0);
 HEAP32[$iter>>2] = $6;
 while(1) {
  $_20 = 1;
  __ZN75__LT__RF__u27_a_u20_mut_u20_I_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h13cb3115d4a51138E($_11,$iter);
  $7 = HEAP32[$_11>>2]|0;
  $8 = ($7|0)!=(0|0);
  $$expand_i1_val = $8&1;
  $$expand_i1_val2 = 1;
  $switch1 = ($$expand_i1_val&255)<($$expand_i1_val2&255);
  $_20 = 0;
  if ($switch1) {
   label = 3;
   break;
  }
  $9 = HEAP32[$_11>>2]|0;
  $10 = ((($_11)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$x>>2] = $9;
  $12 = ((($x)) + 4|0);
  HEAP32[$12>>2] = $11;
  $13 = $n;
  $14 = ($13|0)==(0);
  if ($14) {
   label = 5;
   break;
  }
  $19 = $n;
  $20 = (($19) - 1)|0;
  $n = $20;
 }
 if ((label|0) == 3) {
  HEAP32[$0>>2] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 5) {
  $15 = HEAP32[$x>>2]|0;
  $16 = ((($x)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$0>>2] = $15;
  $18 = ((($0)) + 4|0);
  HEAP32[$18>>2] = $17;
  STACKTOP = sp;return;
 }
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17h7426475f9c14eb79E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 STACKTOP = sp;return ($2|0);
}
function __ZN75__LT__RF__u27_a_u20_mut_u20_I_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h13cb3115d4a51138E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = HEAP32[$3>>2]|0;
 __ZN100__LT_std_unicode__u_str__SplitWhitespace_LT__u27_a_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h3f78e9d5e64b768dE($0,$4);
 STACKTOP = sp;return;
}
function __ZN54__LT_str_u20_as_u20_std_unicode__u_str__UnicodeStr_GT_16split_whitespace17h66adbc5bda083c92E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $_6 = 0, $arg0 = 0;
 var $is_not_empty = 0, $is_whitespace = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $personalityslot = sp + 104|0;
 $_6 = sp + 64|0;
 $_5 = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $is_not_empty = 216;
 $is_whitespace = 217;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $is_whitespace;
 __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_5split17h1f2d634ffb09daa2E($_6,$8,$10,$11);
 $12 = $is_not_empty;
 __THREW__ = 0;
 invoke_viii(218,($_5|0),($_6|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  HEAP32[$personalityslot>>2] = $15;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $16;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  dest=$0; src=$_5; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
}
function __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_5split17h1f2d634ffb09daa2E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_5 = 0, $_8 = 0, $arg0 = 0, $arg1 = 0, $pat = 0, $personalityslot = 0, $personalityslot$index4 = 0, $self = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $personalityslot = sp + 88|0;
 $_8 = sp + 56|0;
 $_5 = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $4 = ((($arg0)) + 4|0);
 HEAP32[$4>>2] = $2;
 $arg1 = $3;
 $_11 = 0;
 $5 = HEAP32[$arg0>>2]|0;
 $6 = ((($arg0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$self>>2] = $5;
 $8 = ((($self)) + 4|0);
 HEAP32[$8>>2] = $7;
 $_11 = 1;
 $9 = $arg1;
 $pat = $9;
 $10 = HEAP32[$self>>2]|0;
 $11 = ((($self)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 $13 = (invoke_iii(219,($10|0),($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  $_11 = 0;
  $16 = $pat;
  $17 = HEAP32[$self>>2]|0;
  $18 = ((($self)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  __THREW__ = 0;
  invoke_viiii(220,($_8|0),($16|0),($17|0),($19|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   HEAP32[$_5>>2] = 0;
   $22 = ((($_5)) + 4|0);
   HEAP32[$22>>2] = $13;
   $23 = ((($_5)) + 8|0);
   ;HEAP32[$23>>2]=HEAP32[$_8>>2]|0;HEAP32[$23+4>>2]=HEAP32[$_8+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$_8+8>>2]|0;HEAP32[$23+12>>2]=HEAP32[$_8+12>>2]|0;HEAP32[$23+16>>2]=HEAP32[$_8+16>>2]|0;HEAP32[$23+20>>2]=HEAP32[$_8+20>>2]|0;HEAP32[$23+24>>2]=HEAP32[$_8+24>>2]|0;
   $24 = ((($_5)) + 36|0);
   HEAP8[$24>>0] = 1;
   $25 = ((($_5)) + 37|0);
   HEAP8[$25>>0] = 0;
   dest=$0; src=$_5; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   STACKTOP = sp;return;
  }
 }
 $26 = ___cxa_find_matching_catch_2()|0;
 $27 = tempRet0;
 HEAP32[$personalityslot>>2] = $26;
 $personalityslot$index4 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index4>>2] = $27;
 $28 = $_11;
 $29 = $28&1;
 if (!($29)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_11 = 0;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4core4iter8iterator8Iterator6filter17h4e38f894231df25cE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $_5 = 0, $arg0 = 0, $arg1 = 0, $predicate = 0, $self = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $_5 = sp + 80|0;
 $self = sp + 40|0;
 $arg0 = sp;
 dest=$arg0; src=$1; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $arg1 = $2;
 dest=$self; src=$arg0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $3 = $arg1;
 $predicate = $3;
 dest=$_5; src=$self; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = $predicate;
 dest=$0; src=$_5; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $5 = ((($0)) + 40|0);
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_3len17h1ca6363c47a16e0eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $self = sp + 16|0;
 $arg0 = sp + 8|0;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_8as_bytes17h4b4339e2c1ddc0b5E($2,$8,$10);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $11 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17heae38b00d24427d9E($$sreg$field,$$sreg$field2)|0);
 STACKTOP = sp;return ($11|0);
}
function __ZN63__LT_F_u20_as_u20_core__str__pattern__Pattern_LT__u27_a_GT__GT_13into_searcher17h8ff74b076af33f72E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $_6 = 0;
 var $arg0 = 0, $arg1 = 0, $haystack = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $personalityslot = sp + 56|0;
 $_6 = sp + 48|0;
 $_5 = sp + 16|0;
 $haystack = sp + 8|0;
 $arg1 = sp;
 $arg0 = $1;
 HEAP32[$arg1>>2] = $2;
 $4 = ((($arg1)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = $arg0;
 $self = $5;
 $6 = HEAP32[$arg1>>2]|0;
 $7 = ((($arg1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$haystack>>2] = $6;
 $9 = ((($haystack)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = $self;
 HEAP32[$_6>>2] = $10;
 $11 = HEAP32[$haystack>>2]|0;
 $12 = ((($haystack)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$_6>>2]|0;
 __THREW__ = 0;
 invoke_viiii(221,($_5|0),($14|0),($11|0),($13|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $17 = ___cxa_find_matching_catch_2()|0;
  $18 = tempRet0;
  HEAP32[$personalityslot>>2] = $17;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $18;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  ;HEAP32[$0>>2]=HEAP32[$_5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_5+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_5+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$_5+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$_5+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$_5+20>>2]|0;HEAP32[$0+24>>2]=HEAP32[$_5+24>>2]|0;
  STACKTOP = sp;return;
 }
}
function __ZN104__LT_core__str__pattern__CharEqPattern_LT_C_GT__u20_as_u20_core__str__pattern__Pattern_LT__u27_a_GT__GT_13into_searcher17hef8df7b9e8624350E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_9 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $haystack = 0, $personalityslot = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0;
 var $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $personalityslot = sp + 48|0;
 $_9 = sp + 32|0;
 $haystack = sp + 24|0;
 $self = sp + 16|0;
 $arg1 = sp + 8|0;
 $abi_cast = sp + 56|0;
 $arg0 = sp;
 HEAP32[$abi_cast>>2] = $1;
 ;HEAP32[$arg0>>2]=HEAP32[$abi_cast>>2]|0;
 HEAP32[$arg1>>2] = $2;
 $4 = ((($arg1)) + 4|0);
 HEAP32[$4>>2] = $3;
 $_11 = 0;
 $_11 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$haystack>>2] = $5;
 $8 = ((($haystack)) + 4|0);
 HEAP32[$8>>2] = $7;
 __THREW__ = 0;
 $9 = (invoke_ii(222,($self|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 do {
  if ($11) {
   $28 = ___cxa_find_matching_catch_2()|0;
   $29 = tempRet0;
   HEAP32[$personalityslot>>2] = $28;
   $personalityslot$index4 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index4>>2] = $29;
  } else {
   $12 = HEAP32[$haystack>>2]|0;
   $13 = ((($haystack)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $_11 = 0;
   $15 = HEAP32[$self>>2]|0;
   $16 = HEAP32[$haystack>>2]|0;
   $17 = ((($haystack)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   __THREW__ = 0;
   invoke_viii(223,($_9|0),($16|0),($18|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $30 = ___cxa_find_matching_catch_2()|0;
    $31 = tempRet0;
    HEAP32[$personalityslot>>2] = $30;
    $personalityslot$index6 = ((($personalityslot)) + 4|0);
    HEAP32[$personalityslot$index6>>2] = $31;
    break;
   } else {
    HEAP32[$0>>2] = $15;
    $21 = ((($0)) + 4|0);
    HEAP32[$21>>2] = $12;
    $22 = ((($21)) + 4|0);
    HEAP32[$22>>2] = $14;
    $23 = ((($0)) + 12|0);
    ;HEAP32[$23>>2]=HEAP32[$_9>>2]|0;HEAP32[$23+4>>2]=HEAP32[$_9+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$_9+8>>2]|0;
    $24 = ((($0)) + 24|0);
    $25 = $9&1;
    HEAP8[$24>>0] = $25;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $26 = $_11;
 $27 = $26&1;
 if (!($27)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_11 = 0;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN48__LT_F_u20_as_u20_core__str__pattern__CharEq_GT_10only_ascii17h16043b68984edf22E($0) {
 $0 = $0|0;
 var $1 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 STACKTOP = sp;return 0;
}
function __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_12char_indices17h52810c8711fa7491E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_3 = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_5chars17h46cfbd7fe13634e7E($_3,$8,$10);
 HEAP32[$0>>2] = 0;
 $11 = ((($0)) + 4|0);
 ;HEAP32[$11>>2]=HEAP32[$_3>>2]|0;HEAP32[$11+4>>2]=HEAP32[$_3+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_5chars17h46cfbd7fe13634e7E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $_3 = sp + 24|0;
 $self = sp + 16|0;
 $arg0 = sp + 8|0;
 HEAP32[$arg0>>2] = $1;
 $4 = ((($arg0)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = HEAP32[$arg0>>2]|0;
 $6 = ((($arg0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$self>>2] = $5;
 $8 = ((($self)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$self>>2]|0;
 $10 = ((($self)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_8as_bytes17h4b4339e2c1ddc0b5E($3,$9,$11);
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index1 = ((($3)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17h21b15f69a969ef78E($_3,$$sreg$field,$$sreg$field2);
 ;HEAP32[$0>>2]=HEAP32[$_3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_3+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17h21b15f69a969ef78E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_14 = 0, $arg0 = 0, $arg0$i = 0, $p = 0, $p1 = 0, $ptr = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = (__ZN4core3mem7size_of17h6cde1ee6d900fb7fE()|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $p = (1);
 } else {
  $10 = HEAP32[$self>>2]|0;
  $11 = ((($self)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17hba296da3e1414b7bE($10,$12)|0);
  $p1 = $13;
  $14 = $p1;
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h8b6cd3cee4527800E($14)|0);
  $15 = $p1;
  $p = $15;
 }
 $16 = $p;
 $17 = $p;
 $ptr = $17;
 $18 = $ptr;
 $arg0$i = $18;
 $19 = (__ZN4core3mem7size_of17h6cde1ee6d900fb7fE()|0);
 $20 = ($19|0)==(0);
 $21 = $ptr;
 $22 = HEAP32[$self>>2]|0;
 $23 = ((($self)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17heae38b00d24427d9E($22,$24)|0);
 if ($20) {
  $26 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_15wrapping_offset17h97e0322aebd28d69E($21,$25)|0);
  $_14 = $26;
  HEAP32[$0>>2] = $16;
  $28 = $_14;
  $29 = ((($0)) + 4|0);
  HEAP32[$29>>2] = $28;
  STACKTOP = sp;return;
 } else {
  $27 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h3d55b46cbed5fd51E($21,$25)|0);
  $_14 = $27;
  HEAP32[$0>>2] = $16;
  $28 = $_14;
  $29 = ((($0)) + 4|0);
  HEAP32[$29>>2] = $28;
  STACKTOP = sp;return;
 }
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h8b6cd3cee4527800E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr4null17ha8d8b44b5212dae5E()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h3d55b46cbed5fd51E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + ($5)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3ptr4null17ha8d8b44b5212dae5E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3len17h48e7fd72494c9a0dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_11starts_with17h3e4b01a2cafff54aE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $pat = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $personalityslot = sp + 32|0;
 $pat = sp + 24|0;
 $self = sp + 16|0;
 $arg1 = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $4 = ((($arg0)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$arg1>>2] = $2;
 $5 = ((($arg1)) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = HEAP32[$arg0>>2]|0;
 $7 = ((($arg0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$self>>2] = $6;
 $9 = ((($self)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$arg1>>2]|0;
 $11 = ((($arg1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$pat>>2] = $10;
 $13 = ((($pat)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$pat>>2]|0;
 $15 = ((($pat)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$self>>2]|0;
 $18 = ((($self)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 __THREW__ = 0;
 $20 = (invoke_iiiii(224,($14|0),($16|0),($17|0),($19|0))|0);
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $23 = ___cxa_find_matching_catch_2()|0;
  $24 = tempRet0;
  HEAP32[$personalityslot>>2] = $23;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $24;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZN80__LT__RF__u27_b_u20_str_u20_as_u20_core__str__pattern__Pattern_LT__u27_a_GT__GT_12is_prefix_of17hf42fdad5d2987353E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_12 = 0, $_15 = 0, $arg0 = 0, $arg1 = 0, $haystack = 0;
 var $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $_15 = sp + 48|0;
 $_12 = sp + 40|0;
 $haystack = sp + 32|0;
 $self = sp + 24|0;
 $arg1 = sp + 16|0;
 $arg0 = sp + 8|0;
 HEAP32[$arg0>>2] = $0;
 $5 = ((($arg0)) + 4|0);
 HEAP32[$5>>2] = $1;
 HEAP32[$arg1>>2] = $2;
 $6 = ((($arg1)) + 4|0);
 HEAP32[$6>>2] = $3;
 $7 = HEAP32[$arg0>>2]|0;
 $8 = ((($arg0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$self>>2] = $7;
 $10 = ((($self)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$arg1>>2]|0;
 $12 = ((($arg1)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$haystack>>2] = $11;
 $14 = ((($haystack)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$haystack>>2]|0;
 $16 = ((($haystack)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$self>>2]|0;
 $19 = ((($self)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (__ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_3len17h1ca6363c47a16e0eE($18,$20)|0);
 $22 = (__ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_16is_char_boundary17h0f82de258090dbefE($15,$17,$21)|0);
 if ($22) {
  $23 = HEAP32[$haystack>>2]|0;
  $24 = ((($haystack)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$self>>2]|0;
  $27 = ((($self)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (__ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_3len17h1ca6363c47a16e0eE($26,$28)|0);
  HEAP32[$_15>>2] = $29;
  $30 = HEAP32[$_15>>2]|0;
  __ZN4core3str6traits89__LT_impl_u20_core__ops__Index_LT_core__ops__RangeTo_LT_usize_GT__GT__u20_for_u20_str_GT_5index17had74d533bf1a359eE($4,$23,$25,$30);
  $$sreg$field = HEAP32[$4>>2]|0;
  $$sreg$index1 = ((($4)) + 4|0);
  $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
  HEAP32[$_12>>2] = $$sreg$field;
  $31 = ((($_12)) + 4|0);
  HEAP32[$31>>2] = $$sreg$field2;
  $32 = (__ZN4core3cmp5impls91__LT_impl_u20_core__cmp__PartialEq_LT__RF__u27_b_u20_B_GT__u20_for_u20__RF__u27_a_u20_A_GT_2eq17hdabca33c5847e2deE($self,$_12)|0);
  if ($32) {
   $_0 = 1;
   $33 = $_0;
   $34 = $33&1;
   STACKTOP = sp;return ($34|0);
  }
 }
 $_0 = 0;
 $33 = $_0;
 $34 = $33&1;
 STACKTOP = sp;return ($34|0);
}
function __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_16is_char_boundary17h0f82de258090dbefE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val4 = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_13 = 0, $_6 = 0, $arg0 = 0;
 var $arg1 = 0, $b = 0, $index = 0, $self = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp;
 $self = sp + 16|0;
 $arg0 = sp + 8|0;
 HEAP32[$arg0>>2] = $0;
 $4 = ((($arg0)) + 4|0);
 HEAP32[$4>>2] = $1;
 $arg1 = $2;
 $5 = HEAP32[$arg0>>2]|0;
 $6 = ((($arg0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$self>>2] = $5;
 $8 = ((($self)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = $arg1;
 $index = $9;
 $10 = $index;
 $11 = ($10|0)==(0);
 if ($11) {
  label = 2;
 } else {
  $12 = $index;
  $13 = HEAP32[$self>>2]|0;
  $14 = ((($self)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (__ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_3len17h1ca6363c47a16e0eE($13,$15)|0);
  $17 = ($12|0)==($16|0);
  if ($17) {
   label = 2;
  } else {
   $_6 = 0;
  }
 }
 if ((label|0) == 2) {
  $_6 = 1;
 }
 $18 = $_6;
 $19 = $18&1;
 if ($19) {
  $_0 = 1;
  $27 = $_0;
  $28 = $27&1;
  STACKTOP = sp;return ($28|0);
 }
 $20 = HEAP32[$self>>2]|0;
 $21 = ((($self)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_8as_bytes17h4b4339e2c1ddc0b5E($3,$20,$22);
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index1 = ((($3)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $23 = $index;
 $24 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3get17h6bec8b55dcfd858eE($$sreg$field,$$sreg$field2,$23)|0);
 $_13 = $24;
 $25 = $_13;
 $26 = ($25|0)!=(0|0);
 $$expand_i1_val = $26&1;
 $$expand_i1_val4 = 1;
 $switch = ($$expand_i1_val&255)<($$expand_i1_val4&255);
 if ($switch) {
  $_0 = 0;
  $27 = $_0;
  $28 = $27&1;
  STACKTOP = sp;return ($28|0);
 } else {
  $29 = $_13;
  $30 = HEAP8[$29>>0]|0;
  $b = $30;
  $31 = $b;
  $32 = ($31<<24>>24)>=(-64);
  $33 = $32&1;
  $_0 = $33;
  $27 = $_0;
  $28 = $27&1;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __ZN4core3str6traits89__LT_impl_u20_core__ops__Index_LT_core__ops__RangeTo_LT_usize_GT__GT__u20_for_u20_str_GT_5index17had74d533bf1a359eE($retVal,$0,$1,$2) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $abi_cast = 0, $arg0 = 0;
 var $arg1 = 0, $index = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp;
 $index = sp + 32|0;
 $self = sp + 24|0;
 $abi_cast = sp + 36|0;
 $arg1 = sp + 16|0;
 $arg0 = sp + 8|0;
 HEAP32[$arg0>>2] = $0;
 $4 = ((($arg0)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$abi_cast>>2] = $2;
 ;HEAP32[$arg1>>2]=HEAP32[$abi_cast>>2]|0;
 $5 = HEAP32[$arg0>>2]|0;
 $6 = ((($arg0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$self>>2] = $5;
 $8 = ((($self)) + 4|0);
 HEAP32[$8>>2] = $7;
 ;HEAP32[$index>>2]=HEAP32[$arg1>>2]|0;
 $9 = HEAP32[$self>>2]|0;
 $10 = ((($self)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$index>>2]|0;
 $13 = (__ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_16is_char_boundary17h0f82de258090dbefE($9,$11,$12)|0);
 $14 = HEAP32[$self>>2]|0;
 $15 = ((($self)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$index>>2]|0;
 if ($13) {
  __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_15slice_unchecked17hdb3957cc70fed6aaE($3,$14,$16,0,$17);
  $$sreg$field = HEAP32[$3>>2]|0;
  $$sreg$index1 = ((($3)) + 4|0);
  $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
  HEAP32[$retVal>>2] = $$sreg$field;
  $retVal$index4 = ((($retVal)) + 4|0);
  HEAP32[$retVal$index4>>2] = $$sreg$field2;
  STACKTOP = sp;return;
 } else {
  __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($14,$16,0,$17);
  // unreachable;
 }
}
function __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_15slice_unchecked17hdb3957cc70fed6aaE($retVal,$0,$1,$2,$3) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $arg2 = 0, $begin = 0, $end = 0;
 var $len = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, $transmute_temp$i = 0, $v$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp;
 $transmute_temp$i = sp + 40|0;
 $v$i = sp + 32|0;
 $arg0$i = sp + 24|0;
 $self = sp + 16|0;
 $arg0 = sp + 8|0;
 HEAP32[$arg0>>2] = $0;
 $5 = ((($arg0)) + 4|0);
 HEAP32[$5>>2] = $1;
 $arg1 = $2;
 $arg2 = $3;
 $6 = HEAP32[$arg0>>2]|0;
 $7 = ((($arg0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$self>>2] = $6;
 $9 = ((($self)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = $arg1;
 $begin = $10;
 $11 = $arg2;
 $end = $11;
 $12 = HEAP32[$self>>2]|0;
 $13 = ((($self)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (__ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_6as_ptr17ha35c3a9cac35122dE($12,$14)|0);
 $16 = $begin;
 $17 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h3d55b46cbed5fd51E($15,$16)|0);
 $ptr = $17;
 $18 = $end;
 $19 = $begin;
 $20 = (($18) - ($19))|0;
 $len = $20;
 $21 = $ptr;
 $22 = $len;
 __ZN4core5slice14from_raw_parts17h6406e96cc680f98fE($4,$21,$22);
 $$sreg$field = HEAP32[$4>>2]|0;
 $$sreg$index1 = ((($4)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$arg0$i>>2] = $$sreg$field;
 $23 = ((($arg0$i)) + 4|0);
 HEAP32[$23>>2] = $$sreg$field2;
 $24 = HEAP32[$arg0$i>>2]|0;
 $25 = ((($arg0$i)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 HEAP32[$v$i>>2] = $24;
 $27 = ((($v$i)) + 4|0);
 HEAP32[$27>>2] = $26;
 $28 = HEAP32[$v$i>>2]|0;
 $29 = ((($v$i)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[$transmute_temp$i>>2] = $28;
 $31 = ((($transmute_temp$i)) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = HEAP32[$transmute_temp$i>>2]|0;
 $33 = ((($transmute_temp$i)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 HEAP32[$retVal>>2] = $32;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $34;
 STACKTOP = sp;return;
}
function __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_6as_ptr17ha35c3a9cac35122dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3get17h6bec8b55dcfd858eE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0;
 var $arg0 = 0, $arg1 = 0, $index = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $personalityslot = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $arg1 = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $arg1;
 $index = $8;
 $9 = $index;
 $10 = HEAP32[$self>>2]|0;
 $11 = ((($self)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 $13 = (invoke_iiii(225,($9|0),($10|0),($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $17 = ___cxa_find_matching_catch_2()|0;
  $18 = tempRet0;
  HEAP32[$personalityslot>>2] = $17;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $18;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  $_0 = $13;
  $16 = $_0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_3get17h8f391ead05cb793dE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $arg0 = 0;
 var $arg1 = 0, $self = 0, $slice = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $slice = sp + 8|0;
 $arg1 = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = $arg0;
 $self = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$slice>>2] = $5;
 $8 = ((($slice)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = $self;
 $10 = HEAP32[$slice>>2]|0;
 $11 = ((($slice)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17heae38b00d24427d9E($10,$12)|0);
 $14 = ($9>>>0)<($13>>>0);
 if ($14) {
  $15 = $self;
  $16 = HEAP32[$slice>>2]|0;
  $17 = ((($slice)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (__ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_13get_unchecked17h726dd1d6b90d437dE($15,$16,$18)|0);
  $_0 = $19;
  $20 = $_0;
  STACKTOP = sp;return ($20|0);
 } else {
  $_0 = 0;
  $20 = $_0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_13get_unchecked17h726dd1d6b90d437dE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $self = 0, $slice = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $slice = sp + 8|0;
 $arg1 = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = $arg0;
 $self = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$slice>>2] = $5;
 $8 = ((($slice)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$slice>>2]|0;
 $10 = ((($slice)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17hba296da3e1414b7bE($9,$11)|0);
 $13 = $self;
 $14 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h3d55b46cbed5fd51E($12,$13)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17h1c69abfe9c840911E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field5 = 0, $$index4 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_10 = 0, $_11 = 0, $_8 = 0, $_9 = 0, $abi_cast = 0, $arg = 0;
 var $arg0 = 0, $arg1 = 0, $f = 0, $personalityslot = 0, $personalityslot$index7 = 0, $self = 0, $switch = 0, $switch2 = 0, $switch3 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $personalityslot = sp + 56|0;
 $arg = sp + 48|0;
 $_8 = sp + 40|0;
 $f = sp + 32|0;
 $self = sp + 24|0;
 $_0 = sp + 16|0;
 $arg1 = sp + 8|0;
 $abi_cast = sp + 64|0;
 $arg0 = sp;
 HEAP16[$abi_cast>>1] = $0;
 ;HEAP8[$arg0>>0]=HEAP8[$abi_cast>>0]|0;HEAP8[$arg0+1>>0]=HEAP8[$abi_cast+1>>0]|0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;
 $_11 = 0;
 $_10 = 0;
 $_10 = 1;
 ;HEAP8[$self>>0]=HEAP8[$arg0>>0]|0;HEAP8[$self+1>>0]=HEAP8[$arg0+1>>0]|0;
 $_11 = 1;
 $2 = ((($arg1)) + 4|0);
 $3 = HEAP32[$arg1>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$f>>2] = $3;
 $5 = ((($f)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = HEAP8[$self>>0]|0;
 $switch3 = ($6&255)<(1);
 if ($switch3) {
  $$sink = 0;
 } else {
  $_10 = 0;
  $8 = ((($self)) + 1|0);
  $9 = HEAP8[$8>>0]|0;
  $x = $9;
  $_11 = 0;
  $10 = ((($f)) + 4|0);
  $11 = HEAP32[$f>>2]|0;
  $12 = HEAP32[$10>>2]|0;
  $13 = $x;
  $_9 = $13;
  $14 = $_9;
  HEAP8[$_8>>0] = $14;
  HEAP32[$arg>>2] = $11;
  $15 = ((($arg)) + 4|0);
  HEAP32[$15>>2] = $12;
  $16 = HEAP8[$_8>>0]|0;
  __THREW__ = 0;
  invoke_vii(226,($arg|0),($16|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   $27 = ___cxa_find_matching_catch_2()|0;
   $28 = tempRet0;
   HEAP32[$personalityslot>>2] = $27;
   $personalityslot$index7 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index7>>2] = $28;
   $29 = $_11;
   $30 = $29&1;
   if ($30) {
    $_11 = 0;
   }
   $7 = HEAP8[$self>>0]|0;
   $switch = ($7&255)<(1);
   if ($switch) {
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index4 = ((($personalityslot)) + 4|0);
    $$field5 = HEAP32[$$index4>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
   $23 = $_10;
   $24 = $23&1;
   if (!($24)) {
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index4 = ((($personalityslot)) + 4|0);
    $$field5 = HEAP32[$$index4>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
   $_10 = 0;
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index4 = ((($personalityslot)) + 4|0);
   $$field5 = HEAP32[$$index4>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  } else {
   $$sink = 1;
  }
 }
 HEAP8[$_0>>0] = $$sink;
 $19 = $_11;
 $20 = $19&1;
 if ($20) {
  $_11 = 0;
 }
 $21 = HEAP8[$self>>0]|0;
 $switch2 = ($21&255)<(1);
 if ($switch2) {
  $22 = HEAP8[$_0>>0]|0;
  STACKTOP = sp;return ($22|0);
 }
 $25 = $_10;
 $26 = $25&1;
 if (!($26)) {
  $22 = HEAP8[$_0>>0]|0;
  STACKTOP = sp;return ($22|0);
 }
 $_10 = 0;
 $22 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($22|0);
}
function __ZN2ww10debug_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_10list_rooms28__u7b__u7b_closure_u7d__u7d_17h70ea689efb2f0e37E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_13 = 0, $_14 = 0, $_27 = 0, $_32 = 0, $_33 = 0, $_6 = 0, $_8 = 0, $__arg0 = 0, $__arg01 = 0, $__arg1 = 0, $__debuginfo_env_ptr = 0, $arg0 = 0, $arg1 = 0, $contents = 0, $room = 0, $room_id = 0, $switch = 0, $tmp_ret = 0, $tmp_ret2 = 0, $tmp_ret3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $tmp_ret3 = sp + 120|0;
 $tmp_ret2 = sp + 112|0;
 $tmp_ret = sp + 104|0;
 $_33 = sp + 96|0;
 $_32 = sp + 88|0;
 $_27 = sp + 64|0;
 $contents = sp + 56|0;
 $_14 = sp + 48|0;
 $_13 = sp + 32|0;
 $_8 = sp + 8|0;
 $room_id = sp + 149|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$0>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$0+4>>2]|0;
 $__debuginfo_env_ptr = $arg0;
 $arg1 = $1;
 $2 = $arg1;
 HEAP8[$room_id>>0] = $2;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP8[$room_id>>0]|0;
 $_6 = $6;
 $7 = $_6;
 $8 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_4room17h34a8fe8d447e3c3eE($5,$7)|0);
 $room = $8;
 $9 = HEAP32[872]|0;
 $10 = HEAP32[(3492)>>2]|0;
 $11 = ((($arg0)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$_14>>2] = $12;
 $13 = ((($_14)) + 4|0);
 HEAP32[$13>>2] = $room_id;
 $14 = HEAP32[$_14>>2]|0;
 $__arg0 = $14;
 $15 = ((($_14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $__arg1 = $16;
 $17 = $__arg0;
 __ZN4core3fmt10ArgumentV13new17hc4001ac744a7e61fE($tmp_ret,$17,227);
 $18 = ((($tmp_ret)) + 4|0);
 $19 = HEAP32[$tmp_ret>>2]|0;
 $20 = HEAP32[$18>>2]|0;
 $21 = $__arg1;
 __ZN4core3fmt10ArgumentV13new17h3f3aaa5a7922a908E($tmp_ret2,$21,191);
 $22 = ((($tmp_ret2)) + 4|0);
 $23 = HEAP32[$tmp_ret2>>2]|0;
 $24 = HEAP32[$22>>2]|0;
 HEAP32[$_13>>2] = $19;
 $25 = ((($_13)) + 4|0);
 HEAP32[$25>>2] = $20;
 $26 = ((($_13)) + 8|0);
 HEAP32[$26>>2] = $23;
 $27 = ((($26)) + 4|0);
 HEAP32[$27>>2] = $24;
 __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_8,$9,$10,$_13,2);
 __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_8);
 $28 = $room;
 $29 = ((($28)) + 28|0);
 $30 = HEAP8[$29>>0]|0;
 $switch = ($30&255)<(1);
 if ($switch) {
  STACKTOP = sp;return;
 }
 $31 = $room;
 $32 = ((($31)) + 28|0);
 $33 = ((($32)) + 1|0);
 ;HEAP8[$contents>>0]=HEAP8[$33>>0]|0;HEAP8[$contents+1>>0]=HEAP8[$33+1>>0]|0;
 $34 = HEAP32[874]|0;
 $35 = HEAP32[(3500)>>2]|0;
 HEAP32[$_33>>2] = $contents;
 $36 = HEAP32[$_33>>2]|0;
 $__arg01 = $36;
 $37 = $__arg01;
 __ZN4core3fmt10ArgumentV13new17hd5baedbe6871e2f2E($tmp_ret3,$37,228);
 $38 = ((($tmp_ret3)) + 4|0);
 $39 = HEAP32[$tmp_ret3>>2]|0;
 $40 = HEAP32[$38>>2]|0;
 HEAP32[$_32>>2] = $39;
 $41 = ((($_32)) + 4|0);
 HEAP32[$41>>2] = $40;
 __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_27,$34,$35,$_32,1);
 __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_27);
 STACKTOP = sp;return;
}
function __ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_4room17h34a8fe8d447e3c3eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_7 = 0, $arg0 = 0, $arg1 = 0, $r = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $r = $3;
 $4 = $r;
 $_7 = $4;
 $5 = $_7;
 $6 = (__ZN59__LT_ww__game_map__RoomId_u20_as_u20_ww__map__MapRoomId_GT_7room_id17h4869568c9e17f156E($5)|0);
 $7 = $self;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6>>>0)<($9>>>0);
 $11 = $10;
 if ($11) {
  $12 = $self;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($6<<5)|0);
  STACKTOP = sp;return ($14|0);
 } else {
  __ZN4core9panicking18panic_bounds_check17h196ab917033e60b3E(3544,$6,$9);
  // unreachable;
 }
 return (0)|0;
}
function __ZN4core3fmt10ArgumentV13new17hc4001ac744a7e61fE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$transmute_temp>>2] = $5;
 $6 = HEAP32[$transmute_temp>>2]|0;
 $7 = $x;
 HEAP32[$transmute_temp1>>2] = $7;
 $8 = HEAP32[$transmute_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN63__LT_ww__game_map__RoomContents_u20_as_u20_core__fmt__Debug_GT_3fmt17h1bee38966e16a4c2E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_18 = 0, $_29 = 0, $_5 = 0, $__arg_0 = 0, $__self_0 = 0;
 var $__self_01 = 0, $abi_cast = 0, $abi_cast3 = 0, $arg0 = 0, $arg1 = 0, $builder = 0, $builder2 = 0, $self = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $abi_cast3 = sp + 81|0;
 $abi_cast = sp + 80|0;
 $_29 = sp + 76|0;
 $builder2 = sp + 32|0;
 $_18 = sp + 72|0;
 $builder = sp + 16|0;
 $_5 = sp + 8|0;
 $_0 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $__arg_0 = $3;
 $4 = $self;
 HEAP32[$_5>>2] = $4;
 $5 = HEAP32[$_5>>2]|0;
 $6 = HEAP8[$5>>0]|0;
 $switch = ($6&255)<(1);
 $7 = HEAP32[$_5>>2]|0;
 $8 = ((($7)) + 1|0);
 if ($switch) {
  $__self_0 = $8;
  $9 = $__arg_0;
  __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder,$9,13103,8);
  $10 = $__self_0;
  HEAP32[$_18>>2] = $10;
  (__ZN4core3fmt8builders10DebugTuple5field17hd64ae47e9d46842fE($builder,$_18,24)|0);
  $11 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder)|0);
  HEAP8[$abi_cast3>>0] = $11;
  ;HEAP8[$_0>>0]=HEAP8[$abi_cast3>>0]|0;
  $15 = HEAP8[$_0>>0]|0;
  STACKTOP = sp;return ($15|0);
 } else {
  $__self_01 = $8;
  $12 = $__arg_0;
  __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder2,$12,13111,6);
  $13 = $__self_01;
  HEAP32[$_29>>2] = $13;
  (__ZN4core3fmt8builders10DebugTuple5field17hd64ae47e9d46842fE($builder2,$_29,40)|0);
  $14 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder2)|0);
  HEAP8[$abi_cast>>0] = $14;
  ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
  $15 = HEAP8[$_0>>0]|0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZN4core3fmt10ArgumentV13new17hd5baedbe6871e2f2E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$transmute_temp>>2] = $5;
 $6 = HEAP32[$transmute_temp>>2]|0;
 $7 = $x;
 HEAP32[$transmute_temp1>>2] = $7;
 $8 = HEAP32[$transmute_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hd99372fa4f51ec0cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_0 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $abi_cast = sp + 20|0;
 $_0 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $f = $3;
 $4 = $self;
 $5 = HEAP32[$4>>2]|0;
 $6 = $f;
 $7 = (__ZN60__LT_ww__monsters__MonsterId_u20_as_u20_core__fmt__Debug_GT_3fmt17hd7c7dcb5c6cbcb9bE($5,$6)|0);
 HEAP8[$abi_cast>>0] = $7;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
 $8 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZN60__LT_ww__monsters__MonsterId_u20_as_u20_core__fmt__Debug_GT_3fmt17hd7c7dcb5c6cbcb9bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_5 = 0, $__arg_0 = 0, $abi_cast = 0, $abi_cast4 = 0, $abi_cast5 = 0;
 var $abi_cast6 = 0, $arg0 = 0, $arg1 = 0, $builder = 0, $builder1 = 0, $builder2 = 0, $builder3 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $abi_cast6 = sp + 99|0;
 $abi_cast5 = sp + 98|0;
 $abi_cast4 = sp + 97|0;
 $abi_cast = sp + 96|0;
 $builder3 = sp + 64|0;
 $builder2 = sp + 48|0;
 $builder1 = sp + 32|0;
 $builder = sp + 16|0;
 $_5 = sp + 8|0;
 $_0 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $__arg_0 = $3;
 $4 = $self;
 HEAP32[$_5>>2] = $4;
 $5 = HEAP32[$_5>>2]|0;
 $6 = HEAP8[$5>>0]|0;
 switch ($6<<24>>24) {
 case 0:  {
  $7 = $__arg_0;
  __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder,$7,13117,8);
  $8 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder)|0);
  HEAP8[$abi_cast6>>0] = $8;
  ;HEAP8[$_0>>0]=HEAP8[$abi_cast6>>0]|0;
  $15 = HEAP8[$_0>>0]|0;
  STACKTOP = sp;return ($15|0);
  break;
 }
 case 1:  {
  $9 = $__arg_0;
  __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder1,$9,13125,11);
  $10 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder1)|0);
  HEAP8[$abi_cast5>>0] = $10;
  ;HEAP8[$_0>>0]=HEAP8[$abi_cast5>>0]|0;
  $15 = HEAP8[$_0>>0]|0;
  STACKTOP = sp;return ($15|0);
  break;
 }
 case 2:  {
  $11 = $__arg_0;
  __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder2,$11,13136,8);
  $12 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder2)|0);
  HEAP8[$abi_cast4>>0] = $12;
  ;HEAP8[$_0>>0]=HEAP8[$abi_cast4>>0]|0;
  $15 = HEAP8[$_0>>0]|0;
  STACKTOP = sp;return ($15|0);
  break;
 }
 case 3:  {
  $13 = $__arg_0;
  __ZN4core3fmt9Formatter11debug_tuple17h409f9fc077b4a91fE($builder3,$13,13144,6);
  $14 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder3)|0);
  HEAP8[$abi_cast>>0] = $14;
  ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
  $15 = HEAP8[$_0>>0]|0;
  STACKTOP = sp;return ($15|0);
  break;
 }
 default: {
  // unreachable;
 }
 }
 return (0)|0;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h77a14f50168ed328E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_0 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $abi_cast = sp + 20|0;
 $_0 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $f = $3;
 $4 = $self;
 $5 = HEAP32[$4>>2]|0;
 $6 = $f;
 $7 = (__ZN4core3fmt3num49__LT_impl_u20_core__fmt__Debug_u20_for_u20_u8_GT_3fmt17h439f9696de9b8938E($5,$6)|0);
 HEAP8[$abi_cast>>0] = $7;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
 $8 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZN92__LT_collections__string__String_u20_as_u20_core__ops__Index_LT_core__ops__RangeFull_GT__GT_5index17he5070a52e8aa9dd4E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0;
 var $retVal$index4 = 0, $self = 0, $transmute_temp$i = 0, $v$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp;
 $transmute_temp$i = sp + 24|0;
 $v$i = sp + 16|0;
 $arg0$i = sp + 8|0;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN67__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h1b206e401af9de87E($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$arg0$i>>2] = $$sreg$field;
 $4 = ((($arg0$i)) + 4|0);
 HEAP32[$4>>2] = $$sreg$field2;
 $5 = HEAP32[$arg0$i>>2]|0;
 $6 = ((($arg0$i)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$v$i>>2] = $5;
 $8 = ((($v$i)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$v$i>>2]|0;
 $10 = ((($v$i)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$transmute_temp$i>>2] = $9;
 $12 = ((($transmute_temp$i)) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$transmute_temp$i>>2]|0;
 $14 = ((($transmute_temp$i)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$retVal>>2] = $13;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN4core3str6traits78__LT_impl_u20_core__ops__Index_LT_core__ops__RangeFull_GT__u20_for_u20_str_GT_5index17h910b7d147cf11505E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $retVal$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$retVal>>2] = $7;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17h72b10a3987d2b843E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val11 = 0, $$expand_i1_val12 = 0, $$expand_i1_val13 = 0, $$expand_i1_val14 = 0, $$field = 0, $$field5 = 0, $$index4 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_10 = 0, $_11 = 0, $_7 = 0;
 var $_8 = 0, $_9 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $f = 0, $personalityslot = 0, $personalityslot$index7 = 0, $personalityslot$index9 = 0, $self = 0, $switch = 0, $switch2 = 0, $switch3 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $personalityslot = sp + 112|0;
 $_9 = sp + 96|0;
 $_8 = sp + 80|0;
 $_7 = sp + 72|0;
 $x = sp + 56|0;
 $f = sp + 48|0;
 $self = sp + 32|0;
 $_0 = sp + 24|0;
 $abi_cast = sp + 120|0;
 $arg1 = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$0>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$0+8>>2]|0;
 HEAP32[$abi_cast>>2] = $1;
 ;HEAP32[$arg1>>2]=HEAP32[$abi_cast>>2]|0;
 $_11 = 0;
 $_10 = 0;
 $_10 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;
 $_11 = 1;
 ;HEAP32[$f>>2]=HEAP32[$arg1>>2]|0;
 $2 = HEAP32[$self>>2]|0;
 $3 = ($2|0)!=(0|0);
 $$expand_i1_val = $3&1;
 $$expand_i1_val10 = 1;
 $switch3 = ($$expand_i1_val&255)<($$expand_i1_val10&255);
 if ($switch3) {
  $$sink = 0;
 } else {
  $_10 = 0;
  ;HEAP32[$x>>2]=HEAP32[$self>>2]|0;HEAP32[$x+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$x+8>>2]=HEAP32[$self+8>>2]|0;
  $_11 = 0;
  ;HEAP32[$_7>>2]=HEAP32[$f>>2]|0;
  ;HEAP32[$_9>>2]=HEAP32[$x>>2]|0;HEAP32[$_9+4>>2]=HEAP32[$x+4>>2]|0;HEAP32[$_9+8>>2]=HEAP32[$x+8>>2]|0;
  ;HEAP32[$_8>>2]=HEAP32[$_9>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$_9+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$_9+8>>2]|0;
  $6 = HEAP32[$_7>>2]|0;
  __THREW__ = 0;
  invoke_vii(229,($6|0),($_8|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $22 = ___cxa_find_matching_catch_2()|0;
   $23 = tempRet0;
   HEAP32[$personalityslot>>2] = $22;
   $personalityslot$index7 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index7>>2] = $23;
   $24 = $_11;
   $25 = $24&1;
   if ($25) {
    $_11 = 0;
   }
   $4 = HEAP32[$self>>2]|0;
   $5 = ($4|0)!=(0|0);
   $$expand_i1_val11 = $5&1;
   $$expand_i1_val12 = 1;
   $switch = ($$expand_i1_val11&255)<($$expand_i1_val12&255);
   if ($switch) {
    __ZN4drop17h8d63afbc99eb0efaE($self);
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index4 = ((($personalityslot)) + 4|0);
    $$field5 = HEAP32[$$index4>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
   $14 = $_10;
   $15 = $14&1;
   if (!($15)) {
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index4 = ((($personalityslot)) + 4|0);
    $$field5 = HEAP32[$$index4>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
   $_10 = 0;
   __ZN4drop17hdd1638425ff7362fE($self);
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index4 = ((($personalityslot)) + 4|0);
   $$field5 = HEAP32[$$index4>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  } else {
   $$sink = 1;
  }
 }
 HEAP8[$_0>>0] = $$sink;
 $9 = $_11;
 $10 = $9&1;
 if ($10) {
  $_11 = 0;
 }
 $11 = HEAP32[$self>>2]|0;
 $12 = ($11|0)!=(0|0);
 $$expand_i1_val13 = $12&1;
 $$expand_i1_val14 = 1;
 $switch2 = ($$expand_i1_val13&255)<($$expand_i1_val14&255);
 if ($switch2) {
  __THREW__ = 0;
  invoke_vi(170,($self|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   $13 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($13|0);
  }
 } else {
  $18 = $_10;
  $19 = $18&1;
  if (!($19)) {
   $13 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($13|0);
  }
  $_10 = 0;
  __THREW__ = 0;
  invoke_vi(142,($self|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   $13 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($13|0);
  }
 }
 $26 = ___cxa_find_matching_catch_2()|0;
 $27 = tempRet0;
 HEAP32[$personalityslot>>2] = $26;
 $personalityslot$index9 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index9>>2] = $27;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index4 = ((($personalityslot)) + 4|0);
 $$field5 = HEAP32[$$index4>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
 return (0)|0;
}
function __ZN2ww10game_state9GameState18tick_eat_food_mode28__u7b__u7b_closure_u7d__u7d_17habfbf6647442a1aeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$arith11 = 0, $$arith20 = 0, $$div = 0, $$field = 0, $$field5 = 0, $$index4 = 0, $$ispos = 0, $$ispos16 = 0, $$negcheck = 0, $$negcheck15 = 0, $$negtemp = 0, $$negtemp13 = 0, $$overflow = 0, $$poscheck = 0, $$poscheck14 = 0, $$postemp = 0, $$postemp12 = 0, $$same = 0, $$select = 0;
 var $$select17 = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_12 = 0, $_21 = 0, $_30 = 0, $_38 = 0, $_4 = 0, $_41 = 0, $_55 = 0, $_58 = 0, $_63 = 0, $_64 = 0, $__arg0 = 0, $__debuginfo_env_ptr = 0, $abi_cast = 0;
 var $amount = 0, $arg0 = 0, $arg1 = 0, $input = 0, $personalityslot = 0, $personalityslot$index7 = 0, $personalityslot$index9 = 0, $switch = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $2 = sp;
 $tmp_ret = sp + 224|0;
 $personalityslot = sp + 216|0;
 $_64 = sp + 208|0;
 $_63 = sp + 200|0;
 $_58 = sp + 176|0;
 $_55 = sp + 160|0;
 $_41 = sp + 136|0;
 $_38 = sp + 120|0;
 $_30 = sp + 104|0;
 $_21 = sp + 80|0;
 $_12 = sp + 56|0;
 $_4 = sp + 48|0;
 $input = sp + 32|0;
 $arg1 = sp + 16|0;
 $abi_cast = sp + 232|0;
 $arg0 = sp + 8|0;
 HEAP32[$abi_cast>>2] = $0;
 ;HEAP32[$arg0>>2]=HEAP32[$abi_cast>>2]|0;
 $__debuginfo_env_ptr = $arg0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$1+8>>2]|0;
 ;HEAP32[$input>>2]=HEAP32[$arg1>>2]|0;HEAP32[$input+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$input+8>>2]=HEAP32[$arg1+8>>2]|0;
 __THREW__ = 0;
 invoke_vii(178,($2|0),($input|0));
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if (!($4)) {
   __THREW__ = 0;
   invoke_viii(230,($_4|0),($$sreg$field|0),($$sreg$field2|0));
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if (!($6)) {
    $7 = HEAP8[$_4>>0]|0;
    $switch = ($7&255)<(1);
    do {
     if ($switch) {
      $17 = ((($_4)) + 4|0);
      $18 = HEAP32[$17>>2]|0;
      $amount = $18;
      $19 = $amount;
      $20 = ($19|0)<(0);
      if ($20) {
       $23 = HEAP32[897]|0;
       $24 = HEAP32[(3592)>>2]|0;
       __THREW__ = 0;
       invoke_viiiii(130,($_12|0),($23|0),($24|0),(23968|0),0);
       $25 = __THREW__; __THREW__ = 0;
       $26 = $25&1;
       if ($26) {
        break L1;
       }
       __THREW__ = 0;
       invoke_vi(172,($_12|0));
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        break L1;
       } else {
        break;
       }
      }
      $27 = $amount;
      $28 = ($27|0)==(0);
      if ($28) {
       $31 = HEAP32[899]|0;
       $32 = HEAP32[(3600)>>2]|0;
       __THREW__ = 0;
       invoke_viiiii(130,($_21|0),($31|0),($32|0),(23968|0),0);
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        break L1;
       }
       __THREW__ = 0;
       invoke_vi(172,($_21|0));
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if ($42) {
        break L1;
       }
       __THREW__ = 0;
       invoke_v(232);
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if ($44) {
        break L1;
       }
       $45 = HEAP32[$arg0>>2]|0;
       $46 = HEAP32[$45>>2]|0;
       HEAP32[$_30>>2] = 1;
       __THREW__ = 0;
       invoke_vii(175,($46|0),($_30|0));
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        break L1;
       } else {
        break;
       }
      }
      $35 = $amount;
      $36 = HEAP32[$arg0>>2]|0;
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($37)) + 40|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($35|0)>($39|0);
      if ($40) {
       $49 = HEAP32[$arg0>>2]|0;
       $50 = HEAP32[$49>>2]|0;
       __THREW__ = 0;
       invoke_vi(233,($50|0));
       $51 = __THREW__; __THREW__ = 0;
       $52 = $51&1;
       if ($52) {
        break L1;
       }
       $55 = HEAP32[$arg0>>2]|0;
       $56 = HEAP32[$55>>2]|0;
       HEAP32[$_38>>2] = 1;
       __THREW__ = 0;
       invoke_vii(175,($56|0),($_38|0));
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        break L1;
       } else {
        break;
       }
      }
      __THREW__ = 0;
      invoke_v(234);
      $53 = __THREW__; __THREW__ = 0;
      $54 = $53&1;
      if ($54) {
       break L1;
      }
      $59 = HEAP32[901]|0;
      $60 = HEAP32[(3608)>>2]|0;
      __THREW__ = 0;
      invoke_viiiii(130,($_41|0),($59|0),($60|0),(23968|0),0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       break L1;
      }
      __THREW__ = 0;
      invoke_vi(172,($_41|0));
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       break L1;
      }
      $65 = $amount;
      $66 = HEAP32[$arg0>>2]|0;
      $67 = HEAP32[$66>>2]|0;
      $68 = ((($67)) + 40|0);
      $69 = HEAP32[$68>>2]|0;
      $$arith11 = (($69) - ($65))|0;
      $$postemp12 = (($69) + -2147483647)|0;
      $$negtemp13 = (($69) + -2147483648)|0;
      $$poscheck14 = ($$arith11|0)<($$postemp12|0);
      $$negcheck15 = ($$arith11|0)>($$negtemp13|0);
      $$ispos16 = ($69|0)>=(0);
      $$select17 = $$ispos16 ? $$poscheck14 : $$negcheck15;
      $70 = $$select17;
      if ($70) {
       __THREW__ = 0;
       invoke_vi(78,(3612|0));
       $100 = __THREW__; __THREW__ = 0;
       break L1;
      }
      $71 = HEAP32[$arg0>>2]|0;
      $72 = HEAP32[$71>>2]|0;
      $73 = ((($72)) + 40|0);
      HEAP32[$73>>2] = $$arith11;
      $74 = $amount;
      $$arith20 = ($74*5)|0;
      $$div = (($$arith20|0) / 5)&-1;
      $$same = ($$div|0)!=($74|0);
      $$overflow = 0 ? 0 : $$same;
      $75 = $$overflow;
      if ($75) {
       __THREW__ = 0;
       invoke_vi(78,(3632|0));
       $101 = __THREW__; __THREW__ = 0;
       break L1;
      }
      $76 = HEAP32[$arg0>>2]|0;
      $77 = HEAP32[$76>>2]|0;
      $78 = ((($77)) + 32|0);
      $79 = HEAP32[$78>>2]|0;
      $$arith = (($79) + ($$arith20))|0;
      $$postemp = (($79) + -2147483648)|0;
      $$negtemp = (($79) + 2147483647)|0;
      $$poscheck = ($$arith|0)<($$postemp|0);
      $$negcheck = ($$arith|0)>($$negtemp|0);
      $$ispos = ($79|0)>=(0);
      $$select = $$ispos ? $$poscheck : $$negcheck;
      $80 = $$select;
      if ($80) {
       __THREW__ = 0;
       invoke_vi(78,(3652|0));
       $102 = __THREW__; __THREW__ = 0;
       break L1;
      }
      $81 = HEAP32[$arg0>>2]|0;
      $82 = HEAP32[$81>>2]|0;
      $83 = ((($82)) + 32|0);
      HEAP32[$83>>2] = $$arith;
      $84 = HEAP32[$arg0>>2]|0;
      $85 = HEAP32[$84>>2]|0;
      HEAP32[$_55>>2] = 1;
      __THREW__ = 0;
      invoke_vii(175,($85|0),($_55|0));
      $86 = __THREW__; __THREW__ = 0;
      $87 = $86&1;
      if ($87) {
       break L1;
      }
      __THREW__ = 0;
      invoke_v(232);
      $88 = __THREW__; __THREW__ = 0;
      $89 = $88&1;
      if ($89) {
       break L1;
      }
     } else {
      $8 = HEAP32[895]|0;
      $9 = HEAP32[(3584)>>2]|0;
      $10 = HEAP32[$arg0>>2]|0;
      $11 = HEAP32[$10>>2]|0;
      $12 = ((($11)) + 20|0);
      HEAP32[$_64>>2] = $12;
      $13 = HEAP32[$_64>>2]|0;
      $__arg0 = $13;
      $14 = $__arg0;
      __THREW__ = 0;
      invoke_viii(231,($tmp_ret|0),($14|0),(162|0));
      $15 = __THREW__; __THREW__ = 0;
      $16 = $15&1;
      if ($16) {
       break L1;
      }
      $90 = ((($tmp_ret)) + 4|0);
      $91 = HEAP32[$tmp_ret>>2]|0;
      $92 = HEAP32[$90>>2]|0;
      HEAP32[$_63>>2] = $91;
      $93 = ((($_63)) + 4|0);
      HEAP32[$93>>2] = $92;
      __THREW__ = 0;
      invoke_viiiii(130,($_58|0),($8|0),($9|0),($_63|0),1);
      $94 = __THREW__; __THREW__ = 0;
      $95 = $94&1;
      if ($95) {
       break L1;
      }
      __THREW__ = 0;
      invoke_vi(172,($_58|0));
      $96 = __THREW__; __THREW__ = 0;
      $97 = $96&1;
      if ($97) {
       break L1;
      }
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(142,($input|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     STACKTOP = sp;return;
    }
    $103 = ___cxa_find_matching_catch_2()|0;
    $104 = tempRet0;
    HEAP32[$personalityslot>>2] = $103;
    $personalityslot$index9 = ((($personalityslot)) + 4|0);
    HEAP32[$personalityslot$index9>>2] = $104;
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index4 = ((($personalityslot)) + 4|0);
    $$field5 = HEAP32[$$index4>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
  }
 } while(0);
 $98 = ___cxa_find_matching_catch_2()|0;
 $99 = tempRet0;
 HEAP32[$personalityslot>>2] = $98;
 $personalityslot$index7 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index7>>2] = $99;
 __ZN4drop17hdd1638425ff7362fE($input);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index4 = ((($personalityslot)) + 4|0);
 $$field5 = HEAP32[$$index4>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN11collections3str21__LT_impl_u20_str_GT_5parse17hdc589f137f419668E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_5parse17hfabfcf2603afbff9E($0,$8,$10);
 STACKTOP = sp;return;
}
function __ZN66__LT_collections__string__String_u20_as_u20_core__fmt__Display_GT_3fmt17h8cb585a48140150eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_0 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $f = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $abi_cast = sp + 28|0;
 $_0 = sp + 8|0;
 $arg0 = $0;
 $arg1 = $1;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $self;
 __ZN64__LT_collections__string__String_u20_as_u20_core__ops__Deref_GT_5deref17h9de4490adad97478E($2,$5);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $6 = $f;
 $7 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17h53ffdc2cd959b259E($$sreg$field,$$sreg$field2,$6)|0);
 HEAP8[$abi_cast>>0] = $7;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
 $8 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($8|0);
}
function __ZN4core3fmt10ArgumentV13new17h25daa2abe202f87fE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$transmute_temp>>2] = $5;
 $6 = HEAP32[$transmute_temp>>2]|0;
 $7 = $x;
 HEAP32[$transmute_temp1>>2] = $7;
 $8 = HEAP32[$transmute_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_5parse17hfabfcf2603afbff9E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN4core3num52__LT_impl_u20_core__str__FromStr_u20_for_u20_i32_GT_8from_str17h53ea4a06f4a409d3E($0,$8,$10);
 STACKTOP = sp;return;
}
function __ZN2ww7command16CommandProcessor9show_help17h22d6aa41c0a7fba6E() {
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$field = 0, $$field5 = 0, $$index4 = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_15 = 0, $_2 = 0, $_20 = 0, $_21 = 0;
 var $_3 = 0, $_7 = 0, $__arg0 = 0, $__arg1 = 0, $info = 0, $iter = 0, $personalityslot = 0, $personalityslot$index7 = 0, $personalityslot$index9 = 0, $switch = 0, $tmp_ret = 0, $tmp_ret1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $0 = sp;
 $tmp_ret1 = sp + 112|0;
 $tmp_ret = sp + 104|0;
 $personalityslot = sp + 96|0;
 $_21 = sp + 88|0;
 $_20 = sp + 72|0;
 $_15 = sp + 48|0;
 $_10 = sp + 120|0;
 $iter = sp + 40|0;
 $_7 = sp + 24|0;
 $_3 = sp + 16|0;
 $_2 = sp + 8|0;
 __ZN120__LT_ww__inventory__InventoryCommand_u20_as_u20_ww__command__CommandProcessor_LT_ww__inventory__InventoryCommand_GT__GT_8get_help17h269600b7528fa461E($_7);
 __THREW__ = 0;
 invoke_vii(235,($0|0),($_7|0));
 $$sreg$field = HEAP32[$0>>2]|0;
 $$sreg$index1 = ((($0)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   __THREW__ = 0;
   invoke_viii(236,($_3|0),($$sreg$field|0),($$sreg$field2|0));
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if (!($4)) {
    __THREW__ = 0;
    invoke_vii(237,($_2|0),($_3|0));
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     ;HEAP32[$iter>>2]=HEAP32[$_2>>2]|0;HEAP32[$iter+4>>2]=HEAP32[$_2+4>>2]|0;
     while(1) {
      __THREW__ = 0;
      $7 = (invoke_ii(238,($iter|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       break L1;
      }
      HEAP32[$_10>>2] = $7;
      $10 = HEAP32[$_10>>2]|0;
      $11 = ($10|0)!=(0|0);
      $$expand_i1_val = $11&1;
      $$expand_i1_val10 = 1;
      $switch = ($$expand_i1_val&255)<($$expand_i1_val10&255);
      if ($switch) {
       break;
      }
      $14 = HEAP32[$_10>>2]|0;
      $info = $14;
      $15 = HEAP32[585]|0;
      $16 = HEAP32[(2344)>>2]|0;
      $17 = $info;
      $18 = $info;
      $19 = ((($18)) + 4|0);
      HEAP32[$_21>>2] = $17;
      $20 = ((($_21)) + 4|0);
      HEAP32[$20>>2] = $19;
      $21 = HEAP32[$_21>>2]|0;
      $__arg0 = $21;
      $22 = ((($_21)) + 4|0);
      $23 = HEAP32[$22>>2]|0;
      $__arg1 = $23;
      $24 = $__arg0;
      __THREW__ = 0;
      invoke_viii(240,($tmp_ret|0),($24|0),(241|0));
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if ($26) {
       break L1;
      }
      $27 = ((($tmp_ret)) + 4|0);
      $28 = HEAP32[$tmp_ret>>2]|0;
      $29 = HEAP32[$27>>2]|0;
      $30 = $__arg1;
      __THREW__ = 0;
      invoke_viii(231,($tmp_ret1|0),($30|0),(162|0));
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       break L1;
      }
      $33 = ((($tmp_ret1)) + 4|0);
      $34 = HEAP32[$tmp_ret1>>2]|0;
      $35 = HEAP32[$33>>2]|0;
      HEAP32[$_20>>2] = $28;
      $36 = ((($_20)) + 4|0);
      HEAP32[$36>>2] = $29;
      $37 = ((($_20)) + 8|0);
      HEAP32[$37>>2] = $34;
      $38 = ((($37)) + 4|0);
      HEAP32[$38>>2] = $35;
      __THREW__ = 0;
      invoke_viiiii(130,($_15|0),($15|0),($16|0),($_20|0),2);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       break L1;
      }
      __THREW__ = 0;
      invoke_vi(172,($_15|0));
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       break L1;
      }
     }
     __THREW__ = 0;
     invoke_vi(239,($_7|0));
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if (!($13)) {
      STACKTOP = sp;return;
     }
     $45 = ___cxa_find_matching_catch_2()|0;
     $46 = tempRet0;
     HEAP32[$personalityslot>>2] = $45;
     $personalityslot$index9 = ((($personalityslot)) + 4|0);
     HEAP32[$personalityslot$index9>>2] = $46;
     $$field = HEAP32[$personalityslot>>2]|0;
     $$index4 = ((($personalityslot)) + 4|0);
     $$field5 = HEAP32[$$index4>>2]|0;
     ___resumeException($$field|0);
     // unreachable;
    }
   }
  }
 } while(0);
 $43 = ___cxa_find_matching_catch_2()|0;
 $44 = tempRet0;
 HEAP32[$personalityslot>>2] = $43;
 $personalityslot$index7 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index7>>2] = $44;
 __ZN4drop17hc6bc1b4e0e470747E($_7);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index4 = ((($personalityslot)) + 4|0);
 $$field5 = HEAP32[$$index4>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN2ww5items4Item5price17h139a8fd652ec7d14E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_0 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP8[$2>>0]|0;
 switch ($3<<24>>24) {
 case 0:  {
  $_0 = 15;
  break;
 }
 case 1:  {
  $_0 = 10;
  break;
 }
 case 2:  {
  $_0 = 20;
  break;
 }
 case 3:  {
  $_0 = 2;
  break;
 }
 case 4:  {
  $_0 = 30;
  break;
 }
 case 5:  {
  $_0 = 50;
  break;
 }
 default: {
  // unreachable;
 }
 }
 $4 = $_0;
 STACKTOP = sp;return ($4|0);
}
function __ZN54__LT_ww__items__Item_u20_as_u20_core__fmt__Display_GT_3fmt17he9660b3b2e36c83fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_11 = 0;
 var $_12 = 0, $_14 = 0, $_14$index4 = 0, $_6 = 0, $__arg0 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $f = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $2 = sp;
 $abi_cast = sp + 92|0;
 $tmp_ret = sp + 64|0;
 $_14 = sp + 56|0;
 $_12 = sp + 48|0;
 $_11 = sp + 40|0;
 $_6 = sp + 16|0;
 $_0 = sp + 8|0;
 $arg0 = $0;
 $arg1 = $1;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 $6 = HEAP32[954]|0;
 $7 = HEAP32[(3820)>>2]|0;
 $8 = $self;
 __ZN2ww5items4Item6as_str17h91b3fa04d3b7bca5E($2,$8);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$_14>>2] = $$sreg$field;
 $_14$index4 = ((($_14)) + 4|0);
 HEAP32[$_14$index4>>2] = $$sreg$field2;
 HEAP32[$_12>>2] = $_14;
 $9 = HEAP32[$_12>>2]|0;
 $__arg0 = $9;
 $10 = $__arg0;
 __ZN4core3fmt10ArgumentV13new17hbee887761b52d43aE($tmp_ret,$10,127);
 $11 = ((($tmp_ret)) + 4|0);
 $12 = HEAP32[$tmp_ret>>2]|0;
 $13 = HEAP32[$11>>2]|0;
 HEAP32[$_11>>2] = $12;
 $14 = ((($_11)) + 4|0);
 HEAP32[$14>>2] = $13;
 __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_6,$6,$7,$_11,1);
 $15 = (__ZN4core3fmt9Formatter9write_fmt17hadece32d1a4edb44E($5,$_6)|0);
 HEAP8[$abi_cast>>0] = $15;
 ;HEAP8[$_0>>0]=HEAP8[$abi_cast>>0]|0;
 $16 = HEAP8[$_0>>0]|0;
 STACKTOP = sp;return ($16|0);
}
function __ZN4core3fmt10ArgumentV13new17he36a66e0c3cb6d17E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$transmute_temp>>2] = $5;
 $6 = HEAP32[$transmute_temp>>2]|0;
 $7 = $x;
 HEAP32[$transmute_temp1>>2] = $7;
 $8 = HEAP32[$transmute_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN2ww5items4Item6as_str17h91b3fa04d3b7bca5E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sink = 0, $$sink2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_0 = 0, $arg0 = 0, $retVal$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP8[$2>>0]|0;
 switch ($3<<24>>24) {
 case 0:  {
  $$sink = 15;$$sink2 = 13504;
  break;
 }
 case 1:  {
  $$sink = 6;$$sink2 = 13519;
  break;
 }
 case 2:  {
  $$sink = 7;$$sink2 = 13525;
  break;
 }
 case 3:  {
  $$sink = 16;$$sink2 = 13532;
  break;
 }
 case 4:  {
  $$sink = 16;$$sink2 = 13548;
  break;
 }
 case 5:  {
  $$sink = 15;$$sink2 = 13564;
  break;
 }
 default: {
  // unreachable;
 }
 }
 HEAP32[$_0>>2] = $$sink2;
 $4 = ((($_0)) + 4|0);
 HEAP32[$4>>2] = $$sink;
 $5 = HEAP32[$_0>>2]|0;
 $6 = ((($_0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$retVal>>2] = $5;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN120__LT_ww__inventory__InventoryCommand_u20_as_u20_ww__command__CommandProcessor_LT_ww__inventory__InventoryCommand_GT__GT_6prompt17h31f6b5918aa037d4E($retVal) {
 $retVal = $retVal|0;
 var $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$retVal>>2] = 13692;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = 25;
 return;
}
function __ZN11collections3str21__LT_impl_u20_str_GT_5chars17he50c96794c1a5161E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_5chars17h46cfbd7fe13634e7E($0,$8,$10);
 STACKTOP = sp;return;
}
function __ZN81__LT_core__str__Chars_LT__u27_a_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hf3da5d788a8e951cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_3 = sp;
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN4core3str15next_code_point17h15b5b94649f22865E($_3,$3);
 __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17h6e6b0eecdf3f6139E($0,$_3);
 STACKTOP = sp;return;
}
function __ZN45__LT_char_u20_as_u20_std__ascii__AsciiExt_GT_18to_ascii_lowercase17h752693d647320069E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_7 = sp + 12|0;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN45__LT_char_u20_as_u20_std__ascii__AsciiExt_GT_8is_ascii17h33e1a056759f41ebE($2)|0);
 $4 = $self;
 $5 = HEAP32[$4>>2]|0;
 if ($3) {
  $6 = $5&255;
  HEAP8[$_7>>0] = $6;
  $7 = (__ZN43__LT_u8_u20_as_u20_std__ascii__AsciiExt_GT_18to_ascii_lowercase17hb9fe5744232d9c11E($_7)|0);
  $8 = $7&255;
  $_0 = $8;
  $9 = $_0;
  STACKTOP = sp;return ($9|0);
 } else {
  $_0 = $5;
  $9 = $_0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN45__LT_char_u20_as_u20_std__ascii__AsciiExt_GT_8is_ascii17h33e1a056759f41ebE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)<=(127);
 STACKTOP = sp;return ($4|0);
}
function __ZN43__LT_u8_u20_as_u20_std__ascii__AsciiExt_GT_18to_ascii_lowercase17hb9fe5744232d9c11E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ($4>>>0)<(256);
 $6 = $5;
 if ($6) {
  $7 = (14851 + ($4)|0);
  $8 = HEAP8[$7>>0]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  __ZN4core9panicking18panic_bounds_check17h196ab917033e60b3E(3840,$4,256);
  // unreachable;
 }
 return (0)|0;
}
function __ZN4core3str15next_code_point17h15b5b94649f22865E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_16 = 0, $_25 = 0, $_38 = 0, $_4 = 0;
 var $arg0 = 0, $bytes = 0, $ch = 0, $init = 0, $next_byte = 0, $next_byte1 = 0, $switch = 0, $w = 0, $x = 0, $y = 0, $y_z = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $arg0 = $1;
 $2 = $arg0;
 $bytes = $2;
 $3 = $bytes;
 $4 = (__ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h61cc4a07db5c832fE($3)|0);
 $_4 = $4;
 $5 = $_4;
 $6 = ($5|0)!=(0|0);
 $$expand_i1_val = $6&1;
 $$expand_i1_val1 = 1;
 $switch = ($$expand_i1_val&255)<($$expand_i1_val1&255);
 if ($switch) {
  HEAP32[$0>>2] = 0;
  STACKTOP = sp;return;
 }
 $10 = $_4;
 $11 = HEAP8[$10>>0]|0;
 $next_byte = $11;
 $12 = $next_byte;
 $13 = ($12&255)<(128);
 if ($13) {
  $7 = $next_byte;
  $8 = $7&255;
  HEAP32[$0>>2] = 1;
  $9 = ((($0)) + 4|0);
  HEAP32[$9>>2] = $8;
  STACKTOP = sp;return;
 }
 $14 = $_4;
 $15 = HEAP8[$14>>0]|0;
 $next_byte1 = $15;
 $16 = $next_byte1;
 $x = $16;
 $17 = $x;
 $18 = (__ZN4core3str15utf8_first_byte17h51bd005d54331a09E($17,2)|0);
 $init = $18;
 $19 = $bytes;
 $20 = (__ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h61cc4a07db5c832fE($19)|0);
 $_16 = $20;
 $21 = $_16;
 $22 = (__ZN4core3str11unwrap_or_017h8ee6896ce20edcdaE($21)|0);
 $y = $22;
 $23 = $init;
 $24 = $y;
 $25 = (__ZN4core3str18utf8_acc_cont_byte17hde0edeee1b7fb69fE($23,$24)|0);
 $ch = $25;
 $26 = $x;
 $27 = ($26&255)>=(224);
 if ($27) {
  $28 = $bytes;
  $29 = (__ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h61cc4a07db5c832fE($28)|0);
  $_25 = $29;
  $30 = $_25;
  $31 = (__ZN4core3str11unwrap_or_017h8ee6896ce20edcdaE($30)|0);
  $z = $31;
  $32 = $y;
  $33 = $32 & 63;
  $34 = $33&255;
  $35 = $z;
  $36 = (__ZN4core3str18utf8_acc_cont_byte17hde0edeee1b7fb69fE($34,$35)|0);
  $y_z = $36;
  $37 = $init;
  $38 = $37 << 12;
  $39 = $y_z;
  $40 = $38 | $39;
  $ch = $40;
  $41 = $x;
  $42 = ($41&255)>=(240);
  if ($42) {
   $43 = $bytes;
   $44 = (__ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h61cc4a07db5c832fE($43)|0);
   $_38 = $44;
   $45 = $_38;
   $46 = (__ZN4core3str11unwrap_or_017h8ee6896ce20edcdaE($45)|0);
   $w = $46;
   $47 = $init;
   $48 = $47 & 7;
   $49 = $48 << 18;
   $50 = $y_z;
   $51 = $w;
   $52 = (__ZN4core3str18utf8_acc_cont_byte17hde0edeee1b7fb69fE($50,$51)|0);
   $53 = $49 | $52;
   $ch = $53;
  }
 }
 $54 = $ch;
 HEAP32[$0>>2] = 1;
 $55 = ((($0)) + 4|0);
 HEAP32[$55>>2] = $54;
 STACKTOP = sp;return;
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17h6e6b0eecdf3f6139E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field4 = 0, $$index3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_11 = 0, $_8 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index6 = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $personalityslot = sp + 24|0;
 $_8 = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;
 $_11 = 0;
 $_10 = 0;
 $_10 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;
 $_11 = 1;
 $2 = HEAP32[$self>>2]|0;
 $switch2 = ($2>>>0)<(1);
 do {
  if ($switch2) {
   HEAP32[$0>>2] = 0;
  } else {
   $_10 = 0;
   $4 = ((($self)) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   $x = $5;
   $_11 = 0;
   $6 = $x;
   HEAP32[$_8>>2] = $6;
   $7 = HEAP32[$_8>>2]|0;
   __THREW__ = 0;
   $8 = (invoke_ii(242,($7|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    HEAP32[$0>>2] = 1;
    $11 = ((($0)) + 4|0);
    HEAP32[$11>>2] = $8;
    break;
   }
   $19 = ___cxa_find_matching_catch_2()|0;
   $20 = tempRet0;
   HEAP32[$personalityslot>>2] = $19;
   $personalityslot$index6 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index6>>2] = $20;
   $21 = $_11;
   $22 = $21&1;
   if ($22) {
    $_11 = 0;
   }
   $3 = HEAP32[$self>>2]|0;
   $switch = ($3>>>0)<(1);
   if (!($switch)) {
    $15 = $_10;
    $16 = $15&1;
    if ($16) {
     $_10 = 0;
    }
   }
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index3 = ((($personalityslot)) + 4|0);
   $$field4 = HEAP32[$$index3>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
 } while(0);
 $12 = $_11;
 $13 = $12&1;
 if ($13) {
  $_11 = 0;
 }
 $14 = HEAP32[$self>>2]|0;
 $switch1 = ($14>>>0)<(1);
 if ($switch1) {
  STACKTOP = sp;return;
 }
 $17 = $_10;
 $18 = $17&1;
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $_10 = 0;
 STACKTOP = sp;return;
}
function __ZN81__LT_core__str__Chars_LT__u27_a_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next28__u7b__u7b_closure_u7d__u7d_17h565df38709532f75E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg1 = 0, $ch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg1 = $0;
 $1 = $arg1;
 $ch = $1;
 $2 = $ch;
 $3 = (__ZN4core4char18from_u32_unchecked17h4f6edf2bf2339950E($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN4core4char18from_u32_unchecked17h4f6edf2bf2339950E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $i = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $i = $1;
 $2 = $i;
 $transmute_temp = $2;
 $3 = $transmute_temp;
 STACKTOP = sp;return ($3|0);
}
function __ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h61cc4a07db5c832fE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0;
 var $_0$i$i = 0, $_17 = 0, $arg0 = 0, $arg0$i = 0, $arg0$i$i = 0, $arg0$i$i$i = 0, $arg0$i1 = 0, $arg1$i$i = 0, $current$i = 0, $i$i$i = 0, $ptr = 0, $ptr$i$i = 0, $self = 0, $self$i = 0, $self$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17h6cde1ee6d900fb7fE()|0);
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $self;
  $5 = HEAP32[$4>>2]|0;
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h8b6cd3cee4527800E($5)|0);
  $6 = $self;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h8b6cd3cee4527800E($8)|0);
 }
 $9 = $self;
 $10 = HEAP32[$9>>2]|0;
 $11 = $self;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==($13|0);
 if ($14) {
  $_0 = 0;
  $39 = $_0;
  STACKTOP = sp;return ($39|0);
 }
 $15 = $self;
 $arg0$i = $15;
 $16 = $arg0$i;
 $self$i = $16;
 $17 = $self$i;
 $18 = HEAP32[$17>>2]|0;
 $current$i = $18;
 $19 = $self$i;
 $20 = HEAP32[$19>>2]|0;
 $arg0$i$i = $20;
 $arg1$i$i = 1;
 $21 = $arg0$i$i;
 $self$i$i = $21;
 $22 = $arg1$i$i;
 $i$i$i = $22;
 $23 = $self$i$i;
 $ptr$i$i = $23;
 $24 = $ptr$i$i;
 $arg0$i$i$i = $24;
 $25 = (__ZN4core3mem7size_of17h6cde1ee6d900fb7fE()|0);
 $26 = ($25|0)==(0);
 $27 = $ptr$i$i;
 $28 = $i$i$i;
 if ($26) {
  $29 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_15wrapping_offset17h97e0322aebd28d69E($27,$28)|0);
  $_0$i$i = $29;
 } else {
  $30 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h3d55b46cbed5fd51E($27,$28)|0);
  $_0$i$i = $30;
 }
 $31 = $_0$i$i;
 $32 = $self$i;
 HEAP32[$32>>2] = $31;
 $33 = $current$i;
 $ptr = $33;
 $34 = $ptr;
 $arg0$i1 = $34;
 $35 = (__ZN4core3mem7size_of17h6cde1ee6d900fb7fE()|0);
 $36 = ($35|0)==(0);
 if ($36) {
  $_17 = (1);
 } else {
  $37 = $ptr;
  $_17 = $37;
 }
 $38 = $_17;
 $_0 = $38;
 $39 = $_0;
 STACKTOP = sp;return ($39|0);
}
function __ZN4core3str15utf8_first_byte17h51bd005d54331a09E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $byte = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $byte = $2;
 $3 = $arg1;
 $width = $3;
 $4 = $byte;
 $5 = $width;
 $6 = $5&255;
 $7 = $6 & 7;
 $8 = (127&255) >>> $7;
 $9 = $4 & $8;
 $10 = $9&255;
 STACKTOP = sp;return ($10|0);
}
function __ZN4core3str11unwrap_or_017h8ee6896ce20edcdaE($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $arg0 = 0, $byte = 0, $opt = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $opt = sp + 4|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 ;HEAP32[$opt>>2]=HEAP32[$arg0>>2]|0;
 $1 = HEAP32[$opt>>2]|0;
 $2 = ($1|0)!=(0|0);
 $$expand_i1_val = $2&1;
 $$expand_i1_val1 = 1;
 $switch = ($$expand_i1_val&255)<($$expand_i1_val1&255);
 if ($switch) {
  $_0 = 0;
  $6 = $_0;
  STACKTOP = sp;return ($6|0);
 } else {
  $3 = HEAP32[$opt>>2]|0;
  $4 = HEAP8[$3>>0]|0;
  $byte = $4;
  $5 = $byte;
  $_0 = $5;
  $6 = $_0;
  STACKTOP = sp;return ($6|0);
 }
 return (0)|0;
}
function __ZN4core3str18utf8_acc_cont_byte17hde0edeee1b7fb69fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $byte = 0, $ch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $ch = $2;
 $3 = $arg1;
 $byte = $3;
 $4 = $ch;
 $5 = $4 << 6;
 $6 = $byte;
 $7 = $6 & 63;
 $8 = $7&255;
 $9 = $5 | $8;
 STACKTOP = sp;return ($9|0);
}
function __ZN120__LT_ww__inventory__InventoryCommand_u20_as_u20_ww__command__CommandProcessor_LT_ww__inventory__InventoryCommand_GT__GT_8get_help17h269600b7528fa461E($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $9 = 0, $_10 = 0, $_11 = 0, $_12 = 0, $_13 = 0, $_15 = 0, $_16 = 0, $_17 = 0, $_18 = 0, $_2 = 0, $_20 = 0, $_21 = 0, $_22 = 0, $_23 = 0, $_25 = 0, $_26 = 0, $_27 = 0;
 var $_28 = 0, $_30 = 0, $_31 = 0, $_32 = 0, $_33 = 0, $_35 = 0, $_36 = 0, $_37 = 0, $_38 = 0, $_39 = 0, $_40 = 0, $_41 = 0, $_42 = 0, $_43 = 0, $_44 = 0, $_5 = 0, $_6 = 0, $_8 = 0, $buy = 0, $personalityslot = 0;
 var $personalityslot$index10 = 0, $personalityslot$index12 = 0, $personalityslot$index14 = 0, $personalityslot$index16 = 0, $personalityslot$index18 = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0, $personalityslot$index8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $personalityslot = sp + 288|0;
 $_38 = sp + 272|0;
 $_37 = sp + 256|0;
 $_35 = sp + 248|0;
 $_33 = sp + 232|0;
 $_32 = sp + 216|0;
 $_30 = sp + 208|0;
 $_28 = sp + 192|0;
 $_27 = sp + 176|0;
 $_25 = sp + 168|0;
 $_23 = sp + 152|0;
 $_22 = sp + 136|0;
 $_20 = sp + 128|0;
 $_18 = sp + 112|0;
 $_17 = sp + 96|0;
 $_15 = sp + 88|0;
 $_13 = sp + 72|0;
 $_12 = sp + 56|0;
 $_10 = sp + 48|0;
 $_8 = sp + 32|0;
 $_6 = sp + 16|0;
 $_2 = sp;
 $buy = sp;
 $_42 = 0;
 $_43 = 0;
 $_40 = 0;
 $_39 = 0;
 $_44 = 0;
 $_41 = 0;
 $1 = (__ZN5alloc4heap15exchange_malloc17hd01efcfa98f30e00E(112,4)|0);
 $_5 = $1;
 $_11 = 0;
 $2 = $_11;
 HEAP8[$_10>>0] = $2;
 $3 = HEAP8[$_10>>0]|0;
 __THREW__ = 0;
 invoke_viii(243,($_8|0),($buy|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $59 = ___cxa_find_matching_catch_2()|0;
  $60 = tempRet0;
  HEAP32[$personalityslot>>2] = $59;
  $personalityslot$index4 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index4>>2] = $60;
  $61 = $_5;
  __ZN5alloc4heap8box_free17hda8ef46cad44c6f5E($61);
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_39 = 1;
 HEAP32[$_6>>2] = 49;
 $6 = ((($_6)) + 4|0);
 ;HEAP32[$6>>2]=HEAP32[$_8>>2]|0;HEAP32[$6+4>>2]=HEAP32[$_8+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$_8+8>>2]|0;
 $_16 = 1;
 $7 = $_16;
 HEAP8[$_15>>0] = $7;
 $8 = HEAP8[$_15>>0]|0;
 __THREW__ = 0;
 invoke_viii(243,($_13|0),($buy|0),($8|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $62 = ___cxa_find_matching_catch_2()|0;
  $63 = tempRet0;
  HEAP32[$personalityslot>>2] = $62;
  $personalityslot$index6 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index6>>2] = $63;
  $64 = $_5;
  __ZN5alloc4heap8box_free17hda8ef46cad44c6f5E($64);
 } else {
  $_40 = 1;
  HEAP32[$_12>>2] = 50;
  $13 = ((($_12)) + 4|0);
  ;HEAP32[$13>>2]=HEAP32[$_13>>2]|0;HEAP32[$13+4>>2]=HEAP32[$_13+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$_13+8>>2]|0;
  $_21 = 2;
  $14 = $_21;
  HEAP8[$_20>>0] = $14;
  $15 = HEAP8[$_20>>0]|0;
  __THREW__ = 0;
  invoke_viii(243,($_18|0),($buy|0),($15|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $65 = ___cxa_find_matching_catch_2()|0;
   $66 = tempRet0;
   HEAP32[$personalityslot>>2] = $65;
   $personalityslot$index8 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index8>>2] = $66;
   $67 = $_5;
   __ZN5alloc4heap8box_free17hda8ef46cad44c6f5E($67);
  } else {
   $_41 = 1;
   HEAP32[$_17>>2] = 51;
   $20 = ((($_17)) + 4|0);
   ;HEAP32[$20>>2]=HEAP32[$_18>>2]|0;HEAP32[$20+4>>2]=HEAP32[$_18+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$_18+8>>2]|0;
   $_26 = 3;
   $21 = $_26;
   HEAP8[$_25>>0] = $21;
   $22 = HEAP8[$_25>>0]|0;
   __THREW__ = 0;
   invoke_viii(243,($_23|0),($buy|0),($22|0));
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    $68 = ___cxa_find_matching_catch_2()|0;
    $69 = tempRet0;
    HEAP32[$personalityslot>>2] = $68;
    $personalityslot$index10 = ((($personalityslot)) + 4|0);
    HEAP32[$personalityslot$index10>>2] = $69;
    $70 = $_5;
    __ZN5alloc4heap8box_free17hda8ef46cad44c6f5E($70);
   } else {
    $_42 = 1;
    HEAP32[$_22>>2] = 52;
    $27 = ((($_22)) + 4|0);
    ;HEAP32[$27>>2]=HEAP32[$_23>>2]|0;HEAP32[$27+4>>2]=HEAP32[$_23+4>>2]|0;HEAP32[$27+8>>2]=HEAP32[$_23+8>>2]|0;
    $_31 = 4;
    $28 = $_31;
    HEAP8[$_30>>0] = $28;
    $29 = HEAP8[$_30>>0]|0;
    __THREW__ = 0;
    invoke_viii(243,($_28|0),($buy|0),($29|0));
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if ($31) {
     $71 = ___cxa_find_matching_catch_2()|0;
     $72 = tempRet0;
     HEAP32[$personalityslot>>2] = $71;
     $personalityslot$index12 = ((($personalityslot)) + 4|0);
     HEAP32[$personalityslot$index12>>2] = $72;
     $73 = $_5;
     __ZN5alloc4heap8box_free17hda8ef46cad44c6f5E($73);
    } else {
     $_43 = 1;
     HEAP32[$_27>>2] = 53;
     $34 = ((($_27)) + 4|0);
     ;HEAP32[$34>>2]=HEAP32[$_28>>2]|0;HEAP32[$34+4>>2]=HEAP32[$_28+4>>2]|0;HEAP32[$34+8>>2]=HEAP32[$_28+8>>2]|0;
     $_36 = 5;
     $35 = $_36;
     HEAP8[$_35>>0] = $35;
     $36 = HEAP8[$_35>>0]|0;
     __THREW__ = 0;
     invoke_viii(243,($_33|0),($buy|0),($36|0));
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $74 = ___cxa_find_matching_catch_2()|0;
      $75 = tempRet0;
      HEAP32[$personalityslot>>2] = $74;
      $personalityslot$index14 = ((($personalityslot)) + 4|0);
      HEAP32[$personalityslot$index14>>2] = $75;
      $76 = $_5;
      __ZN5alloc4heap8box_free17hda8ef46cad44c6f5E($76);
     } else {
      $_44 = 1;
      HEAP32[$_32>>2] = 54;
      $41 = ((($_32)) + 4|0);
      ;HEAP32[$41>>2]=HEAP32[$_33>>2]|0;HEAP32[$41+4>>2]=HEAP32[$_33+4>>2]|0;HEAP32[$41+8>>2]=HEAP32[$_33+8>>2]|0;
      __THREW__ = 0;
      invoke_viii(244,($_38|0),(13717|0),18);
      $42 = __THREW__; __THREW__ = 0;
      $43 = $42&1;
      if ($43) {
       $77 = ___cxa_find_matching_catch_2()|0;
       $78 = tempRet0;
       HEAP32[$personalityslot>>2] = $77;
       $personalityslot$index16 = ((($personalityslot)) + 4|0);
       HEAP32[$personalityslot$index16>>2] = $78;
       $79 = $_5;
       __ZN5alloc4heap8box_free17hda8ef46cad44c6f5E($79);
      } else {
       HEAP32[$_37>>2] = 48;
       $46 = ((($_37)) + 4|0);
       ;HEAP32[$46>>2]=HEAP32[$_38>>2]|0;HEAP32[$46+4>>2]=HEAP32[$_38+4>>2]|0;HEAP32[$46+8>>2]=HEAP32[$_38+8>>2]|0;
       $_39 = 0;
       $_40 = 0;
       $_41 = 0;
       $_42 = 0;
       $_43 = 0;
       $_44 = 0;
       $47 = $_5;
       ;HEAP32[$47>>2]=HEAP32[$_6>>2]|0;HEAP32[$47+4>>2]=HEAP32[$_6+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$_6+8>>2]|0;HEAP32[$47+12>>2]=HEAP32[$_6+12>>2]|0;
       $48 = ((($47)) + 16|0);
       ;HEAP32[$48>>2]=HEAP32[$_12>>2]|0;HEAP32[$48+4>>2]=HEAP32[$_12+4>>2]|0;HEAP32[$48+8>>2]=HEAP32[$_12+8>>2]|0;HEAP32[$48+12>>2]=HEAP32[$_12+12>>2]|0;
       $49 = ((($47)) + 32|0);
       ;HEAP32[$49>>2]=HEAP32[$_17>>2]|0;HEAP32[$49+4>>2]=HEAP32[$_17+4>>2]|0;HEAP32[$49+8>>2]=HEAP32[$_17+8>>2]|0;HEAP32[$49+12>>2]=HEAP32[$_17+12>>2]|0;
       $50 = ((($47)) + 48|0);
       ;HEAP32[$50>>2]=HEAP32[$_22>>2]|0;HEAP32[$50+4>>2]=HEAP32[$_22+4>>2]|0;HEAP32[$50+8>>2]=HEAP32[$_22+8>>2]|0;HEAP32[$50+12>>2]=HEAP32[$_22+12>>2]|0;
       $51 = ((($47)) + 64|0);
       ;HEAP32[$51>>2]=HEAP32[$_27>>2]|0;HEAP32[$51+4>>2]=HEAP32[$_27+4>>2]|0;HEAP32[$51+8>>2]=HEAP32[$_27+8>>2]|0;HEAP32[$51+12>>2]=HEAP32[$_27+12>>2]|0;
       $52 = ((($47)) + 80|0);
       ;HEAP32[$52>>2]=HEAP32[$_32>>2]|0;HEAP32[$52+4>>2]=HEAP32[$_32+4>>2]|0;HEAP32[$52+8>>2]=HEAP32[$_32+8>>2]|0;HEAP32[$52+12>>2]=HEAP32[$_32+12>>2]|0;
       $53 = ((($47)) + 96|0);
       ;HEAP32[$53>>2]=HEAP32[$_37>>2]|0;HEAP32[$53+4>>2]=HEAP32[$_37+4>>2]|0;HEAP32[$53+8>>2]=HEAP32[$_37+8>>2]|0;HEAP32[$53+12>>2]=HEAP32[$_37+12>>2]|0;
       $54 = $_5;
       __THREW__ = 0;
       invoke_viii(245,($_2|0),($54|0),7);
       $55 = __THREW__; __THREW__ = 0;
       $56 = $55&1;
       if (!($56)) {
        __THREW__ = 0;
        invoke_vii(246,($0|0),($_2|0));
        $57 = __THREW__; __THREW__ = 0;
        $58 = $57&1;
        if (!($58)) {
         STACKTOP = sp;return;
        }
       }
       $80 = ___cxa_find_matching_catch_2()|0;
       $81 = tempRet0;
       HEAP32[$personalityslot>>2] = $80;
       $personalityslot$index18 = ((($personalityslot)) + 4|0);
       HEAP32[$personalityslot$index18>>2] = $81;
      }
      $44 = $_44;
      $45 = $44&1;
      if ($45) {
       $_44 = 0;
       __ZN4drop17h88ffcfbb76e7d65aE($_32);
      }
     }
     $39 = $_43;
     $40 = $39&1;
     if ($40) {
      $_43 = 0;
      __ZN4drop17h88ffcfbb76e7d65aE($_27);
     }
    }
    $32 = $_42;
    $33 = $32&1;
    if ($33) {
     $_42 = 0;
     __ZN4drop17h88ffcfbb76e7d65aE($_22);
    }
   }
   $25 = $_41;
   $26 = $25&1;
   if ($26) {
    $_41 = 0;
    __ZN4drop17h88ffcfbb76e7d65aE($_17);
   }
  }
  $18 = $_40;
  $19 = $18&1;
  if ($19) {
   $_40 = 0;
   __ZN4drop17h88ffcfbb76e7d65aE($_12);
  }
 }
 $11 = $_39;
 $12 = $11&1;
 if (!($12)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_39 = 0;
 __ZN4drop17h88ffcfbb76e7d65aE($_6);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN67__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h138c4b62d99853bfE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $p = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17hc757c957ab6d493fE($3)|0);
 $p = $4;
 $5 = $p;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h904a39b44d63d5b8E($5)|0);
 $6 = $p;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice14from_raw_parts17h57a421a66f356a57E($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_4iter17h6cce08b63ddd772aE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17hb208022b09f3e5deE($0,$8,$10);
 STACKTOP = sp;return;
}
function __ZN4drop17hc6bc1b4e0e470747E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(247,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN13drop_contents17hc6bc1b4e0e470747E($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZN13drop_contents17hc6bc1b4e0e470747E($0);
  return;
 }
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hf9c68fa258a41a8eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $_3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_3 = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;
 ;HEAP32[$_3>>2]=HEAP32[$self>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$self+4>>2]|0;
 ;HEAP32[$0>>2]=HEAP32[$_3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_3+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hcc2cd525cdd7acb2E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_0 = 0, $_0$i$i = 0, $_17 = 0, $arg0 = 0, $arg0$i = 0, $arg0$i$i = 0, $arg0$i$i$i = 0, $arg0$i1 = 0, $arg1$i$i = 0, $current$i = 0, $i$i$i = 0, $ptr = 0, $ptr$i$i = 0, $self = 0, $self$i = 0, $self$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_0 = sp + 4|0;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17h425f48d7ee05d998E()|0);
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $self;
  $5 = HEAP32[$4>>2]|0;
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h81a2f0439f1a358cE($5)|0);
  $6 = $self;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h81a2f0439f1a358cE($8)|0);
 }
 $9 = $self;
 $10 = HEAP32[$9>>2]|0;
 $11 = $self;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==($13|0);
 if ($14) {
  HEAP32[$_0>>2] = 0;
  $40 = HEAP32[$_0>>2]|0;
  STACKTOP = sp;return ($40|0);
 }
 $15 = $self;
 $arg0$i = $15;
 $16 = $arg0$i;
 $self$i = $16;
 $17 = $self$i;
 $18 = HEAP32[$17>>2]|0;
 $current$i = $18;
 $19 = $self$i;
 $20 = HEAP32[$19>>2]|0;
 $arg0$i$i = $20;
 $arg1$i$i = 1;
 $21 = $arg0$i$i;
 $self$i$i = $21;
 $22 = $arg1$i$i;
 $i$i$i = $22;
 $23 = $self$i$i;
 $ptr$i$i = $23;
 $24 = $ptr$i$i;
 $arg0$i$i$i = $24;
 $25 = (__ZN4core3mem7size_of17h425f48d7ee05d998E()|0);
 $26 = ($25|0)==(0);
 $27 = $ptr$i$i;
 if ($26) {
  $28 = $i$i$i;
  $29 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_15wrapping_offset17h97e0322aebd28d69E($27,$28)|0);
  $_0$i$i = $29;
 } else {
  $30 = $i$i$i;
  $31 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h289dbac832759e08E($27,$30)|0);
  $_0$i$i = $31;
 }
 $32 = $_0$i$i;
 $33 = $self$i;
 HEAP32[$33>>2] = $32;
 $34 = $current$i;
 $ptr = $34;
 $35 = $ptr;
 $arg0$i1 = $35;
 $36 = (__ZN4core3mem7size_of17h425f48d7ee05d998E()|0);
 $37 = ($36|0)==(0);
 if ($37) {
  $_17 = (1);
 } else {
  $38 = $ptr;
  $_17 = $38;
 }
 $39 = $_17;
 HEAP32[$_0>>2] = $39;
 $40 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZN4core3fmt10ArgumentV13new17h7810b41642379ea0E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$transmute_temp>>2] = $5;
 $6 = HEAP32[$transmute_temp>>2]|0;
 $7 = $x;
 HEAP32[$transmute_temp1>>2] = $7;
 $8 = HEAP32[$transmute_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN4core3mem7size_of17h425f48d7ee05d998E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 16;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h81a2f0439f1a358cE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr4null17hed027e3bd898c96dE()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h289dbac832759e08E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + ($5<<4)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3ptr4null17hed027e3bd898c96dE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17he39e4ce3e8c2a303E($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h29076ac5991bc8dbE($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 __ZN4drop17h5ceb36b5d424277eE($$sreg$field,$$sreg$field2);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17hc6bc1b4e0e470747E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17hba978c22c7f67a5dE($0);
 return;
}
function __ZN4drop17hba978c22c7f67a5dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(248,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN13drop_contents17hba978c22c7f67a5dE($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZN13drop_contents17hba978c22c7f67a5dE($0);
  return;
 }
}
function __ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h7a648972877fe091E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_4 = 0, $align = 0, $arg0 = 0, $elem_size = 0, $num_bytes = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17h425f48d7ee05d998E()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $self;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $_4 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $_4 = 0;
 }
 $9 = $_4;
 $10 = $9&1;
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (__ZN4core3mem8align_of17h20ce6e85028976a6E()|0);
 $align = $11;
 $12 = $elem_size;
 $13 = $self;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $num_bytes = $16;
 $17 = $self;
 $18 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hf29c9360b44fc80aE($17)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $num_bytes;
 $21 = $align;
 __ZN5alloc4heap10deallocate17haa41e924c0cbc050E_3($19,$20,$21);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17hba978c22c7f67a5dE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4core3mem8align_of17h20ce6e85028976a6E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hf29c9360b44fc80aE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17heb7cba611540e066E($2)|0);
 $transmute_temp = $3;
 $4 = $transmute_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17heb7cba611540e066E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h29076ac5991bc8dbE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h61bb9a70bdf7e3f8E($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN4drop17h5ceb36b5d424277eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1<<4)|0);
 $3 = $0;
 while(1) {
  $5 = ($3|0)!=($2|0);
  if (!($5)) {
   break;
  }
  __ZN4drop17h6b8599be48284266E($3);
  $4 = ((($3)) + 16|0);
  $3 = $4;
 }
 return;
}
function __ZN4drop17h6b8599be48284266E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZN4drop17hdd1638425ff7362fE($1);
 return;
}
function __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h61bb9a70bdf7e3f8E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17hc757c957ab6d493fE($3)|0);
 $ptr = $4;
 $5 = $ptr;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h904a39b44d63d5b8E($5)|0);
 $6 = $ptr;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice18from_raw_parts_mut17hee5daffd5b17e724E($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17hc757c957ab6d493fE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hf29c9360b44fc80aE($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17h904a39b44d63d5b8E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr8null_mut17heb96767cd79237ebE()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN4core5slice18from_raw_parts_mut17hee5daffd5b17e724E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 8|0;
 $_6 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_6>>2] = $4;
 $6 = ((($_6)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_6)) + 4|0);
 $8 = HEAP32[$_6>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$transmute_temp>>2] = $8;
 $10 = ((($transmute_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$transmute_temp>>2]|0;
 $12 = ((($transmute_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN4core3ptr8null_mut17heb96767cd79237ebE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17hb208022b09f3e5deE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_14 = 0, $arg0 = 0, $arg0$i = 0, $p = 0, $p1 = 0, $ptr = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = (__ZN4core3mem7size_of17h425f48d7ee05d998E()|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $p = (1);
 } else {
  $10 = HEAP32[$self>>2]|0;
  $11 = ((($self)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17h39da250153b3ae3cE($10,$12)|0);
  $p1 = $13;
  $14 = $p1;
  (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_7is_null17h81a2f0439f1a358cE($14)|0);
  $15 = $p1;
  $p = $15;
 }
 $16 = $p;
 $17 = $p;
 $ptr = $17;
 $18 = $ptr;
 $arg0$i = $18;
 $19 = (__ZN4core3mem7size_of17h425f48d7ee05d998E()|0);
 $20 = ($19|0)==(0);
 $21 = $ptr;
 if ($20) {
  $22 = HEAP32[$self>>2]|0;
  $23 = ((($self)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hc3856c1f1427f699E($22,$24)|0);
  $26 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_15wrapping_offset17h97e0322aebd28d69E($21,$25)|0);
  $_14 = $26;
  HEAP32[$0>>2] = $16;
  $32 = $_14;
  $33 = ((($0)) + 4|0);
  HEAP32[$33>>2] = $32;
  STACKTOP = sp;return;
 } else {
  $27 = HEAP32[$self>>2]|0;
  $28 = ((($self)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hc3856c1f1427f699E($27,$29)|0);
  $31 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h289dbac832759e08E($21,$30)|0);
  $_14 = $31;
  HEAP32[$0>>2] = $16;
  $32 = $_14;
  $33 = ((($0)) + 4|0);
  HEAP32[$33>>2] = $32;
  STACKTOP = sp;return;
 }
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17h39da250153b3ae3cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17hc3856c1f1427f699E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$transmute_temp>>2] = $7;
 $10 = ((($transmute_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($transmute_temp)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZN4core5slice14from_raw_parts17h57a421a66f356a57E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 8|0;
 $_5 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_5>>2] = $4;
 $6 = ((($_5)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_5)) + 4|0);
 $8 = HEAP32[$_5>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$transmute_temp>>2] = $8;
 $10 = ((($transmute_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$transmute_temp>>2]|0;
 $12 = ((($transmute_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN120__LT_ww__inventory__InventoryCommand_u20_as_u20_ww__command__CommandProcessor_LT_ww__inventory__InventoryCommand_GT__GT_8get_help28__u7b__u7b_closure_u7d__u7d_17hbc4bf870d8e6c161E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0;
 var $_13 = 0, $_4 = 0, $_9 = 0, $__arg0 = 0, $__arg1 = 0, $arg0 = 0, $arg1 = 0, $item = 0, $tmp_ret = 0, $tmp_ret1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $tmp_ret1 = sp + 56|0;
 $tmp_ret = sp + 48|0;
 $_13 = sp + 68|0;
 $_10 = sp + 40|0;
 $_9 = sp + 24|0;
 $_4 = sp;
 $item = sp + 81|0;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg1;
 HEAP8[$item>>0] = $3;
 $4 = HEAP32[968]|0;
 $5 = HEAP32[(3876)>>2]|0;
 $6 = (__ZN2ww5items4Item5price17h139a8fd652ec7d14E($item)|0);
 HEAP32[$_13>>2] = $6;
 HEAP32[$_10>>2] = $item;
 $7 = ((($_10)) + 4|0);
 HEAP32[$7>>2] = $_13;
 $8 = HEAP32[$_10>>2]|0;
 $__arg0 = $8;
 $9 = ((($_10)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $__arg1 = $10;
 $11 = $__arg0;
 __ZN4core3fmt10ArgumentV13new17he36a66e0c3cb6d17E($tmp_ret,$11,164);
 $12 = ((($tmp_ret)) + 4|0);
 $13 = HEAP32[$tmp_ret>>2]|0;
 $14 = HEAP32[$12>>2]|0;
 $15 = $__arg1;
 __ZN4core3fmt10ArgumentV13new17hd2627092d7876577E($tmp_ret1,$15,160);
 $16 = ((($tmp_ret1)) + 4|0);
 $17 = HEAP32[$tmp_ret1>>2]|0;
 $18 = HEAP32[$16>>2]|0;
 HEAP32[$_9>>2] = $13;
 $19 = ((($_9)) + 4|0);
 HEAP32[$19>>2] = $14;
 $20 = ((($_9)) + 8|0);
 HEAP32[$20>>2] = $17;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = $18;
 __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_4,$4,$5,$_9,2);
 __ZN11collections3fmt6format17h3afe4169e9ab9778E($0,$_4);
 STACKTOP = sp;return;
}
function __ZN5alloc4heap8box_free17hda8ef46cad44c6f5E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $align = 0, $arg0 = 0, $ptr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $size = 112;
 $align = 4;
 $2 = $size;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $ptr;
 $5 = $size;
 $6 = $align;
 __ZN5alloc4heap10deallocate17haa41e924c0cbc050E_3($4,$5,$6);
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_8into_vec17h51a762aad804ce9fE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 invoke_viii(249,($0|0),($8|0),($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  HEAP32[$personalityslot>>2] = $13;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $14;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN2ww7command8HelpInfo4list17h9150d5bfe6564ebdE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $_4 = 0, $_5 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $personalityslot = sp + 80|0;
 $_5 = sp + 64|0;
 $_4 = sp + 48|0;
 $_3 = sp + 32|0;
 $v = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;
 ;HEAP32[$v>>2]=HEAP32[$arg0>>2]|0;HEAP32[$v+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$v+8>>2]=HEAP32[$arg0+8>>2]|0;
 ;HEAP32[$_5>>2]=HEAP32[$v>>2]|0;HEAP32[$_5+4>>2]=HEAP32[$v+4>>2]|0;HEAP32[$_5+8>>2]=HEAP32[$v+8>>2]|0;
 __THREW__ = 0;
 invoke_vii(250,($_4|0),($_5|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  __THREW__ = 0;
  invoke_vii(251,($_3|0),($_4|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if (!($5)) {
   __THREW__ = 0;
   invoke_vii(252,($0|0),($_3|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    STACKTOP = sp;return;
   }
  }
 }
 $8 = ___cxa_find_matching_catch_2()|0;
 $9 = tempRet0;
 HEAP32[$personalityslot>>2] = $8;
 $personalityslot$index1 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index1>>2] = $9;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4drop17h88ffcfbb76e7d65aE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZN4drop17hdd1638425ff7362fE($1);
 return;
}
function __ZN83__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17he337754150a86e9eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field5 = 0, $$index4 = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $_29 = 0, $_30 = 0, $_36 = 0;
 var $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $begin = 0, $cap = 0, $end = 0, $personalityslot = 0, $personalityslot$index7 = 0, $self = 0, $self$i = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $2 = sp;
 $abi_cast = sp + 88|0;
 $personalityslot = sp + 64|0;
 $_30 = sp + 56|0;
 $_29 = sp + 40|0;
 $self = sp + 24|0;
 $arg0 = sp + 8|0;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;
 $_36 = 0;
 $_36 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;
 __THREW__ = 0;
 invoke_vii(253,($2|0),($self|0));
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   __THREW__ = 0;
   $5 = (invoke_iii(254,($$sreg$field|0),($$sreg$field2|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    $begin = $5;
    $8 = $begin;
    __THREW__ = 0;
    (invoke_ii(255,($8|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if (!($10)) {
     __THREW__ = 0;
     $11 = (invoke_i(256)|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if (!($13)) {
      $14 = ($11|0)==(0);
      $15 = $begin;
      if ($14) {
       __THREW__ = 0;
       $16 = (invoke_ii(257,($self|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if ($18) {
        break;
       }
       $22 = (($15) + ($16)|0);
       $tmp_ret = $22;
       $23 = $tmp_ret;
       $end = $23;
      } else {
       __THREW__ = 0;
       $19 = (invoke_ii(257,($self|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if ($21) {
        break;
       }
       __THREW__ = 0;
       $24 = (invoke_iii(258,($15|0),($19|0))|0);
       $25 = __THREW__; __THREW__ = 0;
       $26 = $25&1;
       if ($26) {
        break;
       }
       $end = $24;
      }
      $arg0$i = $self;
      $27 = $arg0$i;
      $self$i = $27;
      __THREW__ = 0;
      $28 = (invoke_i(256)|0);
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       $31 = ($28|0)==(0);
       if ($31) {
        $_0$i = -1;
       } else {
        $32 = $self$i;
        $33 = ((($32)) + 4|0);
        $34 = HEAP32[$33>>2]|0;
        $_0$i = $34;
       }
       $35 = $_0$i;
       $cap = $35;
       $_36 = 0;
       ;HEAP32[$_29>>2]=HEAP32[$self>>2]|0;HEAP32[$_29+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$_29+8>>2]=HEAP32[$self+8>>2]|0;
       __THREW__ = 0;
       invoke_vi(259,($_29|0));
       $36 = __THREW__; __THREW__ = 0;
       $37 = $36&1;
       if (!($37)) {
        $38 = $begin;
        __THREW__ = 0;
        $39 = (invoke_ii(260,($38|0))|0);
        $40 = __THREW__; __THREW__ = 0;
        $41 = $40&1;
        if (!($41)) {
         HEAP32[$abi_cast>>2] = $39;
         ;HEAP32[$_30>>2]=HEAP32[$abi_cast>>2]|0;
         $42 = $cap;
         $43 = $begin;
         $44 = $end;
         ;HEAP32[$0>>2]=HEAP32[$_30>>2]|0;
         $45 = ((($0)) + 4|0);
         HEAP32[$45>>2] = $42;
         $46 = ((($0)) + 8|0);
         HEAP32[$46>>2] = $43;
         $47 = ((($0)) + 12|0);
         HEAP32[$47>>2] = $44;
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $48 = ___cxa_find_matching_catch_2()|0;
 $49 = tempRet0;
 HEAP32[$personalityslot>>2] = $48;
 $personalityslot$index7 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index7>>2] = $49;
 $50 = $_36;
 $51 = $50&1;
 if (!($51)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index4 = ((($personalityslot)) + 4|0);
  $$field5 = HEAP32[$$index4>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_36 = 0;
 __ZN4drop17hf43aff40f4d7c1a3E($self);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index4 = ((($personalityslot)) + 4|0);
 $$field5 = HEAP32[$$index4>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4core4iter8iterator8Iterator3map17hf86e583604ce174aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $_5 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_5 = sp + 32|0;
 $self = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg0+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;HEAP32[$self+12>>2]=HEAP32[$arg0+12>>2]|0;
 ;HEAP32[$_5>>2]=HEAP32[$self>>2]|0;HEAP32[$_5+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$_5+8>>2]=HEAP32[$self+8>>2]|0;HEAP32[$_5+12>>2]=HEAP32[$self+12>>2]|0;
 ;HEAP32[$0>>2]=HEAP32[$_5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_5+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_5+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$_5+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN4core4iter8iterator8Iterator7collect17h77a7827f77e728d9E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_3 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $personalityslot = sp + 48|0;
 $_3 = sp + 32|0;
 $self = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg0+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;HEAP32[$self+12>>2]=HEAP32[$arg0+12>>2]|0;
 ;HEAP32[$_3>>2]=HEAP32[$self>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$self+8>>2]|0;HEAP32[$_3+12>>2]=HEAP32[$self+12>>2]|0;
 __THREW__ = 0;
 invoke_vii(261,($0|0),($_3|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$personalityslot>>2] = $4;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $5;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN92__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__iter__traits__FromIterator_LT_T_GT__GT_9from_iter17h85621ace315d652cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_3 = 0, $_4 = 0, $arg0 = 0, $iter = 0, $personalityslot = 0, $personalityslot$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $personalityslot = sp + 64|0;
 $_4 = sp + 48|0;
 $_3 = sp + 32|0;
 $iter = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg0+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$iter>>2]=HEAP32[$arg0>>2]|0;HEAP32[$iter+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$iter+8>>2]=HEAP32[$arg0+8>>2]|0;HEAP32[$iter+12>>2]=HEAP32[$arg0+12>>2]|0;
 ;HEAP32[$_4>>2]=HEAP32[$iter>>2]|0;HEAP32[$_4+4>>2]=HEAP32[$iter+4>>2]|0;HEAP32[$_4+8>>2]=HEAP32[$iter+8>>2]|0;HEAP32[$_4+12>>2]=HEAP32[$iter+12>>2]|0;
 __THREW__ = 0;
 invoke_vii(262,($_3|0),($_4|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  __THREW__ = 0;
  invoke_vii(263,($0|0),($_3|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if (!($5)) {
   STACKTOP = sp;return;
  }
 }
 $6 = ___cxa_find_matching_catch_2()|0;
 $7 = tempRet0;
 HEAP32[$personalityslot>>2] = $6;
 $personalityslot$index1 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index1>>2] = $7;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hb1853a056ddf51cbE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $_3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_3 = sp + 32|0;
 $self = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg0+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;HEAP32[$self+12>>2]=HEAP32[$arg0+12>>2]|0;
 ;HEAP32[$_3>>2]=HEAP32[$self>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$self+8>>2]|0;HEAP32[$_3+12>>2]=HEAP32[$self+12>>2]|0;
 ;HEAP32[$0>>2]=HEAP32[$_3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$_3+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN97__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT_T_C__u20_I_GT__GT_9from_iter17h52883eef9000904bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $_7 = 0, $_8 = 0, $_9 = 0, $arg0 = 0, $iterator = 0, $personalityslot = 0;
 var $personalityslot$index4 = 0, $vector = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $personalityslot = sp + 80|0;
 $_7 = sp + 64|0;
 $_6 = sp + 48|0;
 $vector = sp + 32|0;
 $iterator = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg0+12>>2]=HEAP32[$1+12>>2]|0;
 $_9 = 0;
 $_8 = 0;
 $_8 = 1;
 ;HEAP32[$iterator>>2]=HEAP32[$arg0>>2]|0;HEAP32[$iterator+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$iterator+8>>2]=HEAP32[$arg0+8>>2]|0;HEAP32[$iterator+12>>2]=HEAP32[$arg0+12>>2]|0;
 __THREW__ = 0;
 invoke_vi(264,($vector|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $_9 = 1;
  $_8 = 0;
  ;HEAP32[$_6>>2]=HEAP32[$iterator>>2]|0;HEAP32[$_6+4>>2]=HEAP32[$iterator+4>>2]|0;HEAP32[$_6+8>>2]=HEAP32[$iterator+8>>2]|0;HEAP32[$_6+12>>2]=HEAP32[$iterator+12>>2]|0;
  __THREW__ = 0;
  invoke_vii(265,($vector|0),($_6|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   $_9 = 0;
   ;HEAP32[$_7>>2]=HEAP32[$vector>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$vector+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$vector+8>>2]|0;
   ;HEAP32[$0>>2]=HEAP32[$_7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_7+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_7+8>>2]|0;
   STACKTOP = sp;return;
  }
 }
 $8 = ___cxa_find_matching_catch_2()|0;
 $9 = tempRet0;
 HEAP32[$personalityslot>>2] = $8;
 $personalityslot$index4 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index4>>2] = $9;
 $10 = $_9;
 $11 = $10&1;
 if ($11) {
  $_9 = 0;
  __ZN4drop17hc6bc1b4e0e470747E($vector);
 }
 $4 = $_8;
 $5 = $4&1;
 if (!($5)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_8 = 0;
 __ZN4drop17h9194ea0e910420dcE($iterator);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3new17hbc661102f8057985E($0) {
 $0 = $0|0;
 var $1 = 0, $_1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_1 = sp;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17h31d20845132d368cE($_1);
 ;HEAP32[$0>>2]=HEAP32[$_1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_1+4>>2]|0;
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN97__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT_T_C__u20_I_GT__GT_11spec_extend17h4c2cc869d47fc844E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val20 = 0, $$expand_i1_val21 = 0, $$expand_i1_val22 = 0, $$expand_i1_val23 = 0, $$expand_i1_val24 = 0, $$field = 0, $$field6 = 0, $$index5 = 0, $$sreg$field = 0, $$sreg$field9 = 0, $$sreg$index8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $_29 = 0, $_30 = 0, $_32 = 0, $_38 = 0, $_45 = 0, $_46 = 0;
 var $_47 = 0, $_48 = 0, $_7 = 0, $additional = 0, $arg0 = 0, $arg1 = 0, $element = 0, $high = 0, $high_value = 0, $iter = 0, $iterator = 0, $local_len = 0, $low = 0, $personalityslot = 0, $personalityslot$index11 = 0, $personalityslot$index13 = 0, $personalityslot$index15 = 0, $personalityslot$index17 = 0, $personalityslot$index19 = 0, $ptr = 0;
 var $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $switch3 = 0, $switch4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $2 = sp;
 $personalityslot = sp + 184|0;
 $_45 = sp + 168|0;
 $_38 = sp + 152|0;
 $element = sp + 136|0;
 $_32 = sp + 120|0;
 $iter = sp + 104|0;
 $_30 = sp + 88|0;
 $_29 = sp + 72|0;
 $local_len = sp + 64|0;
 $_7 = sp + 48|0;
 $high = sp + 40|0;
 $iterator = sp + 24|0;
 $arg1 = sp + 8|0;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg1+12>>2]=HEAP32[$1+12>>2]|0;
 $_46 = 0;
 $_47 = 0;
 $_48 = 0;
 $3 = $arg0;
 $self = $3;
 $_46 = 1;
 ;HEAP32[$iterator>>2]=HEAP32[$arg1>>2]|0;HEAP32[$iterator+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$iterator+8>>2]=HEAP32[$arg1+8>>2]|0;HEAP32[$iterator+12>>2]=HEAP32[$arg1+12>>2]|0;
 __THREW__ = 0;
 invoke_vii(266,($_7|0),($iterator|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 L1: do {
  if ($5) {
   label = 34;
  } else {
   $6 = HEAP32[$_7>>2]|0;
   $low = $6;
   $7 = ((($_7)) + 4|0);
   ;HEAP32[$high>>2]=HEAP32[$7>>2]|0;HEAP32[$high+4>>2]=HEAP32[$7+4>>2]|0;
   $8 = HEAP32[$high>>2]|0;
   $switch = ($8>>>0)<(1);
   if (!($switch)) {
    $9 = ((($high)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $high_value = $10;
   }
   $11 = HEAP32[$high>>2]|0;
   $switch1 = ($11>>>0)<(1);
   if ($switch1) {
    $12 = $self;
    $_46 = 0;
    ;HEAP32[$_45>>2]=HEAP32[$iterator>>2]|0;HEAP32[$_45+4>>2]=HEAP32[$iterator+4>>2]|0;HEAP32[$_45+8>>2]=HEAP32[$iterator+8>>2]|0;HEAP32[$_45+12>>2]=HEAP32[$iterator+12>>2]|0;
    __THREW__ = 0;
    invoke_vii(267,($12|0),($_45|0));
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if ($14) {
     label = 34;
     break;
    }
    STACKTOP = sp;return;
   }
   $15 = ((($high)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $additional = $16;
   $17 = $self;
   $18 = $additional;
   __THREW__ = 0;
   invoke_vii(268,($17|0),($18|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    label = 34;
   } else {
    $21 = $self;
    __THREW__ = 0;
    invoke_vii(269,($2|0),($21|0));
    $$sreg$field = HEAP32[$2>>2]|0;
    $$sreg$index8 = ((($2)) + 4|0);
    $$sreg$field9 = HEAP32[$$sreg$index8>>2]|0;
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     label = 34;
    } else {
     __THREW__ = 0;
     $24 = (invoke_iii(270,($$sreg$field|0),($$sreg$field9|0))|0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 34;
     } else {
      $27 = $self;
      __THREW__ = 0;
      $28 = (invoke_ii(271,($27|0))|0);
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if ($30) {
       label = 34;
      } else {
       __THREW__ = 0;
       $31 = (invoke_iii(272,($24|0),($28|0))|0);
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        label = 34;
       } else {
        $ptr = $31;
        $34 = $self;
        $35 = ((($34)) + 8|0);
        __THREW__ = 0;
        invoke_vii(273,($local_len|0),($35|0));
        $36 = __THREW__; __THREW__ = 0;
        $37 = $36&1;
        L15: do {
         if ($37) {
          label = 35;
         } else {
          $_47 = 1;
          $_46 = 0;
          ;HEAP32[$_30>>2]=HEAP32[$iterator>>2]|0;HEAP32[$_30+4>>2]=HEAP32[$iterator+4>>2]|0;HEAP32[$_30+8>>2]=HEAP32[$iterator+8>>2]|0;HEAP32[$_30+12>>2]=HEAP32[$iterator+12>>2]|0;
          __THREW__ = 0;
          invoke_vii(262,($_29|0),($_30|0));
          $38 = __THREW__; __THREW__ = 0;
          $39 = $38&1;
          if ($39) {
           label = 35;
          } else {
           ;HEAP32[$iter>>2]=HEAP32[$_29>>2]|0;HEAP32[$iter+4>>2]=HEAP32[$_29+4>>2]|0;HEAP32[$iter+8>>2]=HEAP32[$_29+8>>2]|0;HEAP32[$iter+12>>2]=HEAP32[$_29+12>>2]|0;
           while(1) {
            __THREW__ = 0;
            invoke_vii(274,($_32|0),($iter|0));
            $40 = __THREW__; __THREW__ = 0;
            $41 = $40&1;
            if ($41) {
             label = 36;
             break;
            }
            $_48 = 1;
            $42 = ((($_32)) + 4|0);
            $43 = HEAP32[$42>>2]|0;
            $44 = ($43|0)!=(0|0);
            $$expand_i1_val = $44&1;
            $$expand_i1_val20 = 1;
            $switch2 = ($$expand_i1_val&255)<($$expand_i1_val20&255);
            $_48 = 0;
            if ($switch2) {
             label = 19;
             break;
            }
            ;HEAP32[$element>>2]=HEAP32[$_32>>2]|0;HEAP32[$element+4>>2]=HEAP32[$_32+4>>2]|0;HEAP32[$element+8>>2]=HEAP32[$_32+8>>2]|0;HEAP32[$element+12>>2]=HEAP32[$_32+12>>2]|0;
            $47 = $ptr;
            ;HEAP32[$_38>>2]=HEAP32[$element>>2]|0;HEAP32[$_38+4>>2]=HEAP32[$element+4>>2]|0;HEAP32[$_38+8>>2]=HEAP32[$element+8>>2]|0;HEAP32[$_38+12>>2]=HEAP32[$element+12>>2]|0;
            __THREW__ = 0;
            invoke_vii(276,($47|0),($_38|0));
            $48 = __THREW__; __THREW__ = 0;
            $49 = $48&1;
            if ($49) {
             label = 37;
             break;
            }
            $50 = $ptr;
            __THREW__ = 0;
            $51 = (invoke_iii(272,($50|0),1)|0);
            $52 = __THREW__; __THREW__ = 0;
            $53 = $52&1;
            if ($53) {
             label = 37;
             break;
            }
            $ptr = $51;
            __THREW__ = 0;
            invoke_vii(277,($local_len|0),1);
            $54 = __THREW__; __THREW__ = 0;
            $55 = $54&1;
            if ($55) {
             label = 37;
             break;
            }
            $56 = ((($_32)) + 4|0);
            $57 = HEAP32[$56>>2]|0;
            $58 = ($57|0)!=(0|0);
            $$expand_i1_val21 = $58&1;
            $$expand_i1_val22 = 1;
            $switch3 = ($$expand_i1_val21&255)<($$expand_i1_val22&255);
            if (!($switch3)) {
             continue;
            }
            __THREW__ = 0;
            invoke_vi(275,($_32|0));
            $69 = __THREW__; __THREW__ = 0;
            $70 = $69&1;
            if ($70) {
             label = 36;
             break;
            }
           }
           do {
            if ((label|0) == 19) {
             __THREW__ = 0;
             invoke_vi(275,($_32|0));
             $45 = __THREW__; __THREW__ = 0;
             $46 = $45&1;
             if ($46) {
              $82 = ___cxa_find_matching_catch_2()|0;
              $83 = tempRet0;
              HEAP32[$personalityslot>>2] = $82;
              $personalityslot$index19 = ((($personalityslot)) + 4|0);
              HEAP32[$personalityslot$index19>>2] = $83;
              $$field = HEAP32[$personalityslot>>2]|0;
              $$index5 = ((($personalityslot)) + 4|0);
              $$field6 = HEAP32[$$index5>>2]|0;
              ___resumeException($$field|0);
              // unreachable;
             }
             __THREW__ = 0;
             invoke_vi(278,($iter|0));
             $59 = __THREW__; __THREW__ = 0;
             $60 = $59&1;
             if ($60) {
              label = 35;
              break L15;
             }
             $_47 = 0;
             __THREW__ = 0;
             invoke_vi(279,($local_len|0));
             $61 = __THREW__; __THREW__ = 0;
             $62 = $61&1;
             if ($62) {
              label = 34;
              break L1;
             }
             STACKTOP = sp;return;
            }
            else if ((label|0) == 36) {
             $75 = ___cxa_find_matching_catch_2()|0;
             $76 = tempRet0;
             HEAP32[$personalityslot>>2] = $75;
             $personalityslot$index15 = ((($personalityslot)) + 4|0);
             HEAP32[$personalityslot$index15>>2] = $76;
            }
            else if ((label|0) == 37) {
             $77 = ___cxa_find_matching_catch_2()|0;
             $78 = tempRet0;
             HEAP32[$personalityslot>>2] = $77;
             $personalityslot$index17 = ((($personalityslot)) + 4|0);
             HEAP32[$personalityslot$index17>>2] = $78;
             $79 = ((($_32)) + 4|0);
             $80 = HEAP32[$79>>2]|0;
             $81 = ($80|0)!=(0|0);
             $$expand_i1_val23 = $81&1;
             $$expand_i1_val24 = 1;
             $switch4 = ($$expand_i1_val23&255)<($$expand_i1_val24&255);
             if ($switch4) {
              __ZN4drop17h7829d82d7f4f54a4E($_32);
              break;
             }
             $67 = $_48;
             $68 = $67&1;
             if ($68) {
              $_48 = 0;
              __ZN4drop17h6b8599be48284266E($_32);
             }
            }
           } while(0);
           __ZN4drop17h9194ea0e910420dcE($iter);
          }
         }
        } while(0);
        if ((label|0) == 35) {
         $73 = ___cxa_find_matching_catch_2()|0;
         $74 = tempRet0;
         HEAP32[$personalityslot>>2] = $73;
         $personalityslot$index13 = ((($personalityslot)) + 4|0);
         HEAP32[$personalityslot$index13>>2] = $74;
        }
        $65 = $_47;
        $66 = $65&1;
        if ($66) {
         $_47 = 0;
         __ZN4drop17he5822bbed473e100E($local_len);
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $71 = ___cxa_find_matching_catch_2()|0;
  $72 = tempRet0;
  HEAP32[$personalityslot>>2] = $71;
  $personalityslot$index11 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index11>>2] = $72;
 }
 $63 = $_46;
 $64 = $63&1;
 if (!($64)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index5 = ((($personalityslot)) + 4|0);
  $$field6 = HEAP32[$$index5>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_46 = 0;
 __ZN4drop17h9194ea0e910420dcE($iterator);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index5 = ((($personalityslot)) + 4|0);
 $$field6 = HEAP32[$$index5>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4drop17h9194ea0e910420dcE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17hc6116a31efbafe9cE($0);
 return;
}
function __ZN4drop17hc6116a31efbafe9cE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(280,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN13drop_contents17hc6116a31efbafe9cE($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZN13drop_contents17hc6116a31efbafe9cE($0);
  return;
 }
}
function __ZN71__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17heeacf3c0b5fbf084E($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val11 = 0, $$expand_i1_val12 = 0, $$expand_i1_val13 = 0, $$expand_i1_val9 = 0, $$field = 0, $$field4 = 0, $$index3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_10 = 0, $_15 = 0, $_20 = 0, $_x = 0, $arg0 = 0, $iter = 0, $personalityslot = 0, $personalityslot$index6 = 0, $personalityslot$index8 = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $personalityslot = sp + 40|0;
 $_15 = sp + 32|0;
 $_x = sp + 16|0;
 $_10 = sp;
 $iter = sp + 56|0;
 $arg0 = $0;
 $_20 = 0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core4iter8iterator8Iterator6by_ref17he56ce67953b121e0E($2)|0);
 $4 = (__ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17h9b209d8e58490308E($3)|0);
 HEAP32[$iter>>2] = $4;
 while(1) {
  $_20 = 1;
  __ZN75__LT__RF__u27_a_u20_mut_u20_I_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h5a7ce1715b24184fE($_10,$iter);
  $5 = ((($_10)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  $$expand_i1_val = $7&1;
  $$expand_i1_val9 = 1;
  $switch2 = ($$expand_i1_val&255)<($$expand_i1_val9&255);
  $_20 = 0;
  if ($switch2) {
   label = 4;
   break;
  }
  ;HEAP32[$_x>>2]=HEAP32[$_10>>2]|0;HEAP32[$_x+4>>2]=HEAP32[$_10+4>>2]|0;HEAP32[$_x+8>>2]=HEAP32[$_10+8>>2]|0;HEAP32[$_x+12>>2]=HEAP32[$_10+12>>2]|0;
  __THREW__ = 0;
  invoke_vi(282,($_x|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 13;
   break;
  }
  $20 = ((($_10)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0|0);
  $$expand_i1_val10 = $22&1;
  $$expand_i1_val11 = 1;
  $switch = ($$expand_i1_val10&255)<($$expand_i1_val11&255);
  if (!($switch)) {
   continue;
  }
  __THREW__ = 0;
  invoke_vi(281,($_10|0));
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   break;
  }
 }
 if ((label|0) == 4) {
  __THREW__ = 0;
  invoke_vi(281,($_10|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   $12 = $self;
   $13 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h5e5fe30df3357ec1E($12)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $self;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_14from_raw_parts17h4b81998b5495d84cE($_15,$14,$17);
   __THREW__ = 0;
   invoke_vi(283,($_15|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if (!($19)) {
    STACKTOP = sp;return;
   }
  }
 }
 else if ((label|0) == 13) {
  $27 = ___cxa_find_matching_catch_2()|0;
  $28 = tempRet0;
  HEAP32[$personalityslot>>2] = $27;
  $personalityslot$index6 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index6>>2] = $28;
  $29 = ((($_10)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(0|0);
  $$expand_i1_val12 = $31&1;
  $$expand_i1_val13 = 1;
  $switch1 = ($$expand_i1_val12&255)<($$expand_i1_val13&255);
  if ($switch1) {
   __ZN4drop17h32c8c3073c92bf6fE($_10);
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index3 = ((($personalityslot)) + 4|0);
   $$field4 = HEAP32[$$index3>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
  $23 = $_20;
  $24 = $23&1;
  if (!($24)) {
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index3 = ((($personalityslot)) + 4|0);
   $$field4 = HEAP32[$$index3>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
  $_20 = 0;
  __ZN4drop17h88ffcfbb76e7d65aE($_10);
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index3 = ((($personalityslot)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = tempRet0;
 HEAP32[$personalityslot>>2] = $32;
 $personalityslot$index8 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index8>>2] = $33;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN13drop_contents17hc6116a31efbafe9cE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4core4iter8iterator8Iterator6by_ref17he56ce67953b121e0E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 STACKTOP = sp;return ($2|0);
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17h9b209d8e58490308E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 STACKTOP = sp;return ($2|0);
}
function __ZN75__LT__RF__u27_a_u20_mut_u20_I_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h5a7ce1715b24184fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = HEAP32[$3>>2]|0;
 __ZN86__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hf49b8c8da2494fe6E($0,$4);
 STACKTOP = sp;return;
}
function __ZN4drop17h32c8c3073c92bf6fE($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $1 = 0, $2 = 0, $3 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 $$expand_i1_val = $3&1;
 $$expand_i1_val2 = 1;
 $switch = ($$expand_i1_val&255)<($$expand_i1_val2&255);
 if ($switch) {
  return;
 }
 __ZN4drop17h88ffcfbb76e7d65aE($0);
 return;
}
function __ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h5e5fe30df3357ec1E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h5568164a7b2cc401E($2)|0);
 $transmute_temp = $3;
 $4 = $transmute_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_14from_raw_parts17h4b81998b5495d84cE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_5 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $cap = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $abi_cast = sp + 20|0;
 $_5 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $ptr = $3;
 $4 = $arg1;
 $cap = $4;
 $5 = $ptr;
 $6 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17hd65610094e67eb5cE($5)|0);
 HEAP32[$abi_cast>>2] = $6;
 ;HEAP32[$_5>>2]=HEAP32[$abi_cast>>2]|0;
 $7 = $cap;
 ;HEAP32[$0>>2]=HEAP32[$_5>>2]|0;
 $8 = ((($0)) + 4|0);
 HEAP32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN4drop17h750a45172de70821E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(284,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN13drop_contents17h750a45172de70821E($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h750a45172de70821E($0);
  return;
 }
}
function __ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h2cf86d84dde4ccceE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_4 = 0, $align = 0, $arg0 = 0, $elem_size = 0, $num_bytes = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17h654d63269c6e3139E()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $self;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $_4 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $_4 = 0;
 }
 $9 = $_4;
 $10 = $9&1;
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (__ZN4core3mem8align_of17h04f08d2936687d6fE()|0);
 $align = $11;
 $12 = $elem_size;
 $13 = $self;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $num_bytes = $16;
 $17 = $self;
 $18 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h40771c3671d8aae7E($17)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $num_bytes;
 $21 = $align;
 __ZN5alloc4heap10deallocate17haa41e924c0cbc050E_3($19,$20,$21);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17h750a45172de70821E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4core3mem7size_of17h654d63269c6e3139E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 16;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem8align_of17h04f08d2936687d6fE() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h40771c3671d8aae7E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h5568164a7b2cc401E($2)|0);
 $transmute_temp = $3;
 $4 = $transmute_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h5568164a7b2cc401E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17hd65610094e67eb5cE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $_0$i = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $inner$i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0$i = sp + 16|0;
 $abi_cast = sp + 28|0;
 $_3 = sp + 8|0;
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $2 = $ptr;
 $arg0$i = $2;
 $3 = $arg0$i;
 $inner$i = $3;
 $4 = $inner$i;
 HEAP32[$_0$i>>2] = $4;
 $5 = HEAP32[$_0$i>>2]|0;
 HEAP32[$abi_cast>>2] = $5;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 ;HEAP32[$_0>>2]=HEAP32[$_3>>2]|0;
 $6 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN86__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hf49b8c8da2494fe6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$field6 = 0, $$field9 = 0, $$index1 = 0, $$index8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$i = 0, $_10$i2 = 0, $_13 = 0, $_20 = 0, $_9$i = 0, $_9$i3 = 0, $arg0 = 0, $arg0$i = 0, $arg0$i6 = 0, $old = 0, $personalityslot$i = 0, $personalityslot$i$index4 = 0, $personalityslot$i1 = 0;
 var $personalityslot$i1$index11 = 0, $self = 0, $src$i = 0, $src$i5 = 0, $tmp$i = 0, $tmp$i4 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $personalityslot$i1 = sp + 104|0;
 $_9$i3 = sp + 88|0;
 $tmp$i4 = sp + 72|0;
 $personalityslot$i = sp + 64|0;
 $_9$i = sp + 48|0;
 $tmp$i = sp + 32|0;
 $_20 = sp + 16|0;
 $_13 = sp;
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $self;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)==($8|0);
 if ($9) {
  $10 = ((($0)) + 4|0);
  HEAP32[$10>>2] = 0;
  STACKTOP = sp;return;
 }
 $11 = (__ZN4core3mem7size_of17h654d63269c6e3139E()|0);
 $12 = ($11|0)==(0);
 $13 = $self;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 if ($12) {
  $16 = ((($15)) + 1|0);
  $tmp_ret = $16;
  $17 = $tmp_ret;
  $18 = $self;
  $19 = ((($18)) + 8|0);
  HEAP32[$19>>2] = $17;
  $arg0$i = (1);
  $_10$i = 0;
  $20 = $arg0$i;
  $src$i = $20;
  __THREW__ = 0;
  invoke_vi(285,($tmp$i|0));
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if (!($22)) {
   $_10$i = 1;
   $37 = $src$i;
   ;HEAP32[$tmp$i>>2]=HEAP32[$37>>2]|0;HEAP32[$tmp$i+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$tmp$i+8>>2]=HEAP32[$37+8>>2]|0;HEAP32[$tmp$i+12>>2]=HEAP32[$37+12>>2]|0;
   $_10$i = 0;
   ;HEAP32[$_9$i>>2]=HEAP32[$tmp$i>>2]|0;HEAP32[$_9$i+4>>2]=HEAP32[$tmp$i+4>>2]|0;HEAP32[$_9$i+8>>2]=HEAP32[$tmp$i+8>>2]|0;HEAP32[$_9$i+12>>2]=HEAP32[$tmp$i+12>>2]|0;
   ;HEAP32[$_13>>2]=HEAP32[$_9$i>>2]|0;HEAP32[$_13+4>>2]=HEAP32[$_9$i+4>>2]|0;HEAP32[$_13+8>>2]=HEAP32[$_9$i+8>>2]|0;HEAP32[$_13+12>>2]=HEAP32[$_9$i+12>>2]|0;
   ;HEAP32[$0>>2]=HEAP32[$_13>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_13+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_13+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$_13+12>>2]|0;
   STACKTOP = sp;return;
  }
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = tempRet0;
  HEAP32[$personalityslot$i>>2] = $33;
  $personalityslot$i$index4 = ((($personalityslot$i)) + 4|0);
  HEAP32[$personalityslot$i$index4>>2] = $34;
  $35 = $_10$i;
  $36 = $35&1;
  if (!($36)) {
   $$field = HEAP32[$personalityslot$i>>2]|0;
   $$index1 = ((($personalityslot$i)) + 4|0);
   $$field2 = HEAP32[$$index1>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
  $_10$i = 0;
  __ZN4drop17h88ffcfbb76e7d65aE($tmp$i);
  $$field = HEAP32[$personalityslot$i>>2]|0;
  $$index1 = ((($personalityslot$i)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  $old = $15;
  $23 = $self;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h98d8be438ebdab78E($25,1)|0);
  $27 = $self;
  $28 = ((($27)) + 8|0);
  HEAP32[$28>>2] = $26;
  $29 = $old;
  $arg0$i6 = $29;
  $_10$i2 = 0;
  $30 = $arg0$i6;
  $src$i5 = $30;
  __THREW__ = 0;
  invoke_vi(285,($tmp$i4|0));
  $31 = __THREW__; __THREW__ = 0;
  $32 = $31&1;
  if (!($32)) {
   $_10$i2 = 1;
   $42 = $src$i5;
   ;HEAP32[$tmp$i4>>2]=HEAP32[$42>>2]|0;HEAP32[$tmp$i4+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$tmp$i4+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$tmp$i4+12>>2]=HEAP32[$42+12>>2]|0;
   $_10$i2 = 0;
   ;HEAP32[$_9$i3>>2]=HEAP32[$tmp$i4>>2]|0;HEAP32[$_9$i3+4>>2]=HEAP32[$tmp$i4+4>>2]|0;HEAP32[$_9$i3+8>>2]=HEAP32[$tmp$i4+8>>2]|0;HEAP32[$_9$i3+12>>2]=HEAP32[$tmp$i4+12>>2]|0;
   ;HEAP32[$_20>>2]=HEAP32[$_9$i3>>2]|0;HEAP32[$_20+4>>2]=HEAP32[$_9$i3+4>>2]|0;HEAP32[$_20+8>>2]=HEAP32[$_9$i3+8>>2]|0;HEAP32[$_20+12>>2]=HEAP32[$_9$i3+12>>2]|0;
   ;HEAP32[$0>>2]=HEAP32[$_20>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_20+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_20+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$_20+12>>2]|0;
   STACKTOP = sp;return;
  }
  $38 = ___cxa_find_matching_catch_2()|0;
  $39 = tempRet0;
  HEAP32[$personalityslot$i1>>2] = $38;
  $personalityslot$i1$index11 = ((($personalityslot$i1)) + 4|0);
  HEAP32[$personalityslot$i1$index11>>2] = $39;
  $40 = $_10$i2;
  $41 = $40&1;
  if (!($41)) {
   $$field6 = HEAP32[$personalityslot$i1>>2]|0;
   $$index8 = ((($personalityslot$i1)) + 4|0);
   $$field9 = HEAP32[$$index8>>2]|0;
   ___resumeException($$field6|0);
   // unreachable;
  }
  $_10$i2 = 0;
  __ZN4drop17h88ffcfbb76e7d65aE($tmp$i4);
  $$field6 = HEAP32[$personalityslot$i1>>2]|0;
  $$index8 = ((($personalityslot$i1)) + 4|0);
  $$field9 = HEAP32[$$index8>>2]|0;
  ___resumeException($$field6|0);
  // unreachable;
 }
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h98d8be438ebdab78E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + ($5<<4)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3mem13uninitialized17hf1a6464ab4c25411E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN84__LT_core__iter__Map_LT_I_C__u20_F_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17h9630f83df08b1e12E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN86__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17h5f9059d289590c4aE($0,$3);
 STACKTOP = sp;return;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_16extend_desugared17h29e7b9cb3aa846aaE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val14 = 0, $$expand_i1_val15 = 0, $$expand_i1_val16 = 0, $$expand_i1_val17 = 0, $$expand_i1_val18 = 0, $$field = 0, $$field4 = 0, $$index3 = 0, $$sreg$field = 0, $$sreg$field7 = 0, $$sreg$index6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $_17 = 0, $_31 = 0, $_36 = 0, $_37 = 0, $_6 = 0;
 var $arg0 = 0, $arg1 = 0, $element = 0, $iterator = 0, $len = 0, $lower = 0, $personalityslot = 0, $personalityslot$index11 = 0, $personalityslot$index13 = 0, $personalityslot$index9 = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $2 = sp;
 $personalityslot = sp + 104|0;
 $_31 = sp + 88|0;
 $_17 = sp + 72|0;
 $element = sp + 56|0;
 $_6 = sp + 40|0;
 $iterator = sp + 24|0;
 $arg1 = sp + 8|0;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg1+12>>2]=HEAP32[$1+12>>2]|0;
 $_36 = 0;
 $_37 = 0;
 $3 = $arg0;
 $self = $3;
 ;HEAP32[$iterator>>2]=HEAP32[$arg1>>2]|0;HEAP32[$iterator+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$iterator+8>>2]=HEAP32[$arg1+8>>2]|0;HEAP32[$iterator+12>>2]=HEAP32[$arg1+12>>2]|0;
 while(1) {
  __THREW__ = 0;
  invoke_vii(274,($_6|0),($iterator|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   label = 26;
   break;
  }
  $_36 = 1;
  $6 = ((($_6)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  $$expand_i1_val = $8&1;
  $$expand_i1_val14 = 1;
  $switch = ($$expand_i1_val&255)<($$expand_i1_val14&255);
  $_36 = 0;
  if ($switch) {
   label = 7;
   break;
  }
  $_37 = 1;
  ;HEAP32[$element>>2]=HEAP32[$_6>>2]|0;HEAP32[$element+4>>2]=HEAP32[$_6+4>>2]|0;HEAP32[$element+8>>2]=HEAP32[$_6+8>>2]|0;HEAP32[$element+12>>2]=HEAP32[$_6+12>>2]|0;
  $14 = $self;
  __THREW__ = 0;
  $15 = (invoke_ii(271,($14|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   label = 27;
   break;
  }
  $len = $15;
  $18 = $len;
  $19 = $self;
  __THREW__ = 0;
  $20 = (invoke_ii(286,($19|0))|0);
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   label = 27;
   break;
  }
  $23 = ($18|0)==($20|0);
  if ($23) {
   __THREW__ = 0;
   invoke_vii(266,($_17|0),($iterator|0));
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    label = 27;
    break;
   }
   $26 = HEAP32[$_17>>2]|0;
   $lower = $26;
   $27 = $self;
   $28 = $lower;
   __THREW__ = 0;
   $29 = (invoke_iii(201,($28|0),1)|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    label = 27;
    break;
   }
   __THREW__ = 0;
   invoke_vii(268,($27|0),($29|0));
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    label = 27;
    break;
   }
  }
  $34 = $self;
  __THREW__ = 0;
  invoke_vii(269,($2|0),($34|0));
  $$sreg$field = HEAP32[$2>>2]|0;
  $$sreg$index6 = ((($2)) + 4|0);
  $$sreg$field7 = HEAP32[$$sreg$index6>>2]|0;
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if ($36) {
   label = 27;
   break;
  }
  $37 = $len;
  __THREW__ = 0;
  $38 = (invoke_iiii(287,($$sreg$field|0),($$sreg$field7|0),($37|0))|0);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   label = 27;
   break;
  }
  $_37 = 0;
  ;HEAP32[$_31>>2]=HEAP32[$element>>2]|0;HEAP32[$_31+4>>2]=HEAP32[$element+4>>2]|0;HEAP32[$_31+8>>2]=HEAP32[$element+8>>2]|0;HEAP32[$_31+12>>2]=HEAP32[$element+12>>2]|0;
  __THREW__ = 0;
  invoke_vii(276,($38|0),($_31|0));
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  if ($42) {
   label = 27;
   break;
  }
  $43 = $self;
  $44 = $len;
  $45 = (($44) + 1)|0;
  __THREW__ = 0;
  invoke_vii(288,($43|0),($45|0));
  $46 = __THREW__; __THREW__ = 0;
  $47 = $46&1;
  if ($47) {
   label = 27;
   break;
  }
  $48 = ((($_6)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)!=(0|0);
  $$expand_i1_val17 = $50&1;
  $$expand_i1_val18 = 1;
  $switch2 = ($$expand_i1_val17&255)<($$expand_i1_val18&255);
  if (!($switch2)) {
   continue;
  }
  __THREW__ = 0;
  invoke_vi(275,($_6|0));
  $55 = __THREW__; __THREW__ = 0;
  $56 = $55&1;
  if ($56) {
   label = 26;
   break;
  }
 }
 do {
  if ((label|0) == 7) {
   __THREW__ = 0;
   invoke_vi(275,($_6|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    invoke_vi(278,($iterator|0));
    $51 = __THREW__; __THREW__ = 0;
    $52 = $51&1;
    if (!($52)) {
     STACKTOP = sp;return;
    }
   }
   $63 = ___cxa_find_matching_catch_2()|0;
   $64 = tempRet0;
   HEAP32[$personalityslot>>2] = $63;
   $personalityslot$index13 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index13>>2] = $64;
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index3 = ((($personalityslot)) + 4|0);
   $$field4 = HEAP32[$$index3>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
  else if ((label|0) == 26) {
   $57 = ___cxa_find_matching_catch_2()|0;
   $58 = tempRet0;
   HEAP32[$personalityslot>>2] = $57;
   $personalityslot$index9 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index9>>2] = $58;
  }
  else if ((label|0) == 27) {
   $59 = ___cxa_find_matching_catch_2()|0;
   $60 = tempRet0;
   HEAP32[$personalityslot>>2] = $59;
   $personalityslot$index11 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index11>>2] = $60;
   $61 = $_37;
   $62 = $61&1;
   if ($62) {
    $_37 = 0;
    __ZN4drop17h6b8599be48284266E($element);
   }
   $9 = ((($_6)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)!=(0|0);
   $$expand_i1_val15 = $11&1;
   $$expand_i1_val16 = 1;
   $switch1 = ($$expand_i1_val15&255)<($$expand_i1_val16&255);
   if ($switch1) {
    __ZN4drop17h7829d82d7f4f54a4E($_6);
    break;
   }
   $53 = $_36;
   $54 = $53&1;
   if ($54) {
    $_36 = 0;
    __ZN4drop17h6b8599be48284266E($_6);
   }
  }
 } while(0);
 __ZN4drop17h9194ea0e910420dcE($iterator);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h0085521ebbdf13d2E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $additional = 0, $arg0 = 0, $arg1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $additional = $3;
 $4 = $self;
 $5 = $self;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $additional;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_7reserve17hfab2b0fc8fdc4b54E($4,$7,$8);
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h38db5c2ac0f13413E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h24dab73cc76823f0E($7,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3len17h12fc54c87468005dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17ha7d5a441a64351feE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + ($5<<4)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN11collections3vec12SetLenOnDrop3new17hca534047e582cef6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $1;
 $2 = $arg0;
 $len = $2;
 $3 = $len;
 $4 = HEAP32[$3>>2]|0;
 $5 = $len;
 HEAP32[$0>>2] = $5;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN84__LT_core__iter__Map_LT_I_C__u20_F_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17ha9f03d82c8f4f538E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $_3 = sp;
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN86__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hf49b8c8da2494fe6E($_3,$3);
 $4 = $self;
 $5 = ((($4)) + 16|0);
 __THREW__ = 0;
 invoke_viii(289,($0|0),($_3|0),($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  HEAP32[$personalityslot>>2] = $8;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $9;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN4drop17h7829d82d7f4f54a4E($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $1 = 0, $2 = 0, $3 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 $$expand_i1_val = $3&1;
 $$expand_i1_val2 = 1;
 $switch = ($$expand_i1_val&255)<($$expand_i1_val2&255);
 if ($switch) {
  return;
 }
 __ZN4drop17h6b8599be48284266E($0);
 return;
}
function __ZN4core3ptr5write17h5e3410e4db99b329E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_8 = 0, $arg0 = 0, $arg1 = 0, $dst = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_8 = sp + 32|0;
 $src = sp + 16|0;
 $arg1 = sp;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg1+12>>2]=HEAP32[$1+12>>2]|0;
 $2 = $arg0;
 $dst = $2;
 ;HEAP32[$src>>2]=HEAP32[$arg1>>2]|0;HEAP32[$src+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$src+8>>2]=HEAP32[$arg1+8>>2]|0;HEAP32[$src+12>>2]=HEAP32[$arg1+12>>2]|0;
 $3 = $dst;
 ;HEAP32[$_8>>2]=HEAP32[$src>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$src+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$src+8>>2]|0;HEAP32[$_8+12>>2]=HEAP32[$src+12>>2]|0;
 ;HEAP32[$3>>2]=HEAP32[$_8>>2]|0;HEAP32[$3+4>>2]=HEAP32[$_8+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$_8+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$_8+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN11collections3vec12SetLenOnDrop13increment_len17h772867f4865908d9E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $increment = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $increment = $3;
 $4 = $increment;
 $5 = $self;
 $6 = ((($5)) + 4|0);
 $7 = $self;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($4))|0;
 HEAP32[$6>>2] = $10;
 STACKTOP = sp;return;
}
function __ZN4drop17he5822bbed473e100E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(290,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN13drop_contents17he5822bbed473e100E($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZN13drop_contents17he5822bbed473e100E($0);
  return;
 }
}
function __ZN80__LT_collections__vec__SetLenOnDrop_LT__u27_a_GT__u20_as_u20_core__ops__Drop_GT_4drop17h9577a37c7dd66a2dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $self;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN13drop_contents17he5822bbed473e100E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17hdf6fa201f31a9de3E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val11 = 0, $$expand_i1_val12 = 0, $$expand_i1_val13 = 0, $$expand_i1_val9 = 0, $$field = 0, $$field4 = 0, $$index3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0;
 var $_11 = 0, $_6 = 0, $_8 = 0, $_9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $personalityslot = 0, $personalityslot$index6 = 0, $personalityslot$index8 = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $personalityslot = sp + 96|0;
 $_9 = sp + 80|0;
 $_8 = sp + 64|0;
 $_6 = sp + 48|0;
 $x = sp + 32|0;
 $self = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg0+12>>2]=HEAP32[$1+12>>2]|0;
 $arg1 = $2;
 $_11 = 0;
 $_10 = 0;
 $_10 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;HEAP32[$self+12>>2]=HEAP32[$arg0+12>>2]|0;
 $_11 = 1;
 $3 = $arg1;
 $f = $3;
 $4 = ((($self)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 $$expand_i1_val = $6&1;
 $$expand_i1_val9 = 1;
 $switch2 = ($$expand_i1_val&255)<($$expand_i1_val9&255);
 do {
  if ($switch2) {
   $10 = ((($0)) + 4|0);
   HEAP32[$10>>2] = 0;
  } else {
   $_10 = 0;
   ;HEAP32[$x>>2]=HEAP32[$self>>2]|0;HEAP32[$x+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$x+8>>2]=HEAP32[$self+8>>2]|0;HEAP32[$x+12>>2]=HEAP32[$self+12>>2]|0;
   $_11 = 0;
   $11 = $f;
   ;HEAP32[$_9>>2]=HEAP32[$x>>2]|0;HEAP32[$_9+4>>2]=HEAP32[$x+4>>2]|0;HEAP32[$_9+8>>2]=HEAP32[$x+8>>2]|0;HEAP32[$_9+12>>2]=HEAP32[$x+12>>2]|0;
   ;HEAP32[$_8>>2]=HEAP32[$_9>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$_9+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$_9+8>>2]|0;HEAP32[$_8+12>>2]=HEAP32[$_9+12>>2]|0;
   __THREW__ = 0;
   invoke_viii(291,($_6|0),($11|0),($_8|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    ;HEAP32[$0>>2]=HEAP32[$_6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_6+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_6+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$_6+12>>2]|0;
    break;
   }
   $27 = ___cxa_find_matching_catch_2()|0;
   $28 = tempRet0;
   HEAP32[$personalityslot>>2] = $27;
   $personalityslot$index6 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index6>>2] = $28;
   $29 = $_11;
   $30 = $29&1;
   if ($30) {
    $_11 = 0;
   }
   $7 = ((($self)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)!=(0|0);
   $$expand_i1_val10 = $9&1;
   $$expand_i1_val11 = 1;
   $switch = ($$expand_i1_val10&255)<($$expand_i1_val11&255);
   if ($switch) {
    __ZN4drop17h32c8c3073c92bf6fE($self);
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index3 = ((($personalityslot)) + 4|0);
    $$field4 = HEAP32[$$index3>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
   $19 = $_10;
   $20 = $19&1;
   if (!($20)) {
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index3 = ((($personalityslot)) + 4|0);
    $$field4 = HEAP32[$$index3>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
   $_10 = 0;
   __ZN4drop17h88ffcfbb76e7d65aE($self);
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index3 = ((($personalityslot)) + 4|0);
   $$field4 = HEAP32[$$index3>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
 } while(0);
 $14 = $_11;
 $15 = $14&1;
 if ($15) {
  $_11 = 0;
 }
 $16 = ((($self)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 $$expand_i1_val12 = $18&1;
 $$expand_i1_val13 = 1;
 $switch1 = ($$expand_i1_val12&255)<($$expand_i1_val13&255);
 if ($switch1) {
  __THREW__ = 0;
  invoke_vi(281,($self|0));
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if (!($22)) {
   STACKTOP = sp;return;
  }
 } else {
  $23 = $_10;
  $24 = $23&1;
  if (!($24)) {
   STACKTOP = sp;return;
  }
  $_10 = 0;
  __THREW__ = 0;
  invoke_vi(282,($self|0));
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if (!($26)) {
   STACKTOP = sp;return;
  }
 }
 $31 = ___cxa_find_matching_catch_2()|0;
 $32 = tempRet0;
 HEAP32[$personalityslot>>2] = $31;
 $personalityslot$index8 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index8>>2] = $32;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4core3ops5impls81__LT_impl_u20_core__ops__FnOnce_LT_A_GT__u20_for_u20__RF__u27_a_u20_mut_u20_F_GT_9call_once17he12a8860c1c01beaE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $args = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $personalityslot = sp + 48|0;
 $_6 = sp + 32|0;
 $args = sp + 16|0;
 $arg1 = sp;
 $arg0 = $1;
 ;HEAP32[$arg1>>2]=HEAP32[$2>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$arg1+12>>2]=HEAP32[$2+12>>2]|0;
 $3 = $arg0;
 $self = $3;
 ;HEAP32[$args>>2]=HEAP32[$arg1>>2]|0;HEAP32[$args+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$args+8>>2]=HEAP32[$arg1+8>>2]|0;HEAP32[$args+12>>2]=HEAP32[$arg1+12>>2]|0;
 $4 = $self;
 ;HEAP32[$_6>>2]=HEAP32[$args>>2]|0;HEAP32[$_6+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_6+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_6+12>>2]=HEAP32[$args+12>>2]|0;
 __THREW__ = 0;
 invoke_viii(292,($0|0),($4|0),($_6|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  HEAP32[$personalityslot>>2] = $7;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $8;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN2ww7command8HelpInfo4list28__u7b__u7b_closure_u7d__u7d_17h12aa7e0bb9abc645E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field5 = 0, $$index4 = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $desc = 0, $key = 0, $personalityslot = 0, $personalityslot$index7 = 0, $personalityslot$index9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = sp;
 $personalityslot = sp + 56|0;
 $_6 = sp + 40|0;
 $desc = sp + 24|0;
 $arg1 = sp + 8|0;
 $arg0 = $1;
 ;HEAP32[$arg1>>2]=HEAP32[$2>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$arg1+12>>2]=HEAP32[$2+12>>2]|0;
 $4 = HEAP32[$arg1>>2]|0;
 $key = $4;
 $5 = ((($arg1)) + 4|0);
 ;HEAP32[$desc>>2]=HEAP32[$5>>2]|0;HEAP32[$desc+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$desc+8>>2]=HEAP32[$5+8>>2]|0;
 $6 = $key;
 __THREW__ = 0;
 invoke_vii(293,($3|0),($desc|0));
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index1 = ((($3)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  __THREW__ = 0;
  invoke_viii(244,($_6|0),($$sreg$field|0),($$sreg$field2|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   HEAP32[$0>>2] = $6;
   $11 = ((($0)) + 4|0);
   ;HEAP32[$11>>2]=HEAP32[$_6>>2]|0;HEAP32[$11+4>>2]=HEAP32[$_6+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$_6+8>>2]|0;
   __THREW__ = 0;
   invoke_vi(142,($desc|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    STACKTOP = sp;return;
   }
   $16 = ___cxa_find_matching_catch_2()|0;
   $17 = tempRet0;
   HEAP32[$personalityslot>>2] = $16;
   $personalityslot$index9 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index9>>2] = $17;
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index4 = ((($personalityslot)) + 4|0);
   $$field5 = HEAP32[$$index4>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
 }
 $14 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 HEAP32[$personalityslot>>2] = $14;
 $personalityslot$index7 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index7>>2] = $15;
 __ZN4drop17hdd1638425ff7362fE($desc);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index4 = ((($personalityslot)) + 4|0);
 $$field5 = HEAP32[$$index4>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN79__LT_collections__string__String_u20_as_u20_core__convert__AsRef_LT_str_GT__GT_6as_ref17hb4f6cee6e3262948E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN64__LT_collections__string__String_u20_as_u20_core__ops__Deref_GT_5deref17h9de4490adad97478E($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h24dab73cc76823f0E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_7reserve17hfab2b0fc8fdc4b54E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $_40 = 0, $abi_cast = 0, $align = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $arg2 = 0, $elem_size = 0, $needed_extra_cap = 0, $new_alloc_size = 0;
 var $new_cap = 0, $ptr = 0, $self = 0, $self$i = 0, $tmp_ret = 0, $used_cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $abi_cast = sp + 60|0;
 $tmp_ret = sp + 8|0;
 $_40 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $used_cap = $4;
 $5 = $arg2;
 $needed_extra_cap = $5;
 $6 = (__ZN4core3mem7size_of17h425f48d7ee05d998E()|0);
 $elem_size = $6;
 $7 = (__ZN4core3mem8align_of17h20ce6e85028976a6E()|0);
 $align = $7;
 $8 = $self;
 $arg0$i = $8;
 $9 = $arg0$i;
 $self$i = $9;
 $10 = (__ZN4core3mem7size_of17h425f48d7ee05d998E()|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $_0$i = -1;
 } else {
  $12 = $self$i;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $_0$i = $14;
 }
 $15 = $_0$i;
 $16 = $used_cap;
 $17 = (__ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h1f1bc21fa0db5e6aE($15,$16)|0);
 $18 = $needed_extra_cap;
 $19 = ($17>>>0)>=($18>>>0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = $self;
 $21 = $used_cap;
 $22 = $needed_extra_cap;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_18amortized_new_size17hab55469e959f3e70E($tmp_ret,$20,$21,$22);
 $23 = ((($tmp_ret)) + 4|0);
 $24 = HEAP32[$tmp_ret>>2]|0;
 $25 = HEAP32[$23>>2]|0;
 $new_cap = $24;
 $new_alloc_size = $25;
 $26 = $new_alloc_size;
 __ZN5alloc7raw_vec11alloc_guard17hfcdaec6264df46d3E($26);
 $27 = $self;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = $new_alloc_size;
  $32 = $align;
  $33 = (__ZN5alloc4heap8allocate17h7ecb09ae67165feeE($31,$32)|0);
  $ptr = $33;
 } else {
  $34 = $self;
  $35 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17hc757c957ab6d493fE($34)|0);
  $36 = $self;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $elem_size;
  $40 = Math_imul($38, $39)|0;
  $41 = $new_alloc_size;
  $42 = $align;
  $43 = (__ZN5alloc4heap10reallocate17hd6647ec82355ed5aE($35,$40,$41,$42)|0);
  $ptr = $43;
 }
 $44 = $ptr;
 $45 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17hd8e9e87391b89bc2E($44)|0);
 if ($45) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 }
 $46 = $ptr;
 $47 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h6c0dc352cf0b9c01E($46)|0);
 HEAP32[$abi_cast>>2] = $47;
 ;HEAP32[$_40>>2]=HEAP32[$abi_cast>>2]|0;
 $48 = $self;
 ;HEAP32[$48>>2]=HEAP32[$_40>>2]|0;
 $49 = $new_cap;
 $50 = $self;
 $51 = ((($50)) + 4|0);
 HEAP32[$51>>2] = $49;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_18amortized_new_size17hab55469e959f3e70E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_20 = 0, $_9 = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $double_cap = 0, $elem_size = 0, $needed_extra_cap = 0, $new_alloc_size = 0, $new_cap = 0, $required_cap = 0, $self = 0, $used_cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_20 = sp + 8|0;
 $_9 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $arg2 = $3;
 $4 = $arg0;
 $self = $4;
 $5 = $arg1;
 $used_cap = $5;
 $6 = $arg2;
 $needed_extra_cap = $6;
 $7 = (__ZN4core3mem7size_of17h425f48d7ee05d998E()|0);
 $elem_size = $7;
 $8 = $used_cap;
 $9 = $needed_extra_cap;
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_add17ha98cfb78e5cf5d5bE($_9,$8,$9);
 $10 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17hbe300160939604f9E($_9,13086,17)|0);
 $required_cap = $10;
 $11 = $self;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13<<1;
 $double_cap = $14;
 $15 = $double_cap;
 $16 = $required_cap;
 $17 = (__ZN4core3cmp3max17hde8d93c2d99ac427E($15,$16)|0);
 $new_cap = $17;
 $18 = $new_cap;
 $19 = $elem_size;
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_mul17h86749854cd7d344eE($_20,$18,$19);
 $20 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17hbe300160939604f9E($_20,13086,17)|0);
 $new_alloc_size = $20;
 $21 = $new_cap;
 $22 = $new_alloc_size;
 HEAP32[$0>>2] = $21;
 $23 = ((($0)) + 4|0);
 HEAP32[$23>>2] = $22;
 STACKTOP = sp;return;
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h6c0dc352cf0b9c01E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $_0$i = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $inner$i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0$i = sp + 16|0;
 $abi_cast = sp + 28|0;
 $_3 = sp + 8|0;
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $2 = $ptr;
 $arg0$i = $2;
 $3 = $arg0$i;
 $inner$i = $3;
 $4 = $inner$i;
 HEAP32[$_0$i>>2] = $4;
 $5 = HEAP32[$_0$i>>2]|0;
 HEAP32[$abi_cast>>2] = $5;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 ;HEAP32[$_0>>2]=HEAP32[$_3>>2]|0;
 $6 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_8capacity17hdcaeed579e003183E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $arg0 = 0, $arg0$i = 0, $self = 0, $self$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $arg0$i = $2;
 $3 = $arg0$i;
 $self$i = $3;
 $4 = (__ZN4core3mem7size_of17h425f48d7ee05d998E()|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $_0$i = -1;
  $9 = $_0$i;
  STACKTOP = sp;return ($9|0);
 } else {
  $6 = $self$i;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $_0$i = $8;
  $9 = $_0$i;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17h9bdc5a031e8bf821E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0;
 var $index = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $arg1 = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $arg1;
 $index = $8;
 $9 = HEAP32[$self>>2]|0;
 $10 = ((($self)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $index;
 __THREW__ = 0;
 $13 = (invoke_iiii(294,($9|0),($11|0),($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  HEAP32[$personalityslot>>2] = $16;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $17;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7set_len17hbc541f3aca5ae48dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $len;
 $5 = $self;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17h188d34ac8e81633fE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0;
 var $index = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $arg1 = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $arg1;
 $index = $8;
 $9 = $index;
 $10 = HEAP32[$self>>2]|0;
 $11 = ((($self)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 $13 = (invoke_iiii(295,($9|0),($10|0),($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  HEAP32[$personalityslot>>2] = $16;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $17;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17h26ff76ca31745113E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $self = 0, $slice = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $slice = sp + 8|0;
 $arg1 = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = $arg0;
 $self = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$slice>>2] = $5;
 $8 = ((($slice)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$slice>>2]|0;
 $10 = ((($slice)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h24dab73cc76823f0E($9,$11)|0);
 $13 = $self;
 $14 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17ha7d5a441a64351feE($12,$13)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZN86__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17h5f9059d289590c4aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_17 = 0, $arg0 = 0, $diff = 0, $exact = 0, $self = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_17 = sp;
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9;
 $11 = (($6) - ($10))|0;
 $diff = $11;
 $12 = (__ZN4core3mem7size_of17h654d63269c6e3139E()|0);
 $size = $12;
 $13 = $diff;
 $14 = $size;
 $15 = ($14|0)==(0);
 if ($15) {
  $_11 = 1;
 } else {
  $16 = $size;
  $_11 = $16;
 }
 $17 = $_11;
 $18 = ($17|0)==(0);
 $19 = $18;
 if ($19) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(3852);
  // unreachable;
 } else {
  $20 = $_11;
  $21 = (($13>>>0) / ($20>>>0))&-1;
  $exact = $21;
  $22 = $exact;
  $23 = $exact;
  HEAP32[$_17>>2] = 1;
  $24 = ((($_17)) + 4|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$0>>2] = $22;
  $25 = ((($0)) + 4|0);
  ;HEAP32[$25>>2]=HEAP32[$_17>>2]|0;HEAP32[$25+4>>2]=HEAP32[$_17+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17h31d20845132d368cE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_4 = 0, $abi_cast = 0, $cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $abi_cast = sp + 8|0;
 $_4 = sp;
 $1 = (__ZN4core3mem7size_of17h425f48d7ee05d998E()|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $cap = -1;
 } else {
  $cap = 0;
 }
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h6c0dc352cf0b9c01E((1))|0);
 HEAP32[$abi_cast>>2] = $3;
 ;HEAP32[$_4>>2]=HEAP32[$abi_cast>>2]|0;
 $4 = $cap;
 ;HEAP32[$0>>2]=HEAP32[$_4>>2]|0;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17ha9e6a616520e2702E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h7352a998d8034c95E($3)|0);
 $ptr = $4;
 $5 = $ptr;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17he1ec6dd93e9e8d5bE($5)|0);
 $6 = $ptr;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice18from_raw_parts_mut17h7090ccff9736f7b7E($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h54b001162aeedf29E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17hc9f78c4091be16aaE($7,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17he1ec6dd93e9e8d5bE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr8null_mut17h5b6434c0916a567dE()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3len17he8c92ab3c2f52d77E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h2552e70c1e364140E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + ($5<<4)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3mem6forget17h395afdbb46afcfbaE($0) {
 $0 = $0|0;
 var $_3 = 0, $arg0 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_3 = sp + 32|0;
 $t = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$0>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$0+8>>2]|0;
 ;HEAP32[$t>>2]=HEAP32[$arg0>>2]|0;HEAP32[$t+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$t+8>>2]=HEAP32[$arg0+8>>2]|0;
 ;HEAP32[$_3>>2]=HEAP32[$t>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$t+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$t+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN35__LT_core__ptr__Shared_LT_T_GT__GT_3new17h3b0b2338006050eeE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $_0$i = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $inner$i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0$i = sp + 16|0;
 $abi_cast = sp + 28|0;
 $_3 = sp + 8|0;
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $2 = $ptr;
 $arg0$i = $2;
 $3 = $arg0$i;
 $inner$i = $3;
 $4 = $inner$i;
 HEAP32[$_0$i>>2] = $4;
 $5 = HEAP32[$_0$i>>2]|0;
 HEAP32[$abi_cast>>2] = $5;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 ;HEAP32[$_0>>2]=HEAP32[$_3>>2]|0;
 $6 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN4drop17hf43aff40f4d7c1a3E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(296,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN13drop_contents17hf43aff40f4d7c1a3E($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZN13drop_contents17hf43aff40f4d7c1a3E($0);
  return;
 }
}
function __ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17hfeed11434924bcbdE($0) {
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h09133b74ab967b1bE($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 __ZN4drop17hd1c7c93f0a5f216aE($$sreg$field,$$sreg$field2);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17hf43aff40f4d7c1a3E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h750a45172de70821E($0);
 return;
}
function __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h09133b74ab967b1bE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17ha9e6a616520e2702E($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN4drop17hd1c7c93f0a5f216aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1<<4)|0);
 $3 = $0;
 while(1) {
  $5 = ($3|0)!=($2|0);
  if (!($5)) {
   break;
  }
  __ZN4drop17h88ffcfbb76e7d65aE($3);
  $4 = ((($3)) + 16|0);
  $3 = $4;
 }
 return;
}
function __ZN4core3ptr8null_mut17h5b6434c0916a567dE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17hc9f78c4091be16aaE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h7352a998d8034c95E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h40771c3671d8aae7E($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4core5slice18from_raw_parts_mut17h7090ccff9736f7b7E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 8|0;
 $_6 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_6>>2] = $4;
 $6 = ((($_6)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_6)) + 4|0);
 $8 = HEAP32[$_6>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$transmute_temp>>2] = $8;
 $10 = ((($transmute_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$transmute_temp>>2]|0;
 $12 = ((($transmute_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN11collections5slice4hack8into_vec17h5258c54e0ea13581E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0;
 var $_13 = 0, $_14 = 0, $arg0 = 0, $b = 0, $personalityslot = 0, $personalityslot$index4 = 0, $xs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $personalityslot = sp + 48|0;
 $_12 = sp + 32|0;
 $xs = sp + 16|0;
 $b = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_14 = 0;
 $_13 = 0;
 $_13 = 1;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$b>>2] = $4;
 $7 = ((($b)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$b>>2]|0;
 $9 = ((($b)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 $11 = (invoke_iii(254,($8|0),($10|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  $16 = HEAP32[$b>>2]|0;
  $17 = ((($b)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  __THREW__ = 0;
  $19 = (invoke_iii(297,($16|0),($18|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   $22 = HEAP32[$b>>2]|0;
   $23 = ((($b)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   __THREW__ = 0;
   $25 = (invoke_iii(297,($22|0),($24|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if (!($27)) {
    __THREW__ = 0;
    invoke_viiii(298,($xs|0),($11|0),($19|0),($25|0));
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $_14 = 1;
     $_13 = 0;
     $30 = HEAP32[$b>>2]|0;
     $31 = ((($b)) + 4|0);
     $32 = HEAP32[$31>>2]|0;
     __THREW__ = 0;
     invoke_vii(299,($30|0),($32|0));
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $_14 = 0;
      ;HEAP32[$_12>>2]=HEAP32[$xs>>2]|0;HEAP32[$_12+4>>2]=HEAP32[$xs+4>>2]|0;HEAP32[$_12+8>>2]=HEAP32[$xs+8>>2]|0;
      ;HEAP32[$0>>2]=HEAP32[$_12>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_12+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_12+8>>2]|0;
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $35 = ___cxa_find_matching_catch_2()|0;
 $36 = tempRet0;
 HEAP32[$personalityslot>>2] = $35;
 $personalityslot$index4 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index4>>2] = $36;
 $37 = $_14;
 $38 = $37&1;
 if ($38) {
  $_14 = 0;
  __ZN4drop17hf43aff40f4d7c1a3E($xs);
 }
 $14 = $_13;
 $15 = $14&1;
 if (!($15)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_13 = 0;
 __ZN4drop17h85795222ef50144eE($b);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17h76479bd8b01783fcE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h7f091810894b65b4E($7,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_14from_raw_parts17h4da7737b43689b2aE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_7 = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $capacity = 0, $length = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_7 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $arg2 = $3;
 $4 = $arg0;
 $ptr = $4;
 $5 = $arg1;
 $length = $5;
 $6 = $arg2;
 $capacity = $6;
 $7 = $ptr;
 $8 = $capacity;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_14from_raw_parts17h4b81998b5495d84cE($_7,$7,$8);
 $9 = $length;
 ;HEAP32[$0>>2]=HEAP32[$_7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_7+4>>2]|0;
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN4core3mem6forget17h0f4d5b9f24386c02E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$t>>2] = $3;
 $6 = ((($t)) + 4|0);
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN4drop17h85795222ef50144eE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN4drop17hd1c7c93f0a5f216aE($1,$3);
 __ZN5alloc4heap8box_free17h87483ddd8ce2b947E($1,$3);
 return;
}
function __ZN5alloc4heap8box_free17h87483ddd8ce2b947E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $arg0 = 0, $ptr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $ptr = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$ptr>>2] = $3;
 $6 = ((($ptr)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($ptr)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8<<4;
 $size = $9;
 $align = 4;
 $10 = $size;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$ptr>>2]|0;
 $13 = $size;
 $14 = $align;
 __ZN5alloc4heap10deallocate17haa41e924c0cbc050E_3($12,$13,$14);
 STACKTOP = sp;return;
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h7f091810894b65b4E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$transmute_temp>>2] = $7;
 $10 = ((($transmute_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($transmute_temp)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZN2ww12primary_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_19print_status_report17h355308555aafaeceE($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $_12 = 0, $_13 = 0, $_20 = 0, $_25 = 0, $_26 = 0, $_47 = 0, $_59 = 0, $_64 = 0, $_65 = 0, $_67 = 0, $_68 = 0;
 var $_7 = 0, $_74 = 0, $__arg0 = 0, $__arg01 = 0, $__arg02 = 0, $__arg1 = 0, $arg0 = 0, $item_names = 0, $personalityslot = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0, $personalityslot$index8 = 0, $self = 0, $tmp_ret = 0, $tmp_ret3 = 0, $tmp_ret4 = 0, $tmp_ret5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $tmp_ret5 = sp + 232|0;
 $personalityslot = sp + 224|0;
 $tmp_ret4 = sp + 216|0;
 $tmp_ret3 = sp + 208|0;
 $tmp_ret = sp + 200|0;
 $_68 = sp + 184|0;
 $_67 = sp + 168|0;
 $_65 = sp + 160|0;
 $_64 = sp + 152|0;
 $_59 = sp + 128|0;
 $item_names = sp + 112|0;
 $_47 = sp + 88|0;
 $_26 = sp + 80|0;
 $_25 = sp + 64|0;
 $_20 = sp + 40|0;
 $_13 = sp + 32|0;
 $_12 = sp + 24|0;
 $_7 = sp;
 $arg0 = $0;
 $_74 = 0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<=(10);
 if ($5) {
  $6 = HEAP32[1112]|0;
  $7 = HEAP32[(4452)>>2]|0;
  $8 = $self;
  $9 = ((($8)) + 20|0);
  HEAP32[$_13>>2] = $9;
  $10 = HEAP32[$_13>>2]|0;
  $__arg0 = $10;
  $11 = $__arg0;
  __ZN4core3fmt10ArgumentV13new17h25daa2abe202f87fE($tmp_ret,$11,162);
  $12 = ((($tmp_ret)) + 4|0);
  $13 = HEAP32[$tmp_ret>>2]|0;
  $14 = HEAP32[$12>>2]|0;
  HEAP32[$_12>>2] = $13;
  $15 = ((($_12)) + 4|0);
  HEAP32[$15>>2] = $14;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_7,$6,$7,$_12,1);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_7);
 }
 $16 = HEAP32[1114]|0;
 $17 = HEAP32[(4460)>>2]|0;
 $18 = $self;
 $19 = ((($18)) + 20|0);
 $20 = $self;
 $21 = ((($20)) + 32|0);
 HEAP32[$_26>>2] = $19;
 $22 = ((($_26)) + 4|0);
 HEAP32[$22>>2] = $21;
 $23 = HEAP32[$_26>>2]|0;
 $__arg01 = $23;
 $24 = ((($_26)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $__arg1 = $25;
 $26 = $__arg01;
 __ZN4core3fmt10ArgumentV13new17h25daa2abe202f87fE($tmp_ret3,$26,162);
 $27 = ((($tmp_ret3)) + 4|0);
 $28 = HEAP32[$tmp_ret3>>2]|0;
 $29 = HEAP32[$27>>2]|0;
 $30 = $__arg1;
 __ZN4core3fmt10ArgumentV13new17hd2627092d7876577E($tmp_ret4,$30,160);
 $31 = ((($tmp_ret4)) + 4|0);
 $32 = HEAP32[$tmp_ret4>>2]|0;
 $33 = HEAP32[$31>>2]|0;
 HEAP32[$_25>>2] = $28;
 $34 = ((($_25)) + 4|0);
 HEAP32[$34>>2] = $29;
 $35 = ((($_25)) + 8|0);
 HEAP32[$35>>2] = $32;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = $33;
 __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_20,$16,$17,$_25,2);
 __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_20);
 $37 = $self;
 __ZN2ww10game_state9GameState12print_wealth17hdf0aa4d03fe90c40E($37);
 $38 = $self;
 $39 = ((($38)) + 40|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)>(0);
 if ($41) {
  $42 = $self;
  __ZN2ww10game_state9GameState10print_food17h5b0b08a1349eb93bE($42);
 }
 $43 = $self;
 $44 = ((($43)) + 55|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&1;
 if ($46) {
  $47 = HEAP32[1116]|0;
  $48 = HEAP32[(4468)>>2]|0;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_47,$47,$48,23968,0);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_47);
 }
 $49 = $self;
 __THREW__ = 0;
 invoke_vii(300,($item_names|0),($49|0));
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 L10: do {
  if ($51) {
   label = 21;
  } else {
   $_74 = 1;
   __THREW__ = 0;
   $52 = (invoke_ii(210,($item_names|0))|0);
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   if ($54) {
    label = 21;
   } else {
    $55 = ($52>>>0)>(0);
    do {
     if ($55) {
      $56 = HEAP32[1118]|0;
      $57 = HEAP32[(4476)>>2]|0;
      $58 = $self;
      __THREW__ = 0;
      invoke_vii(300,($_68|0),($58|0));
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       label = 21;
       break L10;
      }
      __THREW__ = 0;
      invoke_vii(301,($_67|0),($_68|0));
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 21;
       break L10;
      }
      HEAP32[$_65>>2] = $_67;
      $63 = HEAP32[$_65>>2]|0;
      $__arg02 = $63;
      $64 = $__arg02;
      __THREW__ = 0;
      invoke_viii(231,($tmp_ret5|0),($64|0),(162|0));
      $65 = __THREW__; __THREW__ = 0;
      $66 = $65&1;
      if (!($66)) {
       $67 = ((($tmp_ret5)) + 4|0);
       $68 = HEAP32[$tmp_ret5>>2]|0;
       $69 = HEAP32[$67>>2]|0;
       HEAP32[$_64>>2] = $68;
       $70 = ((($_64)) + 4|0);
       HEAP32[$70>>2] = $69;
       __THREW__ = 0;
       invoke_viiiii(130,($_59|0),($56|0),($57|0),($_64|0),1);
       $71 = __THREW__; __THREW__ = 0;
       $72 = $71&1;
       if (!($72)) {
        __THREW__ = 0;
        invoke_vi(172,($_59|0));
        $73 = __THREW__; __THREW__ = 0;
        $74 = $73&1;
        if (!($74)) {
         __THREW__ = 0;
         invoke_vi(142,($_67|0));
         $75 = __THREW__; __THREW__ = 0;
         $76 = $75&1;
         if ($76) {
          label = 21;
          break L10;
         } else {
          break;
         }
        }
       }
      }
      $83 = ___cxa_find_matching_catch_2()|0;
      $84 = tempRet0;
      HEAP32[$personalityslot>>2] = $83;
      $personalityslot$index6 = ((($personalityslot)) + 4|0);
      HEAP32[$personalityslot$index6>>2] = $84;
      __ZN4drop17hdd1638425ff7362fE($_67);
      break L10;
     }
    } while(0);
    $_74 = 0;
    __THREW__ = 0;
    invoke_vi(192,($item_names|0));
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if (!($78)) {
     STACKTOP = sp;return;
    }
    $85 = ___cxa_find_matching_catch_2()|0;
    $86 = tempRet0;
    HEAP32[$personalityslot>>2] = $85;
    $personalityslot$index8 = ((($personalityslot)) + 4|0);
    HEAP32[$personalityslot$index8>>2] = $86;
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index1 = ((($personalityslot)) + 4|0);
    $$field2 = HEAP32[$$index1>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 21) {
  $81 = ___cxa_find_matching_catch_2()|0;
  $82 = tempRet0;
  HEAP32[$personalityslot>>2] = $81;
  $personalityslot$index4 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index4>>2] = $82;
 }
 $79 = $_74;
 $80 = $79&1;
 if (!($80)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_74 = 0;
 __ZN4drop17h4913d7746a6e2c06E($item_names);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN2ww12primary_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_13describe_room17hc3f97d58c5550ee7E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_15 = 0, $_16 = 0, $_5 = 0, $__arg0 = 0, $amount = 0, $arg0 = 0;
 var $room = 0, $self = 0, $switch = 0, $switch1 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $tmp_ret = sp + 40|0;
 $_16 = sp + 32|0;
 $_15 = sp + 24|0;
 $_10 = sp;
 $amount = sp + 65|0;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP32[$2>>2]|0;
 $4 = $self;
 $5 = ((($4)) + 57|0);
 $6 = HEAP8[$5>>0]|0;
 $_5 = $6;
 $7 = $_5;
 $8 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_4room17h34a8fe8d447e3c3eE($3,$7)|0);
 $room = $8;
 $9 = $room;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($10)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 __ZN2ww8platform21writeln_with_wrapping17hd87f6940e84ffa47E($11,$13);
 $14 = $room;
 $15 = ((($14)) + 28|0);
 $16 = HEAP8[$15>>0]|0;
 $switch1 = ($16&255)<(1);
 if ($switch1) {
  STACKTOP = sp;return;
 }
 $17 = $room;
 $18 = ((($17)) + 28|0);
 $19 = ((($18)) + 1|0);
 $20 = HEAP8[$19>>0]|0;
 $switch = ($20&255)<(1);
 if (!($switch)) {
  STACKTOP = sp;return;
 }
 $21 = $room;
 $22 = ((($21)) + 28|0);
 $23 = ((($22)) + 1|0);
 $24 = ((($23)) + 1|0);
 $25 = HEAP8[$24>>0]|0;
 HEAP8[$amount>>0] = $25;
 $26 = HEAP32[1104]|0;
 $27 = HEAP32[(4420)>>2]|0;
 HEAP32[$_16>>2] = $amount;
 $28 = HEAP32[$_16>>2]|0;
 $__arg0 = $28;
 $29 = $__arg0;
 __ZN4core3fmt10ArgumentV13new17h5e4d74052f0565e7E($tmp_ret,$29,163);
 $30 = ((($tmp_ret)) + 4|0);
 $31 = HEAP32[$tmp_ret>>2]|0;
 $32 = HEAP32[$30>>2]|0;
 HEAP32[$_15>>2] = $31;
 $33 = ((($_15)) + 4|0);
 HEAP32[$33>>2] = $32;
 __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_10,$26,$27,$_15,1);
 __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_10);
 STACKTOP = sp;return;
}
function __ZN2ww6combat57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_18maybe_start_combat17h4423803e04bffb9eE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_17 = 0, $_22 = 0, $_23 = 0, $_34 = 0, $_39 = 0, $_40 = 0, $_49 = 0, $_50 = 0, $_51 = 0, $_52 = 0, $_6 = 0;
 var $_9 = 0, $__arg0 = 0, $__arg01 = 0, $arg0 = 0, $ff = 0, $monster_id = 0, $self = 0, $switch = 0, $switch1 = 0, $tmp_ret = 0, $tmp_ret2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $tmp_ret2 = sp + 136|0;
 $tmp_ret = sp + 128|0;
 $_50 = sp + 120|0;
 $_49 = sp + 104|0;
 $_40 = sp + 96|0;
 $_39 = sp + 88|0;
 $_34 = sp + 64|0;
 $ff = sp + 156|0;
 $_23 = sp + 56|0;
 $_22 = sp + 48|0;
 $_17 = sp + 24|0;
 $_9 = sp;
 $monster_id = sp + 166|0;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP32[$2>>2]|0;
 $4 = $self;
 $5 = ((($4)) + 57|0);
 $6 = HEAP8[$5>>0]|0;
 $_6 = $6;
 $7 = $_6;
 $8 = (__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_4room17h34a8fe8d447e3c3eE($3,$7)|0);
 $9 = ((($8)) + 28|0);
 $10 = HEAP8[$9>>0]|0;
 $switch1 = ($10&255)<(1);
 if (!($switch1)) {
  $11 = ((($8)) + 28|0);
  $12 = ((($11)) + 1|0);
  $13 = HEAP8[$12>>0]|0;
  $switch = ($13&255)<(1);
  if (!($switch)) {
   $14 = ((($8)) + 28|0);
   $15 = ((($14)) + 1|0);
   $16 = ((($15)) + 1|0);
   $17 = HEAP8[$16>>0]|0;
   HEAP8[$monster_id>>0] = $17;
   $18 = HEAP32[1038]|0;
   $19 = HEAP32[(4156)>>2]|0;
   __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_9,$18,$19,23968,0);
   __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_9);
   __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
   $20 = HEAP32[1040]|0;
   $21 = HEAP32[(4164)>>2]|0;
   HEAP32[$_23>>2] = $monster_id;
   $22 = HEAP32[$_23>>2]|0;
   $__arg0 = $22;
   $23 = $__arg0;
   __ZN4core3fmt10ArgumentV13new17hd7bb120a03608de5E($tmp_ret,$23,168);
   $24 = ((($tmp_ret)) + 4|0);
   $25 = HEAP32[$tmp_ret>>2]|0;
   $26 = HEAP32[$24>>2]|0;
   HEAP32[$_22>>2] = $25;
   $27 = ((($_22)) + 4|0);
   HEAP32[$27>>2] = $26;
   __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_17,$20,$21,$_22,1);
   __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_17);
   $28 = $self;
   $29 = (__ZN2ww8monsters9MonsterId15ferocity_factor17h42a58358de54acdbE($monster_id)|0);
   $30 = (__ZN2ww6combat57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_15get_modified_ff17h0e50dc1d336d9aeaE($28,$29)|0);
   HEAP32[$ff>>2] = $30;
   $31 = HEAP32[1042]|0;
   $32 = HEAP32[(4172)>>2]|0;
   HEAP32[$_40>>2] = $ff;
   $33 = HEAP32[$_40>>2]|0;
   $__arg01 = $33;
   $34 = $__arg01;
   __ZN4core3fmt10ArgumentV13new17hd2627092d7876577E($tmp_ret2,$34,160);
   $35 = ((($tmp_ret2)) + 4|0);
   $36 = HEAP32[$tmp_ret2>>2]|0;
   $37 = HEAP32[$35>>2]|0;
   HEAP32[$_39>>2] = $36;
   $38 = ((($_39)) + 4|0);
   HEAP32[$38>>2] = $37;
   __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_34,$31,$32,$_39,1);
   __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_34);
   __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
   $39 = $self;
   $_51 = 0;
   $40 = HEAP8[$monster_id>>0]|0;
   $_52 = $40;
   $41 = HEAP32[$ff>>2]|0;
   $42 = $_51;
   HEAP8[$_50>>0] = $42;
   $43 = $_52;
   $44 = ((($_50)) + 1|0);
   HEAP8[$44>>0] = $43;
   $45 = ((($_50)) + 4|0);
   HEAP32[$45>>2] = $41;
   HEAP32[$_49>>2] = 4;
   $46 = ((($_49)) + 4|0);
   ;HEAP32[$46>>2]=HEAP32[$_50>>2]|0;HEAP32[$46+4>>2]=HEAP32[$_50+4>>2]|0;
   __ZN2ww10game_state9GameState8set_mode17h3a836e9183396082E($39,$_49);
   $_0 = 1;
   $47 = $_0;
   $48 = $47&1;
   STACKTOP = sp;return ($48|0);
  }
 }
 $_0 = 0;
 $47 = $_0;
 $48 = $47&1;
 STACKTOP = sp;return ($48|0);
}
function __ZN2ww12primary_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_10use_amulet17h712ea01137121b1dE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13 = 0, $_17 = 0, $_22 = 0, $_23 = 0, $__arg0 = 0, $arg0 = 0, $room_id = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $tmp_ret = sp + 40|0;
 $_23 = sp + 32|0;
 $_22 = sp + 24|0;
 $_17 = sp;
 $room_id = sp + 60|0;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 53|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if (!($5)) {
  $6 = HEAP32[1030]|0;
  $7 = HEAP32[(4124)>>2]|0;
  $8 = $self;
  $9 = ((($8)) + 20|0);
  HEAP32[$_23>>2] = $9;
  $10 = HEAP32[$_23>>2]|0;
  $__arg0 = $10;
  $11 = $__arg0;
  __ZN4core3fmt10ArgumentV13new17h25daa2abe202f87fE($tmp_ret,$11,162);
  $12 = ((($tmp_ret)) + 4|0);
  $13 = HEAP32[$tmp_ret>>2]|0;
  $14 = HEAP32[$12>>2]|0;
  HEAP32[$_22>>2] = $13;
  $15 = ((($_22)) + 4|0);
  HEAP32[$15>>2] = $14;
  __ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4($_17,$6,$7,$_22,1);
  __ZN3std2io5stdio6_print17hc89678418da2f1ecE($_17);
  STACKTOP = sp;return;
 }
 __ZN2ww8platform21writeln_with_wrapping17hd87f6940e84ffa47E(13952,69);
 __ZN2ww10game_state9GameState5pause17h4700730896badf5fE();
 while(1) {
  $16 = (__ZN2ww10sized_enum9SizedEnum6random17hce5291f2bea86cd9E()|0);
  HEAP8[$room_id>>0] = $16;
  $17 = $self;
  $18 = ((($17)) + 57|0);
  $19 = (__ZN4core3cmp9PartialEq2ne17hf809d2c016605710E($room_id,$18)|0);
  if ($19) {
   break;
  }
 }
 $20 = HEAP8[$room_id>>0]|0;
 $_13 = $20;
 $21 = $self;
 $22 = ((($21)) + 57|0);
 $23 = $_13;
 HEAP8[$22>>0] = $23;
 $24 = $self;
 $25 = ((($24)) + 58|0);
 HEAP8[$25>>0] = 1;
 $26 = $self;
 __ZN2ww10game_state9GameState12process_move17h4946846e8e1152f7E($26);
 STACKTOP = sp;return;
}
function __ZN41__LT_ww__room__Room_LT_T_C__u20_C_GT__GT_8get_exit17hc7cc83c046e9cfc1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_5 = 0, $_7 = 0, $arg0 = 0, $arg1 = 0, $d = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_5 = sp + 72|0;
 $self = sp + 40|0;
 $_0 = sp + 32|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$0>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$arg0+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$arg0+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$arg0+20>>2]=HEAP32[$0+20>>2]|0;HEAP32[$arg0+24>>2]=HEAP32[$0+24>>2]|0;HEAP32[$arg0+28>>2]=HEAP32[$0+28>>2]|0;
 $arg1 = $1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;HEAP32[$self+12>>2]=HEAP32[$arg0+12>>2]|0;HEAP32[$self+16>>2]=HEAP32[$arg0+16>>2]|0;HEAP32[$self+20>>2]=HEAP32[$arg0+20>>2]|0;HEAP32[$self+24>>2]=HEAP32[$arg0+24>>2]|0;HEAP32[$self+28>>2]=HEAP32[$arg0+28>>2]|0;
 $2 = $arg1;
 $d = $2;
 $3 = $d;
 $_7 = $3;
 $4 = $_7;
 $5 = $4&255;
 $6 = ($5>>>0)<(6);
 $7 = $6;
 if ($7) {
  $8 = (($self) + ($5<<1)|0);
  ;HEAP8[$_5>>0]=HEAP8[$8>>0]|0;HEAP8[$_5+1>>0]=HEAP8[$8+1>>0]|0;
  ;HEAP8[$_0>>0]=HEAP8[$_5>>0]|0;HEAP8[$_0+1>>0]=HEAP8[$_5+1>>0]|0;
  $9 = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
  STACKTOP = sp;return ($9|0);
 } else {
  __ZN4core9panicking18panic_bounds_check17h196ab917033e60b3E(4108,$5,6);
  // unreachable;
 }
 return (0)|0;
}
function __ZN4core3fmt10ArgumentV13new17h5e4d74052f0565e7E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $f = 0, $transmute_temp = 0, $transmute_temp1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp1 = sp + 20|0;
 $transmute_temp = sp + 16|0;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $x = $3;
 $4 = $arg1;
 $f = $4;
 $5 = $f;
 HEAP32[$transmute_temp>>2] = $5;
 $6 = HEAP32[$transmute_temp>>2]|0;
 $7 = $x;
 HEAP32[$transmute_temp1>>2] = $7;
 $8 = HEAP32[$transmute_temp1>>2]|0;
 HEAP32[$0>>2] = $8;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN2ww7command16CommandProcessor6prompt17h8dbfd372223b0b15E($retVal) {
 $retVal = $retVal|0;
 var $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$retVal>>2] = 14183;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = 24;
 return;
}
function __ZN2ww7command16CommandProcessor9show_help17h782b966cb7deee89E() {
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$field = 0, $$field5 = 0, $$index4 = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_15 = 0, $_2 = 0, $_20 = 0, $_21 = 0;
 var $_3 = 0, $_7 = 0, $__arg0 = 0, $__arg1 = 0, $info = 0, $iter = 0, $personalityslot = 0, $personalityslot$index7 = 0, $personalityslot$index9 = 0, $switch = 0, $tmp_ret = 0, $tmp_ret1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $0 = sp;
 $tmp_ret1 = sp + 112|0;
 $tmp_ret = sp + 104|0;
 $personalityslot = sp + 96|0;
 $_21 = sp + 88|0;
 $_20 = sp + 72|0;
 $_15 = sp + 48|0;
 $_10 = sp + 120|0;
 $iter = sp + 40|0;
 $_7 = sp + 24|0;
 $_3 = sp + 16|0;
 $_2 = sp + 8|0;
 __ZN122__LT_ww__primary_mode__PrimaryCommand_u20_as_u20_ww__command__CommandProcessor_LT_ww__primary_mode__PrimaryCommand_GT__GT_8get_help17hf768155b72063d9cE($_7);
 __THREW__ = 0;
 invoke_vii(235,($0|0),($_7|0));
 $$sreg$field = HEAP32[$0>>2]|0;
 $$sreg$index1 = ((($0)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   __THREW__ = 0;
   invoke_viii(236,($_3|0),($$sreg$field|0),($$sreg$field2|0));
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if (!($4)) {
    __THREW__ = 0;
    invoke_vii(237,($_2|0),($_3|0));
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     ;HEAP32[$iter>>2]=HEAP32[$_2>>2]|0;HEAP32[$iter+4>>2]=HEAP32[$_2+4>>2]|0;
     while(1) {
      __THREW__ = 0;
      $7 = (invoke_ii(238,($iter|0))|0);
      $8 = __THREW__; __THREW__ = 0;
      $9 = $8&1;
      if ($9) {
       break L1;
      }
      HEAP32[$_10>>2] = $7;
      $10 = HEAP32[$_10>>2]|0;
      $11 = ($10|0)!=(0|0);
      $$expand_i1_val = $11&1;
      $$expand_i1_val10 = 1;
      $switch = ($$expand_i1_val&255)<($$expand_i1_val10&255);
      if ($switch) {
       break;
      }
      $14 = HEAP32[$_10>>2]|0;
      $info = $14;
      $15 = HEAP32[585]|0;
      $16 = HEAP32[(2344)>>2]|0;
      $17 = $info;
      $18 = $info;
      $19 = ((($18)) + 4|0);
      HEAP32[$_21>>2] = $17;
      $20 = ((($_21)) + 4|0);
      HEAP32[$20>>2] = $19;
      $21 = HEAP32[$_21>>2]|0;
      $__arg0 = $21;
      $22 = ((($_21)) + 4|0);
      $23 = HEAP32[$22>>2]|0;
      $__arg1 = $23;
      $24 = $__arg0;
      __THREW__ = 0;
      invoke_viii(240,($tmp_ret|0),($24|0),(241|0));
      $25 = __THREW__; __THREW__ = 0;
      $26 = $25&1;
      if ($26) {
       break L1;
      }
      $27 = ((($tmp_ret)) + 4|0);
      $28 = HEAP32[$tmp_ret>>2]|0;
      $29 = HEAP32[$27>>2]|0;
      $30 = $__arg1;
      __THREW__ = 0;
      invoke_viii(231,($tmp_ret1|0),($30|0),(162|0));
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       break L1;
      }
      $33 = ((($tmp_ret1)) + 4|0);
      $34 = HEAP32[$tmp_ret1>>2]|0;
      $35 = HEAP32[$33>>2]|0;
      HEAP32[$_20>>2] = $28;
      $36 = ((($_20)) + 4|0);
      HEAP32[$36>>2] = $29;
      $37 = ((($_20)) + 8|0);
      HEAP32[$37>>2] = $34;
      $38 = ((($37)) + 4|0);
      HEAP32[$38>>2] = $35;
      __THREW__ = 0;
      invoke_viiiii(130,($_15|0),($15|0),($16|0),($_20|0),2);
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       break L1;
      }
      __THREW__ = 0;
      invoke_vi(172,($_15|0));
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       break L1;
      }
     }
     __THREW__ = 0;
     invoke_vi(239,($_7|0));
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if (!($13)) {
      STACKTOP = sp;return;
     }
     $45 = ___cxa_find_matching_catch_2()|0;
     $46 = tempRet0;
     HEAP32[$personalityslot>>2] = $45;
     $personalityslot$index9 = ((($personalityslot)) + 4|0);
     HEAP32[$personalityslot$index9>>2] = $46;
     $$field = HEAP32[$personalityslot>>2]|0;
     $$index4 = ((($personalityslot)) + 4|0);
     $$field5 = HEAP32[$$index4>>2]|0;
     ___resumeException($$field|0);
     // unreachable;
    }
   }
  }
 } while(0);
 $43 = ___cxa_find_matching_catch_2()|0;
 $44 = tempRet0;
 HEAP32[$personalityslot>>2] = $43;
 $personalityslot$index7 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index7>>2] = $44;
 __ZN4drop17hc6bc1b4e0e470747E($_7);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index4 = ((($personalityslot)) + 4|0);
 $$field5 = HEAP32[$$index4>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN122__LT_ww__primary_mode__PrimaryCommand_u20_as_u20_ww__command__CommandProcessor_LT_ww__primary_mode__PrimaryCommand_GT__GT_8get_help17hf768155b72063d9cE($0) {
 $0 = $0|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_1 = 0, $_12 = 0, $_15 = 0, $_18 = 0, $_21 = 0, $_24 = 0, $_27 = 0, $_30 = 0, $_33 = 0, $_36 = 0, $_5 = 0, $_6 = 0, $_9 = 0, $personalityslot = 0, $personalityslot$index1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $personalityslot = sp + 208|0;
 $_36 = sp + 192|0;
 $_33 = sp + 176|0;
 $_30 = sp + 160|0;
 $_27 = sp + 144|0;
 $_24 = sp + 128|0;
 $_21 = sp + 112|0;
 $_18 = sp + 96|0;
 $_15 = sp + 80|0;
 $_12 = sp + 64|0;
 $_9 = sp + 48|0;
 $_6 = sp + 32|0;
 $_5 = sp + 16|0;
 $_1 = sp;
 $1 = (__ZN5alloc4heap15exchange_malloc17hd01efcfa98f30e00E(144,4)|0);
 HEAP32[$_5>>2] = 110;
 $2 = ((($_5)) + 4|0);
 HEAP32[$2>>2] = 14048;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 8;
 HEAP32[$_6>>2] = 115;
 $4 = ((($_6)) + 4|0);
 HEAP32[$4>>2] = 14056;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 8;
 HEAP32[$_9>>2] = 101;
 $6 = ((($_9)) + 4|0);
 HEAP32[$6>>2] = 14064;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 7;
 HEAP32[$_12>>2] = 119;
 $8 = ((($_12)) + 4|0);
 HEAP32[$8>>2] = 14071;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = 7;
 HEAP32[$_15>>2] = 117;
 $10 = ((($_15)) + 4|0);
 HEAP32[$10>>2] = 14078;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = 5;
 HEAP32[$_18>>2] = 100;
 $12 = ((($_18)) + 4|0);
 HEAP32[$12>>2] = 14083;
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = 7;
 HEAP32[$_21>>2] = 99;
 $14 = ((($_21)) + 4|0);
 HEAP32[$14>>2] = 14090;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 12;
 HEAP32[$_24>>2] = 109;
 $16 = ((($_24)) + 4|0);
 HEAP32[$16>>2] = 14102;
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = 30;
 HEAP32[$_27>>2] = 105;
 $18 = ((($_27)) + 4|0);
 HEAP32[$18>>2] = 14132;
 $19 = ((($18)) + 4|0);
 HEAP32[$19>>2] = 24;
 HEAP32[$_30>>2] = 112;
 $20 = ((($_30)) + 4|0);
 HEAP32[$20>>2] = 14156;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = 16;
 HEAP32[$_33>>2] = 108;
 $22 = ((($_33)) + 4|0);
 HEAP32[$22>>2] = 14172;
 $23 = ((($22)) + 4|0);
 HEAP32[$23>>2] = 11;
 HEAP32[$_36>>2] = 113;
 $24 = ((($_36)) + 4|0);
 HEAP32[$24>>2] = 13317;
 $25 = ((($24)) + 4|0);
 HEAP32[$25>>2] = 4;
 ;HEAP32[$1>>2]=HEAP32[$_5>>2]|0;HEAP32[$1+4>>2]=HEAP32[$_5+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$_5+8>>2]|0;
 $26 = ((($1)) + 12|0);
 ;HEAP32[$26>>2]=HEAP32[$_6>>2]|0;HEAP32[$26+4>>2]=HEAP32[$_6+4>>2]|0;HEAP32[$26+8>>2]=HEAP32[$_6+8>>2]|0;
 $27 = ((($1)) + 24|0);
 ;HEAP32[$27>>2]=HEAP32[$_9>>2]|0;HEAP32[$27+4>>2]=HEAP32[$_9+4>>2]|0;HEAP32[$27+8>>2]=HEAP32[$_9+8>>2]|0;
 $28 = ((($1)) + 36|0);
 ;HEAP32[$28>>2]=HEAP32[$_12>>2]|0;HEAP32[$28+4>>2]=HEAP32[$_12+4>>2]|0;HEAP32[$28+8>>2]=HEAP32[$_12+8>>2]|0;
 $29 = ((($1)) + 48|0);
 ;HEAP32[$29>>2]=HEAP32[$_15>>2]|0;HEAP32[$29+4>>2]=HEAP32[$_15+4>>2]|0;HEAP32[$29+8>>2]=HEAP32[$_15+8>>2]|0;
 $30 = ((($1)) + 60|0);
 ;HEAP32[$30>>2]=HEAP32[$_18>>2]|0;HEAP32[$30+4>>2]=HEAP32[$_18+4>>2]|0;HEAP32[$30+8>>2]=HEAP32[$_18+8>>2]|0;
 $31 = ((($1)) + 72|0);
 ;HEAP32[$31>>2]=HEAP32[$_21>>2]|0;HEAP32[$31+4>>2]=HEAP32[$_21+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$_21+8>>2]|0;
 $32 = ((($1)) + 84|0);
 ;HEAP32[$32>>2]=HEAP32[$_24>>2]|0;HEAP32[$32+4>>2]=HEAP32[$_24+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$_24+8>>2]|0;
 $33 = ((($1)) + 96|0);
 ;HEAP32[$33>>2]=HEAP32[$_27>>2]|0;HEAP32[$33+4>>2]=HEAP32[$_27+4>>2]|0;HEAP32[$33+8>>2]=HEAP32[$_27+8>>2]|0;
 $34 = ((($1)) + 108|0);
 ;HEAP32[$34>>2]=HEAP32[$_30>>2]|0;HEAP32[$34+4>>2]=HEAP32[$_30+4>>2]|0;HEAP32[$34+8>>2]=HEAP32[$_30+8>>2]|0;
 $35 = ((($1)) + 120|0);
 ;HEAP32[$35>>2]=HEAP32[$_33>>2]|0;HEAP32[$35+4>>2]=HEAP32[$_33+4>>2]|0;HEAP32[$35+8>>2]=HEAP32[$_33+8>>2]|0;
 $36 = ((($1)) + 132|0);
 ;HEAP32[$36>>2]=HEAP32[$_36>>2]|0;HEAP32[$36+4>>2]=HEAP32[$_36+4>>2]|0;HEAP32[$36+8>>2]=HEAP32[$_36+8>>2]|0;
 __THREW__ = 0;
 invoke_viii(302,($_1|0),($1|0),12);
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 if ($38) {
  $41 = ___cxa_find_matching_catch_2()|0;
  $42 = tempRet0;
  HEAP32[$personalityslot>>2] = $41;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $42;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(303,($0|0),($_1|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $41 = ___cxa_find_matching_catch_2()|0;
  $42 = tempRet0;
  HEAP32[$personalityslot>>2] = $41;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $42;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_8into_vec17hf6e7d3169b903ee0E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 invoke_viii(304,($0|0),($8|0),($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch_2()|0;
  $14 = tempRet0;
  HEAP32[$personalityslot>>2] = $13;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $14;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN2ww7command8HelpInfo4list17h840c95d9334207d2E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $_4 = 0, $_5 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $personalityslot = sp + 80|0;
 $_5 = sp + 64|0;
 $_4 = sp + 48|0;
 $_3 = sp + 32|0;
 $v = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;
 ;HEAP32[$v>>2]=HEAP32[$arg0>>2]|0;HEAP32[$v+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$v+8>>2]=HEAP32[$arg0+8>>2]|0;
 ;HEAP32[$_5>>2]=HEAP32[$v>>2]|0;HEAP32[$_5+4>>2]=HEAP32[$v+4>>2]|0;HEAP32[$_5+8>>2]=HEAP32[$v+8>>2]|0;
 __THREW__ = 0;
 invoke_vii(305,($_4|0),($_5|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  __THREW__ = 0;
  invoke_vii(306,($_3|0),($_4|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if (!($5)) {
   __THREW__ = 0;
   invoke_vii(307,($0|0),($_3|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    STACKTOP = sp;return;
   }
  }
 }
 $8 = ___cxa_find_matching_catch_2()|0;
 $9 = tempRet0;
 HEAP32[$personalityslot>>2] = $8;
 $personalityslot$index1 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index1>>2] = $9;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN83__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hf4bbb4aed4872c5bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field5 = 0, $$index4 = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $_29 = 0, $_30 = 0, $_36 = 0;
 var $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $begin = 0, $cap = 0, $end = 0, $personalityslot = 0, $personalityslot$index7 = 0, $self = 0, $self$i = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $2 = sp;
 $abi_cast = sp + 88|0;
 $personalityslot = sp + 64|0;
 $_30 = sp + 56|0;
 $_29 = sp + 40|0;
 $self = sp + 24|0;
 $arg0 = sp + 8|0;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;
 $_36 = 0;
 $_36 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;
 __THREW__ = 0;
 invoke_vii(308,($2|0),($self|0));
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   __THREW__ = 0;
   $5 = (invoke_iii(309,($$sreg$field|0),($$sreg$field2|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    $begin = $5;
    $8 = $begin;
    __THREW__ = 0;
    (invoke_ii(310,($8|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if (!($10)) {
     __THREW__ = 0;
     $11 = (invoke_i(311)|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if (!($13)) {
      $14 = ($11|0)==(0);
      $15 = $begin;
      if ($14) {
       __THREW__ = 0;
       $16 = (invoke_ii(312,($self|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if ($18) {
        break;
       }
       $22 = (($15) + ($16)|0);
       $tmp_ret = $22;
       $23 = $tmp_ret;
       $end = $23;
      } else {
       __THREW__ = 0;
       $19 = (invoke_ii(312,($self|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if ($21) {
        break;
       }
       __THREW__ = 0;
       $24 = (invoke_iii(313,($15|0),($19|0))|0);
       $25 = __THREW__; __THREW__ = 0;
       $26 = $25&1;
       if ($26) {
        break;
       }
       $end = $24;
      }
      $arg0$i = $self;
      $27 = $arg0$i;
      $self$i = $27;
      __THREW__ = 0;
      $28 = (invoke_i(311)|0);
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       $31 = ($28|0)==(0);
       if ($31) {
        $_0$i = -1;
       } else {
        $32 = $self$i;
        $33 = ((($32)) + 4|0);
        $34 = HEAP32[$33>>2]|0;
        $_0$i = $34;
       }
       $35 = $_0$i;
       $cap = $35;
       $_36 = 0;
       ;HEAP32[$_29>>2]=HEAP32[$self>>2]|0;HEAP32[$_29+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$_29+8>>2]=HEAP32[$self+8>>2]|0;
       __THREW__ = 0;
       invoke_vi(314,($_29|0));
       $36 = __THREW__; __THREW__ = 0;
       $37 = $36&1;
       if (!($37)) {
        $38 = $begin;
        __THREW__ = 0;
        $39 = (invoke_ii(315,($38|0))|0);
        $40 = __THREW__; __THREW__ = 0;
        $41 = $40&1;
        if (!($41)) {
         HEAP32[$abi_cast>>2] = $39;
         ;HEAP32[$_30>>2]=HEAP32[$abi_cast>>2]|0;
         $42 = $cap;
         $43 = $begin;
         $44 = $end;
         ;HEAP32[$0>>2]=HEAP32[$_30>>2]|0;
         $45 = ((($0)) + 4|0);
         HEAP32[$45>>2] = $42;
         $46 = ((($0)) + 8|0);
         HEAP32[$46>>2] = $43;
         $47 = ((($0)) + 12|0);
         HEAP32[$47>>2] = $44;
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $48 = ___cxa_find_matching_catch_2()|0;
 $49 = tempRet0;
 HEAP32[$personalityslot>>2] = $48;
 $personalityslot$index7 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index7>>2] = $49;
 $50 = $_36;
 $51 = $50&1;
 if (!($51)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index4 = ((($personalityslot)) + 4|0);
  $$field5 = HEAP32[$$index4>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_36 = 0;
 __ZN4drop17h67e397ff44d4d25fE($self);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index4 = ((($personalityslot)) + 4|0);
 $$field5 = HEAP32[$$index4>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4core4iter8iterator8Iterator3map17he08d85f93eb0f510E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $_5 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_5 = sp + 32|0;
 $self = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg0+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;HEAP32[$self+12>>2]=HEAP32[$arg0+12>>2]|0;
 ;HEAP32[$_5>>2]=HEAP32[$self>>2]|0;HEAP32[$_5+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$_5+8>>2]=HEAP32[$self+8>>2]|0;HEAP32[$_5+12>>2]=HEAP32[$self+12>>2]|0;
 ;HEAP32[$0>>2]=HEAP32[$_5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_5+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_5+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$_5+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN4core4iter8iterator8Iterator7collect17hf9276b258f7ba71eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_3 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $personalityslot = sp + 48|0;
 $_3 = sp + 32|0;
 $self = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg0+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;HEAP32[$self+12>>2]=HEAP32[$arg0+12>>2]|0;
 ;HEAP32[$_3>>2]=HEAP32[$self>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$self+8>>2]|0;HEAP32[$_3+12>>2]=HEAP32[$self+12>>2]|0;
 __THREW__ = 0;
 invoke_vii(316,($0|0),($_3|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  HEAP32[$personalityslot>>2] = $4;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $5;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN92__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__iter__traits__FromIterator_LT_T_GT__GT_9from_iter17he659a6c711dc4305E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_3 = 0, $_4 = 0, $arg0 = 0, $iter = 0, $personalityslot = 0, $personalityslot$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $personalityslot = sp + 64|0;
 $_4 = sp + 48|0;
 $_3 = sp + 32|0;
 $iter = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg0+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$iter>>2]=HEAP32[$arg0>>2]|0;HEAP32[$iter+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$iter+8>>2]=HEAP32[$arg0+8>>2]|0;HEAP32[$iter+12>>2]=HEAP32[$arg0+12>>2]|0;
 ;HEAP32[$_4>>2]=HEAP32[$iter>>2]|0;HEAP32[$_4+4>>2]=HEAP32[$iter+4>>2]|0;HEAP32[$_4+8>>2]=HEAP32[$iter+8>>2]|0;HEAP32[$_4+12>>2]=HEAP32[$iter+12>>2]|0;
 __THREW__ = 0;
 invoke_vii(317,($_3|0),($_4|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  __THREW__ = 0;
  invoke_vii(318,($0|0),($_3|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if (!($5)) {
   STACKTOP = sp;return;
  }
 }
 $6 = ___cxa_find_matching_catch_2()|0;
 $7 = tempRet0;
 HEAP32[$personalityslot>>2] = $6;
 $personalityslot$index1 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index1>>2] = $7;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index2 = ((($personalityslot)) + 4|0);
 $$field3 = HEAP32[$$index2>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hc9c13e5159a5b0c9E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $_3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_3 = sp + 32|0;
 $self = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg0+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;HEAP32[$self+12>>2]=HEAP32[$arg0+12>>2]|0;
 ;HEAP32[$_3>>2]=HEAP32[$self>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$self+8>>2]|0;HEAP32[$_3+12>>2]=HEAP32[$self+12>>2]|0;
 ;HEAP32[$0>>2]=HEAP32[$_3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$_3+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN97__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT_T_C__u20_I_GT__GT_9from_iter17h8364c7dedcf486c1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $_7 = 0, $_8 = 0, $_9 = 0, $arg0 = 0, $iterator = 0, $personalityslot = 0;
 var $personalityslot$index4 = 0, $vector = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $personalityslot = sp + 80|0;
 $_7 = sp + 64|0;
 $_6 = sp + 48|0;
 $vector = sp + 32|0;
 $iterator = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg0+12>>2]=HEAP32[$1+12>>2]|0;
 $_9 = 0;
 $_8 = 0;
 $_8 = 1;
 ;HEAP32[$iterator>>2]=HEAP32[$arg0>>2]|0;HEAP32[$iterator+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$iterator+8>>2]=HEAP32[$arg0+8>>2]|0;HEAP32[$iterator+12>>2]=HEAP32[$arg0+12>>2]|0;
 __THREW__ = 0;
 invoke_vi(264,($vector|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $_9 = 1;
  $_8 = 0;
  ;HEAP32[$_6>>2]=HEAP32[$iterator>>2]|0;HEAP32[$_6+4>>2]=HEAP32[$iterator+4>>2]|0;HEAP32[$_6+8>>2]=HEAP32[$iterator+8>>2]|0;HEAP32[$_6+12>>2]=HEAP32[$iterator+12>>2]|0;
  __THREW__ = 0;
  invoke_vii(319,($vector|0),($_6|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   $_9 = 0;
   ;HEAP32[$_7>>2]=HEAP32[$vector>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$vector+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$vector+8>>2]|0;
   ;HEAP32[$0>>2]=HEAP32[$_7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_7+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_7+8>>2]|0;
   STACKTOP = sp;return;
  }
 }
 $8 = ___cxa_find_matching_catch_2()|0;
 $9 = tempRet0;
 HEAP32[$personalityslot>>2] = $8;
 $personalityslot$index4 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index4>>2] = $9;
 $10 = $_9;
 $11 = $10&1;
 if ($11) {
  $_9 = 0;
  __ZN4drop17hc6bc1b4e0e470747E($vector);
 }
 $4 = $_8;
 $5 = $4&1;
 if (!($5)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_8 = 0;
 __ZN4drop17hbd0cf8368b25a29fE($iterator);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN97__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT_T_C__u20_I_GT__GT_11spec_extend17hd8f9a3affcdc588bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val20 = 0, $$expand_i1_val21 = 0, $$expand_i1_val22 = 0, $$expand_i1_val23 = 0, $$expand_i1_val24 = 0, $$field = 0, $$field6 = 0, $$index5 = 0, $$sreg$field = 0, $$sreg$field9 = 0, $$sreg$index8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $_29 = 0, $_30 = 0, $_32 = 0, $_38 = 0, $_45 = 0, $_46 = 0;
 var $_47 = 0, $_48 = 0, $_7 = 0, $additional = 0, $arg0 = 0, $arg1 = 0, $element = 0, $high = 0, $high_value = 0, $iter = 0, $iterator = 0, $local_len = 0, $low = 0, $personalityslot = 0, $personalityslot$index11 = 0, $personalityslot$index13 = 0, $personalityslot$index15 = 0, $personalityslot$index17 = 0, $personalityslot$index19 = 0, $ptr = 0;
 var $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $switch3 = 0, $switch4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $2 = sp;
 $personalityslot = sp + 184|0;
 $_45 = sp + 168|0;
 $_38 = sp + 152|0;
 $element = sp + 136|0;
 $_32 = sp + 120|0;
 $iter = sp + 104|0;
 $_30 = sp + 88|0;
 $_29 = sp + 72|0;
 $local_len = sp + 64|0;
 $_7 = sp + 48|0;
 $high = sp + 40|0;
 $iterator = sp + 24|0;
 $arg1 = sp + 8|0;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg1+12>>2]=HEAP32[$1+12>>2]|0;
 $_46 = 0;
 $_47 = 0;
 $_48 = 0;
 $3 = $arg0;
 $self = $3;
 $_46 = 1;
 ;HEAP32[$iterator>>2]=HEAP32[$arg1>>2]|0;HEAP32[$iterator+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$iterator+8>>2]=HEAP32[$arg1+8>>2]|0;HEAP32[$iterator+12>>2]=HEAP32[$arg1+12>>2]|0;
 __THREW__ = 0;
 invoke_vii(320,($_7|0),($iterator|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 L1: do {
  if ($5) {
   label = 34;
  } else {
   $6 = HEAP32[$_7>>2]|0;
   $low = $6;
   $7 = ((($_7)) + 4|0);
   ;HEAP32[$high>>2]=HEAP32[$7>>2]|0;HEAP32[$high+4>>2]=HEAP32[$7+4>>2]|0;
   $8 = HEAP32[$high>>2]|0;
   $switch = ($8>>>0)<(1);
   if (!($switch)) {
    $9 = ((($high)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $high_value = $10;
   }
   $11 = HEAP32[$high>>2]|0;
   $switch1 = ($11>>>0)<(1);
   if ($switch1) {
    $12 = $self;
    $_46 = 0;
    ;HEAP32[$_45>>2]=HEAP32[$iterator>>2]|0;HEAP32[$_45+4>>2]=HEAP32[$iterator+4>>2]|0;HEAP32[$_45+8>>2]=HEAP32[$iterator+8>>2]|0;HEAP32[$_45+12>>2]=HEAP32[$iterator+12>>2]|0;
    __THREW__ = 0;
    invoke_vii(321,($12|0),($_45|0));
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if ($14) {
     label = 34;
     break;
    }
    STACKTOP = sp;return;
   }
   $15 = ((($high)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $additional = $16;
   $17 = $self;
   $18 = $additional;
   __THREW__ = 0;
   invoke_vii(268,($17|0),($18|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    label = 34;
   } else {
    $21 = $self;
    __THREW__ = 0;
    invoke_vii(269,($2|0),($21|0));
    $$sreg$field = HEAP32[$2>>2]|0;
    $$sreg$index8 = ((($2)) + 4|0);
    $$sreg$field9 = HEAP32[$$sreg$index8>>2]|0;
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     label = 34;
    } else {
     __THREW__ = 0;
     $24 = (invoke_iii(270,($$sreg$field|0),($$sreg$field9|0))|0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      label = 34;
     } else {
      $27 = $self;
      __THREW__ = 0;
      $28 = (invoke_ii(271,($27|0))|0);
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if ($30) {
       label = 34;
      } else {
       __THREW__ = 0;
       $31 = (invoke_iii(272,($24|0),($28|0))|0);
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        label = 34;
       } else {
        $ptr = $31;
        $34 = $self;
        $35 = ((($34)) + 8|0);
        __THREW__ = 0;
        invoke_vii(273,($local_len|0),($35|0));
        $36 = __THREW__; __THREW__ = 0;
        $37 = $36&1;
        L15: do {
         if ($37) {
          label = 35;
         } else {
          $_47 = 1;
          $_46 = 0;
          ;HEAP32[$_30>>2]=HEAP32[$iterator>>2]|0;HEAP32[$_30+4>>2]=HEAP32[$iterator+4>>2]|0;HEAP32[$_30+8>>2]=HEAP32[$iterator+8>>2]|0;HEAP32[$_30+12>>2]=HEAP32[$iterator+12>>2]|0;
          __THREW__ = 0;
          invoke_vii(317,($_29|0),($_30|0));
          $38 = __THREW__; __THREW__ = 0;
          $39 = $38&1;
          if ($39) {
           label = 35;
          } else {
           ;HEAP32[$iter>>2]=HEAP32[$_29>>2]|0;HEAP32[$iter+4>>2]=HEAP32[$_29+4>>2]|0;HEAP32[$iter+8>>2]=HEAP32[$_29+8>>2]|0;HEAP32[$iter+12>>2]=HEAP32[$_29+12>>2]|0;
           while(1) {
            __THREW__ = 0;
            invoke_vii(322,($_32|0),($iter|0));
            $40 = __THREW__; __THREW__ = 0;
            $41 = $40&1;
            if ($41) {
             label = 36;
             break;
            }
            $_48 = 1;
            $42 = ((($_32)) + 4|0);
            $43 = HEAP32[$42>>2]|0;
            $44 = ($43|0)!=(0|0);
            $$expand_i1_val = $44&1;
            $$expand_i1_val20 = 1;
            $switch2 = ($$expand_i1_val&255)<($$expand_i1_val20&255);
            $_48 = 0;
            if ($switch2) {
             label = 19;
             break;
            }
            ;HEAP32[$element>>2]=HEAP32[$_32>>2]|0;HEAP32[$element+4>>2]=HEAP32[$_32+4>>2]|0;HEAP32[$element+8>>2]=HEAP32[$_32+8>>2]|0;HEAP32[$element+12>>2]=HEAP32[$_32+12>>2]|0;
            $47 = $ptr;
            ;HEAP32[$_38>>2]=HEAP32[$element>>2]|0;HEAP32[$_38+4>>2]=HEAP32[$element+4>>2]|0;HEAP32[$_38+8>>2]=HEAP32[$element+8>>2]|0;HEAP32[$_38+12>>2]=HEAP32[$element+12>>2]|0;
            __THREW__ = 0;
            invoke_vii(276,($47|0),($_38|0));
            $48 = __THREW__; __THREW__ = 0;
            $49 = $48&1;
            if ($49) {
             label = 37;
             break;
            }
            $50 = $ptr;
            __THREW__ = 0;
            $51 = (invoke_iii(272,($50|0),1)|0);
            $52 = __THREW__; __THREW__ = 0;
            $53 = $52&1;
            if ($53) {
             label = 37;
             break;
            }
            $ptr = $51;
            __THREW__ = 0;
            invoke_vii(277,($local_len|0),1);
            $54 = __THREW__; __THREW__ = 0;
            $55 = $54&1;
            if ($55) {
             label = 37;
             break;
            }
            $56 = ((($_32)) + 4|0);
            $57 = HEAP32[$56>>2]|0;
            $58 = ($57|0)!=(0|0);
            $$expand_i1_val21 = $58&1;
            $$expand_i1_val22 = 1;
            $switch3 = ($$expand_i1_val21&255)<($$expand_i1_val22&255);
            if (!($switch3)) {
             continue;
            }
            __THREW__ = 0;
            invoke_vi(275,($_32|0));
            $69 = __THREW__; __THREW__ = 0;
            $70 = $69&1;
            if ($70) {
             label = 36;
             break;
            }
           }
           do {
            if ((label|0) == 19) {
             __THREW__ = 0;
             invoke_vi(275,($_32|0));
             $45 = __THREW__; __THREW__ = 0;
             $46 = $45&1;
             if ($46) {
              $82 = ___cxa_find_matching_catch_2()|0;
              $83 = tempRet0;
              HEAP32[$personalityslot>>2] = $82;
              $personalityslot$index19 = ((($personalityslot)) + 4|0);
              HEAP32[$personalityslot$index19>>2] = $83;
              $$field = HEAP32[$personalityslot>>2]|0;
              $$index5 = ((($personalityslot)) + 4|0);
              $$field6 = HEAP32[$$index5>>2]|0;
              ___resumeException($$field|0);
              // unreachable;
             }
             __THREW__ = 0;
             invoke_vi(323,($iter|0));
             $59 = __THREW__; __THREW__ = 0;
             $60 = $59&1;
             if ($60) {
              label = 35;
              break L15;
             }
             $_47 = 0;
             __THREW__ = 0;
             invoke_vi(279,($local_len|0));
             $61 = __THREW__; __THREW__ = 0;
             $62 = $61&1;
             if ($62) {
              label = 34;
              break L1;
             }
             STACKTOP = sp;return;
            }
            else if ((label|0) == 36) {
             $75 = ___cxa_find_matching_catch_2()|0;
             $76 = tempRet0;
             HEAP32[$personalityslot>>2] = $75;
             $personalityslot$index15 = ((($personalityslot)) + 4|0);
             HEAP32[$personalityslot$index15>>2] = $76;
            }
            else if ((label|0) == 37) {
             $77 = ___cxa_find_matching_catch_2()|0;
             $78 = tempRet0;
             HEAP32[$personalityslot>>2] = $77;
             $personalityslot$index17 = ((($personalityslot)) + 4|0);
             HEAP32[$personalityslot$index17>>2] = $78;
             $79 = ((($_32)) + 4|0);
             $80 = HEAP32[$79>>2]|0;
             $81 = ($80|0)!=(0|0);
             $$expand_i1_val23 = $81&1;
             $$expand_i1_val24 = 1;
             $switch4 = ($$expand_i1_val23&255)<($$expand_i1_val24&255);
             if ($switch4) {
              __ZN4drop17h7829d82d7f4f54a4E($_32);
              break;
             }
             $67 = $_48;
             $68 = $67&1;
             if ($68) {
              $_48 = 0;
              __ZN4drop17h6b8599be48284266E($_32);
             }
            }
           } while(0);
           __ZN4drop17hbd0cf8368b25a29fE($iter);
          }
         }
        } while(0);
        if ((label|0) == 35) {
         $73 = ___cxa_find_matching_catch_2()|0;
         $74 = tempRet0;
         HEAP32[$personalityslot>>2] = $73;
         $personalityslot$index13 = ((($personalityslot)) + 4|0);
         HEAP32[$personalityslot$index13>>2] = $74;
        }
        $65 = $_47;
        $66 = $65&1;
        if ($66) {
         $_47 = 0;
         __ZN4drop17he5822bbed473e100E($local_len);
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $71 = ___cxa_find_matching_catch_2()|0;
  $72 = tempRet0;
  HEAP32[$personalityslot>>2] = $71;
  $personalityslot$index11 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index11>>2] = $72;
 }
 $63 = $_46;
 $64 = $63&1;
 if (!($64)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index5 = ((($personalityslot)) + 4|0);
  $$field6 = HEAP32[$$index5>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_46 = 0;
 __ZN4drop17hbd0cf8368b25a29fE($iterator);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index5 = ((($personalityslot)) + 4|0);
 $$field6 = HEAP32[$$index5>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN4drop17hbd0cf8368b25a29fE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17he66482392d0cf6fcE($0);
 return;
}
function __ZN4drop17he66482392d0cf6fcE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(324,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN13drop_contents17he66482392d0cf6fcE($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZN13drop_contents17he66482392d0cf6fcE($0);
  return;
 }
}
function __ZN71__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17hde0a0c9bfce6b0cfE($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val5 = 0, $$field = 0, $$field3 = 0, $$index2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_10 = 0, $_15 = 0, $_20 = 0, $_x = 0, $arg0 = 0, $iter = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $personalityslot = sp + 40|0;
 $_15 = sp + 32|0;
 $_x = sp + 16|0;
 $_10 = sp;
 $iter = sp + 56|0;
 $arg0 = $0;
 $_20 = 0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core4iter8iterator8Iterator6by_ref17h4d5967a3b0e631caE($2)|0);
 $4 = (__ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hc8b5c821bd943406E($3)|0);
 HEAP32[$iter>>2] = $4;
 while(1) {
  $_20 = 1;
  __ZN75__LT__RF__u27_a_u20_mut_u20_I_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h0f0084a94d4a151aE($_10,$iter);
  $5 = ((($_10)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  $$expand_i1_val = $7&1;
  $$expand_i1_val5 = 1;
  $switch = ($$expand_i1_val&255)<($$expand_i1_val5&255);
  $_20 = 0;
  if ($switch) {
   break;
  }
  ;HEAP32[$_x>>2]=HEAP32[$_10>>2]|0;HEAP32[$_x+4>>2]=HEAP32[$_10+4>>2]|0;HEAP32[$_x+8>>2]=HEAP32[$_10+8>>2]|0;
 }
 $8 = $self;
 $9 = (__ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h61bdd591810b80e8E($8)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $self;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_14from_raw_parts17ha54f1ccdd9043874E($_15,$10,$13);
 __THREW__ = 0;
 invoke_vi(325,($_15|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  HEAP32[$personalityslot>>2] = $16;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $17;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN13drop_contents17he66482392d0cf6fcE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4core4iter8iterator8Iterator6by_ref17h4d5967a3b0e631caE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 STACKTOP = sp;return ($2|0);
}
function __ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hc8b5c821bd943406E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 STACKTOP = sp;return ($2|0);
}
function __ZN75__LT__RF__u27_a_u20_mut_u20_I_u20_as_u20_core__iter__iterator__Iterator_GT_4next17h0f0084a94d4a151aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = HEAP32[$3>>2]|0;
 __ZN86__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h7b1516140d6e13b0E($0,$4);
 STACKTOP = sp;return;
}
function __ZN63__LT_core__ptr__Shared_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h61bdd591810b80e8E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h40d909fd158087b3E($2)|0);
 $transmute_temp = $3;
 $4 = $transmute_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_14from_raw_parts17ha54f1ccdd9043874E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_5 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $cap = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $abi_cast = sp + 20|0;
 $_5 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $3 = $arg0;
 $ptr = $3;
 $4 = $arg1;
 $cap = $4;
 $5 = $ptr;
 $6 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17hb106fc9e3a69822cE($5)|0);
 HEAP32[$abi_cast>>2] = $6;
 ;HEAP32[$_5>>2]=HEAP32[$abi_cast>>2]|0;
 $7 = $cap;
 ;HEAP32[$0>>2]=HEAP32[$_5>>2]|0;
 $8 = ((($0)) + 4|0);
 HEAP32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN4drop17h50deafdf82f9a66bE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(326,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN13drop_contents17h50deafdf82f9a66bE($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h50deafdf82f9a66bE($0);
  return;
 }
}
function __ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h335ccd2b7fe36b67E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_4 = 0, $align = 0, $arg0 = 0, $elem_size = 0, $num_bytes = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17h9965611b72f5e5b5E()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $self;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $_4 = 1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $_4 = 0;
 }
 $9 = $_4;
 $10 = $9&1;
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (__ZN4core3mem8align_of17h7612a83b7bae0285E()|0);
 $align = $11;
 $12 = $elem_size;
 $13 = $self;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($12, $15)|0;
 $num_bytes = $16;
 $17 = $self;
 $18 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hb4c3079b501852d3E($17)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $num_bytes;
 $21 = $align;
 __ZN5alloc4heap10deallocate17haa41e924c0cbc050E_3($19,$20,$21);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17h50deafdf82f9a66bE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4core3mem7size_of17h9965611b72f5e5b5E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 12;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3mem8align_of17h7612a83b7bae0285E() {
 var $0 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmp_ret = 4;
 $0 = $tmp_ret;
 STACKTOP = sp;return ($0|0);
}
function __ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hb4c3079b501852d3E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h40d909fd158087b3E($2)|0);
 $transmute_temp = $3;
 $4 = $transmute_temp;
 STACKTOP = sp;return ($4|0);
}
function __ZN68__LT_core__nonzero__NonZero_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h40d909fd158087b3E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $inner = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $inner = $2;
 $3 = $inner;
 STACKTOP = sp;return ($3|0);
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17hb106fc9e3a69822cE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $_0$i = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $inner$i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0$i = sp + 16|0;
 $abi_cast = sp + 28|0;
 $_3 = sp + 8|0;
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $2 = $ptr;
 $arg0$i = $2;
 $3 = $arg0$i;
 $inner$i = $3;
 $4 = $inner$i;
 HEAP32[$_0$i>>2] = $4;
 $5 = HEAP32[$_0$i>>2]|0;
 HEAP32[$abi_cast>>2] = $5;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 ;HEAP32[$_0>>2]=HEAP32[$_3>>2]|0;
 $6 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN86__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h7b1516140d6e13b0E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$field6 = 0, $$field9 = 0, $$index1 = 0, $$index8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$i = 0, $_10$i2 = 0, $_13 = 0, $_20 = 0, $_9$i = 0, $_9$i3 = 0, $arg0 = 0, $arg0$i = 0, $arg0$i6 = 0, $old = 0, $personalityslot$i = 0, $personalityslot$i$index4 = 0, $personalityslot$i1 = 0;
 var $personalityslot$i1$index11 = 0, $self = 0, $src$i = 0, $src$i5 = 0, $tmp$i = 0, $tmp$i4 = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $personalityslot$i1 = sp + 104|0;
 $_9$i3 = sp + 88|0;
 $tmp$i4 = sp + 72|0;
 $personalityslot$i = sp + 64|0;
 $_9$i = sp + 48|0;
 $tmp$i = sp + 32|0;
 $_20 = sp + 16|0;
 $_13 = sp;
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $self;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)==($8|0);
 if ($9) {
  $10 = ((($0)) + 4|0);
  HEAP32[$10>>2] = 0;
  STACKTOP = sp;return;
 }
 $11 = (__ZN4core3mem7size_of17h9965611b72f5e5b5E()|0);
 $12 = ($11|0)==(0);
 $13 = $self;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 if ($12) {
  $16 = ((($15)) + 1|0);
  $tmp_ret = $16;
  $17 = $tmp_ret;
  $18 = $self;
  $19 = ((($18)) + 8|0);
  HEAP32[$19>>2] = $17;
  $arg0$i = (1);
  $_10$i = 0;
  $20 = $arg0$i;
  $src$i = $20;
  __THREW__ = 0;
  invoke_vi(327,($tmp$i|0));
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if (!($22)) {
   $_10$i = 1;
   $37 = $src$i;
   ;HEAP32[$tmp$i>>2]=HEAP32[$37>>2]|0;HEAP32[$tmp$i+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$tmp$i+8>>2]=HEAP32[$37+8>>2]|0;
   $_10$i = 0;
   ;HEAP32[$_9$i>>2]=HEAP32[$tmp$i>>2]|0;HEAP32[$_9$i+4>>2]=HEAP32[$tmp$i+4>>2]|0;HEAP32[$_9$i+8>>2]=HEAP32[$tmp$i+8>>2]|0;
   ;HEAP32[$_13>>2]=HEAP32[$_9$i>>2]|0;HEAP32[$_13+4>>2]=HEAP32[$_9$i+4>>2]|0;HEAP32[$_13+8>>2]=HEAP32[$_9$i+8>>2]|0;
   ;HEAP32[$0>>2]=HEAP32[$_13>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_13+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_13+8>>2]|0;
   STACKTOP = sp;return;
  }
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = tempRet0;
  HEAP32[$personalityslot$i>>2] = $33;
  $personalityslot$i$index4 = ((($personalityslot$i)) + 4|0);
  HEAP32[$personalityslot$i$index4>>2] = $34;
  $35 = $_10$i;
  $36 = $35&1;
  if (!($36)) {
   $$field = HEAP32[$personalityslot$i>>2]|0;
   $$index1 = ((($personalityslot$i)) + 4|0);
   $$field2 = HEAP32[$$index1>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
  $_10$i = 0;
  $$field = HEAP32[$personalityslot$i>>2]|0;
  $$index1 = ((($personalityslot$i)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  $old = $15;
  $23 = $self;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (__ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h93b865bc9240230eE($25,1)|0);
  $27 = $self;
  $28 = ((($27)) + 8|0);
  HEAP32[$28>>2] = $26;
  $29 = $old;
  $arg0$i6 = $29;
  $_10$i2 = 0;
  $30 = $arg0$i6;
  $src$i5 = $30;
  __THREW__ = 0;
  invoke_vi(327,($tmp$i4|0));
  $31 = __THREW__; __THREW__ = 0;
  $32 = $31&1;
  if (!($32)) {
   $_10$i2 = 1;
   $42 = $src$i5;
   ;HEAP32[$tmp$i4>>2]=HEAP32[$42>>2]|0;HEAP32[$tmp$i4+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$tmp$i4+8>>2]=HEAP32[$42+8>>2]|0;
   $_10$i2 = 0;
   ;HEAP32[$_9$i3>>2]=HEAP32[$tmp$i4>>2]|0;HEAP32[$_9$i3+4>>2]=HEAP32[$tmp$i4+4>>2]|0;HEAP32[$_9$i3+8>>2]=HEAP32[$tmp$i4+8>>2]|0;
   ;HEAP32[$_20>>2]=HEAP32[$_9$i3>>2]|0;HEAP32[$_20+4>>2]=HEAP32[$_9$i3+4>>2]|0;HEAP32[$_20+8>>2]=HEAP32[$_9$i3+8>>2]|0;
   ;HEAP32[$0>>2]=HEAP32[$_20>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_20+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_20+8>>2]|0;
   STACKTOP = sp;return;
  }
  $38 = ___cxa_find_matching_catch_2()|0;
  $39 = tempRet0;
  HEAP32[$personalityslot$i1>>2] = $38;
  $personalityslot$i1$index11 = ((($personalityslot$i1)) + 4|0);
  HEAP32[$personalityslot$i1$index11>>2] = $39;
  $40 = $_10$i2;
  $41 = $40&1;
  if (!($41)) {
   $$field6 = HEAP32[$personalityslot$i1>>2]|0;
   $$index8 = ((($personalityslot$i1)) + 4|0);
   $$field9 = HEAP32[$$index8>>2]|0;
   ___resumeException($$field6|0);
   // unreachable;
  }
  $_10$i2 = 0;
  $$field6 = HEAP32[$personalityslot$i1>>2]|0;
  $$index8 = ((($personalityslot$i1)) + 4|0);
  $$field9 = HEAP32[$$index8>>2]|0;
  ___resumeException($$field6|0);
  // unreachable;
 }
}
function __ZN4core3ptr33__LT_impl_u20__BP_const_u20_T_GT_6offset17h93b865bc9240230eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + (($5*12)|0)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3mem13uninitialized17h9d0638578f45729eE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN84__LT_core__iter__Map_LT_I_C__u20_F_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17hd375f5e9eb1683d5E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN86__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17hf441cb36473bb966E($0,$3);
 STACKTOP = sp;return;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_16extend_desugared17hb2bb1c74331cbfe6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val14 = 0, $$expand_i1_val15 = 0, $$expand_i1_val16 = 0, $$expand_i1_val17 = 0, $$expand_i1_val18 = 0, $$field = 0, $$field4 = 0, $$index3 = 0, $$sreg$field = 0, $$sreg$field7 = 0, $$sreg$index6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $_17 = 0, $_31 = 0, $_36 = 0, $_37 = 0, $_6 = 0;
 var $arg0 = 0, $arg1 = 0, $element = 0, $iterator = 0, $len = 0, $lower = 0, $personalityslot = 0, $personalityslot$index11 = 0, $personalityslot$index13 = 0, $personalityslot$index9 = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $2 = sp;
 $personalityslot = sp + 104|0;
 $_31 = sp + 88|0;
 $_17 = sp + 72|0;
 $element = sp + 56|0;
 $_6 = sp + 40|0;
 $iterator = sp + 24|0;
 $arg1 = sp + 8|0;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$arg1+12>>2]=HEAP32[$1+12>>2]|0;
 $_36 = 0;
 $_37 = 0;
 $3 = $arg0;
 $self = $3;
 ;HEAP32[$iterator>>2]=HEAP32[$arg1>>2]|0;HEAP32[$iterator+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$iterator+8>>2]=HEAP32[$arg1+8>>2]|0;HEAP32[$iterator+12>>2]=HEAP32[$arg1+12>>2]|0;
 while(1) {
  __THREW__ = 0;
  invoke_vii(322,($_6|0),($iterator|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   label = 26;
   break;
  }
  $_36 = 1;
  $6 = ((($_6)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  $$expand_i1_val = $8&1;
  $$expand_i1_val14 = 1;
  $switch = ($$expand_i1_val&255)<($$expand_i1_val14&255);
  $_36 = 0;
  if ($switch) {
   label = 7;
   break;
  }
  $_37 = 1;
  ;HEAP32[$element>>2]=HEAP32[$_6>>2]|0;HEAP32[$element+4>>2]=HEAP32[$_6+4>>2]|0;HEAP32[$element+8>>2]=HEAP32[$_6+8>>2]|0;HEAP32[$element+12>>2]=HEAP32[$_6+12>>2]|0;
  $14 = $self;
  __THREW__ = 0;
  $15 = (invoke_ii(271,($14|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   label = 27;
   break;
  }
  $len = $15;
  $18 = $len;
  $19 = $self;
  __THREW__ = 0;
  $20 = (invoke_ii(286,($19|0))|0);
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   label = 27;
   break;
  }
  $23 = ($18|0)==($20|0);
  if ($23) {
   __THREW__ = 0;
   invoke_vii(320,($_17|0),($iterator|0));
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    label = 27;
    break;
   }
   $26 = HEAP32[$_17>>2]|0;
   $lower = $26;
   $27 = $self;
   $28 = $lower;
   __THREW__ = 0;
   $29 = (invoke_iii(201,($28|0),1)|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    label = 27;
    break;
   }
   __THREW__ = 0;
   invoke_vii(268,($27|0),($29|0));
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    label = 27;
    break;
   }
  }
  $34 = $self;
  __THREW__ = 0;
  invoke_vii(269,($2|0),($34|0));
  $$sreg$field = HEAP32[$2>>2]|0;
  $$sreg$index6 = ((($2)) + 4|0);
  $$sreg$field7 = HEAP32[$$sreg$index6>>2]|0;
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if ($36) {
   label = 27;
   break;
  }
  $37 = $len;
  __THREW__ = 0;
  $38 = (invoke_iiii(287,($$sreg$field|0),($$sreg$field7|0),($37|0))|0);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   label = 27;
   break;
  }
  $_37 = 0;
  ;HEAP32[$_31>>2]=HEAP32[$element>>2]|0;HEAP32[$_31+4>>2]=HEAP32[$element+4>>2]|0;HEAP32[$_31+8>>2]=HEAP32[$element+8>>2]|0;HEAP32[$_31+12>>2]=HEAP32[$element+12>>2]|0;
  __THREW__ = 0;
  invoke_vii(276,($38|0),($_31|0));
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  if ($42) {
   label = 27;
   break;
  }
  $43 = $self;
  $44 = $len;
  $45 = (($44) + 1)|0;
  __THREW__ = 0;
  invoke_vii(288,($43|0),($45|0));
  $46 = __THREW__; __THREW__ = 0;
  $47 = $46&1;
  if ($47) {
   label = 27;
   break;
  }
  $48 = ((($_6)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)!=(0|0);
  $$expand_i1_val17 = $50&1;
  $$expand_i1_val18 = 1;
  $switch2 = ($$expand_i1_val17&255)<($$expand_i1_val18&255);
  if (!($switch2)) {
   continue;
  }
  __THREW__ = 0;
  invoke_vi(275,($_6|0));
  $55 = __THREW__; __THREW__ = 0;
  $56 = $55&1;
  if ($56) {
   label = 26;
   break;
  }
 }
 do {
  if ((label|0) == 7) {
   __THREW__ = 0;
   invoke_vi(275,($_6|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    invoke_vi(323,($iterator|0));
    $51 = __THREW__; __THREW__ = 0;
    $52 = $51&1;
    if (!($52)) {
     STACKTOP = sp;return;
    }
   }
   $63 = ___cxa_find_matching_catch_2()|0;
   $64 = tempRet0;
   HEAP32[$personalityslot>>2] = $63;
   $personalityslot$index13 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index13>>2] = $64;
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index3 = ((($personalityslot)) + 4|0);
   $$field4 = HEAP32[$$index3>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
  else if ((label|0) == 26) {
   $57 = ___cxa_find_matching_catch_2()|0;
   $58 = tempRet0;
   HEAP32[$personalityslot>>2] = $57;
   $personalityslot$index9 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index9>>2] = $58;
  }
  else if ((label|0) == 27) {
   $59 = ___cxa_find_matching_catch_2()|0;
   $60 = tempRet0;
   HEAP32[$personalityslot>>2] = $59;
   $personalityslot$index11 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index11>>2] = $60;
   $61 = $_37;
   $62 = $61&1;
   if ($62) {
    $_37 = 0;
    __ZN4drop17h6b8599be48284266E($element);
   }
   $9 = ((($_6)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)!=(0|0);
   $$expand_i1_val15 = $11&1;
   $$expand_i1_val16 = 1;
   $switch1 = ($$expand_i1_val15&255)<($$expand_i1_val16&255);
   if ($switch1) {
    __ZN4drop17h7829d82d7f4f54a4E($_6);
    break;
   }
   $53 = $_36;
   $54 = $53&1;
   if ($54) {
    $_36 = 0;
    __ZN4drop17h6b8599be48284266E($_6);
   }
  }
 } while(0);
 __ZN4drop17hbd0cf8368b25a29fE($iterator);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN84__LT_core__iter__Map_LT_I_C__u20_F_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hc320fb463e8c29f0E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $arg0 = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $personalityslot = sp + 16|0;
 $_3 = sp;
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN86__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h7b1516140d6e13b0E($_3,$3);
 $4 = $self;
 $5 = ((($4)) + 16|0);
 __THREW__ = 0;
 invoke_viii(328,($0|0),($_3|0),($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  HEAP32[$personalityslot>>2] = $8;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $9;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17h11392028cf29d412E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val11 = 0, $$expand_i1_val7 = 0, $$expand_i1_val8 = 0, $$expand_i1_val9 = 0, $$field = 0, $$field4 = 0, $$index3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_11 = 0, $_6 = 0, $_8 = 0, $_9 = 0, $arg0 = 0, $arg1 = 0;
 var $f = 0, $personalityslot = 0, $personalityslot$index6 = 0, $self = 0, $switch = 0, $switch1 = 0, $switch2 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $personalityslot = sp + 96|0;
 $_9 = sp + 80|0;
 $_8 = sp + 64|0;
 $_6 = sp + 48|0;
 $x = sp + 32|0;
 $self = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;
 $arg1 = $2;
 $_11 = 0;
 $_10 = 0;
 $_10 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;
 $_11 = 1;
 $3 = $arg1;
 $f = $3;
 $4 = ((($self)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 $$expand_i1_val = $6&1;
 $$expand_i1_val7 = 1;
 $switch2 = ($$expand_i1_val&255)<($$expand_i1_val7&255);
 do {
  if ($switch2) {
   $10 = ((($0)) + 4|0);
   HEAP32[$10>>2] = 0;
  } else {
   $_10 = 0;
   ;HEAP32[$x>>2]=HEAP32[$self>>2]|0;HEAP32[$x+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$x+8>>2]=HEAP32[$self+8>>2]|0;
   $_11 = 0;
   $11 = $f;
   ;HEAP32[$_9>>2]=HEAP32[$x>>2]|0;HEAP32[$_9+4>>2]=HEAP32[$x+4>>2]|0;HEAP32[$_9+8>>2]=HEAP32[$x+8>>2]|0;
   ;HEAP32[$_8>>2]=HEAP32[$_9>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$_9+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$_9+8>>2]|0;
   __THREW__ = 0;
   invoke_viii(329,($_6|0),($11|0),($_8|0));
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    ;HEAP32[$0>>2]=HEAP32[$_6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_6+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_6+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$_6+12>>2]|0;
    break;
   }
   $23 = ___cxa_find_matching_catch_2()|0;
   $24 = tempRet0;
   HEAP32[$personalityslot>>2] = $23;
   $personalityslot$index6 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index6>>2] = $24;
   $25 = $_11;
   $26 = $25&1;
   if ($26) {
    $_11 = 0;
   }
   $7 = ((($self)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)!=(0|0);
   $$expand_i1_val8 = $9&1;
   $$expand_i1_val9 = 1;
   $switch = ($$expand_i1_val8&255)<($$expand_i1_val9&255);
   if ($switch) {
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index3 = ((($personalityslot)) + 4|0);
    $$field4 = HEAP32[$$index3>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
   $19 = $_10;
   $20 = $19&1;
   if (!($20)) {
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index3 = ((($personalityslot)) + 4|0);
    $$field4 = HEAP32[$$index3>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
   $_10 = 0;
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index3 = ((($personalityslot)) + 4|0);
   $$field4 = HEAP32[$$index3>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
 } while(0);
 $14 = $_11;
 $15 = $14&1;
 if ($15) {
  $_11 = 0;
 }
 $16 = ((($self)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 $$expand_i1_val10 = $18&1;
 $$expand_i1_val11 = 1;
 $switch1 = ($$expand_i1_val10&255)<($$expand_i1_val11&255);
 if ($switch1) {
  STACKTOP = sp;return;
 }
 $21 = $_10;
 $22 = $21&1;
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $_10 = 0;
 STACKTOP = sp;return;
}
function __ZN4core3ops5impls81__LT_impl_u20_core__ops__FnOnce_LT_A_GT__u20_for_u20__RF__u27_a_u20_mut_u20_F_GT_9call_once17haae7a9f3ae593f0cE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field3 = 0, $$index2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $args = 0, $personalityslot = 0, $personalityslot$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $personalityslot = sp + 48|0;
 $_6 = sp + 32|0;
 $args = sp + 16|0;
 $arg1 = sp;
 $arg0 = $1;
 ;HEAP32[$arg1>>2]=HEAP32[$2>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$2+8>>2]|0;
 $3 = $arg0;
 $self = $3;
 ;HEAP32[$args>>2]=HEAP32[$arg1>>2]|0;HEAP32[$args+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$args+8>>2]=HEAP32[$arg1+8>>2]|0;
 $4 = $self;
 ;HEAP32[$_6>>2]=HEAP32[$args>>2]|0;HEAP32[$_6+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_6+8>>2]=HEAP32[$args+8>>2]|0;
 __THREW__ = 0;
 invoke_viii(330,($0|0),($4|0),($_6|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch_2()|0;
  $8 = tempRet0;
  HEAP32[$personalityslot>>2] = $7;
  $personalityslot$index1 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index1>>2] = $8;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index2 = ((($personalityslot)) + 4|0);
  $$field3 = HEAP32[$$index2>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN2ww7command8HelpInfo4list28__u7b__u7b_closure_u7d__u7d_17h3deefb92ae34bbbfE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field6 = 0, $$index5 = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $desc = 0, $key = 0, $personalityslot = 0, $personalityslot$index4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $personalityslot = sp + 48|0;
 $_6 = sp + 32|0;
 $desc = sp + 24|0;
 $arg1 = sp + 8|0;
 $arg0 = $1;
 ;HEAP32[$arg1>>2]=HEAP32[$2>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$2+8>>2]|0;
 $4 = HEAP32[$arg1>>2]|0;
 $key = $4;
 $5 = ((($arg1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($5)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$desc>>2] = $6;
 $9 = ((($desc)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = $key;
 __THREW__ = 0;
 invoke_vii(331,($3|0),($desc|0));
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index1 = ((($3)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  __THREW__ = 0;
  invoke_viii(244,($_6|0),($$sreg$field|0),($$sreg$field2|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   HEAP32[$0>>2] = $10;
   $15 = ((($0)) + 4|0);
   ;HEAP32[$15>>2]=HEAP32[$_6>>2]|0;HEAP32[$15+4>>2]=HEAP32[$_6+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$_6+8>>2]|0;
   STACKTOP = sp;return;
  }
 }
 $16 = ___cxa_find_matching_catch_2()|0;
 $17 = tempRet0;
 HEAP32[$personalityslot>>2] = $16;
 $personalityslot$index4 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index4>>2] = $17;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index5 = ((($personalityslot)) + 4|0);
 $$field6 = HEAP32[$$index5>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN66__LT__RF__u27_a_u20_T_u20_as_u20_core__convert__AsRef_LT_U_GT__GT_6as_ref17hcf81b7cf8d5753cfE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 __ZN55__LT_str_u20_as_u20_core__convert__AsRef_LT_str_GT__GT_6as_ref17h50e83c478e83314eE($1,$4,$6);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN55__LT_str_u20_as_u20_core__convert__AsRef_LT_str_GT__GT_6as_ref17h50e83c478e83314eE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $retVal$index1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$retVal>>2] = $7;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN86__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17hf441cb36473bb966E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_17 = 0, $arg0 = 0, $diff = 0, $exact = 0, $self = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_17 = sp;
 $arg0 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9;
 $11 = (($6) - ($10))|0;
 $diff = $11;
 $12 = (__ZN4core3mem7size_of17h9965611b72f5e5b5E()|0);
 $size = $12;
 $13 = $diff;
 $14 = $size;
 $15 = ($14|0)==(0);
 if ($15) {
  $_11 = 1;
 } else {
  $16 = $size;
  $_11 = $16;
 }
 $17 = $_11;
 $18 = ($17|0)==(0);
 $19 = $18;
 if ($19) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(3852);
  // unreachable;
 } else {
  $20 = $_11;
  $21 = (($13>>>0) / ($20>>>0))&-1;
  $exact = $21;
  $22 = $exact;
  $23 = $exact;
  HEAP32[$_17>>2] = 1;
  $24 = ((($_17)) + 4|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$0>>2] = $22;
  $25 = ((($0)) + 4|0);
  ;HEAP32[$25>>2]=HEAP32[$_17>>2]|0;HEAP32[$25+4>>2]=HEAP32[$_17+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17ha6f706f788e88f8aE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $ptr = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 $4 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17ha88006518ae6bb80E($3)|0);
 $ptr = $4;
 $5 = $ptr;
 (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17ha3a18ee0550f940cE($5)|0);
 $6 = $ptr;
 $7 = $self;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __ZN4core5slice18from_raw_parts_mut17h8b5cc3e9f50f76a5E($1,$6,$9);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17hcaafa1069370acb9E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h617b509092e31fdeE($7,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17ha3a18ee0550f940cE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN4core3ptr8null_mut17h754933c17e30ebf9E()|0);
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3len17hb4c5eb21cd9833d3E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17hd82c3fda4b6cc265E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $arg1 = 0, $count = 0, $self = 0, $tmp_ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $count = $3;
 $4 = $self;
 $5 = $count;
 $6 = (($4) + (($5*12)|0)|0);
 $tmp_ret = $6;
 $7 = $tmp_ret;
 STACKTOP = sp;return ($7|0);
}
function __ZN4core3mem6forget17hd76ab2d70996abb2E($0) {
 $0 = $0|0;
 var $_3 = 0, $arg0 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_3 = sp + 32|0;
 $t = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$0>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$0+8>>2]|0;
 ;HEAP32[$t>>2]=HEAP32[$arg0>>2]|0;HEAP32[$t+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$t+8>>2]=HEAP32[$arg0+8>>2]|0;
 ;HEAP32[$_3>>2]=HEAP32[$t>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$t+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$t+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN35__LT_core__ptr__Shared_LT_T_GT__GT_3new17ha3228e046e307d0cE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $_0$i = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $inner$i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0$i = sp + 16|0;
 $abi_cast = sp + 28|0;
 $_3 = sp + 8|0;
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $2 = $ptr;
 $arg0$i = $2;
 $3 = $arg0$i;
 $inner$i = $3;
 $4 = $inner$i;
 HEAP32[$_0$i>>2] = $4;
 $5 = HEAP32[$_0$i>>2]|0;
 HEAP32[$abi_cast>>2] = $5;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 ;HEAP32[$_0>>2]=HEAP32[$_3>>2]|0;
 $6 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN4drop17h67e397ff44d4d25fE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi(332,($0|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  __ZN13drop_contents17h67e397ff44d4d25fE($0);
  ___resumeException($3|0);
  // unreachable;
 } else {
  __ZN13drop_contents17h67e397ff44d4d25fE($0);
  return;
 }
}
function __ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h853e8f7f076bcc60E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h68c49e3769acddc2E($1,$3);
 STACKTOP = sp;return;
}
function __ZN13drop_contents17h67e397ff44d4d25fE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4drop17h50deafdf82f9a66bE($0);
 return;
}
function __ZN98__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__IndexMut_LT_core__ops__RangeFull_GT__GT_9index_mut17h68c49e3769acddc2E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $1 = 0, $2 = 0, $3 = 0, $arg0 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $arg0 = $0;
 $2 = $arg0;
 $self = $2;
 $3 = $self;
 __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17ha6f706f788e88f8aE($1,$3);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index1 = ((($1)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN4core3ptr8null_mut17h754933c17e30ebf9E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h617b509092e31fdeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17ha88006518ae6bb80E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = (__ZN63__LT_core__ptr__Unique_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17hb4c3079b501852d3E($2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4core5slice18from_raw_parts_mut17h8b5cc3e9f50f76a5E($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $p = 0, $retVal$index1 = 0, $transmute_temp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 8|0;
 $_6 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $p = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $p;
 $5 = $len;
 HEAP32[$_6>>2] = $4;
 $6 = ((($_6)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($_6)) + 4|0);
 $8 = HEAP32[$_6>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 HEAP32[$transmute_temp>>2] = $8;
 $10 = ((($transmute_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$transmute_temp>>2]|0;
 $12 = ((($transmute_temp)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$retVal>>2] = $11;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN11collections5slice4hack8into_vec17h361a858fb89a65ceE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0;
 var $_13 = 0, $_14 = 0, $arg0 = 0, $b = 0, $personalityslot = 0, $personalityslot$index4 = 0, $xs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $personalityslot = sp + 48|0;
 $_12 = sp + 32|0;
 $xs = sp + 16|0;
 $b = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_14 = 0;
 $_13 = 0;
 $_13 = 1;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$b>>2] = $4;
 $7 = ((($b)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$b>>2]|0;
 $9 = ((($b)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 $11 = (invoke_iii(309,($8|0),($10|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  $16 = HEAP32[$b>>2]|0;
  $17 = ((($b)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  __THREW__ = 0;
  $19 = (invoke_iii(333,($16|0),($18|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   $22 = HEAP32[$b>>2]|0;
   $23 = ((($b)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   __THREW__ = 0;
   $25 = (invoke_iii(333,($22|0),($24|0))|0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if (!($27)) {
    __THREW__ = 0;
    invoke_viiii(334,($xs|0),($11|0),($19|0),($25|0));
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $_14 = 1;
     $_13 = 0;
     $30 = HEAP32[$b>>2]|0;
     $31 = ((($b)) + 4|0);
     $32 = HEAP32[$31>>2]|0;
     __THREW__ = 0;
     invoke_vii(335,($30|0),($32|0));
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $_14 = 0;
      ;HEAP32[$_12>>2]=HEAP32[$xs>>2]|0;HEAP32[$_12+4>>2]=HEAP32[$xs+4>>2]|0;HEAP32[$_12+8>>2]=HEAP32[$xs+8>>2]|0;
      ;HEAP32[$0>>2]=HEAP32[$_12>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_12+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_12+8>>2]|0;
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $35 = ___cxa_find_matching_catch_2()|0;
 $36 = tempRet0;
 HEAP32[$personalityslot>>2] = $35;
 $personalityslot$index4 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index4>>2] = $36;
 $37 = $_14;
 $38 = $37&1;
 if ($38) {
  $_14 = 0;
  __ZN4drop17h67e397ff44d4d25fE($xs);
 }
 $14 = $_13;
 $15 = $14&1;
 if (!($15)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_13 = 0;
 __ZN4drop17h9ace49ddda647130E($b);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17ha5bfcf1f670e8622E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h029be9f4875b118fE($7,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_14from_raw_parts17h9ce074a6e58b8f16E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_7 = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $capacity = 0, $length = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_7 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $arg2 = $3;
 $4 = $arg0;
 $ptr = $4;
 $5 = $arg1;
 $length = $5;
 $6 = $arg2;
 $capacity = $6;
 $7 = $ptr;
 $8 = $capacity;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_14from_raw_parts17ha54f1ccdd9043874E($_7,$7,$8);
 $9 = $length;
 ;HEAP32[$0>>2]=HEAP32[$_7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_7+4>>2]|0;
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN4core3mem6forget17h67399914790cc5c4E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$t>>2] = $3;
 $6 = ((($t)) + 4|0);
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN4drop17h9ace49ddda647130E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN5alloc4heap8box_free17h1814ce7b09c2433aE($1,$3);
 return;
}
function __ZN5alloc4heap8box_free17h1814ce7b09c2433aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $align = 0, $arg0 = 0, $ptr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $ptr = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$ptr>>2] = $3;
 $6 = ((($ptr)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($ptr)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8*12)|0;
 $size = $9;
 $align = 4;
 $10 = $size;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$ptr>>2]|0;
 $13 = $size;
 $14 = $align;
 __ZN5alloc4heap10deallocate17haa41e924c0cbc050E_3($12,$13,$14);
 STACKTOP = sp;return;
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17h029be9f4875b118fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, $transmute_temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $transmute_temp = sp + 16|0;
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$transmute_temp>>2] = $7;
 $10 = ((($transmute_temp)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($transmute_temp)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZN2ww8monsters9MonsterId15ferocity_factor17h42a58358de54acdbE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_0 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = $self;
 $3 = HEAP8[$2>>0]|0;
 switch ($3<<24>>24) {
 case 0:  {
  $_0 = 5;
  break;
 }
 case 1:  {
  $_0 = 10;
  break;
 }
 case 2:  {
  $_0 = 15;
  break;
 }
 case 3:  {
  $_0 = 20;
  break;
 }
 default: {
  // unreachable;
 }
 }
 $4 = $_0;
 STACKTOP = sp;return ($4|0);
}
function __ZN2ww6combat57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_15get_modified_ff17h0e50dc1d336d9aeaE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$arith13 = 0, $$arith2 = 0, $$arith21 = 0, $$arith5 = 0, $$denom = 0, $$denom15 = 0, $$denom23 = 0, $$denom7 = 0, $$div = 0, $$div16 = 0, $$div24 = 0, $$div8 = 0, $$ispos = 0, $$iszero = 0, $$iszero14 = 0, $$iszero22 = 0, $$iszero6 = 0, $$negcheck = 0, $$negtemp = 0;
 var $$overflow = 0, $$overflow10 = 0, $$overflow18 = 0, $$overflow26 = 0, $$poscheck = 0, $$postemp = 0, $$same = 0, $$same17 = 0, $$same25 = 0, $$same9 = 0, $$select = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0;
 var $_0 = 0, $_16 = 0, $_29 = 0, $_40 = 0, $arg0 = 0, $arg1 = 0, $base_ff = 0, $ff = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $base_ff = $3;
 $4 = $base_ff;
 $ff = $4;
 $5 = $self;
 $6 = ((($5)) + 55|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&1;
 do {
  if ($8) {
   $9 = $ff;
   $10 = ($9|0)==(-2147483648);
   $11 = 0 & $10;
   $12 = $11;
   if ($12) {
    __ZN4core9panicking5panic17hee9f4f8d26a91787E(4192);
    // unreachable;
   }
   $13 = (($9|0) / 4)&-1;
   $$arith21 = ($13*3)|0;
   $$iszero22 = ($13|0)==(0);
   $$denom23 = $$iszero22 ? 1 : $13;
   $$div24 = (($$arith21|0) / ($$denom23|0))&-1;
   $$same25 = ($$div24|0)!=(3);
   $$overflow26 = $$iszero22 ? 0 : $$same25;
   $14 = $$overflow26;
   if ($14) {
    __ZN4core9panicking5panic17hee9f4f8d26a91787E(4212);
    // unreachable;
   } else {
    $ff = $$arith21;
    break;
   }
  }
 } while(0);
 $15 = $self;
 $16 = ((($15)) + 54|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&1;
 $19 = $18 ^ 1;
 if ($19) {
  $20 = $self;
  $21 = ((($20)) + 52|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&1;
  $24 = $23 ^ 1;
  if ($24) {
   $_16 = 1;
  } else {
   label = 7;
  }
 } else {
  label = 7;
 }
 if ((label|0) == 7) {
  $_16 = 0;
 }
 $25 = $_16;
 $26 = $25&1;
 if ($26) {
  $27 = $ff;
  $28 = $ff;
  $29 = ($28|0)==(-2147483648);
  $30 = 0 & $29;
  $31 = $30;
  if ($31) {
   __ZN4core9panicking5panic17hee9f4f8d26a91787E(4352);
   // unreachable;
  }
  $36 = (($28|0) / 5)&-1;
  $$arith = (($27) + ($36))|0;
  $$postemp = (($27) + -2147483648)|0;
  $$negtemp = (($27) + 2147483647)|0;
  $$poscheck = ($$arith|0)<($$postemp|0);
  $$negcheck = ($$arith|0)>($$negtemp|0);
  $$ispos = ($27|0)>=(0);
  $$select = $$ispos ? $$poscheck : $$negcheck;
  $37 = $$select;
  if ($37) {
   __ZN4core9panicking5panic17hee9f4f8d26a91787E(4372);
   // unreachable;
  }
  $_0 = $$arith;
  $70 = $_0;
  STACKTOP = sp;return ($70|0);
 }
 $32 = $self;
 $33 = ((($32)) + 54|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&1;
 if ($35) {
  $38 = $self;
  $39 = ((($38)) + 52|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&1;
  $42 = $41 ^ 1;
  if ($42) {
   $_29 = 1;
  } else {
   label = 15;
  }
 } else {
  label = 15;
 }
 if ((label|0) == 15) {
  $_29 = 0;
 }
 $43 = $_29;
 $44 = $43&1;
 if ($44) {
  $45 = $ff;
  $46 = ($45|0)==(-2147483648);
  $47 = 0 & $46;
  $48 = $47;
  if ($48) {
   __ZN4core9panicking5panic17hee9f4f8d26a91787E(4312);
   // unreachable;
  }
  $53 = (($45|0) / 5)&-1;
  $$arith13 = $53<<2;
  $$iszero14 = ($53|0)==(0);
  $$denom15 = $$iszero14 ? 1 : $53;
  $$div16 = (($$arith13|0) / ($$denom15|0))&-1;
  $$same17 = ($$div16|0)!=(4);
  $$overflow18 = $$iszero14 ? 0 : $$same17;
  $54 = $$overflow18;
  if ($54) {
   __ZN4core9panicking5panic17hee9f4f8d26a91787E(4332);
   // unreachable;
  }
  $_0 = $$arith13;
  $70 = $_0;
  STACKTOP = sp;return ($70|0);
 }
 $49 = $self;
 $50 = ((($49)) + 52|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&1;
 if ($52) {
  $55 = $self;
  $56 = ((($55)) + 54|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&1;
  $59 = $58 ^ 1;
  if ($59) {
   $_40 = 1;
  } else {
   label = 23;
  }
 } else {
  label = 23;
 }
 if ((label|0) == 23) {
  $_40 = 0;
 }
 $60 = $_40;
 $61 = $60&1;
 $62 = $ff;
 $63 = ($62|0)==(-2147483648);
 $64 = 0 & $63;
 $65 = $64;
 if ($61) {
  if ($65) {
   __ZN4core9panicking5panic17hee9f4f8d26a91787E(4272);
   // unreachable;
  }
  $66 = (($62|0) / 4)&-1;
  $$arith5 = ($66*3)|0;
  $$iszero6 = ($66|0)==(0);
  $$denom7 = $$iszero6 ? 1 : $66;
  $$div8 = (($$arith5|0) / ($$denom7|0))&-1;
  $$same9 = ($$div8|0)!=(3);
  $$overflow10 = $$iszero6 ? 0 : $$same9;
  $67 = $$overflow10;
  if ($67) {
   __ZN4core9panicking5panic17hee9f4f8d26a91787E(4292);
   // unreachable;
  }
  $_0 = $$arith5;
  $70 = $_0;
  STACKTOP = sp;return ($70|0);
 } else {
  if ($65) {
   __ZN4core9panicking5panic17hee9f4f8d26a91787E(4232);
   // unreachable;
  }
  $68 = (($62|0) / 5)&-1;
  $$arith2 = ($68*3)|0;
  $$iszero = ($68|0)==(0);
  $$denom = $$iszero ? 1 : $68;
  $$div = (($$arith2|0) / ($$denom|0))&-1;
  $$same = ($$div|0)!=(3);
  $$overflow = $$iszero ? 0 : $$same;
  $69 = $$overflow;
  if ($69) {
   __ZN4core9panicking5panic17hee9f4f8d26a91787E(4252);
   // unreachable;
  }
  $_0 = $$arith2;
  $70 = $_0;
  STACKTOP = sp;return ($70|0);
 }
 return (0)|0;
}
function __ZN2ww12primary_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_14get_item_names17ha4fa749dc848eca3E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field4 = 0, $$index3 = 0, $$sreg$field = 0, $$sreg$field7 = 0, $$sreg$index6 = 0, $$sreg1$field = 0, $$sreg1$field10 = 0, $$sreg1$index9 = 0, $$sreg2$field = 0, $$sreg2$field13 = 0, $$sreg2$index12 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_21 = 0, $_22 = 0, $arg0 = 0, $items = 0, $personalityslot = 0, $personalityslot$index15 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $2 = sp + 32|0;
 $3 = sp + 16|0;
 $4 = sp;
 $personalityslot = sp + 72|0;
 $_21 = sp + 56|0;
 $items = sp + 40|0;
 $arg0 = $1;
 $_22 = 0;
 $5 = $arg0;
 $self = $5;
 __THREW__ = 0;
 invoke_vi(198,($items|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if (!($7)) {
   $_22 = 1;
   $8 = $self;
   $9 = ((($8)) + 54|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&1;
   if ($11) {
    __THREW__ = 0;
    invoke_vii(336,($4|0),(14525|0));
    $$sreg$field = HEAP32[$4>>2]|0;
    $$sreg$index6 = ((($4)) + 4|0);
    $$sreg$field7 = HEAP32[$$sreg$index6>>2]|0;
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     break;
    }
    __THREW__ = 0;
    invoke_viii(337,($items|0),($$sreg$field|0),($$sreg$field7|0));
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if ($15) {
     break;
    }
   }
   $16 = $self;
   $17 = ((($16)) + 52|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&1;
   if ($19) {
    __THREW__ = 0;
    invoke_vii(336,($3|0),(14526|0));
    $$sreg1$field = HEAP32[$3>>2]|0;
    $$sreg1$index9 = ((($3)) + 4|0);
    $$sreg1$field10 = HEAP32[$$sreg1$index9>>2]|0;
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     break;
    }
    __THREW__ = 0;
    invoke_viii(337,($items|0),($$sreg1$field|0),($$sreg1$field10|0));
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
   }
   $24 = $self;
   $25 = ((($24)) + 53|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&1;
   if (!($27)) {
    $_22 = 0;
    ;HEAP32[$_21>>2]=HEAP32[$items>>2]|0;HEAP32[$_21+4>>2]=HEAP32[$items+4>>2]|0;HEAP32[$_21+8>>2]=HEAP32[$items+8>>2]|0;
    ;HEAP32[$0>>2]=HEAP32[$_21>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_21+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_21+8>>2]|0;
    STACKTOP = sp;return;
   }
   __THREW__ = 0;
   invoke_vii(336,($2|0),(14527|0));
   $$sreg2$field = HEAP32[$2>>2]|0;
   $$sreg2$index12 = ((($2)) + 4|0);
   $$sreg2$field13 = HEAP32[$$sreg2$index12>>2]|0;
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if (!($29)) {
    __THREW__ = 0;
    invoke_viii(337,($items|0),($$sreg2$field|0),($$sreg2$field13|0));
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if (!($31)) {
     $_22 = 0;
     ;HEAP32[$_21>>2]=HEAP32[$items>>2]|0;HEAP32[$_21+4>>2]=HEAP32[$items+4>>2]|0;HEAP32[$_21+8>>2]=HEAP32[$items+8>>2]|0;
     ;HEAP32[$0>>2]=HEAP32[$_21>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_21+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_21+8>>2]|0;
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = tempRet0;
 HEAP32[$personalityslot>>2] = $32;
 $personalityslot$index15 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index15>>2] = $33;
 $34 = $_22;
 $35 = $34&1;
 if (!($35)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index3 = ((($personalityslot)) + 4|0);
  $$field4 = HEAP32[$$index3>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_22 = 0;
 __ZN4drop17h4913d7746a6e2c06E($items);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index3 = ((($personalityslot)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN2ww4util13friendly_join17hc84e2e20c42768e7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$arith10 = 0, $$field = 0, $$field2 = 0, $$index1 = 0, $$overflow = 0, $$overflow11 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_14 = 0, $_15 = 0, $_3 = 0, $_34 = 0, $_40 = 0, $_68 = 0, $_69 = 0, $_9 = 0, $__arg0 = 0;
 var $__arg1 = 0, $arg = 0, $arg0 = 0, $i = 0, $iter = 0, $personalityslot = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0, $personalityslot$index8 = 0, $s = 0, $strings = 0, $switch = 0, $tmp_ret = 0, $tmp_ret3 = 0, $tmp_ret4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $tmp_ret4 = sp + 168|0;
 $tmp_ret3 = sp + 160|0;
 $arg = sp + 152|0;
 $tmp_ret = sp + 144|0;
 $personalityslot = sp + 136|0;
 $_68 = sp + 120|0;
 $_40 = sp + 112|0;
 $iter = sp + 104|0;
 $_34 = sp + 96|0;
 $s = sp + 80|0;
 $_15 = sp + 72|0;
 $_14 = sp + 56|0;
 $_9 = sp + 32|0;
 $strings = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$1>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$1+8>>2]|0;
 $_69 = 0;
 ;HEAP32[$strings>>2]=HEAP32[$arg0>>2]|0;HEAP32[$strings+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$strings+8>>2]=HEAP32[$arg0+8>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(210,($strings|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   label = 33;
  } else {
   $_3 = $2;
   $5 = $_3;
   L3: do {
    switch ($5|0) {
    case 0:  {
     __THREW__ = 0;
     invoke_vi(338,($0|0));
     $6 = __THREW__; __THREW__ = 0;
     $7 = $6&1;
     if ($7) {
      label = 33;
      break L1;
     }
     break;
    }
    case 1:  {
     __THREW__ = 0;
     $8 = (invoke_iii(187,($strings|0),0)|0);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      label = 33;
      break L1;
     }
     $20 = HEAP32[$8>>2]|0;
     $21 = ((($8)) + 4|0);
     $22 = HEAP32[$21>>2]|0;
     __THREW__ = 0;
     invoke_viii(244,($0|0),($20|0),($22|0));
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if ($24) {
      label = 33;
      break L1;
     }
     break;
    }
    case 2:  {
     $11 = HEAP32[1120]|0;
     $12 = HEAP32[(4484)>>2]|0;
     __THREW__ = 0;
     $13 = (invoke_iii(187,($strings|0),0)|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if ($15) {
      label = 33;
      break L1;
     }
     __THREW__ = 0;
     $25 = (invoke_iii(187,($strings|0),1)|0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      label = 33;
      break L1;
     }
     HEAP32[$_15>>2] = $13;
     $28 = ((($_15)) + 4|0);
     HEAP32[$28>>2] = $25;
     $29 = HEAP32[$_15>>2]|0;
     $__arg0 = $29;
     $30 = ((($_15)) + 4|0);
     $31 = HEAP32[$30>>2]|0;
     $__arg1 = $31;
     $32 = $__arg0;
     __THREW__ = 0;
     invoke_viii(126,($tmp_ret3|0),($32|0),(127|0));
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      label = 33;
      break L1;
     }
     $35 = ((($tmp_ret3)) + 4|0);
     $36 = HEAP32[$tmp_ret3>>2]|0;
     $37 = HEAP32[$35>>2]|0;
     $38 = $__arg1;
     __THREW__ = 0;
     invoke_viii(126,($tmp_ret4|0),($38|0),(127|0));
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      label = 33;
      break L1;
     }
     $41 = ((($tmp_ret4)) + 4|0);
     $42 = HEAP32[$tmp_ret4>>2]|0;
     $43 = HEAP32[$41>>2]|0;
     HEAP32[$_14>>2] = $36;
     $44 = ((($_14)) + 4|0);
     HEAP32[$44>>2] = $37;
     $45 = ((($_14)) + 8|0);
     HEAP32[$45>>2] = $42;
     $46 = ((($45)) + 4|0);
     HEAP32[$46>>2] = $43;
     __THREW__ = 0;
     invoke_viiiii(130,($_9|0),($11|0),($12|0),($_14|0),2);
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if ($48) {
      label = 33;
      break L1;
     }
     __THREW__ = 0;
     invoke_vii(139,($0|0),($_9|0));
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      label = 33;
      break L1;
     }
     break;
    }
    default: {
     __THREW__ = 0;
     invoke_vi(338,($s|0));
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     L5: do {
      if (!($17)) {
       $_69 = 1;
       __THREW__ = 0;
       $51 = (invoke_ii(210,($strings|0))|0);
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if (!($53)) {
        $$arith10 = (($51) - 1)|0;
        $$overflow11 = ($51>>>0)<(1);
        $54 = $$overflow11;
        if ($54) {
         __THREW__ = 0;
         invoke_vi(78,(4488|0));
         $102 = __THREW__; __THREW__ = 0;
         break;
        }
        HEAP32[$_34>>2] = 0;
        $55 = ((($_34)) + 4|0);
        HEAP32[$55>>2] = $$arith10;
        $56 = ((($_34)) + 4|0);
        $57 = HEAP32[$_34>>2]|0;
        $58 = HEAP32[$56>>2]|0;
        HEAP32[$arg>>2] = $57;
        $59 = ((($arg)) + 4|0);
        HEAP32[$59>>2] = $58;
        __THREW__ = 0;
        invoke_vii(145,($tmp_ret|0),($arg|0));
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if (!($61)) {
         $62 = ((($tmp_ret)) + 4|0);
         $63 = HEAP32[$tmp_ret>>2]|0;
         $64 = HEAP32[$62>>2]|0;
         HEAP32[$iter>>2] = $63;
         $65 = ((($iter)) + 4|0);
         HEAP32[$65>>2] = $64;
         while(1) {
          __THREW__ = 0;
          invoke_vii(146,($_40|0),($iter|0));
          $66 = __THREW__; __THREW__ = 0;
          $67 = $66&1;
          if ($67) {
           break L5;
          }
          $68 = HEAP32[$_40>>2]|0;
          $switch = ($68>>>0)<(1);
          if ($switch) {
           break;
          }
          $71 = ((($_40)) + 4|0);
          $72 = HEAP32[$71>>2]|0;
          $i = $72;
          $73 = $i;
          __THREW__ = 0;
          $74 = (invoke_iii(187,($strings|0),($73|0))|0);
          $75 = __THREW__; __THREW__ = 0;
          $76 = $75&1;
          if ($76) {
           break L5;
          }
          $77 = HEAP32[$74>>2]|0;
          $78 = ((($74)) + 4|0);
          $79 = HEAP32[$78>>2]|0;
          __THREW__ = 0;
          invoke_viii(339,($s|0),($77|0),($79|0));
          $80 = __THREW__; __THREW__ = 0;
          $81 = $80&1;
          if ($81) {
           break L5;
          }
          __THREW__ = 0;
          invoke_viii(339,($s|0),(14392|0),2);
          $82 = __THREW__; __THREW__ = 0;
          $83 = $82&1;
          if ($83) {
           break L5;
          }
         }
         __THREW__ = 0;
         invoke_viii(339,($s|0),(14388|0),4);
         $69 = __THREW__; __THREW__ = 0;
         $70 = $69&1;
         if (!($70)) {
          __THREW__ = 0;
          $84 = (invoke_ii(210,($strings|0))|0);
          $85 = __THREW__; __THREW__ = 0;
          $86 = $85&1;
          if (!($86)) {
           $$arith = (($84) - 1)|0;
           $$overflow = ($84>>>0)<(1);
           $87 = $$overflow;
           if ($87) {
            __THREW__ = 0;
            invoke_vi(78,(4508|0));
            $103 = __THREW__; __THREW__ = 0;
            break;
           }
           __THREW__ = 0;
           $88 = (invoke_iii(187,($strings|0),($$arith|0))|0);
           $89 = __THREW__; __THREW__ = 0;
           $90 = $89&1;
           if (!($90)) {
            $91 = HEAP32[$88>>2]|0;
            $92 = ((($88)) + 4|0);
            $93 = HEAP32[$92>>2]|0;
            __THREW__ = 0;
            invoke_viii(339,($s|0),($91|0),($93|0));
            $94 = __THREW__; __THREW__ = 0;
            $95 = $94&1;
            if (!($95)) {
             $_69 = 0;
             ;HEAP32[$_68>>2]=HEAP32[$s>>2]|0;HEAP32[$_68+4>>2]=HEAP32[$s+4>>2]|0;HEAP32[$_68+8>>2]=HEAP32[$s+8>>2]|0;
             ;HEAP32[$0>>2]=HEAP32[$_68>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_68+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_68+8>>2]|0;
             break L3;
            }
           }
          }
         }
        }
       }
      }
     } while(0);
     $98 = ___cxa_find_matching_catch_2()|0;
     $99 = tempRet0;
     HEAP32[$personalityslot>>2] = $98;
     $personalityslot$index6 = ((($personalityslot)) + 4|0);
     HEAP32[$personalityslot$index6>>2] = $99;
     $100 = $_69;
     $101 = $100&1;
     if (!($101)) {
      break L1;
     }
     $_69 = 0;
     __ZN4drop17hdd1638425ff7362fE($s);
     break L1;
    }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(192,($strings|0));
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if (!($19)) {
    STACKTOP = sp;return;
   }
   $104 = ___cxa_find_matching_catch_2()|0;
   $105 = tempRet0;
   HEAP32[$personalityslot>>2] = $104;
   $personalityslot$index8 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index8>>2] = $105;
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index1 = ((($personalityslot)) + 4|0);
   $$field2 = HEAP32[$$index1>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
 } while(0);
 if ((label|0) == 33) {
  $96 = ___cxa_find_matching_catch_2()|0;
  $97 = tempRet0;
  HEAP32[$personalityslot>>2] = $96;
  $personalityslot$index4 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index4>>2] = $97;
 }
 __ZN4drop17h4913d7746a6e2c06E($strings);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN11collections6string6String3new17h698b5c52ae395e87E($0) {
 $0 = $0|0;
 var $_1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_1 = sp;
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3new17hf0bf8434641529a0E($_1);
 ;HEAP32[$0>>2]=HEAP32[$_1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_1+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN11collections6string6String8push_str17h7a4b9fa9773bf26bE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $self = 0, $self$i = 0, $string = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp;
 $self$i = sp + 32|0;
 $arg0$i = sp + 24|0;
 $string = sp + 16|0;
 $arg1 = sp + 8|0;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $4 = ((($arg1)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = $arg0;
 $self = $5;
 $6 = HEAP32[$arg1>>2]|0;
 $7 = ((($arg1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$string>>2] = $6;
 $9 = ((($string)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = $self;
 $11 = HEAP32[$string>>2]|0;
 $12 = ((($string)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$arg0$i>>2] = $11;
 $14 = ((($arg0$i)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$arg0$i>>2]|0;
 $16 = ((($arg0$i)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$self$i>>2] = $15;
 $18 = ((($self$i)) + 4|0);
 HEAP32[$18>>2] = $17;
 $19 = HEAP32[$self$i>>2]|0;
 $20 = ((($self$i)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 __ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_8as_bytes17h4b4339e2c1ddc0b5E($3,$19,$21);
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index1 = ((($3)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_17extend_from_slice17he539753f7e115df0E($10,$$sreg$field,$$sreg$field2);
 STACKTOP = sp;return;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_17extend_from_slice17he539753f7e115df0E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_6 = 0, $arg0 = 0, $arg1 = 0, $other = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_6 = sp + 16|0;
 $other = sp + 8|0;
 $arg1 = sp;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $3 = ((($arg1)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = $arg0;
 $self = $4;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$other>>2] = $5;
 $8 = ((($other)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = $self;
 $10 = HEAP32[$other>>2]|0;
 $11 = ((($other)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_4iter17ha1628eafac1147e5E($_6,$10,$12);
 __ZN151__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT__RF__u27_a_u20_T_C__u20_core__slice__Iter_LT__u27_a_C__u20_T_GT__GT__GT_11spec_extend17h12e63d8db2a19a29E($9,$_6);
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_4iter17ha1628eafac1147e5E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $1;
 $3 = ((($arg0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$arg0>>2]|0;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $4;
 $7 = ((($self)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$self>>2]|0;
 $9 = ((($self)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_4iter17h21b15f69a969ef78E($0,$8,$10);
 STACKTOP = sp;return;
}
function __ZN151__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT__RF__u27_a_u20_T_C__u20_core__slice__Iter_LT__u27_a_C__u20_T_GT__GT__GT_11spec_extend17h12e63d8db2a19a29E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field4 = 0, $$sreg$index3 = 0, $$sreg1$field = 0, $$sreg1$field8 = 0, $$sreg1$index7 = 0, $$sreg2$field = 0, $$sreg2$field11 = 0, $$sreg2$index10 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_25 = 0, $arg0 = 0, $arg1 = 0, $iterator = 0, $len = 0, $self = 0, $slice = 0;
 var $slice$index6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $2 = sp + 32|0;
 $3 = sp + 16|0;
 $4 = sp;
 $_25 = sp + 64|0;
 $slice = sp + 56|0;
 $iterator = sp + 48|0;
 $arg1 = sp + 40|0;
 $arg0 = $0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;
 $5 = $arg0;
 $self = $5;
 ;HEAP32[$iterator>>2]=HEAP32[$arg1>>2]|0;HEAP32[$iterator+4>>2]=HEAP32[$arg1+4>>2]|0;
 __ZN49__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__GT_8as_slice17h8875c1a73278fde1E($4,$iterator);
 $$sreg$field = HEAP32[$4>>2]|0;
 $$sreg$index3 = ((($4)) + 4|0);
 $$sreg$field4 = HEAP32[$$sreg$index3>>2]|0;
 HEAP32[$slice>>2] = $$sreg$field;
 $slice$index6 = ((($slice)) + 4|0);
 HEAP32[$slice$index6>>2] = $$sreg$field4;
 $6 = $self;
 $7 = HEAP32[$slice>>2]|0;
 $8 = ((($slice)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17h6bfcee3dfc10dc1bE($7,$9)|0);
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17hab7ef0c22ea28670E($6,$10);
 $11 = $self;
 $12 = (__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3len17h48e7fd72494c9a0dE($11)|0);
 $len = $12;
 $13 = $self;
 $14 = $len;
 $15 = HEAP32[$slice>>2]|0;
 $16 = ((($slice)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17h6bfcee3dfc10dc1bE($15,$17)|0);
 $19 = (($14) + ($18))|0;
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7set_len17h4034031d53fa374dE($13,$19);
 $20 = $self;
 __ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17ha21b65c68a8816cbE($3,$20);
 $$sreg1$field = HEAP32[$3>>2]|0;
 $$sreg1$index7 = ((($3)) + 4|0);
 $$sreg1$field8 = HEAP32[$$sreg1$index7>>2]|0;
 $21 = $len;
 HEAP32[$_25>>2] = $21;
 $22 = HEAP32[$_25>>2]|0;
 __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17hffa0ce1dd5bee877E($2,$$sreg1$field,$$sreg1$field8,$22);
 $$sreg2$field = HEAP32[$2>>2]|0;
 $$sreg2$index10 = ((($2)) + 4|0);
 $$sreg2$field11 = HEAP32[$$sreg2$index10>>2]|0;
 $23 = HEAP32[$slice>>2]|0;
 $24 = ((($slice)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_15copy_from_slice17h54735342f4a46a92E($$sreg2$field,$$sreg2$field11,$23,$25);
 STACKTOP = sp;return;
}
function __ZN49__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__GT_8as_slice17h8875c1a73278fde1E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $$sink$index = 0, $$sink$index9 = 0, $$sreg$field = 0, $$sreg$field3 = 0, $$sreg$index2 = 0, $$sreg1$field = 0, $$sreg1$field6 = 0, $$sreg1$index5 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $arg0 = 0, $arg0$i = 0, $arg0$i2 = 0, $diff = 0;
 var $len = 0, $retVal$index13 = 0, $self = 0, $start1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $1 = sp + 16|0;
 $2 = sp;
 $_0 = sp + 24|0;
 $arg0 = $0;
 $3 = $arg0;
 $self = $3;
 $4 = $self;
 $5 = HEAP32[$4>>2]|0;
 $start1 = $5;
 $6 = $self;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8;
 $10 = $start1;
 $11 = $10;
 $12 = (__ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h1f1bc21fa0db5e6aE($9,$11)|0);
 $diff = $12;
 $13 = $start1;
 $arg0$i = $13;
 $14 = (__ZN4core3mem7size_of17h6cde1ee6d900fb7fE()|0);
 $15 = ($14|0)==(0);
 $16 = $diff;
 do {
  if ($15) {
   __ZN4core5slice14from_raw_parts17h6406e96cc680f98fE($2,(1),$16);
   $$sreg$field = HEAP32[$2>>2]|0;
   $$sreg$index2 = ((($2)) + 4|0);
   $$sreg$field3 = HEAP32[$$sreg$index2>>2]|0;
   $$sink$index = $$sreg$field;$$sink$index9 = $$sreg$field3;
  } else {
   $17 = $start1;
   $arg0$i2 = $17;
   $18 = (__ZN4core3mem7size_of17h6cde1ee6d900fb7fE()|0);
   $19 = ($18|0)==(0);
   $20 = $19;
   if ($20) {
    __ZN4core9panicking5panic17hee9f4f8d26a91787E(4528);
    // unreachable;
   } else {
    $21 = (($16>>>0) / ($18>>>0))&-1;
    $len = $21;
    $22 = $start1;
    $23 = $len;
    __ZN4core5slice14from_raw_parts17h6406e96cc680f98fE($1,$22,$23);
    $$sreg1$field = HEAP32[$1>>2]|0;
    $$sreg1$index5 = ((($1)) + 4|0);
    $$sreg1$field6 = HEAP32[$$sreg1$index5>>2]|0;
    $$sink$index = $$sreg1$field;$$sink$index9 = $$sreg1$field6;
    break;
   }
  }
 } while(0);
 HEAP32[$_0>>2] = $$sink$index;
 $24 = ((($_0)) + 4|0);
 HEAP32[$24>>2] = $$sink$index9;
 $25 = HEAP32[$_0>>2]|0;
 $26 = ((($_0)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$retVal>>2] = $25;
 $retVal$index13 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index13>>2] = $27;
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17h6bfcee3dfc10dc1bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17heae38b00d24427d9E($7,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17hab7ef0c22ea28670E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $additional = 0, $arg0 = 0, $arg1 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $additional = $3;
 $4 = $self;
 $5 = $self;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $additional;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_7reserve17hcf4ace7d0af5d041E($4,$7,$8);
 STACKTOP = sp;return;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7set_len17h4034031d53fa374dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg0 = 0, $arg1 = 0, $len = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $arg0 = $0;
 $arg1 = $1;
 $2 = $arg0;
 $self = $2;
 $3 = $arg1;
 $len = $3;
 $4 = $len;
 $5 = $self;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17hffa0ce1dd5bee877E($retVal,$0,$1,$2) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field7 = 0, $$index6 = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_8 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $index = 0, $personalityslot = 0, $personalityslot$index5 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $personalityslot = sp + 48|0;
 $_8 = sp + 40|0;
 $index = sp + 32|0;
 $self = sp + 24|0;
 $abi_cast = sp + 56|0;
 $arg1 = sp + 16|0;
 $arg0 = sp + 8|0;
 HEAP32[$arg0>>2] = $0;
 $4 = ((($arg0)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$abi_cast>>2] = $2;
 ;HEAP32[$arg1>>2]=HEAP32[$abi_cast>>2]|0;
 $5 = HEAP32[$arg0>>2]|0;
 $6 = ((($arg0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$self>>2] = $5;
 $8 = ((($self)) + 4|0);
 HEAP32[$8>>2] = $7;
 ;HEAP32[$index>>2]=HEAP32[$arg1>>2]|0;
 $9 = HEAP32[$self>>2]|0;
 $10 = ((($self)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 ;HEAP32[$_8>>2]=HEAP32[$index>>2]|0;
 $12 = HEAP32[$_8>>2]|0;
 __THREW__ = 0;
 invoke_viiii(340,($3|0),($9|0),($11|0),($12|0));
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index1 = ((($3)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  HEAP32[$personalityslot>>2] = $15;
  $personalityslot$index5 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index5>>2] = $16;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index6 = ((($personalityslot)) + 4|0);
  $$field7 = HEAP32[$$index6>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  HEAP32[$retVal>>2] = $$sreg$field;
  $retVal$index4 = ((($retVal)) + 4|0);
  HEAP32[$retVal$index4>>2] = $$sreg$field2;
  STACKTOP = sp;return;
 }
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_15copy_from_slice17h54735342f4a46a92E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $self = 0, $src = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $src = sp + 24|0;
 $self = sp + 16|0;
 $arg1 = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $4 = ((($arg0)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$arg1>>2] = $2;
 $5 = ((($arg1)) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = HEAP32[$arg0>>2]|0;
 $7 = ((($arg0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$self>>2] = $6;
 $9 = ((($self)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$arg1>>2]|0;
 $11 = ((($arg1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$src>>2] = $10;
 $13 = ((($src)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$self>>2]|0;
 $15 = ((($self)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$src>>2]|0;
 $18 = ((($src)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_15copy_from_slice17hc83de767fe14f97fE($14,$16,$17,$19);
 STACKTOP = sp;return;
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_15copy_from_slice17hc83de767fe14f97fE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $self = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $src = sp + 24|0;
 $self = sp + 16|0;
 $arg1 = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $4 = ((($arg0)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$arg1>>2] = $2;
 $5 = ((($arg1)) + 4|0);
 HEAP32[$5>>2] = $3;
 $6 = HEAP32[$arg0>>2]|0;
 $7 = ((($arg0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$self>>2] = $6;
 $9 = ((($self)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$arg1>>2]|0;
 $11 = ((($arg1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$src>>2] = $10;
 $13 = ((($src)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$self>>2]|0;
 $15 = ((($self)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17heae38b00d24427d9E($14,$16)|0);
 $18 = HEAP32[$src>>2]|0;
 $19 = ((($src)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17heae38b00d24427d9E($18,$20)|0);
 $22 = ($17|0)==($21|0);
 $23 = $22 ^ 1;
 if ($23) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(5604);
  // unreachable;
 } else {
  $24 = HEAP32[$src>>2]|0;
  $25 = ((($src)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_6as_ptr17hba296da3e1414b7bE($24,$26)|0);
  $28 = HEAP32[$self>>2]|0;
  $29 = ((($self)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h4ab51adc17983fdaE($28,$30)|0);
  $32 = HEAP32[$self>>2]|0;
  $33 = ((($self)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17heae38b00d24427d9E($32,$34)|0);
  $36 = $35;
  _memcpy(($31|0),($27|0),($36|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17h9c59bc2b47845f7cE($retVal,$0,$1,$2) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field7 = 0, $$index6 = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_7 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $index = 0, $personalityslot = 0, $personalityslot$index5 = 0, $retVal$index4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $personalityslot = sp + 48|0;
 $_7 = sp + 40|0;
 $index = sp + 32|0;
 $self = sp + 24|0;
 $abi_cast = sp + 56|0;
 $arg1 = sp + 16|0;
 $arg0 = sp + 8|0;
 HEAP32[$arg0>>2] = $0;
 $4 = ((($arg0)) + 4|0);
 HEAP32[$4>>2] = $1;
 HEAP32[$abi_cast>>2] = $2;
 ;HEAP32[$arg1>>2]=HEAP32[$abi_cast>>2]|0;
 $5 = HEAP32[$arg0>>2]|0;
 $6 = ((($arg0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$self>>2] = $5;
 $8 = ((($self)) + 4|0);
 HEAP32[$8>>2] = $7;
 ;HEAP32[$index>>2]=HEAP32[$arg1>>2]|0;
 ;HEAP32[$_7>>2]=HEAP32[$index>>2]|0;
 $9 = HEAP32[$self>>2]|0;
 $10 = ((($self)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$_7>>2]|0;
 __THREW__ = 0;
 invoke_viiii(341,($3|0),($12|0),($9|0),($11|0));
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index1 = ((($3)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = tempRet0;
  HEAP32[$personalityslot>>2] = $15;
  $personalityslot$index5 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index5>>2] = $16;
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index6 = ((($personalityslot)) + 4|0);
  $$field7 = HEAP32[$$index6>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 } else {
  HEAP32[$retVal>>2] = $$sreg$field;
  $retVal$index4 = ((($retVal)) + 4|0);
  HEAP32[$retVal$index4>>2] = $$sreg$field2;
  STACKTOP = sp;return;
 }
}
function __ZN86__LT_core__ops__RangeFrom_LT_usize_GT__u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17h908f8390bd613478E($retVal,$0,$1,$2) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_7 = 0, $abi_cast = 0, $arg = 0, $arg0 = 0, $arg1 = 0, $retVal$index4 = 0, $self = 0, $slice = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $arg = sp + 48|0;
 $_7 = sp + 40|0;
 $slice = sp + 32|0;
 $self = sp + 24|0;
 $arg1 = sp + 16|0;
 $abi_cast = sp + 56|0;
 $arg0 = sp + 8|0;
 HEAP32[$abi_cast>>2] = $0;
 ;HEAP32[$arg0>>2]=HEAP32[$abi_cast>>2]|0;
 HEAP32[$arg1>>2] = $1;
 $4 = ((($arg1)) + 4|0);
 HEAP32[$4>>2] = $2;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;
 $5 = HEAP32[$arg1>>2]|0;
 $6 = ((($arg1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$slice>>2] = $5;
 $8 = ((($slice)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$self>>2]|0;
 $10 = HEAP32[$slice>>2]|0;
 $11 = ((($slice)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_3len17heae38b00d24427d9E($10,$12)|0);
 HEAP32[$_7>>2] = $9;
 $14 = ((($_7)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$slice>>2]|0;
 $16 = ((($slice)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($_7)) + 4|0);
 $19 = HEAP32[$_7>>2]|0;
 $20 = HEAP32[$18>>2]|0;
 HEAP32[$arg>>2] = $19;
 $21 = ((($arg)) + 4|0);
 HEAP32[$21>>2] = $20;
 __ZN82__LT_core__ops__Range_LT_usize_GT__u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17hadb6ad8b48d48930E($3,$arg,$15,$17);
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index1 = ((($3)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN82__LT_core__ops__Range_LT_usize_GT__u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17hadb6ad8b48d48930E($retVal,$0,$1,$2) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $arg1 = 0, $retVal$index4 = 0, $self = 0, $slice = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp;
 $slice = sp + 32|0;
 $self = sp + 24|0;
 $arg1 = sp + 16|0;
 $arg0 = sp + 8|0;
 ;HEAP32[$arg0>>2]=HEAP32[$0>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$0+4>>2]|0;
 HEAP32[$arg1>>2] = $1;
 $4 = ((($arg1)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($arg0)) + 4|0);
 $6 = HEAP32[$arg0>>2]|0;
 $7 = HEAP32[$5>>2]|0;
 HEAP32[$self>>2] = $6;
 $8 = ((($self)) + 4|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$arg1>>2]|0;
 $10 = ((($arg1)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$slice>>2] = $9;
 $12 = ((($slice)) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$slice>>2]|0;
 $14 = ((($slice)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17h4ab51adc17983fdaE($13,$15)|0);
 $17 = HEAP32[$self>>2]|0;
 $18 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17hebe800c933a769c6E($16,$17)|0);
 $19 = ((($self)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$self>>2]|0;
 $22 = (($20) - ($21))|0;
 __ZN4core5slice18from_raw_parts_mut17ha342aa6cf572bffaE($3,$18,$22);
 $$sreg$field = HEAP32[$3>>2]|0;
 $$sreg$index1 = ((($3)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 HEAP32[$retVal>>2] = $$sreg$field;
 $retVal$index4 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index4>>2] = $$sreg$field2;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_7reserve17hcf4ace7d0af5d041E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $_40 = 0, $abi_cast = 0, $align = 0, $arg0 = 0, $arg0$i = 0, $arg1 = 0, $arg2 = 0, $elem_size = 0, $needed_extra_cap = 0, $new_alloc_size = 0;
 var $new_cap = 0, $ptr = 0, $self = 0, $self$i = 0, $tmp_ret = 0, $used_cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $abi_cast = sp + 60|0;
 $tmp_ret = sp + 8|0;
 $_40 = sp;
 $arg0 = $0;
 $arg1 = $1;
 $arg2 = $2;
 $3 = $arg0;
 $self = $3;
 $4 = $arg1;
 $used_cap = $4;
 $5 = $arg2;
 $needed_extra_cap = $5;
 $6 = (__ZN4core3mem7size_of17h6cde1ee6d900fb7fE()|0);
 $elem_size = $6;
 $7 = (__ZN4core3mem8align_of17h1a0162c006f124b9E()|0);
 $align = $7;
 $8 = $self;
 $arg0$i = $8;
 $9 = $arg0$i;
 $self$i = $9;
 $10 = (__ZN4core3mem7size_of17h6cde1ee6d900fb7fE()|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $_0$i = -1;
 } else {
  $12 = $self$i;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $_0$i = $14;
 }
 $15 = $_0$i;
 $16 = $used_cap;
 $17 = (__ZN4core3num23__LT_impl_u20_usize_GT_12wrapping_sub17h1f1bc21fa0db5e6aE($15,$16)|0);
 $18 = $needed_extra_cap;
 $19 = ($17>>>0)>=($18>>>0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = $self;
 $21 = $used_cap;
 $22 = $needed_extra_cap;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_18amortized_new_size17hcb19cc862fef6a01E($tmp_ret,$20,$21,$22);
 $23 = ((($tmp_ret)) + 4|0);
 $24 = HEAP32[$tmp_ret>>2]|0;
 $25 = HEAP32[$23>>2]|0;
 $new_cap = $24;
 $new_alloc_size = $25;
 $26 = $new_alloc_size;
 __ZN5alloc7raw_vec11alloc_guard17hfcdaec6264df46d3E($26);
 $27 = $self;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = $new_alloc_size;
  $32 = $align;
  $33 = (__ZN5alloc4heap8allocate17h7ecb09ae67165feeE($31,$32)|0);
  $ptr = $33;
 } else {
  $34 = $self;
  $35 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17h2197c429996431f2E($34)|0);
  $36 = $self;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $elem_size;
  $40 = Math_imul($38, $39)|0;
  $41 = $new_alloc_size;
  $42 = $align;
  $43 = (__ZN5alloc4heap10reallocate17hd6647ec82355ed5aE($35,$40,$41,$42)|0);
  $ptr = $43;
 }
 $44 = $ptr;
 $45 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17hd8e9e87391b89bc2E($44)|0);
 if ($45) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 }
 $46 = $ptr;
 $47 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h099f803f867e2ddbE($46)|0);
 HEAP32[$abi_cast>>2] = $47;
 ;HEAP32[$_40>>2]=HEAP32[$abi_cast>>2]|0;
 $48 = $self;
 ;HEAP32[$48>>2]=HEAP32[$_40>>2]|0;
 $49 = $new_cap;
 $50 = $self;
 $51 = ((($50)) + 4|0);
 HEAP32[$51>>2] = $49;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_18amortized_new_size17hcb19cc862fef6a01E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_20 = 0, $_9 = 0, $arg0 = 0, $arg1 = 0, $arg2 = 0, $double_cap = 0, $elem_size = 0, $needed_extra_cap = 0, $new_alloc_size = 0, $new_cap = 0, $required_cap = 0, $self = 0, $used_cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_20 = sp + 8|0;
 $_9 = sp;
 $arg0 = $1;
 $arg1 = $2;
 $arg2 = $3;
 $4 = $arg0;
 $self = $4;
 $5 = $arg1;
 $used_cap = $5;
 $6 = $arg2;
 $needed_extra_cap = $6;
 $7 = (__ZN4core3mem7size_of17h6cde1ee6d900fb7fE()|0);
 $elem_size = $7;
 $8 = $used_cap;
 $9 = $needed_extra_cap;
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_add17ha98cfb78e5cf5d5bE($_9,$8,$9);
 $10 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17hbe300160939604f9E($_9,13086,17)|0);
 $required_cap = $10;
 $11 = $self;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13<<1;
 $double_cap = $14;
 $15 = $double_cap;
 $16 = $required_cap;
 $17 = (__ZN4core3cmp3max17hde8d93c2d99ac427E($15,$16)|0);
 $new_cap = $17;
 $18 = $new_cap;
 $19 = $elem_size;
 __ZN4core3num23__LT_impl_u20_usize_GT_11checked_mul17h86749854cd7d344eE($_20,$18,$19);
 $20 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17hbe300160939604f9E($_20,13086,17)|0);
 $new_alloc_size = $20;
 $21 = $new_cap;
 $22 = $new_alloc_size;
 HEAP32[$0>>2] = $21;
 $23 = ((($0)) + 4|0);
 HEAP32[$23>>2] = $22;
 STACKTOP = sp;return;
}
function __ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h099f803f867e2ddbE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, $_0$i = 0, $_3 = 0, $abi_cast = 0, $arg0 = 0, $arg0$i = 0, $inner$i = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_0$i = sp + 16|0;
 $abi_cast = sp + 28|0;
 $_3 = sp + 8|0;
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $ptr = $1;
 $2 = $ptr;
 $arg0$i = $2;
 $3 = $arg0$i;
 $inner$i = $3;
 $4 = $inner$i;
 HEAP32[$_0$i>>2] = $4;
 $5 = HEAP32[$_0$i>>2]|0;
 HEAP32[$abi_cast>>2] = $5;
 ;HEAP32[$_3>>2]=HEAP32[$abi_cast>>2]|0;
 ;HEAP32[$_0>>2]=HEAP32[$_3>>2]|0;
 $6 = HEAP32[$_0>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3new17hf0bf8434641529a0E($0) {
 $0 = $0|0;
 var $1 = 0, $_1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_1 = sp;
 __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17h2773c3e8ce4f3e62E($_1);
 ;HEAP32[$0>>2]=HEAP32[$_1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_1+4>>2]|0;
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3new17h2773c3e8ce4f3e62E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_4 = 0, $abi_cast = 0, $cap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $abi_cast = sp + 8|0;
 $_4 = sp;
 $1 = (__ZN4core3mem7size_of17h6cde1ee6d900fb7fE()|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $cap = -1;
 } else {
  $cap = 0;
 }
 $3 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17h099f803f867e2ddbE((1))|0);
 HEAP32[$abi_cast>>2] = $3;
 ;HEAP32[$_4>>2]=HEAP32[$abi_cast>>2]|0;
 $4 = $cap;
 ;HEAP32[$0>>2]=HEAP32[$_4>>2]|0;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_4push17he4bbe5d579439778E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$sreg$field = 0, $$sreg$field5 = 0, $$sreg$index4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$i = 0, $_22 = 0;
 var $arg0 = 0, $arg0$i = 0, $arg1 = 0, $end = 0, $personalityslot = 0, $personalityslot$index7 = 0, $self = 0, $self$i = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $personalityslot = sp + 24|0;
 $value = sp + 16|0;
 $arg1 = sp + 8|0;
 $arg0 = $0;
 HEAP32[$arg1>>2] = $1;
 $4 = ((($arg1)) + 4|0);
 HEAP32[$4>>2] = $2;
 $_22 = 0;
 $5 = $arg0;
 $self = $5;
 $_22 = 1;
 $6 = HEAP32[$arg1>>2]|0;
 $7 = ((($arg1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$value>>2] = $6;
 $9 = ((($value)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = $self;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $self;
 $arg0$i = $13;
 $14 = $arg0$i;
 $self$i = $14;
 __THREW__ = 0;
 $15 = (invoke_i(342)|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 do {
  if (!($17)) {
   $18 = ($15|0)==(0);
   if ($18) {
    $_0$i = -1;
   } else {
    $19 = $self$i;
    $20 = ((($19)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $_0$i = $21;
   }
   $22 = $_0$i;
   $23 = ($12|0)==($22|0);
   if ($23) {
    $24 = $self;
    __THREW__ = 0;
    invoke_vi(343,($24|0));
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     break;
    }
   }
   $27 = $self;
   __THREW__ = 0;
   invoke_vii(203,($3|0),($27|0));
   $$sreg$field = HEAP32[$3>>2]|0;
   $$sreg$index4 = ((($3)) + 4|0);
   $$sreg$field5 = HEAP32[$$sreg$index4>>2]|0;
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if (!($29)) {
    __THREW__ = 0;
    $30 = (invoke_iii(344,($$sreg$field|0),($$sreg$field5|0))|0);
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if (!($32)) {
     $33 = $self;
     $34 = ((($33)) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     __THREW__ = 0;
     $36 = (invoke_iii(345,($30|0),($35|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if (!($38)) {
      $end = $36;
      $39 = $end;
      $_22 = 0;
      $40 = HEAP32[$value>>2]|0;
      $41 = ((($value)) + 4|0);
      $42 = HEAP32[$41>>2]|0;
      __THREW__ = 0;
      invoke_viii(205,($39|0),($40|0),($42|0));
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if (!($44)) {
       $45 = $self;
       $46 = ((($45)) + 8|0);
       $47 = $self;
       $48 = ((($47)) + 8|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = (($49) + 1)|0;
       HEAP32[$46>>2] = $50;
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 } while(0);
 $51 = ___cxa_find_matching_catch_2()|0;
 $52 = tempRet0;
 HEAP32[$personalityslot>>2] = $51;
 $personalityslot$index7 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index7>>2] = $52;
 $53 = $_22;
 $54 = $53&1;
 if (!($54)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_22 = 0;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17h60ba42fcf62b8c9bE($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13 = 0, $_50 = 0, $abi_cast = 0, $align = 0, $arg0 = 0, $elem_size = 0, $new_alloc_size = 0;
 var $new_cap = 0, $new_cap1 = 0, $new_cap3 = 0, $ptr = 0, $ptr2 = 0, $ptr4 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $abi_cast = sp + 56|0;
 $_50 = sp + 8|0;
 $_13 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $self = $1;
 $2 = (__ZN4core3mem7size_of17h2abed0450cf199c6E()|0);
 $elem_size = $2;
 $3 = $elem_size;
 $4 = ($3|0)!=(0);
 $5 = $4 ^ 1;
 if ($5) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(5388);
  // unreachable;
 }
 $6 = (__ZN4core3mem8align_of17hbf4e91046a62ad7eE()|0);
 $align = $6;
 $7 = $self;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $elem_size;
  $12 = ($11>>>0)>(536870911);
  if ($12) {
   $new_cap1 = 1;
  } else {
   $new_cap1 = 4;
  }
  $33 = $new_cap1;
  $34 = $elem_size;
  $35 = Math_imul($33, $34)|0;
  $36 = $align;
  $37 = (__ZN5alloc4heap8allocate17h7ecb09ae67165feeE($35,$36)|0);
  $ptr2 = $37;
  $38 = $new_cap1;
  $39 = $ptr2;
  $$sink = $39;$$sink2 = $38;
 } else {
  $13 = $self;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15<<1;
  $new_cap3 = $16;
  $17 = $new_cap3;
  $18 = $elem_size;
  $19 = Math_imul($17, $18)|0;
  $new_alloc_size = $19;
  $20 = $new_alloc_size;
  __ZN5alloc7raw_vec11alloc_guard17hfcdaec6264df46d3E($20);
  $21 = $self;
  $22 = (__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_3ptr17hce9666229730c537E($21)|0);
  $23 = $self;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $elem_size;
  $27 = Math_imul($25, $26)|0;
  $28 = $new_alloc_size;
  $29 = $align;
  $30 = (__ZN5alloc4heap10reallocate17hd6647ec82355ed5aE($22,$27,$28,$29)|0);
  $ptr4 = $30;
  $31 = $new_cap3;
  $32 = $ptr4;
  $$sink = $32;$$sink2 = $31;
 }
 HEAP32[$_13>>2] = $$sink2;
 $40 = ((($_13)) + 4|0);
 HEAP32[$40>>2] = $$sink;
 $41 = HEAP32[$_13>>2]|0;
 $new_cap = $41;
 $42 = ((($_13)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $ptr = $43;
 $44 = $ptr;
 $45 = (__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17hd8e9e87391b89bc2E($44)|0);
 if ($45) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 } else {
  $46 = $ptr;
  $47 = (__ZN35__LT_core__ptr__Unique_LT_T_GT__GT_3new17he6aa6ee355704593E($46)|0);
  HEAP32[$abi_cast>>2] = $47;
  ;HEAP32[$_50>>2]=HEAP32[$abi_cast>>2]|0;
  $48 = $self;
  ;HEAP32[$48>>2]=HEAP32[$_50>>2]|0;
  $49 = $new_cap;
  $50 = $self;
  $51 = ((($50)) + 4|0);
  HEAP32[$51>>2] = $49;
  STACKTOP = sp;return;
 }
}
function __ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h8f0d98638de064f9E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg0 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp + 8|0;
 $arg0 = sp;
 HEAP32[$arg0>>2] = $0;
 $2 = ((($arg0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$arg0>>2]|0;
 $4 = ((($arg0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$self>>2] = $3;
 $6 = ((($self)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$self>>2]|0;
 $8 = ((($self)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_10as_mut_ptr17hbb4f7af0e285be8cE($7,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_3map17hf8b714516cb14c6eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val11 = 0, $$expand_i1_val12 = 0, $$expand_i1_val13 = 0, $$expand_i1_val14 = 0, $$field = 0, $$field5 = 0, $$index4 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_10 = 0, $_11 = 0, $_7 = 0;
 var $_8 = 0, $_9 = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $f = 0, $personalityslot = 0, $personalityslot$index7 = 0, $personalityslot$index9 = 0, $self = 0, $switch = 0, $switch2 = 0, $switch3 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $personalityslot = sp + 112|0;
 $_9 = sp + 96|0;
 $_8 = sp + 80|0;
 $_7 = sp + 72|0;
 $x = sp + 56|0;
 $f = sp + 48|0;
 $self = sp + 32|0;
 $_0 = sp + 24|0;
 $abi_cast = sp + 120|0;
 $arg1 = sp + 16|0;
 $arg0 = sp;
 ;HEAP32[$arg0>>2]=HEAP32[$0>>2]|0;HEAP32[$arg0+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$arg0+8>>2]=HEAP32[$0+8>>2]|0;
 HEAP32[$abi_cast>>2] = $1;
 ;HEAP32[$arg1>>2]=HEAP32[$abi_cast>>2]|0;
 $_11 = 0;
 $_10 = 0;
 $_10 = 1;
 ;HEAP32[$self>>2]=HEAP32[$arg0>>2]|0;HEAP32[$self+4>>2]=HEAP32[$arg0+4>>2]|0;HEAP32[$self+8>>2]=HEAP32[$arg0+8>>2]|0;
 $_11 = 1;
 ;HEAP32[$f>>2]=HEAP32[$arg1>>2]|0;
 $2 = HEAP32[$self>>2]|0;
 $3 = ($2|0)!=(0|0);
 $$expand_i1_val = $3&1;
 $$expand_i1_val10 = 1;
 $switch3 = ($$expand_i1_val&255)<($$expand_i1_val10&255);
 if ($switch3) {
  $$sink = 0;
 } else {
  $_10 = 0;
  ;HEAP32[$x>>2]=HEAP32[$self>>2]|0;HEAP32[$x+4>>2]=HEAP32[$self+4>>2]|0;HEAP32[$x+8>>2]=HEAP32[$self+8>>2]|0;
  $_11 = 0;
  ;HEAP32[$_7>>2]=HEAP32[$f>>2]|0;
  ;HEAP32[$_9>>2]=HEAP32[$x>>2]|0;HEAP32[$_9+4>>2]=HEAP32[$x+4>>2]|0;HEAP32[$_9+8>>2]=HEAP32[$x+8>>2]|0;
  ;HEAP32[$_8>>2]=HEAP32[$_9>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$_9+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$_9+8>>2]|0;
  $6 = HEAP32[$_7>>2]|0;
  __THREW__ = 0;
  invoke_vii(346,($6|0),($_8|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $22 = ___cxa_find_matching_catch_2()|0;
   $23 = tempRet0;
   HEAP32[$personalityslot>>2] = $22;
   $personalityslot$index7 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index7>>2] = $23;
   $24 = $_11;
   $25 = $24&1;
   if ($25) {
    $_11 = 0;
   }
   $4 = HEAP32[$self>>2]|0;
   $5 = ($4|0)!=(0|0);
   $$expand_i1_val11 = $5&1;
   $$expand_i1_val12 = 1;
   $switch = ($$expand_i1_val11&255)<($$expand_i1_val12&255);
   if ($switch) {
    __ZN4drop17h8d63afbc99eb0efaE($self);
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index4 = ((($personalityslot)) + 4|0);
    $$field5 = HEAP32[$$index4>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
   $14 = $_10;
   $15 = $14&1;
   if (!($15)) {
    $$field = HEAP32[$personalityslot>>2]|0;
    $$index4 = ((($personalityslot)) + 4|0);
    $$field5 = HEAP32[$$index4>>2]|0;
    ___resumeException($$field|0);
    // unreachable;
   }
   $_10 = 0;
   __ZN4drop17hdd1638425ff7362fE($self);
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index4 = ((($personalityslot)) + 4|0);
   $$field5 = HEAP32[$$index4>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  } else {
   $$sink = 1;
  }
 }
 HEAP8[$_0>>0] = $$sink;
 $9 = $_11;
 $10 = $9&1;
 if ($10) {
  $_11 = 0;
 }
 $11 = HEAP32[$self>>2]|0;
 $12 = ($11|0)!=(0|0);
 $$expand_i1_val13 = $12&1;
 $$expand_i1_val14 = 1;
 $switch2 = ($$expand_i1_val13&255)<($$expand_i1_val14&255);
 if ($switch2) {
  __THREW__ = 0;
  invoke_vi(170,($self|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   $13 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($13|0);
  }
 } else {
  $18 = $_10;
  $19 = $18&1;
  if (!($19)) {
   $13 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($13|0);
  }
  $_10 = 0;
  __THREW__ = 0;
  invoke_vi(142,($self|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   $13 = HEAP8[$_0>>0]|0;
   STACKTOP = sp;return ($13|0);
  }
 }
 $26 = ___cxa_find_matching_catch_2()|0;
 $27 = tempRet0;
 HEAP32[$personalityslot>>2] = $26;
 $personalityslot$index9 = ((($personalityslot)) + 4|0);
 HEAP32[$personalityslot$index9>>2] = $27;
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index4 = ((($personalityslot)) + 4|0);
 $$field5 = HEAP32[$$index4>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
 return (0)|0;
}
function __ZN2ww10game_state9GameState18tick_ask_name_mode28__u7b__u7b_closure_u7d__u7d_17h2c12649ccef2c25dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_15 = 0, $_18 = 0, $_19 = 0, $_8 = 0, $__debuginfo_env_ptr = 0, $abi_cast = 0, $arg0 = 0, $arg1 = 0, $input = 0, $personalityslot = 0, $personalityslot$index4 = 0, $personalityslot$index6 = 0, $personalityslot$index8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $personalityslot = sp + 96|0;
 $_18 = sp + 80|0;
 $_15 = sp + 64|0;
 $_8 = sp + 40|0;
 $input = sp + 24|0;
 $arg1 = sp + 8|0;
 $abi_cast = sp + 104|0;
 $arg0 = sp;
 HEAP32[$abi_cast>>2] = $0;
 ;HEAP32[$arg0>>2]=HEAP32[$abi_cast>>2]|0;
 $__debuginfo_env_ptr = $arg0;
 ;HEAP32[$arg1>>2]=HEAP32[$1>>2]|0;HEAP32[$arg1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$arg1+8>>2]=HEAP32[$1+8>>2]|0;
 $_19 = 0;
 $_19 = 1;
 ;HEAP32[$input>>2]=HEAP32[$arg1>>2]|0;HEAP32[$input+4>>2]=HEAP32[$arg1+4>>2]|0;HEAP32[$input+8>>2]=HEAP32[$arg1+8>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(180,($input|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   label = 14;
  } else {
   $5 = ($2|0)==(0);
   do {
    if ($5) {
     $6 = HEAP32[1173]|0;
     $7 = HEAP32[(4696)>>2]|0;
     __THREW__ = 0;
     invoke_viiiii(130,($_8|0),($6|0),($7|0),(23968|0),0);
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if ($9) {
      label = 14;
      break L1;
     }
     __THREW__ = 0;
     invoke_vi(172,($_8|0));
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      label = 14;
      break L1;
     }
    } else {
     __THREW__ = 0;
     invoke_v(234);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if ($11) {
      label = 14;
      break L1;
     }
     $_19 = 0;
     ;HEAP32[$_15>>2]=HEAP32[$input>>2]|0;HEAP32[$_15+4>>2]=HEAP32[$input+4>>2]|0;HEAP32[$_15+8>>2]=HEAP32[$input+8>>2]|0;
     $14 = HEAP32[$arg0>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $16 = ((($15)) + 20|0);
     __THREW__ = 0;
     invoke_vi(142,($16|0));
     $17 = __THREW__; __THREW__ = 0;
     $18 = $17&1;
     if ($18) {
      $34 = ___cxa_find_matching_catch_2()|0;
      $35 = tempRet0;
      HEAP32[$personalityslot>>2] = $34;
      $personalityslot$index6 = ((($personalityslot)) + 4|0);
      HEAP32[$personalityslot$index6>>2] = $35;
      $36 = HEAP32[$arg0>>2]|0;
      $37 = HEAP32[$36>>2]|0;
      $38 = ((($37)) + 20|0);
      ;HEAP32[$38>>2]=HEAP32[$_15>>2]|0;HEAP32[$38+4>>2]=HEAP32[$_15+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$_15+8>>2]|0;
      break L1;
     } else {
      $21 = HEAP32[$arg0>>2]|0;
      $22 = HEAP32[$21>>2]|0;
      $23 = ((($22)) + 20|0);
      ;HEAP32[$23>>2]=HEAP32[$_15>>2]|0;HEAP32[$23+4>>2]=HEAP32[$_15+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$_15+8>>2]|0;
      $24 = HEAP32[$arg0>>2]|0;
      $25 = HEAP32[$24>>2]|0;
      HEAP32[$_18>>2] = 1;
      __THREW__ = 0;
      invoke_vii(175,($25|0),($_18|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       label = 14;
       break L1;
      } else {
       break;
      }
     }
    }
   } while(0);
   $30 = $_19;
   $31 = $30&1;
   if (!($31)) {
    STACKTOP = sp;return;
   }
   $_19 = 0;
   __THREW__ = 0;
   invoke_vi(142,($input|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if (!($29)) {
    STACKTOP = sp;return;
   }
   $39 = ___cxa_find_matching_catch_2()|0;
   $40 = tempRet0;
   HEAP32[$personalityslot>>2] = $39;
   $personalityslot$index8 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index8>>2] = $40;
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index1 = ((($personalityslot)) + 4|0);
   $$field2 = HEAP32[$$index1>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
 } while(0);
 if ((label|0) == 14) {
  $32 = ___cxa_find_matching_catch_2()|0;
  $33 = tempRet0;
  HEAP32[$personalityslot>>2] = $32;
  $personalityslot$index4 = ((($personalityslot)) + 4|0);
  HEAP32[$personalityslot$index4>>2] = $33;
 }
 $19 = $_19;
 $20 = $19&1;
 if (!($20)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index1 = ((($personalityslot)) + 4|0);
  $$field2 = HEAP32[$$index1>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_19 = 0;
 __ZN4drop17hdd1638425ff7362fE($input);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index1 = ((($personalityslot)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
}
function __ZN3std9panicking11begin_panic17h10fb5a0e6dedd3d3E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___rust_allocate(8,4)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 } else {
  HEAP32[$3>>2] = $0;
  $5 = ((($3)) + 4|0);
  HEAP32[$5>>2] = $1;
  __ZN3std9panicking20rust_panic_with_hook17h7796dc26b802a1f8E($3,272,$2);
  // unreachable;
 }
}
function __ZN60__LT_std__io__error__Error_u20_as_u20_core__fmt__Display_GT_3fmt17hebe4f88fb6655947E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$fca$1$gep = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0 = 0, $_11 = 0;
 var $_16 = 0, $_3$sroa$0$0$i = 0, $_3$sroa$21$0$i = 0, $_31 = 0, $_36 = 0, $_39 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_6$sroa$0$0$$sroa_idx$i28 = 0, $code = 0, $detail = 0, $not$$i$i$i$i$i = 0, $not$$i$i$i$i$i25 = 0, $trunc = 0, $trunc$clear = 0, $trunc$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $_39 = sp + 88|0;
 $_36 = sp + 80|0;
 $_31 = sp + 56|0;
 $_16 = sp + 40|0;
 $_11 = sp + 16|0;
 $detail = sp;
 $code = sp + 96|0;
 $trunc = HEAP8[$0>>0]|0;
 $trunc$clear = $trunc & 3;
 switch ($trunc$clear<<24>>24) {
 case 0:  {
  $2 = ((($0)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  HEAP32[$code>>2] = $3;
  __ZN3std3sys3imp2os12error_string17hdf7d17fd92f51e6dE($detail,$3);
  $4 = $detail;
  $5 = $code;
  HEAP32[$_16>>2] = $4;
  $6 = ((($_16)) + 4|0);
  HEAP32[$6>>2] = (347);
  $7 = ((($_16)) + 8|0);
  HEAP32[$7>>2] = $5;
  $8 = ((($_16)) + 12|0);
  HEAP32[$8>>2] = (160);
  HEAP32[$_11>>2] = 5120;
  $9 = ((($_11)) + 4|0);
  HEAP32[$9>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i28 = ((($_11)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i28>>2] = 0;
  $10 = ((($_11)) + 16|0);
  HEAP32[$10>>2] = $_16;
  $11 = ((($_11)) + 20|0);
  HEAP32[$11>>2] = 2;
  __THREW__ = 0;
  $12 = (invoke_iii(348,($1|0),($_11|0))|0);
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   $31 = ___cxa_find_matching_catch_2()|0;
   $35 = tempRet0;
   $36 = ((($detail)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $not$$i$i$i$i$i = ($37|0)==(0);
   if ($not$$i$i$i$i$i) {
    ___resumeException($31|0);
    // unreachable;
   }
   $38 = HEAP32[$detail>>2]|0;
   ___rust_deallocate($38,$37,1);
   ___resumeException($31|0);
   // unreachable;
  } else {
   $32 = ((($detail)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $not$$i$i$i$i$i25 = ($33|0)==(0);
   if (!($not$$i$i$i$i$i25)) {
    $34 = HEAP32[$detail>>2]|0;
    ___rust_deallocate($34,$33,1);
   }
   $_0$sroa$0$0 = $12;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
  }
  break;
 }
 case 1:  {
  $15 = ((($0)) + 1|0);
  $trunc$i = HEAP8[$15>>0]|0;
  $trunc$i$clear = $trunc$i & 31;
  do {
   switch ($trunc$i$clear<<24>>24) {
   case 0:  {
    $_3$sroa$0$0$i = 17045;$_3$sroa$21$0$i = 16;
    break;
   }
   case 1:  {
    $_3$sroa$0$0$i = 17028;$_3$sroa$21$0$i = 17;
    break;
   }
   case 2:  {
    $_3$sroa$0$0$i = 17010;$_3$sroa$21$0$i = 18;
    break;
   }
   case 3:  {
    $_3$sroa$0$0$i = 16994;$_3$sroa$21$0$i = 16;
    break;
   }
   case 4:  {
    $_3$sroa$0$0$i = 16976;$_3$sroa$21$0$i = 18;
    break;
   }
   case 5:  {
    $_3$sroa$0$0$i = 16963;$_3$sroa$21$0$i = 13;
    break;
   }
   case 6:  {
    $_3$sroa$0$0$i = 16949;$_3$sroa$21$0$i = 14;
    break;
   }
   case 7:  {
    $_3$sroa$0$0$i = 16928;$_3$sroa$21$0$i = 21;
    break;
   }
   case 8:  {
    $_3$sroa$0$0$i = 16917;$_3$sroa$21$0$i = 11;
    break;
   }
   case 9:  {
    $_3$sroa$0$0$i = 16896;$_3$sroa$21$0$i = 21;
    break;
   }
   case 10:  {
    $_3$sroa$0$0$i = 16875;$_3$sroa$21$0$i = 21;
    break;
   }
   case 11:  {
    $_3$sroa$0$0$i = 16852;$_3$sroa$21$0$i = 23;
    break;
   }
   case 12:  {
    $_3$sroa$0$0$i = 16840;$_3$sroa$21$0$i = 12;
    break;
   }
   case 13:  {
    $_3$sroa$0$0$i = 16831;$_3$sroa$21$0$i = 9;
    break;
   }
   case 14:  {
    $_3$sroa$0$0$i = 16821;$_3$sroa$21$0$i = 10;
    break;
   }
   case 15:  {
    $_3$sroa$0$0$i = 16800;$_3$sroa$21$0$i = 21;
    break;
   }
   case 16:  {
    $_3$sroa$0$0$i = 16786;$_3$sroa$21$0$i = 14;
    break;
   }
   case 17:  {
    $_3$sroa$0$0$i = 16764;$_3$sroa$21$0$i = 22;
    break;
   }
   case 18:  {
    __ZN3std9panicking11begin_panic17h10fb5a0e6dedd3d3E(16724,40,5144);
    // unreachable;
    break;
   }
   default: {
    // unreachable;
   }
   }
  } while(0);
  HEAP32[$_39>>2] = $_3$sroa$0$0$i;
  $$fca$1$gep = ((($_39)) + 4|0);
  HEAP32[$$fca$1$gep>>2] = $_3$sroa$21$0$i;
  $16 = $_39;
  HEAP32[$_36>>2] = $16;
  $17 = ((($_36)) + 4|0);
  HEAP32[$17>>2] = (349);
  HEAP32[$_31>>2] = 5156;
  $18 = ((($_31)) + 4|0);
  HEAP32[$18>>2] = 1;
  $_6$sroa$0$0$$sroa_idx$i = ((($_31)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
  $19 = ((($_31)) + 16|0);
  HEAP32[$19>>2] = $_36;
  $20 = ((($_31)) + 20|0);
  HEAP32[$20>>2] = 1;
  $21 = (__ZN4core3fmt9Formatter9write_fmt17hadece32d1a4edb44E($1,$_31)|0);
  $_0$sroa$0$0 = $21;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
  break;
 }
 case 2:  {
  $22 = ((($0)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($23)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 24|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (FUNCTION_TABLE_iii[$29 & 511]($25,$1)|0);
  $_0$sroa$0$0 = $30;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
  break;
 }
 default: {
  // unreachable;
 }
 }
 return (0)|0;
}
function __ZN3std9panicking15begin_panic_fmt17h089a948b9fd65060E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_1$sroa$4$0$$sroa_idx2$i = 0, $_1$sroa$5$0$$sroa_idx4$i = 0, $_10$i = 0, $_8$i = 0, $_9 = 0, $not$$i$i$i$i$i = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$5$0 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_10$i = sp + 40|0;
 $_8$i = sp + 32|0;
 $_9 = sp + 16|0;
 $s = sp;
 HEAP32[$s>>2] = 1;
 $_1$sroa$4$0$$sroa_idx2$i = ((($s)) + 4|0);
 HEAP32[$_1$sroa$4$0$$sroa_idx2$i>>2] = 0;
 $_1$sroa$5$0$$sroa_idx4$i = ((($s)) + 8|0);
 HEAP32[$_1$sroa$5$0$$sroa_idx4$i>>2] = 0;
 HEAP32[$_8$i>>2] = $s;
 ;HEAP32[$_10$i>>2]=HEAP32[$0>>2]|0;HEAP32[$_10$i+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$_10$i+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$_10$i+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$_10$i+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$_10$i+20>>2]=HEAP32[$0+20>>2]|0;
 __THREW__ = 0;
 (invoke_iiii(350,($_8$i|0),(56|0),($_10$i|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  ;HEAP32[$_9>>2]=HEAP32[$s>>2]|0;HEAP32[$_9+4>>2]=HEAP32[$s+4>>2]|0;HEAP32[$_9+8>>2]=HEAP32[$s+8>>2]|0;
  __THREW__ = 0;
  invoke_vii(351,($_9|0),($1|0));
  $4 = __THREW__; __THREW__ = 0;
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  $personalityslot$sroa$0$0 = $5;$personalityslot$sroa$5$0 = $6;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 $7 = ___cxa_find_matching_catch_2()|0;
 $8 = tempRet0;
 $9 = HEAP32[$_1$sroa$4$0$$sroa_idx2$i>>2]|0;
 $not$$i$i$i$i$i = ($9|0)==(0);
 if ($not$$i$i$i$i$i) {
  $personalityslot$sroa$0$0 = $7;$personalityslot$sroa$5$0 = $8;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 $10 = HEAP32[$s>>2]|0;
 ___rust_deallocate($10,$9,1);
 $personalityslot$sroa$0$0 = $7;$personalityslot$sroa$5$0 = $8;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
}
function __ZN3std9panicking11begin_panic17h8856086820d78430E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $x$sroa$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$sroa$0$i = sp;
 ;HEAP32[$x$sroa$0$i>>2]=HEAP32[$0>>2]|0;HEAP32[$x$sroa$0$i+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$x$sroa$0$i+8>>2]=HEAP32[$0+8>>2]|0;
 $2 = (___rust_allocate(12,4)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 } else {
  ;HEAP32[$2>>2]=HEAP32[$x$sroa$0$i>>2]|0;HEAP32[$2+4>>2]=HEAP32[$x$sroa$0$i+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$x$sroa$0$i+8>>2]|0;
  __ZN3std9panicking20rust_panic_with_hook17h7796dc26b802a1f8E($2,80,$1);
  // unreachable;
 }
}
function __ZN3std9panicking20rust_panic_with_hook17h7796dc26b802a1f8E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$pre21 = 0, $$sink$in$phi$trans$insert = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_23$sroa$0$0$$sroa_idx = 0, $_23$sroa$4$0$$sroa_idx2 = 0;
 var $_23$sroa$5$0$$sroa_idx4 = 0, $_42 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_6$sroa$0$0$$sroa_idx$i11 = 0, $info = 0, $not$ = 0, $phitmp = 0, $switch = 0, $switch$i$i = 0, $switch2tmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_42 = sp + 48|0;
 $info = sp + 24|0;
 $_12 = sp;
 $3 = $0;
 $4 = $1;
 $5 = HEAP32[$2>>2]|0;
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($2)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 __THREW__ = 0;
 $10 = (invoke_i(352)|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 L1: do {
  if (!($12)) {
   $switch2tmp$i$i$i = ($10|0)==(0|0);
   if ($switch2tmp$i$i$i) {
    __THREW__ = 0;
    invoke_vii(77,(15492|0),57);
    $13 = __THREW__; __THREW__ = 0;
    break;
   }
   $14 = HEAP32[$10>>2]|0;
   $switch$i$i = ($14|0)==(1);
   if ($switch$i$i) {
    $$sink$in$phi$trans$insert = ((($10)) + 4|0);
    $$pre = HEAP32[$$sink$in$phi$trans$insert>>2]|0;
    $phitmp = (($$pre) + 1)|0;
    HEAP32[$$sink$in$phi$trans$insert>>2] = $phitmp;
    $20 = ($phitmp>>>0)>(2);
    if ($20) {
     HEAP32[$_12>>2] = 4772;
     $27 = ((($_12)) + 4|0);
     HEAP32[$27>>2] = 1;
     $_6$sroa$0$0$$sroa_idx$i11 = ((($_12)) + 8|0);
     HEAP32[$_6$sroa$0$0$$sroa_idx$i11>>2] = 0;
     $28 = ((($_12)) + 16|0);
     HEAP32[$28>>2] = 23968;
     $29 = ((($_12)) + 20|0);
     HEAP32[$29>>2] = 0;
     __THREW__ = 0;
     invoke_vi(354,($_12|0));
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     if ($31) {
      break;
     }
     _llvm_trap();
     // unreachable;
    } else {
     $44 = $phitmp;
    }
   } else {
    $15 = $10;
    $16 = $15;
    HEAP32[$16>>2] = 1;
    $17 = (($15) + 4)|0;
    $18 = $17;
    HEAP32[$18>>2] = 0;
    $$pre21 = ((($10)) + 4|0);
    HEAP32[$$pre21>>2] = 1;
    $44 = 1;
   }
   HEAP32[$info>>2] = $3;
   $21 = ((($info)) + 4|0);
   HEAP32[$21>>2] = $4;
   $_23$sroa$0$0$$sroa_idx = ((($info)) + 8|0);
   HEAP32[$_23$sroa$0$0$$sroa_idx>>2] = $5;
   $_23$sroa$4$0$$sroa_idx2 = ((($info)) + 12|0);
   HEAP32[$_23$sroa$4$0$$sroa_idx2>>2] = $7;
   $_23$sroa$5$0$$sroa_idx4 = ((($info)) + 16|0);
   HEAP32[$_23$sroa$5$0$$sroa_idx4>>2] = $9;
   $22 = (_pthread_rwlock_rdlock(((23696)|0))|0);
   switch ($22|0) {
   case 11:  {
    __THREW__ = 0;
    invoke_viii(353,(15549|0),36,(4748|0));
    $23 = __THREW__; __THREW__ = 0;
    break L1;
    break;
   }
   case 35:  {
    break;
   }
   default: {
    label = 10;
   }
   }
   do {
    if ((label|0) == 10) {
     $24 = HEAP8[(23728)>>0]|0;
     $not$ = ($24<<24>>24)==(0);
     if (!($not$)) {
      $25 = ($22|0)==(0);
      if (!($25)) {
       break;
      }
      (_pthread_rwlock_unlock(((23696)|0))|0);
      break;
     }
     $32 = HEAP32[(23732)>>2]|0;HEAP32[(23732)>>2] = (($32+1)|0);
     $33 = HEAP32[5984]|0;
     $switch = ($33|0)==(1);
     if ($switch) {
      $36 = HEAP32[(23940)>>2]|0;
      $37 = HEAP32[(23944)>>2]|0;
      $38 = ((($37)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      invoke_vii($39|0,($36|0),($info|0));
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       break L1;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(355,($info|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       break L1;
      }
     }
     $42 = HEAP32[(23732)>>2]|0;HEAP32[(23732)>>2] = (($42-1)|0);
     (_pthread_rwlock_unlock(((23696)|0))|0);
     $43 = ($44>>>0)>(1);
     if (!($43)) {
      _rust_panic($0,$1);
      // unreachable;
     }
     HEAP32[$_42>>2] = 4780;
     $45 = ((($_42)) + 4|0);
     HEAP32[$45>>2] = 1;
     $_6$sroa$0$0$$sroa_idx$i = ((($_42)) + 8|0);
     HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
     $46 = ((($_42)) + 16|0);
     HEAP32[$46>>2] = 23968;
     $47 = ((($_42)) + 20|0);
     HEAP32[$47>>2] = 0;
     __THREW__ = 0;
     invoke_vi(354,($_42|0));
     $48 = __THREW__; __THREW__ = 0;
     $49 = $48&1;
     if ($49) {
      break L1;
     }
     _llvm_trap();
     // unreachable;
    }
   } while(0);
   __THREW__ = 0;
   invoke_viii(353,(15585|0),41,(4760|0));
   $26 = __THREW__; __THREW__ = 0;
  }
 } while(0);
 $19 = ___cxa_find_matching_catch_2()|0;
 $50 = tempRet0;
 $51 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$51 & 511]($0);
 $52 = ((($1)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==(0);
 if ($54) {
  ___resumeException($19|0);
  // unreachable;
 }
 $55 = ((($1)) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 ___rust_deallocate($0,$53,$56);
 ___resumeException($19|0);
 // unreachable;
}
function __ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h8a6a4da5328889bbE() {
 var $$$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i$i = 0, $_0$0$i$i3$i = 0, $cond$i$i$i = 0;
 var $cond$i$i1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1278]|0;
 $cond$i$i$i = ($0|0)==(0);
 if ($cond$i$i$i) {
  $1 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hb781edeaf6c88045E(5112)|0);
  $_0$0$i$i$i = $1;
 } else {
  $_0$0$i$i$i = $0;
 }
 $2 = (_pthread_getspecific(($_0$0$i$i$i|0))|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ($2|0)==((1)|0);
  $5 = ((($2)) + 4|0);
  $$$i = $4 ? 0 : $5;
  $15 = $$$i;
  return ($15|0);
 }
 $6 = (___rust_allocate(12,4)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 }
 HEAP32[$6>>2] = 5112;
 $8 = ((($6)) + 4|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[1278]|0;
 $cond$i$i1$i = ($13|0)==(0);
 if ($cond$i$i1$i) {
  $14 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hb781edeaf6c88045E(5112)|0);
  $_0$0$i$i3$i = $14;
 } else {
  $_0$0$i$i3$i = $13;
 }
 (_pthread_setspecific(($_0$0$i$i3$i|0),($6|0))|0);
 $15 = $8;
 return ($15|0);
}
function __ZN3std10sys_common4util10dumb_print17h1a1da08255666722E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3$sroa$12$4$$sroa_idx14 = 0, $_3$sroa$12$4$copyload = 0, $_3$sroa$5$4$copyload = 0, $_3$sroa$9$4$$sroa_idx11 = 0, $_3$sroa$9$4$copyload = 0, $_3$sroa$9$sroa$0$0$extract$trunc = 0, $_5$i$i = 0, $_7$i = 0, $cond$i$i = 0, $cond$i$i$i$i = 0;
 var $or$cond = 0, $stderr$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $stderr$i$i = sp + 40|0;
 $_5$i$i = sp + 16|0;
 $_7$i = sp;
 ;HEAP32[$_5$i$i>>2]=HEAP32[$0>>2]|0;HEAP32[$_5$i$i+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$_5$i$i+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$_5$i$i+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$_5$i$i+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$_5$i$i+20>>2]=HEAP32[$0+20>>2]|0;
 __ZN3std2io5Write9write_fmt17hee982c2299f35d6cE($_7$i,$stderr$i$i,$_5$i$i);
 $_3$sroa$5$4$copyload = HEAP32[$_7$i>>2]|0;
 $_3$sroa$9$4$$sroa_idx11 = ((($_7$i)) + 4|0);
 $_3$sroa$9$4$copyload = HEAP32[$_3$sroa$9$4$$sroa_idx11>>2]|0;
 $_3$sroa$9$sroa$0$0$extract$trunc = $_3$sroa$9$4$copyload&255;
 $_3$sroa$12$4$$sroa_idx14 = ((($_7$i)) + 8|0);
 $_3$sroa$12$4$copyload = HEAP32[$_3$sroa$12$4$$sroa_idx14>>2]|0;
 $cond$i$i = ($_3$sroa$5$4$copyload|0)==(1);
 $cond$i$i$i$i = ($_3$sroa$9$sroa$0$0$extract$trunc<<24>>24)==(2);
 $or$cond = $cond$i$i & $cond$i$i$i$i;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $1 = ((($_3$sroa$12$4$copyload)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($_3$sroa$12$4$copyload)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($2);
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = ((($4)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  ___rust_deallocate($2,$7,$10);
 }
 ___rust_deallocate($_3$sroa$12$4$copyload,12,4);
 STACKTOP = sp;return;
}
function __ZN3std9panicking12default_hook17hac15801b7aa4881cE($0) {
 $0 = $0|0;
 var $$fca$0$extract30245274 = 0, $$fca$0$extract42373 = 0, $$fca$1$extract32246275 = 0, $$fca$1$extract44374 = 0, $$fca$1$gep = 0, $$in = 0, $$pre = 0, $$pre$i$i = 0, $$pre360 = 0, $$pre362 = 0, $$sink$in$phi$trans$insert = 0, $$sroa_idx = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$i70 = 0, $_0$sroa$0$0$i = 0;
 var $_0$sroa$3$0$i = 0, $_12$sroa$4$0$$sroa_idx$i$i = 0, $_12$sroa$4$0$$sroa_idx$i$i133 = 0, $_14$0$i148$in364 = 0, $_17$sroa$0$0 = 0, $_17$sroa$5$0 = 0, $_17$sroa$5$0$sink = 0, $_29$sroa$0$0 = 0, $_29$sroa$6$0 = 0, $_44 = 0, $_46$0$$sroa_idx = 0, $_6$i = 0, $_68$0$off0 = 0, $_68$0$off0$not = 0, $_68$1270 = 0, $_68$1271 = 0, $_68$2$off0234 = 0, $brmerge = 0, $cond$i$i$i$i$i = 0, $cond$i$i$i$i$i149 = 0;
 var $err = 0, $extract$t = 0, $file = 0, $lhsc$i$i = 0, $line = 0, $log_backtrace = 0, $msg = 0, $name = 0, $not$$i$i$i$i$i$i23$i = 0, $or$cond = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$0$2 = 0, $personalityslot$sroa$0$3235 = 0, $personalityslot$sroa$9$0 = 0, $personalityslot$sroa$9$2 = 0, $personalityslot$sroa$9$3236 = 0, $src$i$sroa$5$0$$sroa_idx22$i$i = 0, $src$i$sroa$5$0$$sroa_idx22$i$i127 = 0, $storemerge = 0, $switch$i = 0;
 var $switch$i108 = 0, $switch$i122 = 0, $switch$i179 = 0, $switch1tmp$i = 0, $switch2tmp$i$i = 0, $switch2tmp$i$i117 = 0, $switch2tmp$i$i174 = 0, $switch4tmp$i = 0, $switch7tmp = 0, $switch8tmp = 0, $switch9tmp = 0, $switchtmp = 0, $switchtmp$i = 0, $switchtmp$i$i = 0, $switchtmp$i$i$i$i$i = 0, $switchtmp$i21$i$i = 0, $switchtmp$i266 = 0, $switchtmp$i78 = 0, $thread = 0, $val$0$i$ph = 0;
 var $write = 0, $x$i$sroa$5$0$$sroa_idx222 = 0, $x$i$sroa$5$0$copyload = 0, $x$i$sroa$6$0$$sroa_idx224 = 0, $x$i$sroa$6$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $_6$i = sp + 80|0;
 $_44 = sp + 64|0;
 $write = sp + 40|0;
 $name = sp + 32|0;
 $thread = sp + 24|0;
 $err = sp + 16|0;
 $msg = sp + 8|0;
 $line = sp + 92|0;
 $file = sp;
 $log_backtrace = sp + 96|0;
 $1 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h8a6a4da5328889bbE()|0);
 $switch2tmp$i$i174 = ($1|0)==(0|0);
 if ($switch2tmp$i$i174) {
  __ZN4core6option13expect_failed17h8d3ef54cab66579bE(15492,57);
  // unreachable;
 }
 $2 = HEAP32[$1>>2]|0;
 $switch$i179 = ($2|0)==(1);
 if ($switch$i179) {
  $$sink$in$phi$trans$insert = ((($1)) + 4|0);
  $$pre = HEAP32[$$sink$in$phi$trans$insert>>2]|0;
  $7 = ($$pre>>>0)>(1);
  if ($7) {
   $storemerge = 1;
  } else {
   label = 6;
  }
 } else {
  $3 = $1;
  $4 = $3;
  HEAP32[$4>>2] = 1;
  $5 = (($3) + 4)|0;
  $6 = $5;
  HEAP32[$6>>2] = 0;
  label = 6;
 }
 L7: do {
  if ((label|0) == 6) {
   $8 = HEAP32[5987]|0;
   switch ($8|0) {
   case 1:  {
    $storemerge = 0;
    break L7;
    break;
   }
   case 2:  {
    break;
   }
   default: {
    __ZN3std3env7_var_os17h69846c7e69f0dca4E($_6$i,15723,14);
    $9 = HEAP32[$_6$i>>2]|0;
    $switch4tmp$i = ($9|0)==(0|0);
    if ($switch4tmp$i) {
     HEAP32[5987] = 1;
     $storemerge = 0;
     break L7;
    }
    $x$i$sroa$5$0$$sroa_idx222 = ((($_6$i)) + 4|0);
    $x$i$sroa$5$0$copyload = HEAP32[$x$i$sroa$5$0$$sroa_idx222>>2]|0;
    $x$i$sroa$6$0$$sroa_idx224 = ((($_6$i)) + 8|0);
    $x$i$sroa$6$0$copyload = HEAP32[$x$i$sroa$6$0$$sroa_idx224>>2]|0;
    $10 = ($x$i$sroa$6$0$copyload|0)==(1);
    do {
     if ($10) {
      $11 = ($9|0)==(15737|0);
      if (!($11)) {
       $lhsc$i$i = HEAP8[$9>>0]|0;
       $12 = ($lhsc$i$i<<24>>24)==(48);
       if (!($12)) {
        $val$0$i$ph = 2;
        break;
       }
      }
      $val$0$i$ph = 1;
     } else {
      $val$0$i$ph = 2;
     }
    } while(0);
    $not$$i$i$i$i$i$i23$i = ($x$i$sroa$5$0$copyload|0)==(0);
    if (!($not$$i$i$i$i$i$i23$i)) {
     ___rust_deallocate($9,$x$i$sroa$5$0$copyload,1);
    }
    HEAP32[5987] = $val$0$i$ph;
    $13 = ($val$0$i$ph|0)==(2);
    if (!($13)) {
     $storemerge = 0;
     break L7;
    }
   }
   }
   $storemerge = 1;
  }
 } while(0);
 HEAP8[$log_backtrace>>0] = $storemerge;
 $14 = ((($0)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($0)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$file>>2] = $15;
 $18 = ((($file)) + 4|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($0)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$line>>2] = $20;
 $21 = HEAP32[$0>>2]|0;
 $22 = ((($0)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (FUNCTION_TABLE_ii[$25 & 511]($21)|0);
 $27 = tempRet0;
 $28 = ($26|0)==(1475156443);
 $29 = ($27|0)==(1099202904);
 $30 = $28 & $29;
 if ($30) {
  $37 = HEAP32[$21>>2]|0;
  $38 = ((($21)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$msg>>2] = $37;
  $_17$sroa$5$0$sink = $39;
 } else {
  $31 = HEAP32[$24>>2]|0;
  $32 = (FUNCTION_TABLE_ii[$31 & 511]($21)|0);
  $33 = tempRet0;
  $34 = ($32|0)==(-1577511168);
  $35 = ($33|0)==(820397168);
  $36 = $34 & $35;
  if ($36) {
   $40 = HEAP32[$21>>2]|0;
   $41 = ((($21)) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $_17$sroa$0$0 = $40;$_17$sroa$5$0 = $42;
  } else {
   $_17$sroa$0$0 = 15738;$_17$sroa$5$0 = 8;
  }
  HEAP32[$msg>>2] = $_17$sroa$0$0;
  $_17$sroa$5$0$sink = $_17$sroa$5$0;
 }
 $43 = ((($msg)) + 4|0);
 HEAP32[$43>>2] = $_17$sroa$5$0$sink;
 HEAP8[$err>>0] = 1;
 __THREW__ = 0;
 $44 = (invoke_i(356)|0);
 $45 = __THREW__; __THREW__ = 0;
 $46 = $45&1;
 do {
  if (!($46)) {
   $switchtmp$i$i = ($44|0)==(0|0);
   if ($switchtmp$i$i) {
    HEAP32[$thread>>2] = 0;
    $186 = $name;$92 = 0;$_29$sroa$0$0 = 0;$_29$sroa$6$0 = 0;$switchtmp$i266 = 1;
    label = 31;
   } else {
    __THREW__ = 0;
    $47 = (invoke_i(357)|0);
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     break;
    }
    HEAP32[$thread>>2] = $47;
    $switchtmp$i = ($47|0)==(0);
    $50 = $47;
    if ($switchtmp$i) {
     $186 = $name;$92 = $50;$_29$sroa$0$0 = 0;$_29$sroa$6$0 = 0;$switchtmp$i266 = 1;
     label = 31;
    } else {
     $51 = ((($50)) + 8|0);
     $52 = HEAP32[$51>>2]|0;
     $switchtmp$i$i$i$i$i = ($52|0)==(0|0);
     if ($switchtmp$i$i$i$i$i) {
      $186 = $name;$92 = $50;$_29$sroa$0$0 = 0;$_29$sroa$6$0 = 0;$switchtmp$i266 = 0;
      label = 31;
     } else {
      $53 = ((($50)) + 12|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = (($54) + -1)|0;
      $56 = ($54|0)==(0);
      if ($56) {
       __THREW__ = 0;
       invoke_vii(358,($55|0),0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = ___cxa_find_matching_catch_2()|0;
       $59 = tempRet0;
       $$fca$0$extract30245274 = $58;$$fca$1$extract32246275 = $59;$145 = $50;
      } else {
       $186 = $name;$92 = $50;$_29$sroa$0$0 = $52;$_29$sroa$6$0 = $55;$switchtmp$i266 = 0;
       label = 31;
      }
     }
    }
   }
   L41: do {
    if ((label|0) == 31) {
     $switch1tmp$i = ($_29$sroa$0$0|0)==(0|0);
     $_0$sroa$3$0$i = $switch1tmp$i ? 9 : $_29$sroa$6$0;
     $_0$sroa$0$0$i = $switch1tmp$i ? 15746 : $_29$sroa$0$0;
     HEAP32[$name>>2] = $_0$sroa$0$0$i;
     $$fca$1$gep = ((($name)) + 4|0);
     HEAP32[$$fca$1$gep>>2] = $_0$sroa$3$0$i;
     HEAP32[$write>>2] = $name;
     $60 = ((($write)) + 4|0);
     HEAP32[$60>>2] = $msg;
     $61 = ((($write)) + 8|0);
     HEAP32[$61>>2] = $file;
     $62 = ((($write)) + 12|0);
     HEAP32[$62>>2] = $line;
     $63 = ((($write)) + 16|0);
     HEAP32[$63>>2] = $log_backtrace;
     __THREW__ = 0;
     $64 = (invoke_ii(359,(4812|0))|0);
     $65 = __THREW__; __THREW__ = 0;
     $66 = $65&1;
     do {
      if (!($66)) {
       $switch2tmp$i$i117 = ($64|0)==(0|0);
       if ($switch2tmp$i$i117) {
        __THREW__ = 0;
        invoke_vii(77,(15492|0),57);
        $67 = __THREW__; __THREW__ = 0;
        break;
       }
       $68 = HEAP32[$64>>2]|0;
       $switch$i122 = ($68|0)==(1);
       if ($switch$i122) {
        $73 = ((($64)) + 4|0);
        $$pre360 = HEAP32[$73>>2]|0;
        $cond$i$i$i$i$i149 = ($$pre360|0)==(0);
        if ($cond$i$i$i$i$i149) {
         $_14$0$i148$in364 = $73;
        } else {
         __THREW__ = 0;
         invoke_v(360);
         $74 = __THREW__; __THREW__ = 0;
         $75 = ___cxa_find_matching_catch_2()|0;
         $76 = tempRet0;
         if ($switchtmp$i266) {
          $personalityslot$sroa$0$0 = $75;$personalityslot$sroa$9$0 = $76;
         } else {
          $$fca$0$extract30245274 = $75;$$fca$1$extract32246275 = $76;$145 = $92;
          break L41;
         }
         ___resumeException($personalityslot$sroa$0$0|0);
         // unreachable;
        }
       } else {
        $src$i$sroa$5$0$$sroa_idx22$i$i127 = ((($64)) + 8|0);
        HEAP32[$64>>2] = 1;
        $_12$sroa$4$0$$sroa_idx$i$i133 = ((($64)) + 4|0);
        HEAP32[$_12$sroa$4$0$$sroa_idx$i$i133>>2] = 0;
        $69 = $src$i$sroa$5$0$$sroa_idx22$i$i127;
        $70 = $69;
        HEAP32[$70>>2] = 0;
        $71 = (($69) + 4)|0;
        $72 = $71;
        HEAP32[$72>>2] = 0;
        $_14$0$i148$in364 = $_12$sroa$4$0$$sroa_idx$i$i133;
       }
       $79 = ((($64)) + 8|0);
       $80 = $79;
       $81 = $80;
       $82 = HEAP32[$81>>2]|0;
       $83 = (($80) + 4)|0;
       $84 = $83;
       $85 = HEAP32[$84>>2]|0;
       HEAP32[$79>>2] = 0;
       HEAP32[$_14$0$i148$in364>>2] = 0;
       $86 = HEAP8[$err>>0]|0;
       $switch$i = ($86<<24>>24)==(1);
       $87 = ((($err)) + 1|0);
       $_0$0$i70 = $switch$i ? $87 : 0;
       HEAP32[$_44>>2] = $82;
       $$sroa_idx = ((($_44)) + 4|0);
       HEAP32[$$sroa_idx>>2] = $85;
       $_46$0$$sroa_idx = ((($_44)) + 8|0);
       HEAP32[$_46$0$$sroa_idx>>2] = $_0$0$i70;
       $88 = $82;
       $switchtmp = ($82|0)==(0);
       $89 = $85;
       L54: do {
        if ($switchtmp) {
         $switch8tmp = ($_0$0$i70|0)==(0|0);
         if (!($switch8tmp)) {
          __THREW__ = 0;
          invoke_viii(361,($write|0),($_46$0$$sroa_idx|0),(96|0));
          $96 = __THREW__; __THREW__ = 0;
          $97 = $96&1;
          if ($97) {
           $162 = ___cxa_find_matching_catch_2()|0;
           $163 = tempRet0;
           $_68$2$off0234 = 1;$personalityslot$sroa$0$3235 = $162;$personalityslot$sroa$9$3236 = $163;
           label = 41;
           break;
          }
         }
         if ($switchtmp$i266) {
          $_68$1271 = 1;
         } else {
          $_68$1270 = 1;
          label = 48;
         }
        } else {
         __THREW__ = 0;
         invoke_viii(361,($write|0),($88|0),($89|0));
         $94 = __THREW__; __THREW__ = 0;
         $95 = $94&1;
         if ($95) {
          $154 = ___cxa_find_matching_catch_2()|0;
          $155 = tempRet0;
          $156 = HEAP32[$89>>2]|0;
          FUNCTION_TABLE_vi[$156 & 511]($88);
          $157 = ((($89)) + 4|0);
          $158 = HEAP32[$157>>2]|0;
          $159 = ($158|0)==(0);
          if ($159) {
           $_68$2$off0234 = 0;$personalityslot$sroa$0$3235 = $154;$personalityslot$sroa$9$3236 = $155;
           label = 41;
           break;
          }
          $160 = ((($89)) + 8|0);
          $161 = HEAP32[$160>>2]|0;
          ___rust_deallocate($88,$158,$161);
          $_68$2$off0234 = 0;$personalityslot$sroa$0$3235 = $154;$personalityslot$sroa$9$3236 = $155;
          label = 41;
          break;
         }
         __THREW__ = 0;
         $102 = (invoke_ii(359,(4812|0))|0);
         $103 = __THREW__; __THREW__ = 0;
         $104 = $103&1;
         do {
          if ($104) {
           $105 = ___cxa_find_matching_catch_2()|0;
           $106 = tempRet0;
           $$fca$0$extract42373 = $105;$$fca$1$extract44374 = $106;
          } else {
           $switch2tmp$i$i = ($102|0)==(0|0);
           if ($switch2tmp$i$i) {
            __THREW__ = 0;
            invoke_vii(77,(15492|0),57);
            $107 = __THREW__; __THREW__ = 0;
            $108 = ___cxa_find_matching_catch_2()|0;
            $109 = tempRet0;
            $switchtmp$i78 = ($82|0)==(0);
            if ($switchtmp$i78) {
             $_68$2$off0234 = 0;$personalityslot$sroa$0$3235 = $108;$personalityslot$sroa$9$3236 = $109;
             label = 41;
             break L54;
            } else {
             $$fca$0$extract42373 = $108;$$fca$1$extract44374 = $109;
             break;
            }
           }
           $110 = HEAP32[$102>>2]|0;
           $switch$i108 = ($110|0)==(1);
           if ($switch$i108) {
            $115 = ((($102)) + 4|0);
            $$pre362 = HEAP32[$115>>2]|0;
            $cond$i$i$i$i$i = ($$pre362|0)==(0);
            if ($cond$i$i$i$i$i) {
             $$in = $115;
            } else {
             __THREW__ = 0;
             invoke_v(360);
             $116 = __THREW__; __THREW__ = 0;
             $117 = ___cxa_find_matching_catch_2()|0;
             $118 = tempRet0;
             $119 = HEAP32[$89>>2]|0;
             __THREW__ = 0;
             invoke_vi($119|0,($88|0));
             $120 = __THREW__; __THREW__ = 0;
             $121 = $120&1;
             if ($121) {
              $140 = ___cxa_find_matching_catch_2()|0;
              $141 = tempRet0;
              $_68$2$off0234 = 0;$personalityslot$sroa$0$3235 = $140;$personalityslot$sroa$9$3236 = $141;
              label = 41;
              break L54;
             }
             $133 = ((($89)) + 4|0);
             $134 = HEAP32[$133>>2]|0;
             $135 = ($134|0)==(0);
             if ($135) {
              $_68$2$off0234 = 0;$personalityslot$sroa$0$3235 = $117;$personalityslot$sroa$9$3236 = $118;
              label = 41;
              break L54;
             }
             $136 = ((($89)) + 8|0);
             $137 = HEAP32[$136>>2]|0;
             ___rust_deallocate($88,$134,$137);
             $_68$2$off0234 = 0;$personalityslot$sroa$0$3235 = $117;$personalityslot$sroa$9$3236 = $118;
             label = 41;
             break L54;
            }
           } else {
            $src$i$sroa$5$0$$sroa_idx22$i$i = ((($102)) + 8|0);
            HEAP32[$102>>2] = 1;
            $_12$sroa$4$0$$sroa_idx$i$i = ((($102)) + 4|0);
            HEAP32[$_12$sroa$4$0$$sroa_idx$i$i>>2] = 0;
            $111 = $src$i$sroa$5$0$$sroa_idx22$i$i;
            $112 = $111;
            HEAP32[$112>>2] = 0;
            $113 = (($111) + 4)|0;
            $114 = $113;
            HEAP32[$114>>2] = 0;
            $$in = $_12$sroa$4$0$$sroa_idx$i$i;
           }
           HEAP32[$$in>>2] = -1;
           $122 = ((($102)) + 8|0);
           $123 = HEAP32[$122>>2]|0;
           $switchtmp$i21$i$i = ($123|0)==(0|0);
           $$pre$i$i = ((($102)) + 12|0);
           do {
            if (!($switchtmp$i21$i$i)) {
             $124 = HEAP32[$$pre$i$i>>2]|0;
             $125 = HEAP32[$124>>2]|0;
             __THREW__ = 0;
             invoke_vi($125|0,($123|0));
             $126 = __THREW__; __THREW__ = 0;
             $127 = $126&1;
             if ($127) {
              $138 = ___cxa_find_matching_catch_2()|0;
              $139 = tempRet0;
              HEAP32[$122>>2] = $82;
              HEAP32[$$pre$i$i>>2] = $85;
              HEAP32[$$in>>2] = 0;
              $_68$2$off0234 = 0;$personalityslot$sroa$0$3235 = $138;$personalityslot$sroa$9$3236 = $139;
              label = 41;
              break L54;
             }
             $128 = ((($124)) + 4|0);
             $129 = HEAP32[$128>>2]|0;
             $130 = ($129|0)==(0);
             if ($130) {
              break;
             }
             $131 = ((($124)) + 8|0);
             $132 = HEAP32[$131>>2]|0;
             ___rust_deallocate($123,$129,$132);
            }
           } while(0);
           HEAP32[$122>>2] = $82;
           HEAP32[$$pre$i$i>>2] = $85;
           HEAP32[$$in>>2] = 0;
           if ($switchtmp$i266) {
            $_68$1271 = 0;
            break L54;
           } else {
            $_68$1270 = 0;
            label = 48;
            break L54;
           }
          }
         } while(0);
         $177 = $82;
         $178 = HEAP32[$89>>2]|0;
         FUNCTION_TABLE_vi[$178 & 511]($177);
         $179 = ((($89)) + 4|0);
         $180 = HEAP32[$179>>2]|0;
         $181 = ($180|0)==(0);
         if ($181) {
          $_68$2$off0234 = 0;$personalityslot$sroa$0$3235 = $$fca$0$extract42373;$personalityslot$sroa$9$3236 = $$fca$1$extract44374;
          label = 41;
         } else {
          $182 = ((($89)) + 8|0);
          $183 = HEAP32[$182>>2]|0;
          ___rust_deallocate($177,$180,$183);
          $_68$2$off0234 = 0;$personalityslot$sroa$0$3235 = $$fca$0$extract42373;$personalityslot$sroa$9$3236 = $$fca$1$extract44374;
          label = 41;
         }
        }
       } while(0);
       if ((label|0) == 41) {
        if ($switchtmp$i266) {
         $_68$0$off0 = $_68$2$off0234;$personalityslot$sroa$0$2 = $personalityslot$sroa$0$3235;$personalityslot$sroa$9$2 = $personalityslot$sroa$9$3236;
         label = 40;
        } else {
         $91 = HEAP32[$92>>2]|0;HEAP32[$92>>2] = (($91-1)|0);
         $93 = ($91|0)==(1);
         if ($93) {
          /* fence */;
          __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17haa414254399d4f93E($thread);
          $_68$0$off0 = $_68$2$off0234;$personalityslot$sroa$0$2 = $personalityslot$sroa$0$3235;$personalityslot$sroa$9$2 = $personalityslot$sroa$9$3236;
          label = 40;
         } else {
          $_68$0$off0 = $_68$2$off0234;$personalityslot$sroa$0$2 = $personalityslot$sroa$0$3235;$personalityslot$sroa$9$2 = $personalityslot$sroa$9$3236;
          label = 40;
         }
        }
       }
       else if ((label|0) == 48) {
        $98 = HEAP32[$92>>2]|0;HEAP32[$92>>2] = (($98-1)|0);
        $99 = ($98|0)==(1);
        if ($99) {
         /* fence */;
         __THREW__ = 0;
         invoke_vi(362,($thread|0));
         $100 = __THREW__; __THREW__ = 0;
         $101 = $100&1;
         if ($101) {
          $184 = ___cxa_find_matching_catch_2()|0;
          $185 = tempRet0;
          $extract$t = ($_68$1270<<24>>24)!=(0);
          $_68$0$off0 = $extract$t;$personalityslot$sroa$0$2 = $184;$personalityslot$sroa$9$2 = $185;
          label = 40;
         } else {
          $_68$1271 = $_68$1270;
         }
        } else {
         $_68$1271 = $_68$1270;
        }
       }
       if ((label|0) == 40) {
        $90 = HEAP32[$_44>>2]|0;
        $switch7tmp = ($90|0)==(0|0);
        $_68$0$off0$not = $_68$0$off0 ^ 1;
        $brmerge = $switch7tmp | $_68$0$off0$not;
        if ($brmerge) {
         $personalityslot$sroa$0$0 = $personalityslot$sroa$0$2;$personalityslot$sroa$9$0 = $personalityslot$sroa$9$2;
         ___resumeException($personalityslot$sroa$0$0|0);
         // unreachable;
        }
        $147 = HEAP32[$$sroa_idx>>2]|0;
        $148 = HEAP32[$147>>2]|0;
        FUNCTION_TABLE_vi[$148 & 511]($90);
        $149 = ((($147)) + 4|0);
        $150 = HEAP32[$149>>2]|0;
        $151 = ($150|0)==(0);
        if ($151) {
         $personalityslot$sroa$0$0 = $personalityslot$sroa$0$2;$personalityslot$sroa$9$0 = $personalityslot$sroa$9$2;
         ___resumeException($personalityslot$sroa$0$0|0);
         // unreachable;
        }
        $152 = ((($147)) + 8|0);
        $153 = HEAP32[$152>>2]|0;
        ___rust_deallocate($90,$150,$153);
        $personalityslot$sroa$0$0 = $personalityslot$sroa$0$2;$personalityslot$sroa$9$0 = $personalityslot$sroa$9$2;
        ___resumeException($personalityslot$sroa$0$0|0);
        // unreachable;
       }
       $142 = HEAP32[$_44>>2]|0;
       $switch9tmp = ($142|0)==(0|0);
       $143 = ($_68$1271<<24>>24)==(0);
       $or$cond = $143 | $switch9tmp;
       if ($or$cond) {
        STACKTOP = sp;return;
       }
       $164 = HEAP32[$$sroa_idx>>2]|0;
       $165 = HEAP32[$164>>2]|0;
       __THREW__ = 0;
       invoke_vi($165|0,($142|0));
       $166 = __THREW__; __THREW__ = 0;
       $167 = $166&1;
       if ($167) {
        $173 = ___cxa_find_matching_catch_2()|0;
        $174 = tempRet0;
        $personalityslot$sroa$0$0 = $173;$personalityslot$sroa$9$0 = $174;
        ___resumeException($personalityslot$sroa$0$0|0);
        // unreachable;
       }
       $168 = ((($164)) + 4|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(0);
       if ($170) {
        STACKTOP = sp;return;
       }
       $171 = ((($164)) + 8|0);
       $172 = HEAP32[$171>>2]|0;
       ___rust_deallocate($142,$169,$172);
       STACKTOP = sp;return;
      }
     } while(0);
     $77 = ___cxa_find_matching_catch_2()|0;
     $78 = tempRet0;
     if ($switchtmp$i266) {
      $personalityslot$sroa$0$0 = $77;$personalityslot$sroa$9$0 = $78;
      ___resumeException($personalityslot$sroa$0$0|0);
      // unreachable;
     } else {
      $$fca$0$extract30245274 = $77;$$fca$1$extract32246275 = $78;$145 = $92;
     }
    }
   } while(0);
   $144 = HEAP32[$145>>2]|0;HEAP32[$145>>2] = (($144-1)|0);
   $146 = ($144|0)==(1);
   if (!($146)) {
    $personalityslot$sroa$0$0 = $$fca$0$extract30245274;$personalityslot$sroa$9$0 = $$fca$1$extract32246275;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   /* fence */;
   __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17haa414254399d4f93E($thread);
   $personalityslot$sroa$0$0 = $$fca$0$extract30245274;$personalityslot$sroa$9$0 = $$fca$1$extract32246275;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
 } while(0);
 $175 = ___cxa_find_matching_catch_2()|0;
 $176 = tempRet0;
 $personalityslot$sroa$0$0 = $175;$personalityslot$sroa$9$0 = $176;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
}
function _rust_panic($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10$sroa$3$0$$sroa_idx5 = 0, $_10$sroa$4$0$$sroa_idx6 = 0, $_10$sroa$58$0$$sroa_idx9 = 0, $_10$sroa$6$0$$sroa_idx10 = 0, $_15 = 0, $_4$i = 0, $_6$sroa$0$0$$sroa_idx$i$i = 0, $_9$i = 0, $args$i = 0, $code = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_9$i = sp + 56|0;
 $_4$i = sp + 32|0;
 $args$i = sp + 8|0;
 $_15 = sp;
 $code = sp + 64|0;
 $2 = $0;
 $3 = $1;
 $4 = (___rust_start_panic($2,$3)|0);
 HEAP32[$code>>2] = $4;
 $5 = $code;
 HEAP32[$_15>>2] = $5;
 $6 = ((($_15)) + 4|0);
 HEAP32[$6>>2] = (363);
 HEAP32[$args$i>>2] = 4788;
 $_10$sroa$3$0$$sroa_idx5 = ((($args$i)) + 4|0);
 HEAP32[$_10$sroa$3$0$$sroa_idx5>>2] = 1;
 $_10$sroa$4$0$$sroa_idx6 = ((($args$i)) + 8|0);
 HEAP32[$_10$sroa$4$0$$sroa_idx6>>2] = 0;
 $_10$sroa$58$0$$sroa_idx9 = ((($args$i)) + 16|0);
 HEAP32[$_10$sroa$58$0$$sroa_idx9>>2] = $_15;
 $_10$sroa$6$0$$sroa_idx10 = ((($args$i)) + 20|0);
 HEAP32[$_10$sroa$6$0$$sroa_idx10>>2] = 1;
 $7 = $args$i;
 HEAP32[$_9$i>>2] = $7;
 $8 = ((($_9$i)) + 4|0);
 HEAP32[$8>>2] = (364);
 HEAP32[$_4$i>>2] = 4796;
 $9 = ((($_4$i)) + 4|0);
 HEAP32[$9>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i$i = ((($_4$i)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i$i>>2] = 0;
 $10 = ((($_4$i)) + 16|0);
 HEAP32[$10>>2] = $_9$i;
 $11 = ((($_4$i)) + 20|0);
 HEAP32[$11>>2] = 1;
 __ZN3std10sys_common4util10dumb_print17h1a1da08255666722E($_4$i);
 __ZN3std3sys3imp14abort_internal17h55abd190eaaa6f4eE();
 // unreachable;
}
function __ZN3std3sys3imp14abort_internal17h55abd190eaaa6f4eE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZN3std3env7_var_os17h69846c7e69f0dca4E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa_idx$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_10$i = 0, $_10$i$sroa_raw_idx = 0, $_11$i = 0, $_26$sroa$4$0$copyload$i = 0, $_5$i = 0, $_7$sroa$0$i$sroa$4$0$_7$sroa$0$0$$sroa_cast$i$sroa_idx79 = 0, $_7$sroa$0$i$sroa$5$0$_7$sroa$0$0$$sroa_cast$i$sroa_idx81 = 0, $_9$i = 0, $_9$i$sroa_raw_idx = 0, $eh$lpad$body$i$index3Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $err$sroa$5$0$$sroa_idx115$i = 0, $err$sroa$6$0$$sroa_idx118$i = 0, $err$sroa$7$0$$sroa_idx121$i = 0, $key = 0, $not$$i$i$i$i$i$i$i = 0, $personalityslot$sroa$0$1157$i = 0, $personalityslot$sroa$7$1156$i = 0;
 var $phitmp = 0, $ptr$0$i$i$i$i$i = 0, $ret$sroa$0$0$i = 0, $ret$sroa$6$0$i = 0, $ret$sroa$7$0$i = 0, $self$sroa$0$0$copyload$i$i = 0, $self$sroa$11$0$$sroa_idx38$i$i = 0, $self$sroa$11$0$copyload$i$i = 0, $self$sroa$16$0$$sroa_idx45$i$i = 0, $self$sroa$16$0$copyload$i$i = 0, $self$sroa$18$0$$sroa_idx49$i$i = 0, $self$sroa$18$0$copyload$i$i = 0, $self$sroa$5$0$$sroa_idx32$i$i = 0, $self$sroa$5$0$copyload$i$i = 0, $switch3$i$i = 0, $vector$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_9$i = sp + 72|0;
 $vector$i$i$i = sp + 56|0;
 $_11$i = sp + 40|0;
 $_10$i = sp + 32|0;
 $_5$i = sp + 8|0;
 $key = sp;
 HEAP32[$key>>2] = $1;
 $3 = ((($key)) + 4|0);
 HEAP32[$3>>2] = $2;
 __THREW__ = 0;
 invoke_viii(365,($_5$i|0),($1|0),($2|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $36 = ___cxa_find_matching_catch_2()|0;
  $37 = tempRet0;
  $personalityslot$sroa$0$1157$i = $36;$personalityslot$sroa$7$1156$i = $37;
  ___resumeException($personalityslot$sroa$0$1157$i|0);
  // unreachable;
 }
 $self$sroa$0$0$copyload$i$i = HEAP32[$_5$i>>2]|0;
 $self$sroa$5$0$$sroa_idx32$i$i = ((($_5$i)) + 4|0);
 $self$sroa$5$0$copyload$i$i = HEAP32[$self$sroa$5$0$$sroa_idx32$i$i>>2]|0;
 $self$sroa$11$0$$sroa_idx38$i$i = ((($_5$i)) + 8|0);
 $self$sroa$11$0$copyload$i$i = HEAP32[$self$sroa$11$0$$sroa_idx38$i$i>>2]|0;
 $switch3$i$i = ($self$sroa$0$0$copyload$i$i|0)==(1);
 if ($switch3$i$i) {
  $self$sroa$18$0$$sroa_idx49$i$i = ((($_5$i)) + 16|0);
  $self$sroa$18$0$copyload$i$i = HEAP32[$self$sroa$18$0$$sroa_idx49$i$i>>2]|0;
  $self$sroa$16$0$$sroa_idx45$i$i = ((($_5$i)) + 12|0);
  $self$sroa$16$0$copyload$i$i = HEAP32[$self$sroa$16$0$$sroa_idx45$i$i>>2]|0;
  HEAP32[$_11$i>>2] = $self$sroa$5$0$copyload$i$i;
  $err$sroa$5$0$$sroa_idx115$i = ((($_11$i)) + 4|0);
  HEAP32[$err$sroa$5$0$$sroa_idx115$i>>2] = $self$sroa$11$0$copyload$i$i;
  $err$sroa$6$0$$sroa_idx118$i = ((($_11$i)) + 8|0);
  HEAP32[$err$sroa$6$0$$sroa_idx118$i>>2] = $self$sroa$16$0$copyload$i$i;
  $err$sroa$7$0$$sroa_idx121$i = ((($_11$i)) + 12|0);
  HEAP32[$err$sroa$7$0$$sroa_idx121$i>>2] = $self$sroa$18$0$copyload$i$i;
  __THREW__ = 0;
  invoke_vii(366,($_10$i|0),($_11$i|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $38 = ___cxa_find_matching_catch_2()|0;
   $39 = tempRet0;
   $personalityslot$sroa$0$1157$i = $38;$personalityslot$sroa$7$1156$i = $39;
   ___resumeException($personalityslot$sroa$0$1157$i|0);
   // unreachable;
  } else {
   $42 = HEAP32[$_10$i>>2]|0;
   $_10$i$sroa_raw_idx = ((($_10$i)) + 4|0);
   $43 = HEAP32[$_10$i$sroa_raw_idx>>2]|0;
   HEAP32[$_9$i>>2] = $42;
   $_9$i$sroa_raw_idx = ((($_9$i)) + 4|0);
   HEAP32[$_9$i$sroa_raw_idx>>2] = $43;
   __ZN3std3env7_var_os28__u7b__u7b_closure_u7d__u7d_17hd94f13ea4438975aE($key,$_9$i);
   STACKTOP = sp;return;
  }
 }
 (_pthread_mutex_lock(((23864)|0))|0);
 $8 = $self$sroa$5$0$copyload$i$i;
 $9 = (_getenv(($8|0))|0);
 $10 = ($9|0)==(0|0);
 L13: do {
  if ($10) {
   $ret$sroa$0$0$i = 0;$ret$sroa$6$0$i = 0;$ret$sroa$7$0$i = 0;
  } else {
   $11 = (_strlen($9)|0);
   $12 = ($11|0)==(-1);
   do {
    if ($12) {
     __THREW__ = 0;
     invoke_vii(358,-1,0);
     $13 = __THREW__; __THREW__ = 0;
     label = 23;
    } else {
     $14 = ($11|0)<(0);
     if ($14) {
      __THREW__ = 0;
      invoke_vi(78,(5428|0));
      $15 = __THREW__; __THREW__ = 0;
      label = 23;
      break;
     }
     $16 = ($11|0)==(0);
     if ($16) {
      $ptr$0$i$i$i$i$i = (1);
     } else {
      $17 = (___rust_allocate($11,1)|0);
      $18 = ($17|0)==(0|0);
      if ($18) {
       __THREW__ = 0;
       invoke_v(367);
       $19 = __THREW__; __THREW__ = 0;
       label = 23;
       break;
      } else {
       $ptr$0$i$i$i$i$i = $17;
      }
     }
     $20 = $ptr$0$i$i$i$i$i;
     HEAP32[$vector$i$i$i>>2] = $20;
     $$sroa_idx$i$i$i$i = ((($vector$i$i$i)) + 4|0);
     HEAP32[$$sroa_idx$i$i$i$i>>2] = $11;
     $21 = ((($vector$i$i$i)) + 8|0);
     HEAP32[$21>>2] = 0;
     __THREW__ = 0;
     invoke_vii(368,($vector$i$i$i|0),($11|0));
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      $28 = HEAP32[$21>>2]|0;
      $29 = (($28) + ($11))|0;
      HEAP32[$21>>2] = $29;
      $30 = HEAP32[$vector$i$i$i>>2]|0;
      $31 = (($30) + ($28)|0);
      _memcpy(($31|0),($9|0),($11|0))|0;
      $_26$sroa$4$0$copyload$i = HEAP32[$$sroa_idx$i$i$i$i>>2]|0;
      $phitmp = $30;
      $ret$sroa$0$0$i = $phitmp;$ret$sroa$6$0$i = $_26$sroa$4$0$copyload$i;$ret$sroa$7$0$i = $29;
      break L13;
     }
     $24 = ___cxa_find_matching_catch_2()|0;
     $25 = tempRet0;
     $26 = HEAP32[$$sroa_idx$i$i$i$i>>2]|0;
     $not$$i$i$i$i$i$i$i = ($26|0)==(0);
     if ($not$$i$i$i$i$i$i$i) {
      $eh$lpad$body$i$index3Z2D = $25;$eh$lpad$body$i$indexZ2D = $24;
     } else {
      $27 = HEAP32[$vector$i$i$i>>2]|0;
      ___rust_deallocate($27,$26,1);
      $eh$lpad$body$i$index3Z2D = $25;$eh$lpad$body$i$indexZ2D = $24;
     }
    }
   } while(0);
   if ((label|0) == 23) {
    $40 = ___cxa_find_matching_catch_2()|0;
    $41 = tempRet0;
    $eh$lpad$body$i$index3Z2D = $41;$eh$lpad$body$i$indexZ2D = $40;
   }
   $34 = $self$sroa$5$0$copyload$i$i;
   HEAP8[$34>>0] = 0;
   $35 = ($self$sroa$11$0$copyload$i$i|0)==(0);
   if ($35) {
    $personalityslot$sroa$0$1157$i = $eh$lpad$body$i$indexZ2D;$personalityslot$sroa$7$1156$i = $eh$lpad$body$i$index3Z2D;
    ___resumeException($personalityslot$sroa$0$1157$i|0);
    // unreachable;
   }
   ___rust_deallocate($34,$self$sroa$11$0$copyload$i$i,1);
   $personalityslot$sroa$0$1157$i = $eh$lpad$body$i$indexZ2D;$personalityslot$sroa$7$1156$i = $eh$lpad$body$i$index3Z2D;
   ___resumeException($personalityslot$sroa$0$1157$i|0);
   // unreachable;
  }
 } while(0);
 (_pthread_mutex_unlock(((23864)|0))|0);
 $32 = $self$sroa$5$0$copyload$i$i;
 HEAP8[$32>>0] = 0;
 $33 = ($self$sroa$11$0$copyload$i$i|0)==(0);
 if (!($33)) {
  ___rust_deallocate($32,$self$sroa$11$0$copyload$i$i,1);
 }
 HEAP32[$0>>2] = $ret$sroa$0$0$i;
 $_7$sroa$0$i$sroa$4$0$_7$sroa$0$0$$sroa_cast$i$sroa_idx79 = ((($0)) + 4|0);
 HEAP32[$_7$sroa$0$i$sroa$4$0$_7$sroa$0$0$$sroa_cast$i$sroa_idx79>>2] = $ret$sroa$6$0$i;
 $_7$sroa$0$i$sroa$5$0$_7$sroa$0$0$$sroa_cast$i$sroa_idx81 = ((($0)) + 8|0);
 HEAP32[$_7$sroa$0$i$sroa$5$0$_7$sroa$0$0$$sroa_cast$i$sroa_idx81>>2] = $ret$sroa$7$0$i;
 STACKTOP = sp;return;
}
function __ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h0465d50a8ec562c0E() {
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i = 0, $_0$0$i$i3 = 0, $_20$sroa$0$sroa$0$0$_20$sroa$0$0$$sroa_raw_idx$sroa_idx = 0, $cond$i$i = 0, $cond$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1269]|0;
 $cond$i$i1 = ($0|0)==(0);
 if ($cond$i$i1) {
  $1 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hb781edeaf6c88045E(5076)|0);
  $_0$0$i$i3 = $1;
 } else {
  $_0$0$i$i3 = $0;
 }
 $2 = (_pthread_getspecific(($_0$0$i$i3|0))|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ($2|0)==((1)|0);
  $5 = ((($2)) + 4|0);
  $$ = $4 ? 0 : $5;
  return ($$|0);
 }
 $6 = (___rust_allocate(24,4)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 }
 HEAP32[$6>>2] = 5076;
 $_20$sroa$0$sroa$0$0$_20$sroa$0$0$$sroa_raw_idx$sroa_idx = ((($6)) + 4|0);
 HEAP32[$_20$sroa$0$sroa$0$0$_20$sroa$0$0$$sroa_raw_idx$sroa_idx>>2] = 0;
 $8 = HEAP32[1269]|0;
 $cond$i$i = ($8|0)==(0);
 if (!($cond$i$i)) {
  $_0$0$i$i = $8;
  (_pthread_setspecific(($_0$0$i$i|0),($6|0))|0);
  return ($_20$sroa$0$sroa$0$0$_20$sroa$0$0$$sroa_raw_idx$sroa_idx|0);
 }
 $9 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hb781edeaf6c88045E(5076)|0);
 $_0$0$i$i = $9;
 (_pthread_setspecific(($_0$0$i$i|0),($6|0))|0);
 return ($_20$sroa$0$sroa$0$0$_20$sroa$0$0$$sroa_raw_idx$sroa_idx|0);
}
function __ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4with17hf3bc66faa0ab5898E() {
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11$i = 0, $_12$sroa$5$0$$sroa_idx15$i = 0, $_3$i = 0, $_9$i = 0, $cond$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i51$i = 0, $cond$i$i$i59$i = 0, $not$switch$i$i = 0, $personalityslot$sroa$0$1$i = 0, $personalityslot$sroa$10$1$i = 0, $switch = 0, $switch2tmp$i = 0;
 var $switchtmp$i$i = 0, $switchtmp$i$i$i$i$i = 0, $switchtmp$i67$i = 0, $switchtmp$i69$i = 0, $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx = 0, $value$i$sroa$414$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_3$i = sp + 40|0;
 $_11$i = sp + 24|0;
 $_9$i = sp;
 $0 = (__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h0465d50a8ec562c0E()|0);
 $switch2tmp$i = ($0|0)==(0|0);
 if ($switch2tmp$i) {
  __ZN4core6option13expect_failed17h8d3ef54cab66579bE(15492,57);
  // unreachable;
 }
 $1 = HEAP32[$0>>2]|0;
 $switch = ($1|0)==(1);
 do {
  if ($switch) {
   $$pre = ((($0)) + 4|0);
   $$pre$phiZ2D = $$pre;
  } else {
   ;HEAP32[$_9$i>>2]=HEAP32[$0>>2]|0;HEAP32[$_9$i+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$_9$i+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$_9$i+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$_9$i+16>>2]=HEAP32[$0+16>>2]|0;
   HEAP32[$0>>2] = 1;
   $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx = ((($0)) + 4|0);
   HEAP32[$value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx>>2] = 0;
   $value$i$sroa$414$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx = ((($0)) + 16|0);
   HEAP32[$value$i$sroa$414$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx>>2] = 0;
   $2 = HEAP32[$_9$i>>2]|0;
   $cond$i$i = ($2|0)==(1);
   if ($cond$i$i) {
    $3 = ((($_9$i)) + 16|0);
    $4 = HEAP32[$3>>2]|0;
    $switchtmp$i$i$i$i$i = ($4|0)==(0|0);
    if (!($switchtmp$i$i$i$i$i)) {
     $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5-1)|0);
     $6 = ($5|0)==(1);
     if ($6) {
      /* fence */;
      __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17haa414254399d4f93E($3);
     }
    }
   }
   $7 = HEAP32[$0>>2]|0;
   $not$switch$i$i = ($7|0)==(1);
   if ($not$switch$i$i) {
    $$pre$phiZ2D = $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx;
    break;
   } else {
    __ZN4core9panicking5panic17hee9f4f8d26a91787E(5548);
    // unreachable;
   }
  }
 } while(0);
 $8 = HEAP32[$$pre$phiZ2D>>2]|0;
 $cond$i$i$i$i = ($8|0)==(-1);
 L16: do {
  if ($cond$i$i$i$i) {
   __THREW__ = 0;
   invoke_v(369);
   $9 = __THREW__; __THREW__ = 0;
  } else {
   $10 = (($8) + 1)|0;
   HEAP32[$$pre$phiZ2D>>2] = $10;
   $11 = ((($0)) + 8|0);
   $12 = ((($0)) + 16|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   HEAP32[$$pre$phiZ2D>>2] = $8;
   do {
    if ($14) {
     HEAP32[$_3$i>>2] = 0;
     __THREW__ = 0;
     $15 = (invoke_ii(370,($_3$i|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if ($17) {
      break L16;
     }
     $18 = $15;
     HEAP32[$_11$i>>2] = 0;
     $_12$sroa$5$0$$sroa_idx15$i = ((($_11$i)) + 8|0);
     HEAP32[$_12$sroa$5$0$$sroa_idx15$i>>2] = $18;
     $19 = HEAP32[$$pre$phiZ2D>>2]|0;
     $cond$i$i$i51$i = ($19|0)==(0);
     if ($cond$i$i$i51$i) {
      HEAP32[$$pre$phiZ2D>>2] = -1;
      $23 = HEAP32[$12>>2]|0;
      $switchtmp$i$i = ($23|0)==(0|0);
      if (!($switchtmp$i$i)) {
       $24 = HEAP32[$23>>2]|0;HEAP32[$23>>2] = (($24-1)|0);
       $25 = ($24|0)==(1);
       if ($25) {
        /* fence */;
        __THREW__ = 0;
        invoke_vi(362,($12|0));
        $26 = __THREW__; __THREW__ = 0;
        $27 = $26&1;
        if ($27) {
         $40 = ___cxa_find_matching_catch_2()|0;
         $41 = tempRet0;
         ;HEAP32[$11>>2]=HEAP32[$_11$i>>2]|0;HEAP32[$11+4>>2]=HEAP32[$_11$i+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$_11$i+8>>2]|0;
         HEAP32[$$pre$phiZ2D>>2] = 0;
         $personalityslot$sroa$0$1$i = $40;$personalityslot$sroa$10$1$i = $41;
         ___resumeException($personalityslot$sroa$0$1$i|0);
         // unreachable;
        }
       }
      }
      ;HEAP32[$11>>2]=HEAP32[$_11$i>>2]|0;HEAP32[$11+4>>2]=HEAP32[$_11$i+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$_11$i+8>>2]|0;
      HEAP32[$$pre$phiZ2D>>2] = 0;
      break;
     } else {
      __THREW__ = 0;
      invoke_v(360);
      $20 = __THREW__; __THREW__ = 0;
      $21 = ___cxa_find_matching_catch_2()|0;
      $22 = tempRet0;
      $switchtmp$i69$i = ($15|0)==(0);
      if ($switchtmp$i69$i) {
       $personalityslot$sroa$0$1$i = $21;$personalityslot$sroa$10$1$i = $22;
       ___resumeException($personalityslot$sroa$0$1$i|0);
       // unreachable;
      }
      $37 = HEAP32[$18>>2]|0;HEAP32[$18>>2] = (($37-1)|0);
      $38 = ($37|0)==(1);
      if (!($38)) {
       $personalityslot$sroa$0$1$i = $21;$personalityslot$sroa$10$1$i = $22;
       ___resumeException($personalityslot$sroa$0$1$i|0);
       // unreachable;
      }
      $39 = ((($_11$i)) + 8|0);
      /* fence */;
      __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17haa414254399d4f93E($39);
      $personalityslot$sroa$0$1$i = $21;$personalityslot$sroa$10$1$i = $22;
      ___resumeException($personalityslot$sroa$0$1$i|0);
      // unreachable;
     }
    } else {
     $cond$i$i$i59$i = ($8|0)==(0);
     if (!($cond$i$i$i59$i)) {
      __THREW__ = 0;
      invoke_v(360);
      $28 = __THREW__; __THREW__ = 0;
      $29 = ___cxa_find_matching_catch_2()|0;
      $30 = tempRet0;
      $personalityslot$sroa$0$1$i = $29;$personalityslot$sroa$10$1$i = $30;
      ___resumeException($personalityslot$sroa$0$1$i|0);
      // unreachable;
     }
    }
   } while(0);
   HEAP32[$$pre$phiZ2D>>2] = -1;
   $31 = HEAP32[$12>>2]|0;
   $switchtmp$i67$i = ($31|0)==(0|0);
   if ($switchtmp$i67$i) {
    __THREW__ = 0;
    invoke_vi(78,(5548|0));
    $32 = __THREW__; __THREW__ = 0;
    $33 = ___cxa_find_matching_catch_2()|0;
    $34 = tempRet0;
    HEAP32[$$pre$phiZ2D>>2] = 0;
    $personalityslot$sroa$0$1$i = $33;$personalityslot$sroa$10$1$i = $34;
    ___resumeException($personalityslot$sroa$0$1$i|0);
    // unreachable;
   }
   $35 = HEAP32[$31>>2]|0;HEAP32[$31>>2] = (($35+1)|0);
   $36 = ($35|0)<(0);
   if ($36) {
    _llvm_trap();
    // unreachable;
   } else {
    $44 = $31;
    HEAP32[$$pre$phiZ2D>>2] = 0;
    STACKTOP = sp;return ($44|0);
   }
  }
 } while(0);
 $42 = ___cxa_find_matching_catch_2()|0;
 $43 = tempRet0;
 $personalityslot$sroa$0$1$i = $42;$personalityslot$sroa$10$1$i = $43;
 ___resumeException($personalityslot$sroa$0$1$i|0);
 // unreachable;
 return (0)|0;
}
function __ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17hc9a9cb9ff2588fffE($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i = 0, $_0$0$i$i14 = 0, $_20$sroa$0$sroa$0$0$_20$sroa$0$0$$sroa_raw_idx$sroa_idx = 0, $cond$i$i = 0, $cond$i$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $cond$i$i12 = ($1|0)==(0);
 if ($cond$i$i12) {
  $2 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hb781edeaf6c88045E($0)|0);
  $_0$0$i$i14 = $2;
 } else {
  $_0$0$i$i14 = $1;
 }
 $3 = (_pthread_getspecific(($_0$0$i$i14|0))|0);
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ($3|0)==((1)|0);
  $6 = ((($3)) + 4|0);
  $$ = $5 ? 0 : $6;
  return ($$|0);
 }
 $7 = (___rust_allocate(20,4)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 }
 HEAP32[$7>>2] = $0;
 $_20$sroa$0$sroa$0$0$_20$sroa$0$0$$sroa_raw_idx$sroa_idx = ((($7)) + 4|0);
 HEAP32[$_20$sroa$0$sroa$0$0$_20$sroa$0$0$$sroa_raw_idx$sroa_idx>>2] = 0;
 $9 = HEAP32[$0>>2]|0;
 $cond$i$i = ($9|0)==(0);
 if (!($cond$i$i)) {
  $_0$0$i$i = $9;
  (_pthread_setspecific(($_0$0$i$i|0),($7|0))|0);
  return ($_20$sroa$0$sroa$0$0$_20$sroa$0$0$$sroa_raw_idx$sroa_idx|0);
 }
 $10 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hb781edeaf6c88045E($0)|0);
 $_0$0$i$i = $10;
 (_pthread_setspecific(($_0$0$i$i|0),($7|0))|0);
 return ($_20$sroa$0$sroa$0$0$_20$sroa$0$0$$sroa_raw_idx$sroa_idx|0);
}
function __ZN4core6result13unwrap_failed17hf5231363403271c5E() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $error = sp + 48|0;
 $_10 = sp + 32|0;
 $_5 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = 16097;
 $0 = ((($msg)) + 4|0);
 HEAP32[$0>>2] = 16;
 $1 = HEAP32[1395]|0;
 $2 = HEAP32[(5584)>>2]|0;
 $3 = $msg;
 $4 = $error;
 HEAP32[$_10>>2] = $3;
 $5 = ((($_10)) + 4|0);
 HEAP32[$5>>2] = (349);
 $6 = ((($_10)) + 8|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($_10)) + 12|0);
 HEAP32[$7>>2] = (94);
 HEAP32[$_5>>2] = $1;
 $8 = ((($_5)) + 4|0);
 HEAP32[$8>>2] = $2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $9 = ((($_5)) + 16|0);
 HEAP32[$9>>2] = $_10;
 $10 = ((($_5)) + 20|0);
 HEAP32[$10>>2] = 2;
 __ZN4core9panicking9panic_fmt17hbeea8425e52b5ca1E($_5,5568);
 // unreachable;
}
function __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17haa414254399d4f93E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switchtmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $switchtmp$i$i = ($3|0)==(0|0);
 if (!($switchtmp$i$i)) {
  HEAP8[$3>>0] = 0;
  $4 = ((($1)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = HEAP32[$2>>2]|0;
   ___rust_deallocate($7,$5,1);
  }
 }
 $8 = ((($1)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 (_pthread_mutex_destroy(($9|0))|0);
 $10 = HEAP32[$8>>2]|0;
 ___rust_deallocate($10,24,8);
 $11 = ((($1)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 (_pthread_cond_destroy(($12|0))|0);
 $13 = HEAP32[$11>>2]|0;
 ___rust_deallocate($13,48,8);
 $14 = HEAP32[$0>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;HEAP32[$15>>2] = (($16-1)|0);
 $17 = ($16|0)==(1);
 if (!($17)) {
  return;
 }
 /* fence */;
 ___rust_deallocate($1,40,8);
 return;
}
function __ZN3std9panicking12default_hook28__u7b__u7b_closure_u7d__u7d_17h307cfef520f21c08E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $_0$sroa$3$0$insert$ext$i$i$i = 0, $_11 = 0, $_34 = 0, $_4 = 0, $_40 = 0;
 var $_42 = 0, $_6 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_6$sroa$0$0$$sroa_idx$i12 = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i$i14 = 0, $cond$i$i$i21 = 0, $cond$i13 = 0, $cond$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $_42 = sp + 104|0;
 $_40 = sp + 88|0;
 $_34 = sp + 72|0;
 $_11 = sp + 40|0;
 $_6 = sp + 16|0;
 $_4 = sp;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$_11>>2] = $3;
 $10 = ((($_11)) + 4|0);
 HEAP32[$10>>2] = (349);
 $11 = ((($_11)) + 8|0);
 HEAP32[$11>>2] = $5;
 $12 = ((($_11)) + 12|0);
 HEAP32[$12>>2] = (349);
 $13 = ((($_11)) + 16|0);
 HEAP32[$13>>2] = $7;
 $14 = ((($_11)) + 20|0);
 HEAP32[$14>>2] = (349);
 $15 = ((($_11)) + 24|0);
 HEAP32[$15>>2] = $9;
 $16 = ((($_11)) + 28|0);
 HEAP32[$16>>2] = (363);
 HEAP32[$_6>>2] = 4820;
 $17 = ((($_6)) + 4|0);
 HEAP32[$17>>2] = 5;
 $_6$sroa$0$0$$sroa_idx$i = ((($_6)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $18 = ((($_6)) + 16|0);
 HEAP32[$18>>2] = $_11;
 $19 = ((($_6)) + 20|0);
 HEAP32[$19>>2] = 4;
 $20 = ((($2)) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 FUNCTION_TABLE_viii[$21 & 511]($_4,$1,$_6);
 $22 = HEAP32[$_4>>2]|0;
 $cond$i20 = ($22|0)==(1);
 if ($cond$i20) {
  $23 = ((($_4)) + 4|0);
  $24 = HEAP8[$23>>0]|0;
  $cond$i$i$i21 = ($24<<24>>24)==(2);
  if ($cond$i$i$i21) {
   $25 = ((($_4)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($26)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[$30>>2]|0;
   FUNCTION_TABLE_vi[$31 & 511]($28);
   $32 = ((($30)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(0);
   if (!($34)) {
    $35 = ((($30)) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    ___rust_deallocate($28,$33,$36);
   }
   ___rust_deallocate($26,12,4);
  }
 }
 $37 = ((($0)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP8[$38>>0]|0;
 $40 = ($39<<24>>24)==(0);
 if (!($40)) {
  __ZN3std3sys3imp9backtrace7tracing3imp5write17hee1c2c759143d3bcE($_34,$1,$2);
  $41 = HEAP32[$_34>>2]|0;
  $cond$i13 = ($41|0)==(1);
  if ($cond$i13) {
   $42 = ((($_34)) + 4|0);
   $43 = HEAP8[$42>>0]|0;
   $cond$i$i$i14 = ($43<<24>>24)==(2);
   if ($cond$i$i$i14) {
    $44 = ((($_34)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 4|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($45)) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = HEAP32[$49>>2]|0;
    FUNCTION_TABLE_vi[$50 & 511]($47);
    $51 = ((($49)) + 4|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)==(0);
    if (!($53)) {
     $54 = ((($49)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     ___rust_deallocate($47,$52,$55);
    }
    ___rust_deallocate($45,12,4);
   }
  }
  STACKTOP = sp;return;
 }
 $56 = HEAP8[15809]|0;if (($56<<24>>24) == 1) HEAP8[15809] = 0;
 $_0$sroa$3$0$insert$ext$i$i$i = $56&255;
 $57 = ($_0$sroa$3$0$insert$ext$i$i$i << 8)&65535;
 $58 = ($57&65535)>(255);
 if (!($58)) {
  STACKTOP = sp;return;
 }
 HEAP32[$_42>>2] = 4860;
 $59 = ((($_42)) + 4|0);
 HEAP32[$59>>2] = 1;
 $_6$sroa$0$0$$sroa_idx$i12 = ((($_42)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i12>>2] = 0;
 $60 = ((($_42)) + 16|0);
 HEAP32[$60>>2] = 23968;
 $61 = ((($_42)) + 20|0);
 HEAP32[$61>>2] = 0;
 $62 = HEAP32[$20>>2]|0;
 FUNCTION_TABLE_viii[$62 & 511]($_40,$1,$_42);
 $63 = HEAP32[$_40>>2]|0;
 $cond$i = ($63|0)==(1);
 if ($cond$i) {
  $64 = ((($_40)) + 4|0);
  $65 = HEAP8[$64>>0]|0;
  $cond$i$i$i = ($65<<24>>24)==(2);
  if ($cond$i$i$i) {
   $66 = ((($_40)) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ((($67)) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ((($67)) + 8|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = HEAP32[$71>>2]|0;
   FUNCTION_TABLE_vi[$72 & 511]($69);
   $73 = ((($71)) + 4|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($74|0)==(0);
   if (!($75)) {
    $76 = ((($71)) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    ___rust_deallocate($69,$74,$77);
   }
   ___rust_deallocate($67,12,4);
  }
 }
 STACKTOP = sp;return;
}
function __ZN4drop17h2696e6e5b421dd7aE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5write17hc003e75bb332f9e3E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i = 0, $ret$i$sroa$4$0$$sroa_idx3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)>(-1);
 $_0$0$sroa$speculated$i$i$i = $4 ? $3 : 2147483647;
 $5 = (_write(2,$2,$_0$0$sroa$speculated$i$i$i)|0);
 $6 = ($5|0)==(-1);
 if ($6) {
  $7 = (___errno_location()|0);
  $8 = HEAP32[$7>>2]|0;
  $$sink$i$i = 1;$11 = 0;$14 = $8;
 } else {
  $$sink$i$i = 0;$11 = $5;$14 = 0;
 }
 HEAP32[$0>>2] = $$sink$i$i;
 $ret$i$sroa$4$0$$sroa_idx3$i = ((($0)) + 4|0);
 $9 = $ret$i$sroa$4$0$$sroa_idx3$i;
 $10 = $9;
 HEAP32[$10>>2] = $11;
 $12 = (($9) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $14;
 return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5flush17h54413b0de3980724E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_all17h34d014f22c99df60E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$1>>2]|0;
 __ZN3std2io5Write9write_all17h4ee0589aa2a92f3dE($0,$4,$2,$3);
 return;
}
function __ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_fmt17h68160d73c6c8a97eE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $_6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_6 = sp;
 $3 = HEAP32[$1>>2]|0;
 ;HEAP32[$_6>>2]=HEAP32[$2>>2]|0;HEAP32[$_6+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$_6+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$_6+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$_6+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$_6+20>>2]=HEAP32[$2+20>>2]|0;
 __ZN3std2io5Write9write_fmt17hee982c2299f35d6cE($0,$3,$_6);
 STACKTOP = sp;return;
}
function __ZN3std2io5Write9write_fmt17hee982c2299f35d6cE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa_idx = 0, $$sroa_idx35 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13 = 0, $_4$i$i$i = 0, $_7$sroa$0$0$$sroa_idx = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i$i21 = 0, $cond$i20 = 0;
 var $output = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$5$0 = 0, $switch = 0, $x$i$sroa$4$0$$sroa_raw_idx$i = 0, $x$i$sroa$4$i = 0, $x$i$sroa$5$0$$sroa_idx$i = 0, $x$i$sroa$6$0$$sroa_idx$i = 0, $x$sroa$0$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $x$i$sroa$4$i = sp + 68|0;
 $x$sroa$0$i$i$i$i$i = sp + 56|0;
 $_4$i$i$i = sp + 40|0;
 $_13 = sp + 16|0;
 $output = sp;
 HEAP32[$output>>2] = $1;
 $_7$sroa$0$0$$sroa_idx = ((($output)) + 4|0);
 HEAP32[$_7$sroa$0$0$$sroa_idx>>2] = 0;
 ;HEAP32[$_13>>2]=HEAP32[$2>>2]|0;HEAP32[$_13+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$_13+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$_13+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$_13+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$_13+20>>2]=HEAP32[$2+20>>2]|0;
 __THREW__ = 0;
 $3 = (invoke_iiii(350,($output|0),(128|0),($_13|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 L1: do {
  if (!($5)) {
   $switch = ($3<<24>>24)==(0);
   do {
    if ($switch) {
     HEAP32[$0>>2] = 0;
    } else {
     $6 = ((($output)) + 4|0);
     $7 = HEAP32[$6>>2]|0;
     $8 = ($7|0)==(1);
     if ($8) {
      ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;HEAP32[$0+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$6+8>>2]|0;
      STACKTOP = sp;return;
     }
     __THREW__ = 0;
     invoke_viii(244,($_4$i$i$i|0),(15755|0),15);
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if ($10) {
      break L1;
     }
     ;HEAP32[$x$sroa$0$i$i$i$i$i>>2]=HEAP32[$_4$i$i$i>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]=HEAP32[$_4$i$i$i+4>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]=HEAP32[$_4$i$i$i+8>>2]|0;
     $11 = (___rust_allocate(12,4)|0);
     $12 = ($11|0)==(0|0);
     if ($12) {
      __THREW__ = 0;
      invoke_v(367);
      $13 = __THREW__; __THREW__ = 0;
      break L1;
     }
     ;HEAP32[$11>>2]=HEAP32[$x$sroa$0$i$i$i$i$i>>2]|0;HEAP32[$11+4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]|0;
     $14 = (___rust_allocate(12,4)|0);
     $15 = ($14|0)==(0|0);
     if ($15) {
      __THREW__ = 0;
      invoke_v(367);
      $16 = __THREW__; __THREW__ = 0;
      break L1;
     } else {
      HEAP8[$14>>0] = 16;
      $x$i$sroa$4$0$$sroa_raw_idx$i = ((($14)) + 1|0);
      ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$x$i$sroa$4$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$x$i$sroa$4$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$x$i$sroa$4$i+2>>0]|0;
      $x$i$sroa$5$0$$sroa_idx$i = ((($14)) + 4|0);
      HEAP32[$x$i$sroa$5$0$$sroa_idx$i>>2] = $11;
      $x$i$sroa$6$0$$sroa_idx$i = ((($14)) + 8|0);
      HEAP32[$x$i$sroa$6$0$$sroa_idx$i>>2] = 152;
      $17 = $14;
      HEAP32[$0>>2] = 1;
      $$sroa_idx = ((($0)) + 4|0);
      HEAP32[$$sroa_idx>>2] = 2;
      $$sroa_idx35 = ((($0)) + 8|0);
      HEAP32[$$sroa_idx35>>2] = $17;
      break;
     }
    }
   } while(0);
   $18 = HEAP32[$_7$sroa$0$0$$sroa_idx>>2]|0;
   $cond$i20 = ($18|0)==(1);
   if (!($cond$i20)) {
    STACKTOP = sp;return;
   }
   $19 = ((($output)) + 8|0);
   $20 = HEAP8[$19>>0]|0;
   $cond$i$i$i21 = ($20<<24>>24)==(2);
   if (!($cond$i$i$i21)) {
    STACKTOP = sp;return;
   }
   $21 = ((($output)) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($22)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   __THREW__ = 0;
   invoke_vi($27|0,($24|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $52 = ___cxa_find_matching_catch_2()|0;
    $53 = tempRet0;
    $personalityslot$sroa$0$0 = $52;$personalityslot$sroa$5$0 = $53;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   $30 = ((($26)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0);
   if (!($32)) {
    $33 = ((($26)) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    ___rust_deallocate($24,$31,$34);
   }
   ___rust_deallocate($22,12,4);
   STACKTOP = sp;return;
  }
 } while(0);
 $35 = ___cxa_find_matching_catch_2()|0;
 $36 = tempRet0;
 $37 = HEAP32[$_7$sroa$0$0$$sroa_idx>>2]|0;
 $cond$i = ($37|0)==(1);
 if (!($cond$i)) {
  $personalityslot$sroa$0$0 = $35;$personalityslot$sroa$5$0 = $36;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 $38 = ((($output)) + 8|0);
 $39 = HEAP8[$38>>0]|0;
 $cond$i$i$i = ($39<<24>>24)==(2);
 if (!($cond$i$i$i)) {
  $personalityslot$sroa$0$0 = $35;$personalityslot$sroa$5$0 = $36;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 $40 = ((($output)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($41)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$45>>2]|0;
 FUNCTION_TABLE_vi[$46 & 511]($43);
 $47 = ((($45)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)==(0);
 if (!($49)) {
  $50 = ((($45)) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  ___rust_deallocate($43,$48,$51);
 }
 ___rust_deallocate($41,12,4);
 $personalityslot$sroa$0$0 = $35;$personalityslot$sroa$5$0 = $36;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
}
function __ZN4drop17h52595e8585967f0dE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $not$$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $not$$i$i$i$i$i = ($2|0)==(0);
 if ($not$$i$i$i$i$i) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 ___rust_deallocate($3,$2,1);
 return;
}
function __ZN287__LT_std__error___LT_impl_u20_core__convert__From_LT_collections__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Send_u20__u2b__u20_core__marker__Sync_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_std__error__Error_GT_11description17h2175996f8c64d355E($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$retVal>>2] = $1;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $3;
 return;
}
function __ZN3std5error5Error5cause17h3c7ac94e0e5e1176E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN3std5error5Error7type_id17h55b8face0c0321a0E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (-1392910729);
 return -627844104;
}
function __ZN288__LT_std__error___LT_impl_u20_core__convert__From_LT_collections__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Send_u20__u2b__u20_core__marker__Sync_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_core__fmt__Display_GT_3fmt17h3e0df4ae0abba0a5E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17h53ffdc2cd959b259E($2,$4,$1)|0);
 return ($5|0);
}
function __ZN286__LT_std__error___LT_impl_u20_core__convert__From_LT_collections__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Send_u20__u2b__u20_core__marker__Sync_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_core__fmt__Debug_GT_3fmt17ha01bdc8f9eea359aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $_15 = 0, $builder = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_15 = sp + 16|0;
 $builder = sp;
 __ZN4core3fmt8builders15debug_tuple_new17he50543912fc9d116E($builder,$1,15770,11);
 HEAP32[$_15>>2] = $0;
 (__ZN4core3fmt8builders10DebugTuple5field17hd64ae47e9d46842fE($builder,$_15,184)|0);
 $2 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h02302c765bb1ebdbE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($2)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17hc4ff3f3b2f08a94fE($3,$5,$1)|0);
 return ($6|0);
}
function __ZN4drop17he3e770d862a9ee94E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i = 0, $cond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $cond$i = ($2|0)==(1);
 if (!($cond$i)) {
  return;
 }
 $3 = ((($0)) + 8|0);
 $4 = HEAP8[$3>>0]|0;
 $cond$i$i$i = ($4<<24>>24)==(2);
 if (!($cond$i$i$i)) {
  return;
 }
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($6)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vi[$11 & 511]($8);
 $12 = ((($10)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = ((($10)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  ___rust_deallocate($8,$13,$16);
 }
 ___rust_deallocate($6,12,4);
 return;
}
function __ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h7a06fd2d52ff0402E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$057 = 0, $_5 = 0, $cond$i = 0, $cond$i$i$i = 0;
 var $e$sroa$0$0$$sroa_idx = 0, $switch3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_5 = sp;
 $3 = HEAP32[$0>>2]|0;
 __ZN3std2io5Write9write_all17h4ee0589aa2a92f3dE($_5,$3,$1,$2);
 $4 = HEAP32[$_5>>2]|0;
 $switch3 = ($4|0)==(1);
 if (!($switch3)) {
  $_0$sroa$0$057 = 0;
  STACKTOP = sp;return ($_0$sroa$0$057|0);
 }
 $e$sroa$0$0$$sroa_idx = ((($_5)) + 4|0);
 $5 = $e$sroa$0$0$$sroa_idx;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $cond$i = ($12|0)==(1);
 $13 = ((($0)) + 8|0);
 if ($cond$i) {
  $14 = HEAP8[$13>>0]|0;
  $cond$i$i$i = ($14<<24>>24)==(2);
  if ($cond$i$i$i) {
   $15 = ((($0)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($16)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP32[$20>>2]|0;
   __THREW__ = 0;
   invoke_vi($21|0,($18|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $33 = ___cxa_find_matching_catch_2()|0;
    $34 = tempRet0;
    HEAP32[$11>>2] = 1;
    $35 = $13;
    $36 = $35;
    HEAP32[$36>>2] = $7;
    $37 = (($35) + 4)|0;
    $38 = $37;
    HEAP32[$38>>2] = $10;
    ___resumeException($33|0);
    // unreachable;
   }
   $24 = ((($20)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   if (!($26)) {
    $27 = ((($20)) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    ___rust_deallocate($18,$25,$28);
   }
   ___rust_deallocate($16,12,4);
  }
 }
 HEAP32[$11>>2] = 1;
 $29 = $13;
 $30 = $29;
 HEAP32[$30>>2] = $7;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $10;
 $_0$sroa$0$057 = 1;
 STACKTOP = sp;return ($_0$sroa$0$057|0);
}
function __ZN4core3fmt5Write10write_char17haa2deb48ceba2f45E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $_12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $_12 = sp + 8|0;
 HEAP32[$_12>>2] = 0;
 __ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_11encode_utf817hb5b68bfc485c793fE($2,$1,$_12);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $3 = (__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h7a06fd2d52ff0402E($0,$$sreg$field,$$sreg$field2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN4core3fmt5Write9write_fmt17he689036ac98452afE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $_10 = 0, $_8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_10 = sp + 8|0;
 $_8 = sp;
 HEAP32[$_8>>2] = $0;
 ;HEAP32[$_10>>2]=HEAP32[$1>>2]|0;HEAP32[$_10+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10+20>>2]=HEAP32[$1+20>>2]|0;
 $2 = (__ZN4core3fmt5write17ha952368ac9616bb6E($_8,200,$_10)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hc8c5d472da731041E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h7a06fd2d52ff0402E($3,$1,$2)|0);
 return ($4|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h954f4db9bda51332E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12$i = 0, $len$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_12$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_12$i>>2] = 0;
 $3 = ($1>>>0)<(128);
 do {
  if ($3) {
   $4 = $1&255;
   HEAP8[$_12$i>>0] = $4;
   $len$0$i = 1;
  } else {
   $5 = ($1>>>0)<(2048);
   if ($5) {
    $6 = $1 >>> 6;
    $7 = $6 & 31;
    $8 = $7&255;
    $9 = $8 | -64;
    HEAP8[$_12$i>>0] = $9;
    $10 = $1 & 63;
    $11 = $10&255;
    $12 = ((($_12$i)) + 1|0);
    $13 = $11 | -128;
    HEAP8[$12>>0] = $13;
    $len$0$i = 2;
    break;
   }
   $14 = ($1>>>0)<(65536);
   if ($14) {
    $15 = $1 >>> 12;
    $16 = $15 & 15;
    $17 = $16&255;
    $18 = $17 | -32;
    HEAP8[$_12$i>>0] = $18;
    $19 = $1 >>> 6;
    $20 = $19 & 63;
    $21 = $20&255;
    $22 = ((($_12$i)) + 1|0);
    $23 = $21 | -128;
    HEAP8[$22>>0] = $23;
    $24 = $1 & 63;
    $25 = $24&255;
    $26 = ((($_12$i)) + 2|0);
    $27 = $25 | -128;
    HEAP8[$26>>0] = $27;
    $len$0$i = 3;
    break;
   } else {
    $28 = $1 >>> 18;
    $29 = $28 & 7;
    $30 = $29&255;
    $31 = $30 | -16;
    HEAP8[$_12$i>>0] = $31;
    $32 = $1 >>> 12;
    $33 = $32 & 63;
    $34 = $33&255;
    $35 = ((($_12$i)) + 1|0);
    $36 = $34 | -128;
    HEAP8[$35>>0] = $36;
    $37 = $1 >>> 6;
    $38 = $37 & 63;
    $39 = $38&255;
    $40 = ((($_12$i)) + 2|0);
    $41 = $39 | -128;
    HEAP8[$40>>0] = $41;
    $42 = $1 & 63;
    $43 = $42&255;
    $44 = ((($_12$i)) + 3|0);
    $45 = $43 | -128;
    HEAP8[$44>>0] = $45;
    $len$0$i = 4;
    break;
   }
  }
 } while(0);
 $46 = (__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h7a06fd2d52ff0402E($2,$_12$i,$len$0$i)|0);
 STACKTOP = sp;return ($46|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hfc1dfbe5ff36a678E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_10$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_10$i = sp + 8|0;
 $_8$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_8$i>>2] = $2;
 ;HEAP32[$_10$i>>2]=HEAP32[$1>>2]|0;HEAP32[$_10$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10$i+20>>2]=HEAP32[$1+20>>2]|0;
 $3 = (__ZN4core3fmt5write17ha952368ac9616bb6E($_8$i,200,$_10$i)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_11encode_utf817hb5b68bfc485c793fE($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $len$0 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<(128);
 do {
  if ($2) {
   $3 = $0&255;
   HEAP8[$1>>0] = $3;
   $len$0 = 1;
  } else {
   $4 = ($0>>>0)<(2048);
   if ($4) {
    $5 = $0 >>> 6;
    $6 = $5 & 31;
    $7 = $6&255;
    $8 = $7 | -64;
    HEAP8[$1>>0] = $8;
    $9 = $0 & 63;
    $10 = $9&255;
    $11 = ((($1)) + 1|0);
    $12 = $10 | -128;
    HEAP8[$11>>0] = $12;
    $len$0 = 2;
    break;
   }
   $13 = ($0>>>0)<(65536);
   if ($13) {
    $14 = $0 >>> 12;
    $15 = $14 & 15;
    $16 = $15&255;
    $17 = $16 | -32;
    HEAP8[$1>>0] = $17;
    $18 = $0 >>> 6;
    $19 = $18 & 63;
    $20 = $19&255;
    $21 = ((($1)) + 1|0);
    $22 = $20 | -128;
    HEAP8[$21>>0] = $22;
    $23 = $0 & 63;
    $24 = $23&255;
    $25 = ((($1)) + 2|0);
    $26 = $24 | -128;
    HEAP8[$25>>0] = $26;
    $len$0 = 3;
    break;
   } else {
    $27 = $0 >>> 18;
    $28 = $27 & 7;
    $29 = $28&255;
    $30 = $29 | -16;
    HEAP8[$1>>0] = $30;
    $31 = $0 >>> 12;
    $32 = $31 & 63;
    $33 = $32&255;
    $34 = ((($1)) + 1|0);
    $35 = $33 | -128;
    HEAP8[$34>>0] = $35;
    $36 = $0 >>> 6;
    $37 = $36 & 63;
    $38 = $37&255;
    $39 = ((($1)) + 2|0);
    $40 = $38 | -128;
    HEAP8[$39>>0] = $40;
    $41 = $0 & 63;
    $42 = $41&255;
    $43 = ((($1)) + 3|0);
    $44 = $42 | -128;
    HEAP8[$43>>0] = $44;
    $len$0 = 4;
    break;
   }
  }
 } while(0);
 HEAP32[$retVal>>2] = $1;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $len$0;
 return;
}
function __ZN3std2io5Write9write_all17h4ee0589aa2a92f3dE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sroa_idx = 0, $$sroa_idx147 = 0, $$sroa_idx65 = 0, $$sroa_idx66 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i = 0, $_4$i$i$i = 0;
 var $buf$sroa$0$0$ph186 = 0, $buf$sroa$8$0$ph185 = 0, $cond162 = 0, $x$i$sroa$4$0$$sroa_raw_idx$i = 0, $x$i$sroa$4$i = 0, $x$i$sroa$5$0$$sroa_idx$i = 0, $x$i$sroa$6$0$$sroa_idx$i = 0, $x$sroa$0$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$i$sroa$4$i = sp + 28|0;
 $x$sroa$0$i$i$i$i$i = sp + 16|0;
 $_4$i$i$i = sp;
 $4 = ($3|0)==(0);
 L1: do {
  if (!($4)) {
   $buf$sroa$0$0$ph186 = $2;$buf$sroa$8$0$ph185 = $3;
   L2: while(1) {
    $5 = ($buf$sroa$8$0$ph185|0)>(-1);
    $_0$0$sroa$speculated$i$i$i = $5 ? $buf$sroa$8$0$ph185 : 2147483647;
    L4: while(1) {
     $6 = (_write(2,$buf$sroa$0$0$ph186,$_0$0$sroa$speculated$i$i$i)|0);
     switch ($6|0) {
     case 0:  {
      label = 5;
      break L2;
      break;
     }
     case -1:  {
      break;
     }
     default: {
      break L4;
     }
     }
     $11 = (___errno_location()|0);
     $12 = HEAP32[$11>>2]|0;
     $cond162 = ($12|0)==(4);
     if (!($cond162)) {
      label = 14;
      break L2;
     }
    }
    $13 = ($buf$sroa$8$0$ph185>>>0)<($6>>>0);
    if ($13) {
     label = 11;
     break;
    }
    $15 = (($buf$sroa$0$0$ph186) + ($6)|0);
    $16 = (($buf$sroa$8$0$ph185) - ($6))|0;
    $17 = ($16|0)==(0);
    if ($17) {
     break L1;
    } else {
     $buf$sroa$0$0$ph186 = $15;$buf$sroa$8$0$ph185 = $16;
    }
   }
   if ((label|0) == 5) {
    __ZN93__LT_collections__string__String_u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17hab70a9f6912d519dE($_4$i$i$i,15781,28);
    ;HEAP32[$x$sroa$0$i$i$i$i$i>>2]=HEAP32[$_4$i$i$i>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]=HEAP32[$_4$i$i$i+4>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]=HEAP32[$_4$i$i$i+8>>2]|0;
    $7 = (___rust_allocate(12,4)|0);
    $8 = ($7|0)==(0|0);
    if ($8) {
     __ZN5alloc3oom3oom17h3b36c708663c15cdE();
     // unreachable;
    }
    ;HEAP32[$7>>2]=HEAP32[$x$sroa$0$i$i$i$i$i>>2]|0;HEAP32[$7+4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]|0;
    $9 = (___rust_allocate(12,4)|0);
    $10 = ($9|0)==(0|0);
    if ($10) {
     __ZN5alloc3oom3oom17h3b36c708663c15cdE();
     // unreachable;
    }
    HEAP8[$9>>0] = 14;
    $x$i$sroa$4$0$$sroa_raw_idx$i = ((($9)) + 1|0);
    ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$x$i$sroa$4$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$x$i$sroa$4$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$x$i$sroa$4$i+2>>0]|0;
    $x$i$sroa$5$0$$sroa_idx$i = ((($9)) + 4|0);
    HEAP32[$x$i$sroa$5$0$$sroa_idx$i>>2] = $7;
    $x$i$sroa$6$0$$sroa_idx$i = ((($9)) + 8|0);
    HEAP32[$x$i$sroa$6$0$$sroa_idx$i>>2] = 152;
    $14 = $9;
    HEAP32[$0>>2] = 1;
    $$sroa_idx = ((($0)) + 4|0);
    HEAP32[$$sroa_idx>>2] = 2;
    $$sroa_idx147 = ((($0)) + 8|0);
    HEAP32[$$sroa_idx147>>2] = $14;
    STACKTOP = sp;return;
   }
   else if ((label|0) == 11) {
    __ZN4core5slice22slice_index_order_fail17ha914aac85326e558E($6,$buf$sroa$8$0$ph185);
    // unreachable;
   }
   else if ((label|0) == 14) {
    HEAP32[$0>>2] = 1;
    $$sroa_idx65 = ((($0)) + 4|0);
    HEAP32[$$sroa_idx65>>2] = 0;
    $$sroa_idx66 = ((($0)) + 8|0);
    HEAP32[$$sroa_idx66>>2] = $12;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17he2d714954e405b09E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17h53ffdc2cd959b259E($2,$4,$1)|0);
 return ($5|0);
}
function __ZN3std3sys3imp9backtrace7tracing3imp5write17hee1c2c759143d3bcE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_23$sroa$0$0$$sroa_idx = 0, $_23$sroa$4$0$$sroa_idx = 0, $_3$sroa$0$0$$sroa_idx$i = 0;
 var $_38$sroa$4$0$$sroa_idx122 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_7 = 0, $_9 = 0, $brmerge = 0, $cond = 0, $cond$i$i = 0, $cx = 0, $or$cond = 0, $ret$sroa$0$0 = 0, $self$i$sroa$0$0$copyload = 0, $self$i$sroa$4$0$$sroa_idx125 = 0, $self$i$sroa$4$0$copyload = 0, $self$i$sroa$5$0$$sroa_idx127 = 0, $self$i$sroa$5$0$copyload = 0, $switch3$i = 0, $switch6 = 0, $switch7$not = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $cx = sp + 40|0;
 $_9 = sp + 16|0;
 $_7 = sp;
 (_pthread_mutex_lock(((23736)|0))|0);
 HEAP32[$_9>>2] = 4868;
 $3 = ((($_9)) + 4|0);
 HEAP32[$3>>2] = 1;
 $_6$sroa$0$0$$sroa_idx$i = ((($_9)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $4 = ((($_9)) + 16|0);
 HEAP32[$4>>2] = 23968;
 $5 = ((($_9)) + 20|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_viii[$7 & 511]($_7,$1,$_9);
 $self$i$sroa$0$0$copyload = HEAP32[$_7>>2]|0;
 $switch3$i = ($self$i$sroa$0$0$copyload|0)==(1);
 if ($switch3$i) {
  $self$i$sroa$4$0$$sroa_idx125 = ((($_7)) + 4|0);
  $self$i$sroa$4$0$copyload = HEAP32[$self$i$sroa$4$0$$sroa_idx125>>2]|0;
  $self$i$sroa$5$0$$sroa_idx127 = ((($_7)) + 8|0);
  $self$i$sroa$5$0$copyload = HEAP32[$self$i$sroa$5$0$$sroa_idx127>>2]|0;
  HEAP32[$0>>2] = 1;
  $_3$sroa$0$0$$sroa_idx$i = ((($0)) + 4|0);
  $8 = $_3$sroa$0$0$$sroa_idx$i;
  $9 = $8;
  HEAP32[$9>>2] = $self$i$sroa$4$0$copyload;
  $10 = (($8) + 4)|0;
  $11 = $10;
  HEAP32[$11>>2] = $self$i$sroa$5$0$copyload;
  STACKTOP = sp;return;
 }
 HEAP32[$cx>>2] = 0;
 $12 = ((($cx)) + 4|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($cx)) + 8|0);
 HEAP32[$13>>2] = $2;
 $_23$sroa$0$0$$sroa_idx = ((($cx)) + 12|0);
 HEAP32[$_23$sroa$0$0$$sroa_idx>>2] = 0;
 $_23$sroa$4$0$$sroa_idx = ((($cx)) + 16|0);
 $14 = (__Unwind_Backtrace((371|0),($cx|0))|0);
 $cond = ($14|0)==(0);
 $15 = HEAP32[$_23$sroa$0$0$$sroa_idx>>2]|0;
 $switch6 = ($15|0)==(1);
 $or$cond = $cond & $switch6;
 $16 = $_23$sroa$4$0$$sroa_idx;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $ret$sroa$0$0 = $or$cond&1;
 (_pthread_mutex_unlock(((23736)|0))|0);
 HEAP32[$0>>2] = $ret$sroa$0$0;
 $_38$sroa$4$0$$sroa_idx122 = ((($0)) + 4|0);
 $22 = $_38$sroa$4$0$$sroa_idx122;
 $23 = $22;
 HEAP32[$23>>2] = $18;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $21;
 $26 = HEAP32[$_23$sroa$0$0$$sroa_idx>>2]|0;
 $switch7$not = ($26|0)!=(1);
 $brmerge = $or$cond | $switch7$not;
 if (!($brmerge)) {
  $27 = HEAP8[$_23$sroa$4$0$$sroa_idx>>0]|0;
  $cond$i$i = ($27<<24>>24)==(2);
  if ($cond$i$i) {
   $28 = ((($cx)) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($29)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($29)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[$33>>2]|0;
   FUNCTION_TABLE_vi[$34 & 511]($31);
   $35 = ((($33)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0);
   if (!($37)) {
    $38 = ((($33)) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    ___rust_deallocate($31,$36,$39);
   }
   ___rust_deallocate($29,12,4);
  }
 }
 STACKTOP = sp;return;
}
function __ZN3std3sys3imp9backtrace7tracing3imp5write8trace_fn17hd022ef289dced322E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink2 = 0, $$sink3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $_0$0 = 0, $_0$1 = 0;
 var $_21$i = 0, $_26$i = 0, $_36 = 0, $_38 = 0, $_51 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $cond$i = 0, $cond$i$i$i = 0, $cond$i$i$i81 = 0, $cond$i80 = 0, $e$sroa$0$0$$sroa_idx = 0, $e1$sroa$0$0$$sroa_idx = 0, $info$i = 0, $ip$0 = 0, $ip$0$v = 0, $ip_before_insn = 0, $or$cond = 0, $switch$i = 0, $switch8 = 0, $switch9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $_26$i = sp + 80|0;
 $_21$i = sp + 72|0;
 $info$i = sp + 56|0;
 $_51 = sp + 40|0;
 $_38 = sp + 16|0;
 $_36 = sp;
 $ip_before_insn = sp + 88|0;
 HEAP32[$ip_before_insn>>2] = 0;
 $2 = (__Unwind_GetIPInfo(($0|0),($ip_before_insn|0))|0);
 $3 = ($2|0)!=(0);
 $4 = HEAP32[$ip_before_insn>>2]|0;
 $5 = ($4|0)==(0);
 $or$cond = $3 & $5;
 $6 = $or$cond << 31 >> 31;
 $ip$0$v = (($6) + ($2))|0;
 $ip$0 = $ip$0$v;
 (__Unwind_FindEnclosingFunction(($ip$0|0))|0);
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$1>>2] = $8;
 $9 = ($8|0)<(1);
 do {
  if ($9) {
   $_0$1 = 0;
  } else {
   $10 = ($8|0)>(100);
   if ($10) {
    $11 = ((($1)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($1)) + 8|0);
    $14 = HEAP32[$13>>2]|0;
    HEAP32[$_38>>2] = 4876;
    $15 = ((($_38)) + 4|0);
    HEAP32[$15>>2] = 1;
    $_6$sroa$0$0$$sroa_idx$i = ((($_38)) + 8|0);
    HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
    $16 = ((($_38)) + 16|0);
    HEAP32[$16>>2] = 23968;
    $17 = ((($_38)) + 20|0);
    HEAP32[$17>>2] = 0;
    $18 = ((($14)) + 24|0);
    $19 = HEAP32[$18>>2]|0;
    FUNCTION_TABLE_viii[$19 & 511]($_36,$12,$_38);
    $20 = HEAP32[$_36>>2]|0;
    $switch8 = ($20|0)==(1);
    if ($switch8) {
     $e$sroa$0$0$$sroa_idx = ((($_36)) + 4|0);
     $31 = $e$sroa$0$0$$sroa_idx;
     $32 = $31;
     $33 = HEAP32[$32>>2]|0;
     $34 = (($31) + 4)|0;
     $35 = $34;
     $36 = HEAP32[$35>>2]|0;
     $37 = ((($1)) + 12|0);
     $38 = HEAP32[$37>>2]|0;
     $cond$i = ($38|0)==(1);
     $39 = ((($1)) + 16|0);
     if ($cond$i) {
      $40 = HEAP8[$39>>0]|0;
      $cond$i$i$i = ($40<<24>>24)==(2);
      if ($cond$i$i$i) {
       $41 = ((($1)) + 20|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ((($42)) + 4|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = ((($42)) + 8|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = HEAP32[$46>>2]|0;
       __THREW__ = 0;
       invoke_vi($47|0,($44|0));
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        $$sink2 = $39;$$sink3 = $37;$27 = $33;$30 = $36;
        $23 = ___cxa_find_matching_catch_2()|0;
        $24 = tempRet0;
        HEAP32[$$sink3>>2] = 1;
        $25 = $$sink2;
        $26 = $25;
        HEAP32[$26>>2] = $27;
        $28 = (($25) + 4)|0;
        $29 = $28;
        HEAP32[$29>>2] = $30;
        ___resumeException($23|0);
        // unreachable;
       }
       $50 = ((($46)) + 4|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0);
       if (!($52)) {
        $53 = ((($46)) + 8|0);
        $54 = HEAP32[$53>>2]|0;
        ___rust_deallocate($44,$51,$54);
       }
       ___rust_deallocate($42,12,4);
      }
     }
     HEAP32[$37>>2] = 1;
     $55 = $39;
     $56 = $55;
     HEAP32[$56>>2] = $33;
     $57 = (($55) + 4)|0;
     $58 = $57;
     HEAP32[$58>>2] = $36;
    }
    $_0$1 = 9;
    break;
   }
   $21 = ((($1)) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $switch$i = ($22|0)==(1);
   if ($switch$i) {
    $_0$1 = 9;
   } else {
    $59 = ((($1)) + 4|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ((($1)) + 8|0);
    $62 = HEAP32[$61>>2]|0;
    ;HEAP32[$info$i>>2]=0|0;HEAP32[$info$i+4>>2]=0|0;HEAP32[$info$i+8>>2]=0|0;HEAP32[$info$i+12>>2]=0|0;
    $63 = (_dladdr(($ip$0|0),($info$i|0))|0);
    $64 = ($63|0)==(0);
    do {
     if ($64) {
      HEAP32[$_21$i>>2] = 0;
      __ZN3std10sys_common9backtrace6output17hf90fdc84987bca85E($_51,$60,$62,$8,$ip$0,$_21$i);
     } else {
      $65 = ((($info$i)) + 8|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = (_strlen($66)|0);
      $68 = ($67|0)==(-1);
      if ($68) {
       __ZN4core5slice20slice_index_len_fail17hc8606abb7e325facE(-1,0);
       // unreachable;
      } else {
       HEAP32[$_26$i>>2] = $66;
       $69 = ((($_26$i)) + 4|0);
       HEAP32[$69>>2] = $67;
       __ZN3std10sys_common9backtrace6output17hf90fdc84987bca85E($_51,$60,$62,$8,$ip$0,$_26$i);
       break;
      }
     }
    } while(0);
    $70 = HEAP32[$_51>>2]|0;
    $switch9 = ($70|0)==(1);
    if ($switch9) {
     $e1$sroa$0$0$$sroa_idx = ((($_51)) + 4|0);
     $71 = $e1$sroa$0$0$$sroa_idx;
     $72 = $71;
     $73 = HEAP32[$72>>2]|0;
     $74 = (($71) + 4)|0;
     $75 = $74;
     $76 = HEAP32[$75>>2]|0;
     $77 = HEAP32[$21>>2]|0;
     $cond$i80 = ($77|0)==(1);
     $78 = ((($1)) + 16|0);
     if ($cond$i80) {
      $79 = HEAP8[$78>>0]|0;
      $cond$i$i$i81 = ($79<<24>>24)==(2);
      if ($cond$i$i$i81) {
       $80 = ((($1)) + 20|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ((($81)) + 4|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = ((($81)) + 8|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = HEAP32[$85>>2]|0;
       __THREW__ = 0;
       invoke_vi($86|0,($83|0));
       $87 = __THREW__; __THREW__ = 0;
       $88 = $87&1;
       if ($88) {
        $$sink2 = $78;$$sink3 = $21;$27 = $73;$30 = $76;
        $23 = ___cxa_find_matching_catch_2()|0;
        $24 = tempRet0;
        HEAP32[$$sink3>>2] = 1;
        $25 = $$sink2;
        $26 = $25;
        HEAP32[$26>>2] = $27;
        $28 = (($25) + 4)|0;
        $29 = $28;
        HEAP32[$29>>2] = $30;
        ___resumeException($23|0);
        // unreachable;
       }
       $89 = ((($85)) + 4|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = ($90|0)==(0);
       if (!($91)) {
        $92 = ((($85)) + 8|0);
        $93 = HEAP32[$92>>2]|0;
        ___rust_deallocate($83,$90,$93);
       }
       ___rust_deallocate($81,12,4);
      }
     }
     HEAP32[$21>>2] = 1;
     $94 = $78;
     $95 = $94;
     HEAP32[$95>>2] = $73;
     $96 = (($94) + 4)|0;
     $97 = $96;
     HEAP32[$97>>2] = $76;
    }
    $_0$0 = 0;
    STACKTOP = sp;return ($_0$0|0);
   }
  }
 } while(0);
 $_0$0 = $_0$1;
 STACKTOP = sp;return ($_0$0|0);
}
function __ZN3std10sys_common9backtrace6output17hf90fdc84987bca85E($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$4799$i = 0, $$cast$i$i$i$i = 0, $$lcssa1257 = 0, $$off$i$i = 0, $$off$i863$i = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert4292$i = 0, $$phi$trans$insert4294$i = 0, $$phi$trans$insert4296$i = 0, $$phi$trans$insert4298$i = 0, $$phi$trans$insert4300$i = 0, $$phi$trans$insert4302$i = 0, $$phi$trans$insert4304$i = 0, $$phi$trans$insert4306$i = 0, $$phi$trans$insert4308$i = 0, $$phi$trans$insert4310$i = 0, $$phi$trans$insert4312$i = 0, $$phi$trans$insert4314$i = 0, $$phi$trans$insert4316$i = 0, $$phi$trans$insert4318$i = 0;
 var $$phi$trans$insert4320$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i1088$i = 0, $$pre$i1121$i = 0, $$pre$i1164$i = 0, $$pre$i1199$i = 0, $$pre$i1250$i = 0, $$pre$i1291$i = 0, $$pre$i1333$i = 0, $$pre$i1367$i = 0, $$pre$i1408$i = 0, $$pre$i1450$i = 0, $$pre$i1484$i = 0, $$pre$i1525$i = 0, $$pre$i1567$i = 0, $$pre$i1601$i = 0, $$pre$i1650$i = 0, $$pre$i1700$i = 0;
 var $$pre$i1830$i = 0, $$pre$i1908$i = 0, $$pre$i1986$i = 0, $$pre$i932$ptr$i = 0, $$pre$i932$ptr$i$sink = 0, $$pre$phi$i$i$i$i$iZ2D = 0, $$pre$phi$i$i$i$i737$iZ2D = 0, $$pre$phi$i1255$iZ2D = 0, $$pre$phi$i1296$iZ2D = 0, $$pre$phi$i1338$iZ2D = 0, $$pre$phi$i1372$iZ2D = 0, $$pre$phi$i1413$iZ2D = 0, $$pre$phi$i1455$iZ2D = 0, $$pre$phi$i1489$iZ2D = 0, $$pre$phi$i1530$iZ2D = 0, $$pre$phi$i1572$iZ2D = 0, $$pre$phi$i1606$iZ2D = 0, $$pre$phi$i1655$iZ2D = 0, $$pre$phi$i1705$iZ2D = 0, $$pre$phi$i2908$iZ2D = 0;
 var $$pre4293$i = 0, $$pre4295$i = 0, $$pre4297$i = 0, $$pre4299$i = 0, $$pre4301$i = 0, $$pre4303$i = 0, $$pre4305$i = 0, $$pre4307$i = 0, $$pre4309$i = 0, $$pre4311$i = 0, $$pre4313$i = 0, $$pre4315$i = 0, $$pre4317$i = 0, $$pre4319$i = 0, $$pre4321$i = 0, $$ptr$i = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$i15$i$i$i$i = 0, $_0$0$i15$i$i$i$i$i$i = 0, $_0$0$i15$i$i850$i = 0, $_0$0$i15$i$i954$i = 0, $_0$0$i22$i$i$i$i = 0, $_0$0$i22$i$i$i$i$i$i = 0, $_0$0$i22$i$i845$i = 0, $_0$0$i22$i$i949$i = 0, $_0$0$i9$i$i$i$i = 0, $_0$0$i9$i$i$i$i$i$i = 0, $_0$0$i9$i$i855$i = 0, $_0$0$i9$i$i959$i = 0, $_107$i = 0, $_11 = 0, $_122$sroa$4$2$ph$i = 0, $_13 = 0;
 var $_131$i = 0, $_163$sroa$5$2$ph$i = 0, $_172$i = 0, $_18 = 0, $_188$i = 0, $_208$i = 0, $_229$i = 0, $_250$i = 0, $_271$i = 0, $_292$i = 0, $_3$sroa$0$0$$sroa_idx$i = 0, $_3$sroa$0$0$$sroa_idx$i116 = 0, $_3$sroa$0$0$$sroa_idx$i125 = 0, $_313$i = 0, $_334$i = 0, $_355$i = 0, $_376$i = 0, $_397$i = 0, $_4$i$i = 0, $_418$i = 0;
 var $_439$i = 0, $_46$sroa$29$0$ph$off0 = 0, $_46$sroa$29$0$ph$off32 = 0, $_460$i = 0, $_481$i = 0, $_502$i = 0, $_523$i = 0, $_54$sroa$5$2$ph$i = 0, $_544$i = 0, $_56 = 0, $_565$i = 0, $_58 = 0, $_584$i = 0, $_597$sroa$0$0$i = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_605$i = 0, $_8$sroa$0$0$$sroa_idx$i = 0, $_8$sroa$4$0$$sroa_idx2$i = 0, $_88$i = 0, $accum$0$lcssa$i$i$i = 0;
 var $accum$010$i$i$i = 0, $addr = 0, $cond$i100 = 0, $first$0$off03734$i = 0, $i$0$lcssa$i = 0, $i$03737$i = 0, $idx = 0, $idx$0$i = 0, $inner$sroa$0$0$i = 0, $inner$sroa$0$13736$i = 0, $inner$sroa$12$0$i = 0, $inner$sroa$12$0$in$i = 0, $inner$sroa$12$13735$i = 0, $iter$sroa$4$09$i$i$i = 0, $not$$i$i$i$i1031$i = 0, $not$$i$i$i$i1233$i = 0, $not$$i$i$i$i1274$i = 0, $not$$i$i$i$i1308$i = 0, $not$$i$i$i$i1350$i = 0, $not$$i$i$i$i1391$i = 0;
 var $not$$i$i$i$i1425$i = 0, $not$$i$i$i$i1467$i = 0, $not$$i$i$i$i1508$i = 0, $not$$i$i$i$i1542$i = 0, $not$$i$i$i$i1584$i = 0, $not$$i$i$i$i898$i = 0, $not$$i$i1252$i = 0, $not$$i$i1293$i = 0, $not$$i$i1335$i = 0, $not$$i$i1369$i = 0, $not$$i$i1410$i = 0, $not$$i$i1452$i = 0, $not$$i$i1486$i = 0, $not$$i$i1527$i = 0, $not$$i$i1569$i = 0, $not$$i$i1603$i = 0, $not$$i$i1652$i = 0, $not$$i$i1669$i = 0, $not$$i$i1702$i = 0, $not$$i$i876$i = 0;
 var $not$$i$i886$i = 0, $or$cond = 0, $or$cond$i$i1668$i = 0, $or$cond$i$i797$i = 0, $or$cond$i$i875$i = 0, $or$cond$i$i885$i = 0, $or$cond14$i$i$i = 0, $phitmp$i$i$i$i = 0, $phitmp$i$i$i$i$i$i = 0, $phitmp$i$i843$i = 0, $phitmp$i$i947$i = 0, $phitmp31$i$i$i$i = 0, $phitmp31$i$i$i$i$i$i = 0, $phitmp31$i$i848$i = 0, $phitmp31$i$i952$i = 0, $phitmp32$i$i$i$i = 0, $phitmp32$i$i$i$i$i$i = 0, $phitmp32$i$i853$i = 0, $phitmp32$i$i957$i = 0, $rest$sroa$0$03648$i = 0;
 var $rest$sroa$0$1$be$i = 0, $rest$sroa$0$13694$i = 0, $rest$sroa$82$03647$i = 0, $rest$sroa$82$03647$lcssa3746$i = 0, $rest$sroa$82$1$be$i = 0, $rest$sroa$82$13657$i = 0, $rhsc$i$i$i$i = 0, $rhsc$i$i$i739$i = 0, $rhsc3064$i = 0, $self$i$sroa$0$0$copyload = 0, $self$i$sroa$0$0$copyload$i = 0, $self$i$sroa$4$0$$sroa_idx274 = 0, $self$i$sroa$4$0$$sroa_idx2770$i = 0, $self$i$sroa$4$0$copyload = 0, $self$i$sroa$4$0$copyload$i = 0, $self$i$sroa$5$0$$sroa_idx276 = 0, $self$i$sroa$5$0$$sroa_idx2772$i = 0, $self$i$sroa$5$0$copyload = 0, $self$i$sroa$5$0$copyload$i = 0, $self$i1055$sroa$0$0$copyload$i = 0;
 var $self$i1055$sroa$4$0$$sroa_idx2790$i = 0, $self$i1055$sroa$4$0$copyload$i = 0, $self$i1055$sroa$5$0$$sroa_idx2792$i = 0, $self$i1055$sroa$5$0$copyload$i = 0, $self$i1097$sroa$0$0$copyload$i = 0, $self$i1097$sroa$4$0$$sroa_idx2795$i = 0, $self$i1097$sroa$4$0$copyload$i = 0, $self$i1097$sroa$5$0$$sroa_idx2797$i = 0, $self$i1097$sroa$5$0$copyload$i = 0, $self$i1130$sroa$0$0$copyload$i = 0, $self$i1130$sroa$4$0$$sroa_idx2800$i = 0, $self$i1130$sroa$4$0$copyload$i = 0, $self$i1130$sroa$5$0$$sroa_idx2802$i = 0, $self$i1130$sroa$5$0$copyload$i = 0, $self$i1155$sroa$0$0$copyload$i = 0, $self$i1155$sroa$4$0$$sroa_idx2805$i = 0, $self$i1155$sroa$4$0$copyload$i = 0, $self$i1155$sroa$5$0$$sroa_idx2807$i = 0, $self$i1155$sroa$5$0$copyload$i = 0, $self$i1173$sroa$0$0$copyload$i = 0;
 var $self$i1173$sroa$4$0$$sroa_idx2810$i = 0, $self$i1173$sroa$4$0$copyload$i = 0, $self$i1173$sroa$5$0$$sroa_idx2812$i = 0, $self$i1173$sroa$5$0$copyload$i = 0, $self$i1190$sroa$0$0$copyload$i = 0, $self$i1190$sroa$4$0$$sroa_idx2815$i = 0, $self$i1190$sroa$4$0$copyload$i = 0, $self$i1190$sroa$5$0$$sroa_idx2817$i = 0, $self$i1190$sroa$5$0$copyload$i = 0, $self$i1208$sroa$0$0$copyload$i = 0, $self$i1208$sroa$4$0$$sroa_idx2820$i = 0, $self$i1208$sroa$4$0$copyload$i = 0, $self$i1208$sroa$5$0$$sroa_idx2822$i = 0, $self$i1208$sroa$5$0$copyload$i = 0, $self$i1225$sroa$0$0$copyload$i = 0, $self$i1225$sroa$4$0$$sroa_idx2825$i = 0, $self$i1225$sroa$4$0$copyload$i = 0, $self$i1225$sroa$5$0$$sroa_idx2827$i = 0, $self$i1225$sroa$5$0$copyload$i = 0, $self$i1259$sroa$0$0$copyload$i = 0;
 var $self$i1259$sroa$4$0$$sroa_idx2830$i = 0, $self$i1259$sroa$4$0$copyload$i = 0, $self$i1259$sroa$5$0$$sroa_idx2832$i = 0, $self$i1259$sroa$5$0$copyload$i = 0, $self$i1300$sroa$0$0$copyload$i = 0, $self$i1300$sroa$4$0$$sroa_idx2835$i = 0, $self$i1300$sroa$4$0$copyload$i = 0, $self$i1300$sroa$5$0$$sroa_idx2837$i = 0, $self$i1300$sroa$5$0$copyload$i = 0, $self$i1342$sroa$0$0$copyload$i = 0, $self$i1342$sroa$4$0$$sroa_idx2840$i = 0, $self$i1342$sroa$4$0$copyload$i = 0, $self$i1342$sroa$5$0$$sroa_idx2842$i = 0, $self$i1342$sroa$5$0$copyload$i = 0, $self$i1376$sroa$0$0$copyload$i = 0, $self$i1376$sroa$4$0$$sroa_idx2845$i = 0, $self$i1376$sroa$4$0$copyload$i = 0, $self$i1376$sroa$5$0$$sroa_idx2847$i = 0, $self$i1376$sroa$5$0$copyload$i = 0, $self$i1417$sroa$0$0$copyload$i = 0;
 var $self$i1417$sroa$4$0$$sroa_idx2850$i = 0, $self$i1417$sroa$4$0$copyload$i = 0, $self$i1417$sroa$5$0$$sroa_idx2852$i = 0, $self$i1417$sroa$5$0$copyload$i = 0, $self$i1459$sroa$0$0$copyload$i = 0, $self$i1459$sroa$4$0$$sroa_idx2855$i = 0, $self$i1459$sroa$4$0$copyload$i = 0, $self$i1459$sroa$5$0$$sroa_idx2857$i = 0, $self$i1459$sroa$5$0$copyload$i = 0, $self$i1493$sroa$0$0$copyload$i = 0, $self$i1493$sroa$4$0$$sroa_idx2860$i = 0, $self$i1493$sroa$4$0$copyload$i = 0, $self$i1493$sroa$5$0$$sroa_idx2862$i = 0, $self$i1493$sroa$5$0$copyload$i = 0, $self$i1534$sroa$0$0$copyload$i = 0, $self$i1534$sroa$4$0$$sroa_idx2865$i = 0, $self$i1534$sroa$4$0$copyload$i = 0, $self$i1534$sroa$5$0$$sroa_idx2867$i = 0, $self$i1534$sroa$5$0$copyload$i = 0, $self$i1576$sroa$0$0$copyload$i = 0;
 var $self$i1576$sroa$4$0$$sroa_idx2870$i = 0, $self$i1576$sroa$4$0$copyload$i = 0, $self$i1576$sroa$5$0$$sroa_idx2872$i = 0, $self$i1576$sroa$5$0$copyload$i = 0, $self$i1610$sroa$0$0$copyload$i = 0, $self$i1610$sroa$4$0$$sroa_idx2875$i = 0, $self$i1610$sroa$4$0$copyload$i = 0, $self$i1610$sroa$5$0$$sroa_idx2877$i = 0, $self$i1610$sroa$5$0$copyload$i = 0, $self$i1625$sroa$0$0$copyload$i = 0, $self$i1625$sroa$4$0$$sroa_idx2880$i = 0, $self$i1625$sroa$4$0$copyload$i = 0, $self$i1625$sroa$5$0$$sroa_idx2882$i = 0, $self$i1625$sroa$5$0$copyload$i = 0, $self$i1675$sroa$0$0$copyload$i = 0, $self$i1675$sroa$4$0$$sroa_idx2885$i = 0, $self$i1675$sroa$4$0$copyload$i = 0, $self$i1675$sroa$5$0$$sroa_idx2887$i = 0, $self$i1675$sroa$5$0$copyload$i = 0, $self$i813$sroa$0$0$copyload$i = 0;
 var $self$i813$sroa$4$0$$sroa_idx2775$i = 0, $self$i813$sroa$4$0$copyload$i = 0, $self$i813$sroa$5$0$$sroa_idx2777$i = 0, $self$i813$sroa$5$0$copyload$i = 0, $self$i92$sroa$0$0$copyload = 0, $self$i92$sroa$4$0$$sroa_idx279 = 0, $self$i92$sroa$4$0$copyload = 0, $self$i92$sroa$5$0$$sroa_idx281 = 0, $self$i92$sroa$5$0$copyload = 0, $self$i981$sroa$0$0$copyload$i = 0, $self$i981$sroa$4$0$$sroa_idx2780$i = 0, $self$i981$sroa$4$0$copyload$i = 0, $self$i981$sroa$5$0$$sroa_idx2782$i = 0, $self$i981$sroa$5$0$copyload$i = 0, $self$i988$sroa$0$0$copyload$i = 0, $self$i988$sroa$4$0$$sroa_idx2785$i = 0, $self$i988$sroa$4$0$copyload$i = 0, $self$i988$sroa$5$0$$sroa_idx2787$i = 0, $self$i988$sroa$5$0$copyload$i = 0, $self$sroa$0$0$copyload$i$i$i = 0;
 var $self$sroa$0$0$copyload$i881$i = 0, $self$sroa$5$0$copyload8$i$i$i = 0, $self$sroa$6$0$$sroa_idx6$i$i$i = 0, $self$sroa$6$0$copyload$i$i$i = 0, $self$sroa$77$0$$sroa_idx8$i$i = 0, $self$sroa$77$0$copyload$i$i = 0, $switch1$i$i$i = 0, $switch16tmp = 0, $switch2$i882$i = 0, $switch2tmp$i = 0, $switch3$i = 0, $switch3$i$i = 0, $switch3$i1056$i = 0, $switch3$i1098$i = 0, $switch3$i1131$i = 0, $switch3$i1156$i = 0, $switch3$i1174$i = 0, $switch3$i1191$i = 0, $switch3$i1209$i = 0, $switch3$i1226$i = 0;
 var $switch3$i1260$i = 0, $switch3$i1301$i = 0, $switch3$i1343$i = 0, $switch3$i1377$i = 0, $switch3$i1418$i = 0, $switch3$i1460$i = 0, $switch3$i1494$i = 0, $switch3$i1535$i = 0, $switch3$i1577$i = 0, $switch3$i1611$i = 0, $switch3$i1626$i = 0, $switch3$i1676$i = 0, $switch3$i814$i = 0, $switch3$i93 = 0, $switch3$i982$i = 0, $switch3$i989$i = 0, $tmp_ret4 = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $_605$i = sp + 504|0;
 $_584$i = sp + 488|0;
 $_565$i = sp + 472|0;
 $_544$i = sp + 456|0;
 $_523$i = sp + 440|0;
 $_502$i = sp + 424|0;
 $_481$i = sp + 408|0;
 $_460$i = sp + 392|0;
 $_439$i = sp + 376|0;
 $_418$i = sp + 360|0;
 $_397$i = sp + 344|0;
 $_376$i = sp + 328|0;
 $_355$i = sp + 312|0;
 $_334$i = sp + 296|0;
 $_313$i = sp + 280|0;
 $_292$i = sp + 264|0;
 $_271$i = sp + 248|0;
 $_250$i = sp + 232|0;
 $_229$i = sp + 216|0;
 $_208$i = sp + 200|0;
 $_188$i = sp + 184|0;
 $_172$i = sp + 168|0;
 $_131$i = sp + 160|0;
 $_107$i = sp + 144|0;
 $_88$i = sp + 128|0;
 $_4$i$i = sp + 112|0;
 $tmp_ret4 = sp + 104|0;
 $_58 = sp + 80|0;
 $_56 = sp + 64|0;
 $_18 = sp + 40|0;
 $_13 = sp + 16|0;
 $_11 = sp;
 $addr = sp + 520|0;
 $idx = sp + 516|0;
 HEAP32[$idx>>2] = $3;
 HEAP32[$addr>>2] = $4;
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $idx;
 $13 = $addr;
 __ZN4core3fmt10ArgumentV110from_usize17h47fa924ebb3f45a0E($tmp_ret4,4884);
 $14 = ((($tmp_ret4)) + 4|0);
 $15 = HEAP32[$tmp_ret4>>2]|0;
 $16 = HEAP32[$14>>2]|0;
 HEAP32[$_18>>2] = $12;
 $17 = ((($_18)) + 4|0);
 HEAP32[$17>>2] = (372);
 $18 = ((($_18)) + 8|0);
 HEAP32[$18>>2] = $13;
 $19 = ((($_18)) + 12|0);
 HEAP32[$19>>2] = (373);
 $20 = ((($_18)) + 16|0);
 HEAP32[$20>>2] = $15;
 $21 = ((($_18)) + 20|0);
 HEAP32[$21>>2] = $16;
 HEAP32[$_13>>2] = 4888;
 $22 = ((($_13)) + 4|0);
 HEAP32[$22>>2] = 3;
 $_8$sroa$0$0$$sroa_idx$i = ((($_13)) + 8|0);
 HEAP32[$_8$sroa$0$0$$sroa_idx$i>>2] = 4912;
 $_8$sroa$4$0$$sroa_idx2$i = ((($_13)) + 12|0);
 HEAP32[$_8$sroa$4$0$$sroa_idx2$i>>2] = 2;
 $23 = ((($_13)) + 16|0);
 HEAP32[$23>>2] = $_18;
 $24 = ((($_13)) + 20|0);
 HEAP32[$24>>2] = 3;
 $25 = ((($2)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_viii[$26 & 511]($_11,$1,$_13);
 $self$i$sroa$0$0$copyload = HEAP32[$_11>>2]|0;
 $switch3$i = ($self$i$sroa$0$0$copyload|0)==(1);
 L1: do {
  if ($switch3$i) {
   $self$i$sroa$4$0$$sroa_idx274 = ((($_11)) + 4|0);
   $self$i$sroa$4$0$copyload = HEAP32[$self$i$sroa$4$0$$sroa_idx274>>2]|0;
   $self$i$sroa$5$0$$sroa_idx276 = ((($_11)) + 8|0);
   $self$i$sroa$5$0$copyload = HEAP32[$self$i$sroa$5$0$$sroa_idx276>>2]|0;
   HEAP32[$0>>2] = 1;
   $_3$sroa$0$0$$sroa_idx$i = ((($0)) + 4|0);
   $27 = $_3$sroa$0$0$$sroa_idx$i;
   $28 = $27;
   HEAP32[$28>>2] = $self$i$sroa$4$0$copyload;
   $29 = (($27) + 4)|0;
   $30 = $29;
   HEAP32[$30>>2] = $self$i$sroa$5$0$copyload;
  } else {
   $switch2tmp$i = ($8|0)==(0);
   L4: do {
    if ($switch2tmp$i) {
     label = 8;
    } else {
     $31 = $8;
     __ZN4core3str9from_utf817ha9337cb316bd8650E($_4$i$i,$31,$11);
     $self$sroa$0$0$copyload$i$i$i = HEAP32[$_4$i$i>>2]|0;
     $switch1$i$i$i = ($self$sroa$0$0$copyload$i$i$i|0)==(0);
     $self$sroa$6$0$$sroa_idx6$i$i$i = ((($_4$i$i)) + 8|0);
     $self$sroa$6$0$copyload$i$i$i = HEAP32[$self$sroa$6$0$$sroa_idx6$i$i$i>>2]|0;
     $32 = ((($_4$i$i)) + 4|0);
     $self$sroa$5$0$copyload8$i$i$i = HEAP32[$32>>2]|0;
     if ($switch1$i$i$i) {
      $33 = $self$sroa$5$0$copyload8$i$i$i;
      $switch16tmp = ($self$sroa$5$0$copyload8$i$i$i|0)==(0);
      if ($switch16tmp) {
       label = 8;
      } else {
       $38 = ($self$sroa$6$0$copyload$i$i$i>>>0)>(4);
       do {
        if ($38) {
         $46 = ((($33)) + 3|0);
         $47 = HEAP8[$46>>0]|0;
         $48 = ($47<<24>>24)>(-65);
         if ($48) {
          $49 = ($33|0)==(15862|0);
          if (!($49)) {
           $50 = (_memcmp(15862,$33,3)|0);
           $51 = ($50|0)==(0);
           if (!($51)) {
            label = 25;
            break;
           }
          }
          $41 = (($self$sroa$6$0$copyload$i$i$i) + -1)|0;
          $42 = ($41|0)==(0);
          if ($42) {
           $$pre$phi$i$i$i$i$iZ2D = $33;
          } else {
           $43 = (($33) + ($41)|0);
           $44 = HEAP8[$43>>0]|0;
           $45 = ($44<<24>>24)>(-65);
           if ($45) {
            $$pre$phi$i$i$i$i$iZ2D = $43;
           } else {
            label = 25;
            break;
           }
          }
          $39 = ($$pre$phi$i$i$i$i$iZ2D|0)==(15861|0);
          if (!($39)) {
           $rhsc$i$i$i$i = HEAP8[$$pre$phi$i$i$i$i$iZ2D>>0]|0;
           $40 = ($rhsc$i$i$i$i<<24>>24)==(69);
           if (!($40)) {
            label = 25;
            break;
           }
          }
          $52 = ($41>>>0)<(3);
          if ($52) {
           __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($33,$self$sroa$6$0$copyload$i$i$i,3,$41);
           // unreachable;
          }
          $53 = (($33) + ($41)|0);
          $54 = HEAP8[$53>>0]|0;
          $55 = ($54<<24>>24)>(-65);
          if ($55) {
           $inner$sroa$0$0$i = $46;$inner$sroa$12$0$in$i = $41;
           label = 30;
          } else {
           __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($33,$self$sroa$6$0$copyload$i$i$i,3,$41);
           // unreachable;
          }
         } else {
          label = 25;
         }
        } else {
         $56 = ($self$sroa$6$0$copyload$i$i$i|0)==(4);
         if ($56) {
          label = 25;
         } else {
          label = 59;
         }
        }
       } while(0);
       do {
        if ((label|0) == 25) {
         $64 = ((($33)) + 2|0);
         $65 = HEAP8[$64>>0]|0;
         $66 = ($65<<24>>24)>(-65);
         if ($66) {
          $67 = ($33|0)==(15865|0);
          if (!($67)) {
           $68 = (_memcmp(15865,$33,2)|0);
           $69 = ($68|0)==(0);
           if (!($69)) {
            label = 59;
            break;
           }
          }
          $59 = (($self$sroa$6$0$copyload$i$i$i) + -1)|0;
          $60 = ($59|0)==(0);
          if ($60) {
           $$pre$phi$i$i$i$i737$iZ2D = $33;
          } else {
           $61 = (($33) + ($59)|0);
           $62 = HEAP8[$61>>0]|0;
           $63 = ($62<<24>>24)>(-65);
           if ($63) {
            $$pre$phi$i$i$i$i737$iZ2D = $61;
           } else {
            label = 59;
            break;
           }
          }
          $57 = ($$pre$phi$i$i$i$i737$iZ2D|0)==(15861|0);
          if (!($57)) {
           $rhsc$i$i$i739$i = HEAP8[$$pre$phi$i$i$i$i737$iZ2D>>0]|0;
           $58 = ($rhsc$i$i$i739$i<<24>>24)==(69);
           if (!($58)) {
            label = 59;
            break;
           }
          }
          $70 = (($33) + ($59)|0);
          $71 = HEAP8[$70>>0]|0;
          $72 = ($71<<24>>24)>(-65);
          if ($72) {
           $inner$sroa$0$0$i = $64;$inner$sroa$12$0$in$i = $self$sroa$6$0$copyload$i$i$i;
           label = 30;
          } else {
           __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($33,$self$sroa$6$0$copyload$i$i$i,2,$59);
           // unreachable;
          }
         } else {
          label = 59;
         }
        }
       } while(0);
       L38: do {
        if ((label|0) == 30) {
         $inner$sroa$12$0$i = (($inner$sroa$12$0$in$i) + -3)|0;
         $73 = (($inner$sroa$0$0$i) + ($inner$sroa$12$0$i)|0);
         $75 = $inner$sroa$0$0$i;
         while(1) {
          $74 = ($75|0)==($73|0);
          if ($74) {
           $120 = $75;
           break;
          } else {
           $79 = $75;$i$03737$i = 0;
          }
          while(1) {
           $78 = ((($79)) + 1|0);
           $77 = HEAP8[$79>>0]|0;
           $80 = ($77<<24>>24)>(-1);
           if ($80) {
            $76 = $77&255;
            $117 = $78;$_54$sroa$5$2$ph$i = $76;
           } else {
            $81 = $77 & 31;
            $82 = $81&255;
            $83 = ($78|0)==($73|0);
            if ($83) {
             $91 = $73;$_0$0$i22$i$i$i$i = 0;
            } else {
             $84 = ((($79)) + 2|0);
             $85 = HEAP8[$78>>0]|0;
             $phitmp$i$i$i$i = $85 & 63;
             $91 = $84;$_0$0$i22$i$i$i$i = $phitmp$i$i$i$i;
            }
            $86 = $82 << 6;
            $87 = $_0$0$i22$i$i$i$i&255;
            $88 = $87 | $86;
            $89 = ($77&255)>(223);
            if ($89) {
             $90 = ($91|0)==($73|0);
             if ($90) {
              $101 = $73;$_0$0$i15$i$i$i$i = 0;
             } else {
              $92 = ((($91)) + 1|0);
              $93 = HEAP8[$91>>0]|0;
              $phitmp31$i$i$i$i = $93 & 63;
              $101 = $92;$_0$0$i15$i$i$i$i = $phitmp31$i$i$i$i;
             }
             $94 = $87 << 6;
             $95 = $_0$0$i15$i$i$i$i&255;
             $96 = $95 | $94;
             $97 = $82 << 12;
             $98 = $96 | $97;
             $99 = ($77&255)>(239);
             if ($99) {
              $100 = ($101|0)==($73|0);
              if ($100) {
               $495 = $101;$_0$0$i9$i$i$i$i = 0;
              } else {
               $102 = ((($101)) + 1|0);
               $103 = HEAP8[$101>>0]|0;
               $phitmp32$i$i$i$i = $103 & 63;
               $495 = $102;$_0$0$i9$i$i$i$i = $phitmp32$i$i$i$i;
              }
              $104 = $82 << 18;
              $105 = $104 & 1835008;
              $106 = $96 << 6;
              $107 = $_0$0$i9$i$i$i$i&255;
              $108 = $106 | $105;
              $109 = $108 | $107;
              $117 = $495;$_54$sroa$5$2$ph$i = $109;
             } else {
              $117 = $101;$_54$sroa$5$2$ph$i = $98;
             }
            } else {
             $117 = $91;$_54$sroa$5$2$ph$i = $88;
            }
           }
           $$off$i$i = (($_54$sroa$5$2$ph$i) + -48)|0;
           $110 = ($$off$i$i>>>0)<(10);
           if (!($110)) {
            $111 = ($_54$sroa$5$2$ph$i>>>0)>(127);
            if (!($111)) {
             $$lcssa1257 = $117;$i$0$lcssa$i = $i$03737$i;
             break;
            }
            $112 = (__ZN11std_unicode6tables16general_category1N17h3a678ba0a4bfab74E($_54$sroa$5$2$ph$i)|0);
            if (!($112)) {
             $$lcssa1257 = $117;$i$0$lcssa$i = $i$03737$i;
             break;
            }
           }
           $113 = ($i$03737$i*10)|0;
           $114 = (($113) + -48)|0;
           $115 = (($114) + ($_54$sroa$5$2$ph$i))|0;
           $116 = ($117|0)==($73|0);
           if ($116) {
            $$lcssa1257 = $73;$i$0$lcssa$i = $115;
            break;
           } else {
            $79 = $117;$i$03737$i = $115;
           }
          }
          $118 = ($i$0$lcssa$i|0)==(0);
          if ($118) {
           $120 = $$lcssa1257;
           break;
          }
          $121 = (($i$0$lcssa$i) + -1)|0;
          $122 = ($121|0)==(0);
          L65: do {
           if ($122) {
            $496 = $$lcssa1257;$accum$0$lcssa$i$i$i = 0;
           } else {
            $125 = $$lcssa1257;$accum$010$i$i$i = 0;$iter$sroa$4$09$i$i$i = $121;
            while(1) {
             $123 = (($iter$sroa$4$09$i$i$i) + -1)|0;
             $124 = ($125|0)==($73|0);
             if ($124) {
              $496 = $73;$accum$0$lcssa$i$i$i = $accum$010$i$i$i;
              break L65;
             }
             $126 = ((($125)) + 1|0);
             $127 = HEAP8[$125>>0]|0;
             $128 = ($127<<24>>24)>(-1);
             if ($128) {
              $497 = $126;
             } else {
              $129 = ($126|0)==($73|0);
              if ($129) {
               $497 = $73;
              } else {
               $130 = ((($125)) + 2|0);
               $131 = ($127&255)<(224);
               $132 = ($130|0)==($73|0);
               $or$cond14$i$i$i = $132 | $131;
               if ($or$cond14$i$i$i) {
                $497 = $130;
               } else {
                $133 = ((($125)) + 3|0);
                $134 = ($127&255)<(240);
                $135 = ($133|0)==($73|0);
                $or$cond$i$i797$i = $135 | $134;
                $136 = ((($125)) + 4|0);
                $$4799$i = $or$cond$i$i797$i ? $133 : $136;
                $497 = $$4799$i;
               }
              }
             }
             $137 = (($accum$010$i$i$i) + 1)|0;
             $138 = ($123|0)==(0);
             if ($138) {
              $496 = $497;$accum$0$lcssa$i$i$i = $137;
              break;
             } else {
              $125 = $497;$accum$010$i$i$i = $137;$iter$sroa$4$09$i$i$i = $123;
             }
            }
           }
          } while(0);
          $139 = ($accum$0$lcssa$i$i$i|0)==($121|0);
          if ($139) {
           $75 = $496;
          } else {
           label = 59;
           break L38;
          }
         }
         $119 = ($120|0)==($73|0);
         if ($119) {
          $140 = ($inner$sroa$12$0$i|0)==(0);
          if ($140) {
           break L4;
          }
          $141 = ((($2)) + 20|0);
          $self$sroa$77$0$$sroa_idx8$i$i = ((($_131$i)) + 4|0);
          $first$0$off03734$i = 1;$inner$sroa$0$13736$i = $inner$sroa$0$0$i;$inner$sroa$12$13735$i = $inner$sroa$12$0$i;
          L78: while(1) {
           if (!($first$0$off03734$i)) {
            $144 = HEAP32[$141>>2]|0;
            FUNCTION_TABLE_viiii[$144 & 511]($_107$i,$1,15867,2);
            $self$i813$sroa$0$0$copyload$i = HEAP32[$_107$i>>2]|0;
            $switch3$i814$i = ($self$i813$sroa$0$0$copyload$i|0)==(1);
            if ($switch3$i814$i) {
             label = 64;
             break;
            }
           }
           $145 = (($inner$sroa$0$13736$i) + ($inner$sroa$12$13735$i)|0);
           $$pre = HEAP8[$inner$sroa$0$13736$i>>0]|0;
           $147 = $$pre;$161 = $145;$rest$sroa$0$03648$i = $inner$sroa$0$13736$i;$rest$sroa$82$03647$i = $inner$sroa$12$13735$i;
           while(1) {
            $148 = ((($rest$sroa$0$03648$i)) + 1|0);
            $149 = ($147<<24>>24)>(-1);
            if ($149) {
             $146 = $147&255;
             $_122$sroa$4$2$ph$i = $146;
            } else {
             $150 = $147 & 31;
             $151 = $150&255;
             $152 = ($rest$sroa$82$03647$i|0)==(1);
             if ($152) {
              $160 = $161;$_0$0$i22$i$i845$i = 0;
             } else {
              $153 = ((($rest$sroa$0$03648$i)) + 2|0);
              $154 = HEAP8[$148>>0]|0;
              $phitmp$i$i843$i = $154 & 63;
              $160 = $153;$_0$0$i22$i$i845$i = $phitmp$i$i843$i;
             }
             $155 = $151 << 6;
             $156 = $_0$0$i22$i$i845$i&255;
             $157 = $156 | $155;
             $158 = ($147&255)>(223);
             if ($158) {
              $159 = ($160|0)==($161|0);
              if ($159) {
               $171 = $161;$_0$0$i15$i$i850$i = 0;
              } else {
               $162 = ((($160)) + 1|0);
               $163 = HEAP8[$160>>0]|0;
               $phitmp31$i$i848$i = $163 & 63;
               $171 = $162;$_0$0$i15$i$i850$i = $phitmp31$i$i848$i;
              }
              $164 = $156 << 6;
              $165 = $_0$0$i15$i$i850$i&255;
              $166 = $165 | $164;
              $167 = $151 << 12;
              $168 = $166 | $167;
              $169 = ($147&255)>(239);
              if ($169) {
               $170 = ($171|0)==($161|0);
               if ($170) {
                $_0$0$i9$i$i855$i = 0;
               } else {
                $172 = HEAP8[$171>>0]|0;
                $phitmp32$i$i853$i = $172 & 63;
                $_0$0$i9$i$i855$i = $phitmp32$i$i853$i;
               }
               $173 = $151 << 18;
               $174 = $173 & 1835008;
               $175 = $166 << 6;
               $176 = $_0$0$i9$i$i855$i&255;
               $177 = $175 | $174;
               $178 = $177 | $176;
               $_122$sroa$4$2$ph$i = $178;
              } else {
               $_122$sroa$4$2$ph$i = $168;
              }
             } else {
              $_122$sroa$4$2$ph$i = $157;
             }
            }
            $$off$i863$i = (($_122$sroa$4$2$ph$i) + -48)|0;
            $179 = ($$off$i863$i>>>0)<(10);
            if (!($179)) {
             $180 = ($_122$sroa$4$2$ph$i>>>0)>(127);
             if (!($180)) {
              break;
             }
             $181 = (__ZN11std_unicode6tables16general_category1N17h3a678ba0a4bfab74E($_122$sroa$4$2$ph$i)|0);
             if (!($181)) {
              break;
             }
            }
            switch ($rest$sroa$82$03647$i|0) {
            case 1:  {
             label = 78;
             break L78;
             break;
            }
            case 0:  {
             $rest$sroa$82$03647$lcssa3746$i = 0;
             label = 100;
             break L78;
             break;
            }
            default: {
            }
            }
            $204 = HEAP8[$148>>0]|0;
            $205 = ($204<<24>>24)>(-65);
            if (!($205)) {
             $rest$sroa$82$03647$lcssa3746$i = $rest$sroa$82$03647$i;
             label = 100;
             break L78;
            }
            $206 = (($rest$sroa$82$03647$i) + -1)|0;
            $207 = (($148) + ($206)|0);
            $208 = ($206|0)==(0);
            if ($208) {
             label = 78;
             break L78;
            } else {
             $147 = $204;$161 = $207;$rest$sroa$0$03648$i = $148;$rest$sroa$82$03647$i = $206;
            }
           }
           $182 = (($inner$sroa$12$13735$i) - ($rest$sroa$82$03647$i))|0;
           $183 = ($182|0)==(0);
           $184 = ($rest$sroa$82$03647$i|0)==(0);
           $or$cond$i$i875$i = $184 | $183;
           if (!($or$cond$i$i875$i)) {
            $not$$i$i876$i = ($inner$sroa$12$13735$i>>>0)>($182>>>0);
            if (!($not$$i$i876$i)) {
             label = 85;
             break;
            }
            $185 = (($inner$sroa$0$13736$i) + ($182)|0);
            $186 = HEAP8[$185>>0]|0;
            $187 = ($186<<24>>24)>(-65);
            if (!($187)) {
             label = 85;
             break;
            }
           }
           __ZN4core3num54__LT_impl_u20_core__str__FromStr_u20_for_u20_usize_GT_8from_str17h5121c8062a733666E($_131$i,$inner$sroa$0$13736$i,$182);
           $self$sroa$0$0$copyload$i881$i = HEAP16[$_131$i>>1]|0;
           $188 = $self$sroa$0$0$copyload$i881$i&255;
           $switch2$i882$i = ($188<<24>>24)==(0);
           if (!($switch2$i882$i)) {
            label = 87;
            break;
           }
           $self$sroa$77$0$copyload$i$i = HEAP32[$self$sroa$77$0$$sroa_idx8$i$i>>2]|0;
           $191 = ($self$sroa$77$0$copyload$i$i|0)==(0);
           $192 = ($rest$sroa$82$03647$i|0)==($self$sroa$77$0$copyload$i$i|0);
           $or$cond$i$i885$i = $191 | $192;
           if ($or$cond$i$i885$i) {
            $$pre$i$i = (($rest$sroa$0$03648$i) + ($self$sroa$77$0$copyload$i$i)|0);
            $$pre$phi$i2908$iZ2D = $$pre$i$i;
           } else {
            $not$$i$i886$i = ($rest$sroa$82$03647$i>>>0)>($self$sroa$77$0$copyload$i$i>>>0);
            if (!($not$$i$i886$i)) {
             label = 92;
             break;
            }
            $193 = (($rest$sroa$0$03648$i) + ($self$sroa$77$0$copyload$i$i)|0);
            $194 = HEAP8[$193>>0]|0;
            $195 = ($194<<24>>24)>(-65);
            if ($195) {
             $$pre$phi$i2908$iZ2D = $193;
            } else {
             label = 92;
             break;
            }
           }
           $196 = (($rest$sroa$82$03647$i) - ($self$sroa$77$0$copyload$i$i))|0;
           $197 = ($self$sroa$77$0$copyload$i$i|0)==(2);
           do {
            if ($197) {
             label = 96;
            } else {
             $not$$i$i$i$i898$i = ($self$sroa$77$0$copyload$i$i>>>0)>(2);
             if ($not$$i$i$i$i898$i) {
              $198 = ((($rest$sroa$0$03648$i)) + 2|0);
              $199 = HEAP8[$198>>0]|0;
              $200 = ($199<<24>>24)>(-65);
              if ($200) {
               label = 96;
               break;
              } else {
               $rest$sroa$0$13694$i = $rest$sroa$0$03648$i;$rest$sroa$82$13657$i = $self$sroa$77$0$copyload$i$i;
               label = 106;
               break;
              }
             } else {
              if ($191) {
               break;
              } else {
               $rest$sroa$0$13694$i = $rest$sroa$0$03648$i;$rest$sroa$82$13657$i = 1;
               label = 106;
               break;
              }
             }
            }
           } while(0);
           do {
            if ((label|0) == 96) {
             label = 0;
             $201 = ($rest$sroa$0$03648$i|0)==(15869|0);
             if (!($201)) {
              $202 = (_memcmp(15869,$rest$sroa$0$03648$i,2)|0);
              $203 = ($202|0)==(0);
              if (!($203)) {
               $rest$sroa$0$13694$i = $rest$sroa$0$03648$i;$rest$sroa$82$13657$i = $self$sroa$77$0$copyload$i$i;
               label = 106;
               break;
              }
             }
             $209 = HEAP8[$148>>0]|0;
             $210 = ($209<<24>>24)>(-65);
             if (!($210)) {
              label = 103;
              break L78;
             }
             $211 = (($self$sroa$77$0$copyload$i$i) + -1)|0;
             $rest$sroa$0$13694$i = $148;$rest$sroa$82$13657$i = $211;
             label = 106;
            }
           } while(0);
           L129: do {
            if ((label|0) == 106) {
             L130: while(1) {
              label = 0;
              $212 = ($rest$sroa$82$13657$i|0)==(1);
              if ($212) {
               label = 108;
              } else {
               $213 = ((($rest$sroa$0$13694$i)) + 1|0);
               $214 = HEAP8[$213>>0]|0;
               $215 = ($214<<24>>24)>(-65);
               if ($215) {
                label = 108;
               } else {
                label = 146;
               }
              }
              L134: do {
               if ((label|0) == 108) {
                label = 0;
                $216 = ($rest$sroa$0$13694$i|0)==(15871|0);
                do {
                 if (!($216)) {
                  $rhsc3064$i = HEAP8[$rest$sroa$0$13694$i>>0]|0;
                  $217 = ($rhsc3064$i<<24>>24)==(46);
                  if ($217) {
                   break;
                  }
                  if (!($212)) {
                   $$phi$trans$insert$i = ((($rest$sroa$0$13694$i)) + 1|0);
                   $$pre$i = HEAP8[$$phi$trans$insert$i>>0]|0;
                   $253 = ($$pre$i<<24>>24)>(-65);
                   if (!($253)) {
                    label = 146;
                    break L134;
                   }
                  }
                  $254 = ($rest$sroa$0$13694$i|0)==(15872|0);
                  $255 = ($rhsc3064$i<<24>>24)==(36);
                  $or$cond = $254 | $255;
                  if (!($or$cond)) {
                   label = 146;
                   break L134;
                  }
                  $264 = ($rest$sroa$82$13657$i|0)==(4);
                  do {
                   if ($264) {
                    label = 144;
                   } else {
                    $not$$i$i$i$i1031$i = ($rest$sroa$82$13657$i>>>0)>(4);
                    if ($not$$i$i$i$i1031$i) {
                     $265 = ((($rest$sroa$0$13694$i)) + 4|0);
                     $266 = HEAP8[$265>>0]|0;
                     $267 = ($266<<24>>24)>(-65);
                     if ($267) {
                      label = 144;
                      break;
                     } else {
                      label = 222;
                      break;
                     }
                    } else {
                     $364 = ($rest$sroa$82$13657$i|0)==(3);
                     if ($364) {
                      $502 = 1;
                      label = 223;
                      break;
                     } else {
                      break L130;
                     }
                    }
                   }
                  } while(0);
                  L148: do {
                   if ((label|0) == 144) {
                    label = 0;
                    $268 = ($rest$sroa$0$13694$i|0)==(15873|0);
                    do {
                     if (!($268)) {
                      $269 = (_memcmp(15873,$rest$sroa$0$13694$i,4)|0);
                      $270 = ($269|0)==(0);
                      if ($270) {
                       break;
                      }
                      if (!($264)) {
                       $$phi$trans$insert4292$i = ((($rest$sroa$0$13694$i)) + 4|0);
                       $$pre4293$i = HEAP8[$$phi$trans$insert4292$i>>0]|0;
                       $316 = ($$pre4293$i<<24>>24)>(-65);
                       if (!($316)) {
                        label = 222;
                        break L148;
                       }
                      }
                      $317 = ($rest$sroa$0$13694$i|0)==(15878|0);
                      do {
                       if (!($317)) {
                        $318 = (_memcmp(15878,$rest$sroa$0$13694$i,4)|0);
                        $319 = ($318|0)==(0);
                        if ($319) {
                         break;
                        }
                        if (!($264)) {
                         $$phi$trans$insert4294$i = ((($rest$sroa$0$13694$i)) + 4|0);
                         $$pre4295$i = HEAP8[$$phi$trans$insert4294$i>>0]|0;
                         $324 = ($$pre4295$i<<24>>24)>(-65);
                         if (!($324)) {
                          label = 222;
                          break L148;
                         }
                        }
                        $325 = ($rest$sroa$0$13694$i|0)==(15883|0);
                        do {
                         if (!($325)) {
                          $326 = (_memcmp(15883,$rest$sroa$0$13694$i,4)|0);
                          $327 = ($326|0)==(0);
                          if ($327) {
                           break;
                          }
                          if (!($264)) {
                           $$phi$trans$insert4296$i = ((($rest$sroa$0$13694$i)) + 4|0);
                           $$pre4297$i = HEAP8[$$phi$trans$insert4296$i>>0]|0;
                           $332 = ($$pre4297$i<<24>>24)>(-65);
                           if (!($332)) {
                            label = 222;
                            break L148;
                           }
                          }
                          $333 = ($rest$sroa$0$13694$i|0)==(15888|0);
                          do {
                           if (!($333)) {
                            $334 = (_memcmp(15888,$rest$sroa$0$13694$i,4)|0);
                            $335 = ($334|0)==(0);
                            if ($335) {
                             break;
                            }
                            if (!($264)) {
                             $$phi$trans$insert4298$i = ((($rest$sroa$0$13694$i)) + 4|0);
                             $$pre4299$i = HEAP8[$$phi$trans$insert4298$i>>0]|0;
                             $340 = ($$pre4299$i<<24>>24)>(-65);
                             if (!($340)) {
                              label = 222;
                              break L148;
                             }
                            }
                            $341 = ($rest$sroa$0$13694$i|0)==(15893|0);
                            do {
                             if (!($341)) {
                              $342 = (_memcmp(15893,$rest$sroa$0$13694$i,4)|0);
                              $343 = ($342|0)==(0);
                              if ($343) {
                               break;
                              }
                              if (!($264)) {
                               $$phi$trans$insert4300$i = ((($rest$sroa$0$13694$i)) + 4|0);
                               $$pre4301$i = HEAP8[$$phi$trans$insert4300$i>>0]|0;
                               $348 = ($$pre4301$i<<24>>24)>(-65);
                               if (!($348)) {
                                label = 222;
                                break L148;
                               }
                              }
                              $349 = ($rest$sroa$0$13694$i|0)==(15898|0);
                              do {
                               if (!($349)) {
                                $350 = (_memcmp(15898,$rest$sroa$0$13694$i,4)|0);
                                $351 = ($350|0)==(0);
                                if ($351) {
                                 break;
                                }
                                if (!($264)) {
                                 $$phi$trans$insert4302$i = ((($rest$sroa$0$13694$i)) + 4|0);
                                 $$pre4303$i = HEAP8[$$phi$trans$insert4302$i>>0]|0;
                                 $356 = ($$pre4303$i<<24>>24)>(-65);
                                 if (!($356)) {
                                  label = 222;
                                  break L148;
                                 }
                                }
                                $357 = ($rest$sroa$0$13694$i|0)==(15903|0);
                                if (!($357)) {
                                 $358 = (_memcmp(15903,$rest$sroa$0$13694$i,4)|0);
                                 $359 = ($358|0)==(0);
                                 if (!($359)) {
                                  label = 222;
                                  break L148;
                                 }
                                }
                                $363 = HEAP32[$141>>2]|0;
                                FUNCTION_TABLE_viiii[$363 & 511]($_334$i,$1,15907,1);
                                $self$i1208$sroa$0$0$copyload$i = HEAP32[$_334$i>>2]|0;
                                $switch3$i1209$i = ($self$i1208$sroa$0$0$copyload$i|0)==(1);
                                if ($switch3$i1209$i) {
                                 label = 225;
                                 break L78;
                                }
                                $$pre$i1986$i = ((($rest$sroa$0$13694$i)) + 4|0);
                                if (!($264)) {
                                 $371 = HEAP8[$$pre$i1986$i>>0]|0;
                                 $372 = ($371<<24>>24)>(-65);
                                 if (!($372)) {
                                  label = 228;
                                  break L78;
                                 }
                                }
                                $373 = (($rest$sroa$82$13657$i) + -4)|0;
                                $rest$sroa$0$1$be$i = $$pre$i1986$i;$rest$sroa$82$1$be$i = $373;
                                break L134;
                               }
                              } while(0);
                              $355 = HEAP32[$141>>2]|0;
                              FUNCTION_TABLE_viiii[$355 & 511]($_313$i,$1,15902,1);
                              $self$i1190$sroa$0$0$copyload$i = HEAP32[$_313$i>>2]|0;
                              $switch3$i1191$i = ($self$i1190$sroa$0$0$copyload$i|0)==(1);
                              if ($switch3$i1191$i) {
                               label = 215;
                               break L78;
                              }
                              $$pre$i1199$i = ((($rest$sroa$0$13694$i)) + 4|0);
                              if (!($264)) {
                               $360 = HEAP8[$$pre$i1199$i>>0]|0;
                               $361 = ($360<<24>>24)>(-65);
                               if (!($361)) {
                                label = 218;
                                break L78;
                               }
                              }
                              $362 = (($rest$sroa$82$13657$i) + -4)|0;
                              $rest$sroa$0$1$be$i = $$pre$i1199$i;$rest$sroa$82$1$be$i = $362;
                              break L134;
                             }
                            } while(0);
                            $347 = HEAP32[$141>>2]|0;
                            FUNCTION_TABLE_viiii[$347 & 511]($_292$i,$1,15897,1);
                            $self$i1173$sroa$0$0$copyload$i = HEAP32[$_292$i>>2]|0;
                            $switch3$i1174$i = ($self$i1173$sroa$0$0$copyload$i|0)==(1);
                            if ($switch3$i1174$i) {
                             label = 205;
                             break L78;
                            }
                            $$pre$i1908$i = ((($rest$sroa$0$13694$i)) + 4|0);
                            if (!($264)) {
                             $352 = HEAP8[$$pre$i1908$i>>0]|0;
                             $353 = ($352<<24>>24)>(-65);
                             if (!($353)) {
                              label = 208;
                              break L78;
                             }
                            }
                            $354 = (($rest$sroa$82$13657$i) + -4)|0;
                            $rest$sroa$0$1$be$i = $$pre$i1908$i;$rest$sroa$82$1$be$i = $354;
                            break L134;
                           }
                          } while(0);
                          $339 = HEAP32[$141>>2]|0;
                          FUNCTION_TABLE_viiii[$339 & 511]($_271$i,$1,15892,1);
                          $self$i1155$sroa$0$0$copyload$i = HEAP32[$_271$i>>2]|0;
                          $switch3$i1156$i = ($self$i1155$sroa$0$0$copyload$i|0)==(1);
                          if ($switch3$i1156$i) {
                           label = 195;
                           break L78;
                          }
                          $$pre$i1164$i = ((($rest$sroa$0$13694$i)) + 4|0);
                          if (!($264)) {
                           $344 = HEAP8[$$pre$i1164$i>>0]|0;
                           $345 = ($344<<24>>24)>(-65);
                           if (!($345)) {
                            label = 198;
                            break L78;
                           }
                          }
                          $346 = (($rest$sroa$82$13657$i) + -4)|0;
                          $rest$sroa$0$1$be$i = $$pre$i1164$i;$rest$sroa$82$1$be$i = $346;
                          break L134;
                         }
                        } while(0);
                        $331 = HEAP32[$141>>2]|0;
                        FUNCTION_TABLE_viiii[$331 & 511]($_250$i,$1,15887,1);
                        $self$i1130$sroa$0$0$copyload$i = HEAP32[$_250$i>>2]|0;
                        $switch3$i1131$i = ($self$i1130$sroa$0$0$copyload$i|0)==(1);
                        if ($switch3$i1131$i) {
                         label = 185;
                         break L78;
                        }
                        $$pre$i1830$i = ((($rest$sroa$0$13694$i)) + 4|0);
                        if (!($264)) {
                         $336 = HEAP8[$$pre$i1830$i>>0]|0;
                         $337 = ($336<<24>>24)>(-65);
                         if (!($337)) {
                          label = 188;
                          break L78;
                         }
                        }
                        $338 = (($rest$sroa$82$13657$i) + -4)|0;
                        $rest$sroa$0$1$be$i = $$pre$i1830$i;$rest$sroa$82$1$be$i = $338;
                        break L134;
                       }
                      } while(0);
                      $323 = HEAP32[$141>>2]|0;
                      FUNCTION_TABLE_viiii[$323 & 511]($_229$i,$1,15882,1);
                      $self$i1097$sroa$0$0$copyload$i = HEAP32[$_229$i>>2]|0;
                      $switch3$i1098$i = ($self$i1097$sroa$0$0$copyload$i|0)==(1);
                      if ($switch3$i1098$i) {
                       label = 175;
                       break L78;
                      }
                      $$pre$i1121$i = ((($rest$sroa$0$13694$i)) + 4|0);
                      if (!($264)) {
                       $328 = HEAP8[$$pre$i1121$i>>0]|0;
                       $329 = ($328<<24>>24)>(-65);
                       if (!($329)) {
                        label = 178;
                        break L78;
                       }
                      }
                      $330 = (($rest$sroa$82$13657$i) + -4)|0;
                      $rest$sroa$0$1$be$i = $$pre$i1121$i;$rest$sroa$82$1$be$i = $330;
                      break L134;
                     }
                    } while(0);
                    $315 = HEAP32[$141>>2]|0;
                    FUNCTION_TABLE_viiii[$315 & 511]($_208$i,$1,15877,1);
                    $self$i1055$sroa$0$0$copyload$i = HEAP32[$_208$i>>2]|0;
                    $switch3$i1056$i = ($self$i1055$sroa$0$0$copyload$i|0)==(1);
                    if ($switch3$i1056$i) {
                     label = 165;
                     break L78;
                    }
                    $$pre$i1088$i = ((($rest$sroa$0$13694$i)) + 4|0);
                    if (!($264)) {
                     $320 = HEAP8[$$pre$i1088$i>>0]|0;
                     $321 = ($320<<24>>24)>(-65);
                     if (!($321)) {
                      label = 168;
                      break L78;
                     }
                    }
                    $322 = (($rest$sroa$82$13657$i) + -4)|0;
                    $rest$sroa$0$1$be$i = $$pre$i1088$i;$rest$sroa$82$1$be$i = $322;
                    break L134;
                   }
                  } while(0);
                  if ((label|0) == 222) {
                   label = 0;
                   $365 = ((($rest$sroa$0$13694$i)) + 3|0);
                   $366 = HEAP8[$365>>0]|0;
                   $367 = ($366<<24>>24)>(-65);
                   if ($367) {
                    $502 = 0;
                    label = 223;
                   }
                  }
                  do {
                   if ((label|0) == 223) {
                    label = 0;
                    $368 = ($rest$sroa$0$13694$i|0)==(15908|0);
                    if (!($368)) {
                     $369 = (_memcmp(15908,$rest$sroa$0$13694$i,3)|0);
                     $370 = ($369|0)==(0);
                     if (!($370)) {
                      break;
                     }
                    }
                    $374 = HEAP32[$141>>2]|0;
                    FUNCTION_TABLE_viiii[$374 & 511]($_355$i,$1,15911,1);
                    $self$i1225$sroa$0$0$copyload$i = HEAP32[$_355$i>>2]|0;
                    $switch3$i1226$i = ($self$i1225$sroa$0$0$copyload$i|0)==(1);
                    if ($switch3$i1226$i) {
                     label = 236;
                     break L78;
                    }
                    if ($502) {
                     $$pre$i1250$i = ((($rest$sroa$0$13694$i)) + 3|0);
                     $$pre$phi$i1255$iZ2D = $$pre$i1250$i;
                    } else {
                     $not$$i$i1252$i = ($rest$sroa$82$13657$i>>>0)>(3);
                     if (!($not$$i$i1252$i)) {
                      label = 241;
                      break L78;
                     }
                     $382 = ((($rest$sroa$0$13694$i)) + 3|0);
                     $383 = HEAP8[$382>>0]|0;
                     $384 = ($383<<24>>24)>(-65);
                     if ($384) {
                      $$pre$phi$i1255$iZ2D = $382;
                     } else {
                      label = 241;
                      break L78;
                     }
                    }
                    $385 = (($rest$sroa$82$13657$i) + -3)|0;
                    $rest$sroa$0$1$be$i = $$pre$phi$i1255$iZ2D;$rest$sroa$82$1$be$i = $385;
                    break L134;
                   }
                  } while(0);
                  $375 = ($rest$sroa$82$13657$i|0)==(5);
                  if ($375) {
                   $503 = 1;
                  } else {
                   $not$$i$i$i$i1233$i = ($rest$sroa$82$13657$i>>>0)>(5);
                   if (!($not$$i$i$i$i1233$i)) {
                    break L130;
                   }
                   $376 = ((($rest$sroa$0$13694$i)) + 5|0);
                   $377 = HEAP8[$376>>0]|0;
                   $378 = ($377<<24>>24)>(-65);
                   if ($378) {
                    $503 = 0;
                   } else {
                    break L130;
                   }
                  }
                  $379 = ($rest$sroa$0$13694$i|0)==(15912|0);
                  do {
                   if (!($379)) {
                    $380 = (_memcmp(15912,$rest$sroa$0$13694$i,5)|0);
                    $381 = ($380|0)==(0);
                    if ($381) {
                     break;
                    }
                    if ($503) {
                     $504 = 1;
                    } else {
                     $not$$i$i$i$i1274$i = ($rest$sroa$82$13657$i>>>0)>(5);
                     if (!($not$$i$i$i$i1274$i)) {
                      break L130;
                     }
                     $$phi$trans$insert4304$i = ((($rest$sroa$0$13694$i)) + 5|0);
                     $$pre4305$i = HEAP8[$$phi$trans$insert4304$i>>0]|0;
                     $387 = ($$pre4305$i<<24>>24)>(-65);
                     if ($387) {
                      $504 = 0;
                     } else {
                      break L130;
                     }
                    }
                    $388 = ($rest$sroa$0$13694$i|0)==(15918|0);
                    do {
                     if (!($388)) {
                      $389 = (_memcmp(15918,$rest$sroa$0$13694$i,5)|0);
                      $390 = ($389|0)==(0);
                      if ($390) {
                       break;
                      }
                      if ($504) {
                       $505 = 1;
                      } else {
                       $not$$i$i$i$i1308$i = ($rest$sroa$82$13657$i>>>0)>(5);
                       if (!($not$$i$i$i$i1308$i)) {
                        break L130;
                       }
                       $$phi$trans$insert4306$i = ((($rest$sroa$0$13694$i)) + 5|0);
                       $$pre4307$i = HEAP8[$$phi$trans$insert4306$i>>0]|0;
                       $396 = ($$pre4307$i<<24>>24)>(-65);
                       if ($396) {
                        $505 = 0;
                       } else {
                        break L130;
                       }
                      }
                      $397 = ($rest$sroa$0$13694$i|0)==(15924|0);
                      do {
                       if (!($397)) {
                        $398 = (_memcmp(15924,$rest$sroa$0$13694$i,5)|0);
                        $399 = ($398|0)==(0);
                        if ($399) {
                         break;
                        }
                        if ($505) {
                         $506 = 1;
                        } else {
                         $not$$i$i$i$i1350$i = ($rest$sroa$82$13657$i>>>0)>(5);
                         if (!($not$$i$i$i$i1350$i)) {
                          break L130;
                         }
                         $$phi$trans$insert4308$i = ((($rest$sroa$0$13694$i)) + 5|0);
                         $$pre4309$i = HEAP8[$$phi$trans$insert4308$i>>0]|0;
                         $405 = ($$pre4309$i<<24>>24)>(-65);
                         if ($405) {
                          $506 = 0;
                         } else {
                          break L130;
                         }
                        }
                        $406 = ($rest$sroa$0$13694$i|0)==(15930|0);
                        do {
                         if (!($406)) {
                          $407 = (_memcmp(15930,$rest$sroa$0$13694$i,5)|0);
                          $408 = ($407|0)==(0);
                          if ($408) {
                           break;
                          }
                          if ($506) {
                           $507 = 1;
                          } else {
                           $not$$i$i$i$i1391$i = ($rest$sroa$82$13657$i>>>0)>(5);
                           if (!($not$$i$i$i$i1391$i)) {
                            break L130;
                           }
                           $$phi$trans$insert4310$i = ((($rest$sroa$0$13694$i)) + 5|0);
                           $$pre4311$i = HEAP8[$$phi$trans$insert4310$i>>0]|0;
                           $414 = ($$pre4311$i<<24>>24)>(-65);
                           if ($414) {
                            $507 = 0;
                           } else {
                            break L130;
                           }
                          }
                          $415 = ($rest$sroa$0$13694$i|0)==(15936|0);
                          do {
                           if (!($415)) {
                            $416 = (_memcmp(15936,$rest$sroa$0$13694$i,5)|0);
                            $417 = ($416|0)==(0);
                            if ($417) {
                             break;
                            }
                            if ($507) {
                             $508 = 1;
                            } else {
                             $not$$i$i$i$i1425$i = ($rest$sroa$82$13657$i>>>0)>(5);
                             if (!($not$$i$i$i$i1425$i)) {
                              break L130;
                             }
                             $$phi$trans$insert4312$i = ((($rest$sroa$0$13694$i)) + 5|0);
                             $$pre4313$i = HEAP8[$$phi$trans$insert4312$i>>0]|0;
                             $423 = ($$pre4313$i<<24>>24)>(-65);
                             if ($423) {
                              $508 = 0;
                             } else {
                              break L130;
                             }
                            }
                            $424 = ($rest$sroa$0$13694$i|0)==(15942|0);
                            do {
                             if (!($424)) {
                              $425 = (_memcmp(15942,$rest$sroa$0$13694$i,5)|0);
                              $426 = ($425|0)==(0);
                              if ($426) {
                               break;
                              }
                              if ($508) {
                               $509 = 1;
                              } else {
                               $not$$i$i$i$i1467$i = ($rest$sroa$82$13657$i>>>0)>(5);
                               if (!($not$$i$i$i$i1467$i)) {
                                break L130;
                               }
                               $$phi$trans$insert4314$i = ((($rest$sroa$0$13694$i)) + 5|0);
                               $$pre4315$i = HEAP8[$$phi$trans$insert4314$i>>0]|0;
                               $432 = ($$pre4315$i<<24>>24)>(-65);
                               if ($432) {
                                $509 = 0;
                               } else {
                                break L130;
                               }
                              }
                              $433 = ($rest$sroa$0$13694$i|0)==(15948|0);
                              do {
                               if (!($433)) {
                                $434 = (_memcmp(15948,$rest$sroa$0$13694$i,5)|0);
                                $435 = ($434|0)==(0);
                                if ($435) {
                                 break;
                                }
                                if ($509) {
                                 $510 = 1;
                                } else {
                                 $not$$i$i$i$i1508$i = ($rest$sroa$82$13657$i>>>0)>(5);
                                 if (!($not$$i$i$i$i1508$i)) {
                                  break L130;
                                 }
                                 $$phi$trans$insert4316$i = ((($rest$sroa$0$13694$i)) + 5|0);
                                 $$pre4317$i = HEAP8[$$phi$trans$insert4316$i>>0]|0;
                                 $441 = ($$pre4317$i<<24>>24)>(-65);
                                 if ($441) {
                                  $510 = 0;
                                 } else {
                                  break L130;
                                 }
                                }
                                $442 = ($rest$sroa$0$13694$i|0)==(15954|0);
                                do {
                                 if (!($442)) {
                                  $443 = (_memcmp(15954,$rest$sroa$0$13694$i,5)|0);
                                  $444 = ($443|0)==(0);
                                  if ($444) {
                                   break;
                                  }
                                  if ($510) {
                                   $511 = 1;
                                  } else {
                                   $not$$i$i$i$i1542$i = ($rest$sroa$82$13657$i>>>0)>(5);
                                   if (!($not$$i$i$i$i1542$i)) {
                                    break L130;
                                   }
                                   $$phi$trans$insert4318$i = ((($rest$sroa$0$13694$i)) + 5|0);
                                   $$pre4319$i = HEAP8[$$phi$trans$insert4318$i>>0]|0;
                                   $450 = ($$pre4319$i<<24>>24)>(-65);
                                   if ($450) {
                                    $511 = 0;
                                   } else {
                                    break L130;
                                   }
                                  }
                                  $451 = ($rest$sroa$0$13694$i|0)==(15960|0);
                                  do {
                                   if (!($451)) {
                                    $452 = (_memcmp(15960,$rest$sroa$0$13694$i,5)|0);
                                    $453 = ($452|0)==(0);
                                    if ($453) {
                                     break;
                                    }
                                    if ($511) {
                                     $512 = 1;
                                    } else {
                                     $not$$i$i$i$i1584$i = ($rest$sroa$82$13657$i>>>0)>(5);
                                     if (!($not$$i$i$i$i1584$i)) {
                                      break L130;
                                     }
                                     $$phi$trans$insert4320$i = ((($rest$sroa$0$13694$i)) + 5|0);
                                     $$pre4321$i = HEAP8[$$phi$trans$insert4320$i>>0]|0;
                                     $459 = ($$pre4321$i<<24>>24)>(-65);
                                     if ($459) {
                                      $512 = 0;
                                     } else {
                                      break L130;
                                     }
                                    }
                                    $460 = ($rest$sroa$0$13694$i|0)==(15966|0);
                                    if (!($460)) {
                                     $461 = (_memcmp(15966,$rest$sroa$0$13694$i,5)|0);
                                     $462 = ($461|0)==(0);
                                     if (!($462)) {
                                      break L130;
                                     }
                                    }
                                    $467 = HEAP32[$141>>2]|0;
                                    FUNCTION_TABLE_viiii[$467 & 511]($_565$i,$1,15971,1);
                                    $self$i1610$sroa$0$0$copyload$i = HEAP32[$_565$i>>2]|0;
                                    $switch3$i1611$i = ($self$i1610$sroa$0$0$copyload$i|0)==(1);
                                    if ($switch3$i1611$i) {
                                     label = 362;
                                     break L78;
                                    }
                                    if ($512) {
                                     $$pre$i1650$i = ((($rest$sroa$0$13694$i)) + 5|0);
                                     $$pre$phi$i1655$iZ2D = $$pre$i1650$i;
                                    } else {
                                     $not$$i$i1652$i = ($rest$sroa$82$13657$i>>>0)>(5);
                                     if (!($not$$i$i1652$i)) {
                                      label = 367;
                                      break L78;
                                     }
                                     $469 = ((($rest$sroa$0$13694$i)) + 5|0);
                                     $470 = HEAP8[$469>>0]|0;
                                     $471 = ($470<<24>>24)>(-65);
                                     if ($471) {
                                      $$pre$phi$i1655$iZ2D = $469;
                                     } else {
                                      label = 367;
                                      break L78;
                                     }
                                    }
                                    $472 = (($rest$sroa$82$13657$i) + -5)|0;
                                    $rest$sroa$0$1$be$i = $$pre$phi$i1655$iZ2D;$rest$sroa$82$1$be$i = $472;
                                    break L134;
                                   }
                                  } while(0);
                                  $458 = HEAP32[$141>>2]|0;
                                  FUNCTION_TABLE_viiii[$458 & 511]($_544$i,$1,15965,1);
                                  $self$i1576$sroa$0$0$copyload$i = HEAP32[$_544$i>>2]|0;
                                  $switch3$i1577$i = ($self$i1576$sroa$0$0$copyload$i|0)==(1);
                                  if ($switch3$i1577$i) {
                                   label = 353;
                                   break L78;
                                  }
                                  if ($511) {
                                   $$pre$i1601$i = ((($rest$sroa$0$13694$i)) + 5|0);
                                   $$pre$phi$i1606$iZ2D = $$pre$i1601$i;
                                  } else {
                                   $not$$i$i1603$i = ($rest$sroa$82$13657$i>>>0)>(5);
                                   if (!($not$$i$i1603$i)) {
                                    label = 358;
                                    break L78;
                                   }
                                   $463 = ((($rest$sroa$0$13694$i)) + 5|0);
                                   $464 = HEAP8[$463>>0]|0;
                                   $465 = ($464<<24>>24)>(-65);
                                   if ($465) {
                                    $$pre$phi$i1606$iZ2D = $463;
                                   } else {
                                    label = 358;
                                    break L78;
                                   }
                                  }
                                  $466 = (($rest$sroa$82$13657$i) + -5)|0;
                                  $rest$sroa$0$1$be$i = $$pre$phi$i1606$iZ2D;$rest$sroa$82$1$be$i = $466;
                                  break L134;
                                 }
                                } while(0);
                                $449 = HEAP32[$141>>2]|0;
                                FUNCTION_TABLE_viiii[$449 & 511]($_523$i,$1,15959,1);
                                $self$i1534$sroa$0$0$copyload$i = HEAP32[$_523$i>>2]|0;
                                $switch3$i1535$i = ($self$i1534$sroa$0$0$copyload$i|0)==(1);
                                if ($switch3$i1535$i) {
                                 label = 340;
                                 break L78;
                                }
                                if ($510) {
                                 $$pre$i1567$i = ((($rest$sroa$0$13694$i)) + 5|0);
                                 $$pre$phi$i1572$iZ2D = $$pre$i1567$i;
                                } else {
                                 $not$$i$i1569$i = ($rest$sroa$82$13657$i>>>0)>(5);
                                 if (!($not$$i$i1569$i)) {
                                  label = 345;
                                  break L78;
                                 }
                                 $454 = ((($rest$sroa$0$13694$i)) + 5|0);
                                 $455 = HEAP8[$454>>0]|0;
                                 $456 = ($455<<24>>24)>(-65);
                                 if ($456) {
                                  $$pre$phi$i1572$iZ2D = $454;
                                 } else {
                                  label = 345;
                                  break L78;
                                 }
                                }
                                $457 = (($rest$sroa$82$13657$i) + -5)|0;
                                $rest$sroa$0$1$be$i = $$pre$phi$i1572$iZ2D;$rest$sroa$82$1$be$i = $457;
                                break L134;
                               }
                              } while(0);
                              $440 = HEAP32[$141>>2]|0;
                              FUNCTION_TABLE_viiii[$440 & 511]($_502$i,$1,15953,1);
                              $self$i1493$sroa$0$0$copyload$i = HEAP32[$_502$i>>2]|0;
                              $switch3$i1494$i = ($self$i1493$sroa$0$0$copyload$i|0)==(1);
                              if ($switch3$i1494$i) {
                               label = 327;
                               break L78;
                              }
                              if ($509) {
                               $$pre$i1525$i = ((($rest$sroa$0$13694$i)) + 5|0);
                               $$pre$phi$i1530$iZ2D = $$pre$i1525$i;
                              } else {
                               $not$$i$i1527$i = ($rest$sroa$82$13657$i>>>0)>(5);
                               if (!($not$$i$i1527$i)) {
                                label = 332;
                                break L78;
                               }
                               $445 = ((($rest$sroa$0$13694$i)) + 5|0);
                               $446 = HEAP8[$445>>0]|0;
                               $447 = ($446<<24>>24)>(-65);
                               if ($447) {
                                $$pre$phi$i1530$iZ2D = $445;
                               } else {
                                label = 332;
                                break L78;
                               }
                              }
                              $448 = (($rest$sroa$82$13657$i) + -5)|0;
                              $rest$sroa$0$1$be$i = $$pre$phi$i1530$iZ2D;$rest$sroa$82$1$be$i = $448;
                              break L134;
                             }
                            } while(0);
                            $431 = HEAP32[$141>>2]|0;
                            FUNCTION_TABLE_viiii[$431 & 511]($_481$i,$1,15947,1);
                            $self$i1459$sroa$0$0$copyload$i = HEAP32[$_481$i>>2]|0;
                            $switch3$i1460$i = ($self$i1459$sroa$0$0$copyload$i|0)==(1);
                            if ($switch3$i1460$i) {
                             label = 314;
                             break L78;
                            }
                            if ($508) {
                             $$pre$i1484$i = ((($rest$sroa$0$13694$i)) + 5|0);
                             $$pre$phi$i1489$iZ2D = $$pre$i1484$i;
                            } else {
                             $not$$i$i1486$i = ($rest$sroa$82$13657$i>>>0)>(5);
                             if (!($not$$i$i1486$i)) {
                              label = 319;
                              break L78;
                             }
                             $436 = ((($rest$sroa$0$13694$i)) + 5|0);
                             $437 = HEAP8[$436>>0]|0;
                             $438 = ($437<<24>>24)>(-65);
                             if ($438) {
                              $$pre$phi$i1489$iZ2D = $436;
                             } else {
                              label = 319;
                              break L78;
                             }
                            }
                            $439 = (($rest$sroa$82$13657$i) + -5)|0;
                            $rest$sroa$0$1$be$i = $$pre$phi$i1489$iZ2D;$rest$sroa$82$1$be$i = $439;
                            break L134;
                           }
                          } while(0);
                          $422 = HEAP32[$141>>2]|0;
                          FUNCTION_TABLE_viiii[$422 & 511]($_460$i,$1,15941,1);
                          $self$i1417$sroa$0$0$copyload$i = HEAP32[$_460$i>>2]|0;
                          $switch3$i1418$i = ($self$i1417$sroa$0$0$copyload$i|0)==(1);
                          if ($switch3$i1418$i) {
                           label = 301;
                           break L78;
                          }
                          if ($507) {
                           $$pre$i1450$i = ((($rest$sroa$0$13694$i)) + 5|0);
                           $$pre$phi$i1455$iZ2D = $$pre$i1450$i;
                          } else {
                           $not$$i$i1452$i = ($rest$sroa$82$13657$i>>>0)>(5);
                           if (!($not$$i$i1452$i)) {
                            label = 306;
                            break L78;
                           }
                           $427 = ((($rest$sroa$0$13694$i)) + 5|0);
                           $428 = HEAP8[$427>>0]|0;
                           $429 = ($428<<24>>24)>(-65);
                           if ($429) {
                            $$pre$phi$i1455$iZ2D = $427;
                           } else {
                            label = 306;
                            break L78;
                           }
                          }
                          $430 = (($rest$sroa$82$13657$i) + -5)|0;
                          $rest$sroa$0$1$be$i = $$pre$phi$i1455$iZ2D;$rest$sroa$82$1$be$i = $430;
                          break L134;
                         }
                        } while(0);
                        $413 = HEAP32[$141>>2]|0;
                        FUNCTION_TABLE_viiii[$413 & 511]($_439$i,$1,15935,1);
                        $self$i1376$sroa$0$0$copyload$i = HEAP32[$_439$i>>2]|0;
                        $switch3$i1377$i = ($self$i1376$sroa$0$0$copyload$i|0)==(1);
                        if ($switch3$i1377$i) {
                         label = 288;
                         break L78;
                        }
                        if ($506) {
                         $$pre$i1408$i = ((($rest$sroa$0$13694$i)) + 5|0);
                         $$pre$phi$i1413$iZ2D = $$pre$i1408$i;
                        } else {
                         $not$$i$i1410$i = ($rest$sroa$82$13657$i>>>0)>(5);
                         if (!($not$$i$i1410$i)) {
                          label = 293;
                          break L78;
                         }
                         $418 = ((($rest$sroa$0$13694$i)) + 5|0);
                         $419 = HEAP8[$418>>0]|0;
                         $420 = ($419<<24>>24)>(-65);
                         if ($420) {
                          $$pre$phi$i1413$iZ2D = $418;
                         } else {
                          label = 293;
                          break L78;
                         }
                        }
                        $421 = (($rest$sroa$82$13657$i) + -5)|0;
                        $rest$sroa$0$1$be$i = $$pre$phi$i1413$iZ2D;$rest$sroa$82$1$be$i = $421;
                        break L134;
                       }
                      } while(0);
                      $404 = HEAP32[$141>>2]|0;
                      FUNCTION_TABLE_viiii[$404 & 511]($_418$i,$1,15929,1);
                      $self$i1342$sroa$0$0$copyload$i = HEAP32[$_418$i>>2]|0;
                      $switch3$i1343$i = ($self$i1342$sroa$0$0$copyload$i|0)==(1);
                      if ($switch3$i1343$i) {
                       label = 275;
                       break L78;
                      }
                      if ($505) {
                       $$pre$i1367$i = ((($rest$sroa$0$13694$i)) + 5|0);
                       $$pre$phi$i1372$iZ2D = $$pre$i1367$i;
                      } else {
                       $not$$i$i1369$i = ($rest$sroa$82$13657$i>>>0)>(5);
                       if (!($not$$i$i1369$i)) {
                        label = 280;
                        break L78;
                       }
                       $409 = ((($rest$sroa$0$13694$i)) + 5|0);
                       $410 = HEAP8[$409>>0]|0;
                       $411 = ($410<<24>>24)>(-65);
                       if ($411) {
                        $$pre$phi$i1372$iZ2D = $409;
                       } else {
                        label = 280;
                        break L78;
                       }
                      }
                      $412 = (($rest$sroa$82$13657$i) + -5)|0;
                      $rest$sroa$0$1$be$i = $$pre$phi$i1372$iZ2D;$rest$sroa$82$1$be$i = $412;
                      break L134;
                     }
                    } while(0);
                    $395 = HEAP32[$141>>2]|0;
                    FUNCTION_TABLE_viiii[$395 & 511]($_397$i,$1,15923,1);
                    $self$i1300$sroa$0$0$copyload$i = HEAP32[$_397$i>>2]|0;
                    $switch3$i1301$i = ($self$i1300$sroa$0$0$copyload$i|0)==(1);
                    if ($switch3$i1301$i) {
                     label = 262;
                     break L78;
                    }
                    if ($504) {
                     $$pre$i1333$i = ((($rest$sroa$0$13694$i)) + 5|0);
                     $$pre$phi$i1338$iZ2D = $$pre$i1333$i;
                    } else {
                     $not$$i$i1335$i = ($rest$sroa$82$13657$i>>>0)>(5);
                     if (!($not$$i$i1335$i)) {
                      label = 267;
                      break L78;
                     }
                     $400 = ((($rest$sroa$0$13694$i)) + 5|0);
                     $401 = HEAP8[$400>>0]|0;
                     $402 = ($401<<24>>24)>(-65);
                     if ($402) {
                      $$pre$phi$i1338$iZ2D = $400;
                     } else {
                      label = 267;
                      break L78;
                     }
                    }
                    $403 = (($rest$sroa$82$13657$i) + -5)|0;
                    $rest$sroa$0$1$be$i = $$pre$phi$i1338$iZ2D;$rest$sroa$82$1$be$i = $403;
                    break L134;
                   }
                  } while(0);
                  $386 = HEAP32[$141>>2]|0;
                  FUNCTION_TABLE_viiii[$386 & 511]($_376$i,$1,15917,1);
                  $self$i1259$sroa$0$0$copyload$i = HEAP32[$_376$i>>2]|0;
                  $switch3$i1260$i = ($self$i1259$sroa$0$0$copyload$i|0)==(1);
                  if ($switch3$i1260$i) {
                   label = 249;
                   break L78;
                  }
                  if ($503) {
                   $$pre$i1291$i = ((($rest$sroa$0$13694$i)) + 5|0);
                   $$pre$phi$i1296$iZ2D = $$pre$i1291$i;
                  } else {
                   $not$$i$i1293$i = ($rest$sroa$82$13657$i>>>0)>(5);
                   if (!($not$$i$i1293$i)) {
                    label = 254;
                    break L78;
                   }
                   $391 = ((($rest$sroa$0$13694$i)) + 5|0);
                   $392 = HEAP8[$391>>0]|0;
                   $393 = ($392<<24>>24)>(-65);
                   if ($393) {
                    $$pre$phi$i1296$iZ2D = $391;
                   } else {
                    label = 254;
                    break L78;
                   }
                  }
                  $394 = (($rest$sroa$82$13657$i) + -5)|0;
                  $rest$sroa$0$1$be$i = $$pre$phi$i1296$iZ2D;$rest$sroa$82$1$be$i = $394;
                  break L134;
                 }
                } while(0);
                $$pre$i932$ptr$i = ((($rest$sroa$0$13694$i)) + 1|0);
                do {
                 if ($212) {
                  $498 = 0;
                  label = 129;
                 } else {
                  $218 = HEAP8[$$pre$i932$ptr$i>>0]|0;
                  $219 = ($218<<24>>24)>(-65);
                  if (!($219)) {
                   label = 112;
                   break L78;
                  }
                  $220 = (($rest$sroa$82$13657$i) + -1)|0;
                  $$ptr$i = (($rest$sroa$0$13694$i) + ($rest$sroa$82$13657$i)|0);
                  $221 = ($220|0)==(0);
                  if ($221) {
                   $498 = 0;
                   label = 129;
                   break;
                  }
                  $223 = ((($rest$sroa$0$13694$i)) + 2|0);
                  $224 = ($218<<24>>24)>(-1);
                  do {
                   if ($224) {
                    $222 = $218&255;
                    $_163$sroa$5$2$ph$i = $222;
                   } else {
                    $225 = $218 & 31;
                    $226 = $225&255;
                    $227 = ($rest$sroa$82$13657$i|0)==(2);
                    if ($227) {
                     $235 = $$ptr$i;$_0$0$i22$i$i949$i = 0;
                    } else {
                     $228 = ((($rest$sroa$0$13694$i)) + 3|0);
                     $229 = HEAP8[$223>>0]|0;
                     $phitmp$i$i947$i = $229 & 63;
                     $235 = $228;$_0$0$i22$i$i949$i = $phitmp$i$i947$i;
                    }
                    $230 = $226 << 6;
                    $231 = $_0$0$i22$i$i949$i&255;
                    $232 = $231 | $230;
                    $233 = ($218&255)>(223);
                    if (!($233)) {
                     $_163$sroa$5$2$ph$i = $232;
                     break;
                    }
                    $234 = ($235|0)==($$ptr$i|0);
                    if ($234) {
                     $245 = $$ptr$i;$_0$0$i15$i$i954$i = 0;
                    } else {
                     $236 = ((($235)) + 1|0);
                     $237 = HEAP8[$235>>0]|0;
                     $phitmp31$i$i952$i = $237 & 63;
                     $245 = $236;$_0$0$i15$i$i954$i = $phitmp31$i$i952$i;
                    }
                    $238 = $231 << 6;
                    $239 = $_0$0$i15$i$i954$i&255;
                    $240 = $239 | $238;
                    $241 = $226 << 12;
                    $242 = $240 | $241;
                    $243 = ($218&255)>(239);
                    if (!($243)) {
                     $_163$sroa$5$2$ph$i = $242;
                     break;
                    }
                    $244 = ($245|0)==($$ptr$i|0);
                    if ($244) {
                     $_0$0$i9$i$i959$i = 0;
                    } else {
                     $246 = HEAP8[$245>>0]|0;
                     $phitmp32$i$i957$i = $246 & 63;
                     $_0$0$i9$i$i959$i = $phitmp32$i$i957$i;
                    }
                    $247 = $226 << 18;
                    $248 = $247 & 1835008;
                    $249 = $240 << 6;
                    $250 = $_0$0$i9$i$i959$i&255;
                    $251 = $249 | $248;
                    $252 = $251 | $250;
                    $_163$sroa$5$2$ph$i = $252;
                   }
                  } while(0);
                  $cond$i100 = ($_163$sroa$5$2$ph$i|0)==(46);
                  if (!($cond$i100)) {
                   $498 = $220;
                   label = 129;
                   break;
                  }
                  $256 = HEAP32[$141>>2]|0;
                  FUNCTION_TABLE_viiii[$256 & 511]($_172$i,$1,15867,2);
                  $self$i981$sroa$0$0$copyload$i = HEAP32[$_172$i>>2]|0;
                  $switch3$i982$i = ($self$i981$sroa$0$0$copyload$i|0)==(1);
                  if ($switch3$i982$i) {
                   label = 132;
                   break L78;
                  }
                  $258 = ($rest$sroa$82$13657$i|0)==(2);
                  if (!($258)) {
                   $259 = HEAP8[$223>>0]|0;
                   $260 = ($259<<24>>24)>(-65);
                   if (!($260)) {
                    label = 135;
                    break L78;
                   }
                  }
                  $261 = (($rest$sroa$82$13657$i) + -2)|0;
                  $$pre$i932$ptr$i$sink = $223;$$sink1 = $261;
                 }
                } while(0);
                do {
                 if ((label|0) == 129) {
                  label = 0;
                  $257 = HEAP32[$141>>2]|0;
                  FUNCTION_TABLE_viiii[$257 & 511]($_188$i,$1,15871,1);
                  $self$i988$sroa$0$0$copyload$i = HEAP32[$_188$i>>2]|0;
                  $switch3$i989$i = ($self$i988$sroa$0$0$copyload$i|0)==(1);
                  if ($switch3$i989$i) {
                   label = 137;
                   break L78;
                  }
                  if ($212) {
                   $$pre$i932$ptr$i$sink = $$pre$i932$ptr$i;$$sink1 = $498;
                   break;
                  }
                  $262 = HEAP8[$$pre$i932$ptr$i>>0]|0;
                  $263 = ($262<<24>>24)>(-65);
                  if ($263) {
                   $$pre$i932$ptr$i$sink = $$pre$i932$ptr$i;$$sink1 = $498;
                  } else {
                   label = 140;
                   break L78;
                  }
                 }
                } while(0);
                $rest$sroa$0$1$be$i = $$pre$i932$ptr$i$sink;$rest$sroa$82$1$be$i = $$sink1;
               }
              } while(0);
              if ((label|0) == 146) {
               label = 0;
               $271 = (($rest$sroa$0$13694$i) + ($rest$sroa$82$13657$i)|0);
               $272 = $rest$sroa$0$13694$i;
               $273 = $272;$_597$sroa$0$0$i = 0;
               L408: while(1) {
                $$cast$i$i$i$i = $273;
                $274 = ($$cast$i$i$i$i|0)==($271|0);
                if ($274) {
                 $idx$0$i = $rest$sroa$82$13657$i;
                 break;
                }
                $277 = ((($$cast$i$i$i$i)) + 1|0);
                $276 = HEAP8[$$cast$i$i$i$i>>0]|0;
                $278 = ($276<<24>>24)>(-1);
                $279 = $277;
                do {
                 if ($278) {
                  $275 = $276&255;
                  $314 = $279;$trunc$i$i$i = $275;
                 } else {
                  $280 = $276 & 31;
                  $281 = $280&255;
                  $282 = ($277|0)==($271|0);
                  if ($282) {
                   $291 = $271;$499 = $279;$_0$0$i22$i$i$i$i$i$i = 0;
                  } else {
                   $283 = ((($$cast$i$i$i$i)) + 2|0);
                   $284 = HEAP8[$277>>0]|0;
                   $phitmp$i$i$i$i$i$i = $284 & 63;
                   $285 = $283;
                   $291 = $283;$499 = $285;$_0$0$i22$i$i$i$i$i$i = $phitmp$i$i$i$i$i$i;
                  }
                  $286 = $281 << 6;
                  $287 = $_0$0$i22$i$i$i$i$i$i&255;
                  $288 = $287 | $286;
                  $289 = ($276&255)>(223);
                  if (!($289)) {
                   $314 = $499;$trunc$i$i$i = $288;
                   break;
                  }
                  $290 = ($291|0)==($271|0);
                  if ($290) {
                   $302 = $271;$500 = $499;$_0$0$i15$i$i$i$i$i$i = 0;
                  } else {
                   $292 = ((($291)) + 1|0);
                   $293 = HEAP8[$291>>0]|0;
                   $phitmp31$i$i$i$i$i$i = $293 & 63;
                   $294 = $292;
                   $302 = $292;$500 = $294;$_0$0$i15$i$i$i$i$i$i = $phitmp31$i$i$i$i$i$i;
                  }
                  $295 = $287 << 6;
                  $296 = $_0$0$i15$i$i$i$i$i$i&255;
                  $297 = $296 | $295;
                  $298 = $281 << 12;
                  $299 = $297 | $298;
                  $300 = ($276&255)>(239);
                  if (!($300)) {
                   $314 = $500;$trunc$i$i$i = $299;
                   break;
                  }
                  $301 = ($302|0)==($271|0);
                  if ($301) {
                   $501 = $500;$_0$0$i9$i$i$i$i$i$i = 0;
                  } else {
                   $303 = ((($302)) + 1|0);
                   $304 = HEAP8[$302>>0]|0;
                   $phitmp32$i$i$i$i$i$i = $304 & 63;
                   $305 = $303;
                   $501 = $305;$_0$0$i9$i$i$i$i$i$i = $phitmp32$i$i$i$i$i$i;
                  }
                  $306 = $281 << 18;
                  $307 = $306 & 1835008;
                  $308 = $297 << 6;
                  $309 = $_0$0$i9$i$i$i$i$i$i&255;
                  $310 = $308 | $307;
                  $311 = $310 | $309;
                  $314 = $501;$trunc$i$i$i = $311;
                 }
                } while(0);
                $312 = (($_597$sroa$0$0$i) - ($273))|0;
                $313 = (($312) + ($314))|0;
                $trunc$i$i$i$clear = $trunc$i$i$i & 2097151;
                switch ($trunc$i$i$i$clear|0) {
                case 46: case 36:  {
                 $idx$0$i = $_597$sroa$0$0$i;
                 break L408;
                 break;
                }
                default: {
                 $273 = $314;$_597$sroa$0$0$i = $313;
                }
                }
               }
               $474 = ($idx$0$i|0)==(0);
               $475 = ($rest$sroa$82$13657$i|0)==($idx$0$i|0);
               $or$cond$i$i1668$i = $474 | $475;
               if (!($or$cond$i$i1668$i)) {
                $not$$i$i1669$i = ($rest$sroa$82$13657$i>>>0)>($idx$0$i>>>0);
                if (!($not$$i$i1669$i)) {
                 label = 375;
                 break L78;
                }
                $476 = (($rest$sroa$0$13694$i) + ($idx$0$i)|0);
                $477 = HEAP8[$476>>0]|0;
                $478 = ($477<<24>>24)>(-65);
                if (!($478)) {
                 label = 375;
                 break L78;
                }
               }
               $479 = HEAP32[$141>>2]|0;
               FUNCTION_TABLE_viiii[$479 & 511]($_605$i,$1,$rest$sroa$0$13694$i,$idx$0$i);
               $self$i1675$sroa$0$0$copyload$i = HEAP32[$_605$i>>2]|0;
               $switch3$i1676$i = ($self$i1675$sroa$0$0$copyload$i|0)==(1);
               if ($switch3$i1676$i) {
                label = 377;
                break L78;
               }
               if ($or$cond$i$i1668$i) {
                $$pre$i1700$i = (($rest$sroa$0$13694$i) + ($idx$0$i)|0);
                $$pre$phi$i1705$iZ2D = $$pre$i1700$i;
               } else {
                $not$$i$i1702$i = ($rest$sroa$82$13657$i>>>0)>($idx$0$i>>>0);
                if (!($not$$i$i1702$i)) {
                 label = 382;
                 break L78;
                }
                $480 = (($rest$sroa$0$13694$i) + ($idx$0$i)|0);
                $481 = HEAP8[$480>>0]|0;
                $482 = ($481<<24>>24)>(-65);
                if ($482) {
                 $$pre$phi$i1705$iZ2D = $480;
                } else {
                 label = 382;
                 break L78;
                }
               }
               $483 = (($rest$sroa$82$13657$i) - ($idx$0$i))|0;
               $rest$sroa$0$1$be$i = $$pre$phi$i1705$iZ2D;$rest$sroa$82$1$be$i = $483;
              }
              $484 = ($rest$sroa$82$1$be$i|0)==(0);
              if ($484) {
               break L129;
              } else {
               $rest$sroa$0$13694$i = $rest$sroa$0$1$be$i;$rest$sroa$82$13657$i = $rest$sroa$82$1$be$i;
               label = 106;
              }
             }
             $468 = HEAP32[$141>>2]|0;
             FUNCTION_TABLE_viiii[$468 & 511]($_584$i,$1,$rest$sroa$0$13694$i,$rest$sroa$82$13657$i);
             $self$i1625$sroa$0$0$copyload$i = HEAP32[$_584$i>>2]|0;
             $switch3$i1626$i = ($self$i1625$sroa$0$0$copyload$i|0)==(1);
             if ($switch3$i1626$i) {
              label = 369;
              break L78;
             }
            }
           } while(0);
           $473 = ($196|0)==(0);
           if ($473) {
            break L4;
           } else {
            $first$0$off03734$i = 0;$inner$sroa$0$13736$i = $$pre$phi$i2908$iZ2D;$inner$sroa$12$13735$i = $196;
           }
          }
          switch (label|0) {
           case 64: {
            $self$i813$sroa$4$0$$sroa_idx2775$i = ((($_107$i)) + 4|0);
            $self$i813$sroa$4$0$copyload$i = HEAP32[$self$i813$sroa$4$0$$sroa_idx2775$i>>2]|0;
            $self$i813$sroa$5$0$$sroa_idx2777$i = ((($_107$i)) + 8|0);
            $self$i813$sroa$5$0$copyload$i = HEAP32[$self$i813$sroa$5$0$$sroa_idx2777$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i813$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i813$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 78: {
            __ZN4core9panicking5panic17hee9f4f8d26a91787E(5548);
            // unreachable;
            break;
           }
           case 85: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($inner$sroa$0$13736$i,$inner$sroa$12$13735$i,0,$182);
            // unreachable;
            break;
           }
           case 87: {
            $189 = ($self$sroa$0$0$copyload$i881$i&65535) >>> 8;
            $190 = $189&255;
            __ZN4core6result13unwrap_failed17hda611ac9ea1cf678E($190);
            // unreachable;
            break;
           }
           case 92: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$03648$i,$rest$sroa$82$03647$i,$self$sroa$77$0$copyload$i$i,$rest$sroa$82$03647$i);
            // unreachable;
            break;
           }
           case 100: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$03648$i,$rest$sroa$82$03647$lcssa3746$i,1,$rest$sroa$82$03647$lcssa3746$i);
            // unreachable;
            break;
           }
           case 103: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$03648$i,$self$sroa$77$0$copyload$i$i,1,$self$sroa$77$0$copyload$i$i);
            // unreachable;
            break;
           }
           case 112: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,1,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 132: {
            $self$i981$sroa$4$0$$sroa_idx2780$i = ((($_172$i)) + 4|0);
            $self$i981$sroa$4$0$copyload$i = HEAP32[$self$i981$sroa$4$0$$sroa_idx2780$i>>2]|0;
            $self$i981$sroa$5$0$$sroa_idx2782$i = ((($_172$i)) + 8|0);
            $self$i981$sroa$5$0$copyload$i = HEAP32[$self$i981$sroa$5$0$$sroa_idx2782$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i981$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i981$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 135: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,2,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 137: {
            $self$i988$sroa$4$0$$sroa_idx2785$i = ((($_188$i)) + 4|0);
            $self$i988$sroa$4$0$copyload$i = HEAP32[$self$i988$sroa$4$0$$sroa_idx2785$i>>2]|0;
            $self$i988$sroa$5$0$$sroa_idx2787$i = ((($_188$i)) + 8|0);
            $self$i988$sroa$5$0$copyload$i = HEAP32[$self$i988$sroa$5$0$$sroa_idx2787$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i988$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i988$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 140: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,1,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 165: {
            $self$i1055$sroa$4$0$$sroa_idx2790$i = ((($_208$i)) + 4|0);
            $self$i1055$sroa$4$0$copyload$i = HEAP32[$self$i1055$sroa$4$0$$sroa_idx2790$i>>2]|0;
            $self$i1055$sroa$5$0$$sroa_idx2792$i = ((($_208$i)) + 8|0);
            $self$i1055$sroa$5$0$copyload$i = HEAP32[$self$i1055$sroa$5$0$$sroa_idx2792$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1055$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1055$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 168: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,4,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 175: {
            $self$i1097$sroa$4$0$$sroa_idx2795$i = ((($_229$i)) + 4|0);
            $self$i1097$sroa$4$0$copyload$i = HEAP32[$self$i1097$sroa$4$0$$sroa_idx2795$i>>2]|0;
            $self$i1097$sroa$5$0$$sroa_idx2797$i = ((($_229$i)) + 8|0);
            $self$i1097$sroa$5$0$copyload$i = HEAP32[$self$i1097$sroa$5$0$$sroa_idx2797$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1097$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1097$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 178: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,4,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 185: {
            $self$i1130$sroa$4$0$$sroa_idx2800$i = ((($_250$i)) + 4|0);
            $self$i1130$sroa$4$0$copyload$i = HEAP32[$self$i1130$sroa$4$0$$sroa_idx2800$i>>2]|0;
            $self$i1130$sroa$5$0$$sroa_idx2802$i = ((($_250$i)) + 8|0);
            $self$i1130$sroa$5$0$copyload$i = HEAP32[$self$i1130$sroa$5$0$$sroa_idx2802$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1130$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1130$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 188: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,4,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 195: {
            $self$i1155$sroa$4$0$$sroa_idx2805$i = ((($_271$i)) + 4|0);
            $self$i1155$sroa$4$0$copyload$i = HEAP32[$self$i1155$sroa$4$0$$sroa_idx2805$i>>2]|0;
            $self$i1155$sroa$5$0$$sroa_idx2807$i = ((($_271$i)) + 8|0);
            $self$i1155$sroa$5$0$copyload$i = HEAP32[$self$i1155$sroa$5$0$$sroa_idx2807$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1155$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1155$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 198: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,4,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 205: {
            $self$i1173$sroa$4$0$$sroa_idx2810$i = ((($_292$i)) + 4|0);
            $self$i1173$sroa$4$0$copyload$i = HEAP32[$self$i1173$sroa$4$0$$sroa_idx2810$i>>2]|0;
            $self$i1173$sroa$5$0$$sroa_idx2812$i = ((($_292$i)) + 8|0);
            $self$i1173$sroa$5$0$copyload$i = HEAP32[$self$i1173$sroa$5$0$$sroa_idx2812$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1173$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1173$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 208: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,4,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 215: {
            $self$i1190$sroa$4$0$$sroa_idx2815$i = ((($_313$i)) + 4|0);
            $self$i1190$sroa$4$0$copyload$i = HEAP32[$self$i1190$sroa$4$0$$sroa_idx2815$i>>2]|0;
            $self$i1190$sroa$5$0$$sroa_idx2817$i = ((($_313$i)) + 8|0);
            $self$i1190$sroa$5$0$copyload$i = HEAP32[$self$i1190$sroa$5$0$$sroa_idx2817$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1190$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1190$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 218: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,4,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 225: {
            $self$i1208$sroa$4$0$$sroa_idx2820$i = ((($_334$i)) + 4|0);
            $self$i1208$sroa$4$0$copyload$i = HEAP32[$self$i1208$sroa$4$0$$sroa_idx2820$i>>2]|0;
            $self$i1208$sroa$5$0$$sroa_idx2822$i = ((($_334$i)) + 8|0);
            $self$i1208$sroa$5$0$copyload$i = HEAP32[$self$i1208$sroa$5$0$$sroa_idx2822$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1208$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1208$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 228: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,4,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 236: {
            $self$i1225$sroa$4$0$$sroa_idx2825$i = ((($_355$i)) + 4|0);
            $self$i1225$sroa$4$0$copyload$i = HEAP32[$self$i1225$sroa$4$0$$sroa_idx2825$i>>2]|0;
            $self$i1225$sroa$5$0$$sroa_idx2827$i = ((($_355$i)) + 8|0);
            $self$i1225$sroa$5$0$copyload$i = HEAP32[$self$i1225$sroa$5$0$$sroa_idx2827$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1225$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1225$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 241: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,3,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 249: {
            $self$i1259$sroa$4$0$$sroa_idx2830$i = ((($_376$i)) + 4|0);
            $self$i1259$sroa$4$0$copyload$i = HEAP32[$self$i1259$sroa$4$0$$sroa_idx2830$i>>2]|0;
            $self$i1259$sroa$5$0$$sroa_idx2832$i = ((($_376$i)) + 8|0);
            $self$i1259$sroa$5$0$copyload$i = HEAP32[$self$i1259$sroa$5$0$$sroa_idx2832$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1259$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1259$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 254: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,5,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 262: {
            $self$i1300$sroa$4$0$$sroa_idx2835$i = ((($_397$i)) + 4|0);
            $self$i1300$sroa$4$0$copyload$i = HEAP32[$self$i1300$sroa$4$0$$sroa_idx2835$i>>2]|0;
            $self$i1300$sroa$5$0$$sroa_idx2837$i = ((($_397$i)) + 8|0);
            $self$i1300$sroa$5$0$copyload$i = HEAP32[$self$i1300$sroa$5$0$$sroa_idx2837$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1300$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1300$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 267: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,5,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 275: {
            $self$i1342$sroa$4$0$$sroa_idx2840$i = ((($_418$i)) + 4|0);
            $self$i1342$sroa$4$0$copyload$i = HEAP32[$self$i1342$sroa$4$0$$sroa_idx2840$i>>2]|0;
            $self$i1342$sroa$5$0$$sroa_idx2842$i = ((($_418$i)) + 8|0);
            $self$i1342$sroa$5$0$copyload$i = HEAP32[$self$i1342$sroa$5$0$$sroa_idx2842$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1342$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1342$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 280: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,5,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 288: {
            $self$i1376$sroa$4$0$$sroa_idx2845$i = ((($_439$i)) + 4|0);
            $self$i1376$sroa$4$0$copyload$i = HEAP32[$self$i1376$sroa$4$0$$sroa_idx2845$i>>2]|0;
            $self$i1376$sroa$5$0$$sroa_idx2847$i = ((($_439$i)) + 8|0);
            $self$i1376$sroa$5$0$copyload$i = HEAP32[$self$i1376$sroa$5$0$$sroa_idx2847$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1376$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1376$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 293: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,5,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 301: {
            $self$i1417$sroa$4$0$$sroa_idx2850$i = ((($_460$i)) + 4|0);
            $self$i1417$sroa$4$0$copyload$i = HEAP32[$self$i1417$sroa$4$0$$sroa_idx2850$i>>2]|0;
            $self$i1417$sroa$5$0$$sroa_idx2852$i = ((($_460$i)) + 8|0);
            $self$i1417$sroa$5$0$copyload$i = HEAP32[$self$i1417$sroa$5$0$$sroa_idx2852$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1417$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1417$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 306: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,5,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 314: {
            $self$i1459$sroa$4$0$$sroa_idx2855$i = ((($_481$i)) + 4|0);
            $self$i1459$sroa$4$0$copyload$i = HEAP32[$self$i1459$sroa$4$0$$sroa_idx2855$i>>2]|0;
            $self$i1459$sroa$5$0$$sroa_idx2857$i = ((($_481$i)) + 8|0);
            $self$i1459$sroa$5$0$copyload$i = HEAP32[$self$i1459$sroa$5$0$$sroa_idx2857$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1459$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1459$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 319: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,5,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 327: {
            $self$i1493$sroa$4$0$$sroa_idx2860$i = ((($_502$i)) + 4|0);
            $self$i1493$sroa$4$0$copyload$i = HEAP32[$self$i1493$sroa$4$0$$sroa_idx2860$i>>2]|0;
            $self$i1493$sroa$5$0$$sroa_idx2862$i = ((($_502$i)) + 8|0);
            $self$i1493$sroa$5$0$copyload$i = HEAP32[$self$i1493$sroa$5$0$$sroa_idx2862$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1493$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1493$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 332: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,5,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 340: {
            $self$i1534$sroa$4$0$$sroa_idx2865$i = ((($_523$i)) + 4|0);
            $self$i1534$sroa$4$0$copyload$i = HEAP32[$self$i1534$sroa$4$0$$sroa_idx2865$i>>2]|0;
            $self$i1534$sroa$5$0$$sroa_idx2867$i = ((($_523$i)) + 8|0);
            $self$i1534$sroa$5$0$copyload$i = HEAP32[$self$i1534$sroa$5$0$$sroa_idx2867$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1534$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1534$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 345: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,5,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 353: {
            $self$i1576$sroa$4$0$$sroa_idx2870$i = ((($_544$i)) + 4|0);
            $self$i1576$sroa$4$0$copyload$i = HEAP32[$self$i1576$sroa$4$0$$sroa_idx2870$i>>2]|0;
            $self$i1576$sroa$5$0$$sroa_idx2872$i = ((($_544$i)) + 8|0);
            $self$i1576$sroa$5$0$copyload$i = HEAP32[$self$i1576$sroa$5$0$$sroa_idx2872$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1576$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1576$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 358: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,5,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 362: {
            $self$i1610$sroa$4$0$$sroa_idx2875$i = ((($_565$i)) + 4|0);
            $self$i1610$sroa$4$0$copyload$i = HEAP32[$self$i1610$sroa$4$0$$sroa_idx2875$i>>2]|0;
            $self$i1610$sroa$5$0$$sroa_idx2877$i = ((($_565$i)) + 8|0);
            $self$i1610$sroa$5$0$copyload$i = HEAP32[$self$i1610$sroa$5$0$$sroa_idx2877$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1610$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1610$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 367: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,5,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
           case 369: {
            $self$i1625$sroa$4$0$$sroa_idx2880$i = ((($_584$i)) + 4|0);
            $self$i1625$sroa$4$0$copyload$i = HEAP32[$self$i1625$sroa$4$0$$sroa_idx2880$i>>2]|0;
            $self$i1625$sroa$5$0$$sroa_idx2882$i = ((($_584$i)) + 8|0);
            $self$i1625$sroa$5$0$copyload$i = HEAP32[$self$i1625$sroa$5$0$$sroa_idx2882$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1625$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1625$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 375: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,0,$idx$0$i);
            // unreachable;
            break;
           }
           case 377: {
            $self$i1675$sroa$4$0$$sroa_idx2885$i = ((($_605$i)) + 4|0);
            $self$i1675$sroa$4$0$copyload$i = HEAP32[$self$i1675$sroa$4$0$$sroa_idx2885$i>>2]|0;
            $self$i1675$sroa$5$0$$sroa_idx2887$i = ((($_605$i)) + 8|0);
            $self$i1675$sroa$5$0$copyload$i = HEAP32[$self$i1675$sroa$5$0$$sroa_idx2887$i>>2]|0;
            $_46$sroa$29$0$ph$off0 = $self$i1675$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i1675$sroa$5$0$copyload$i;
            break L38;
            break;
           }
           case 382: {
            __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($rest$sroa$0$13694$i,$rest$sroa$82$13657$i,$idx$0$i,$rest$sroa$82$13657$i);
            // unreachable;
            break;
           }
          }
         } else {
          label = 59;
         }
        }
       } while(0);
       do {
        if ((label|0) == 59) {
         $142 = ((($2)) + 20|0);
         $143 = HEAP32[$142>>2]|0;
         FUNCTION_TABLE_viiii[$143 & 511]($_88$i,$1,$33,$self$sroa$6$0$copyload$i$i$i);
         $self$i$sroa$0$0$copyload$i = HEAP32[$_88$i>>2]|0;
         $switch3$i$i = ($self$i$sroa$0$0$copyload$i|0)==(1);
         if ($switch3$i$i) {
          $self$i$sroa$4$0$$sroa_idx2770$i = ((($_88$i)) + 4|0);
          $self$i$sroa$4$0$copyload$i = HEAP32[$self$i$sroa$4$0$$sroa_idx2770$i>>2]|0;
          $self$i$sroa$5$0$$sroa_idx2772$i = ((($_88$i)) + 8|0);
          $self$i$sroa$5$0$copyload$i = HEAP32[$self$i$sroa$5$0$$sroa_idx2772$i>>2]|0;
          $_46$sroa$29$0$ph$off0 = $self$i$sroa$4$0$copyload$i;$_46$sroa$29$0$ph$off32 = $self$i$sroa$5$0$copyload$i;
          break;
         } else {
          break L4;
         }
        }
       } while(0);
       HEAP32[$0>>2] = 1;
       $_3$sroa$0$0$$sroa_idx$i116 = ((($0)) + 4|0);
       $487 = $_3$sroa$0$0$$sroa_idx$i116;
       $488 = $487;
       HEAP32[$488>>2] = $_46$sroa$29$0$ph$off0;
       $489 = (($487) + 4)|0;
       $490 = $489;
       HEAP32[$490>>2] = $_46$sroa$29$0$ph$off32;
       break L1;
      }
     } else {
      label = 8;
     }
    }
   } while(0);
   do {
    if ((label|0) == 8) {
     HEAP32[$_58>>2] = 4984;
     $34 = ((($_58)) + 4|0);
     HEAP32[$34>>2] = 1;
     $_6$sroa$0$0$$sroa_idx$i = ((($_58)) + 8|0);
     HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
     $35 = ((($_58)) + 16|0);
     HEAP32[$35>>2] = 23968;
     $36 = ((($_58)) + 20|0);
     HEAP32[$36>>2] = 0;
     $37 = HEAP32[$25>>2]|0;
     FUNCTION_TABLE_viii[$37 & 511]($_56,$1,$_58);
     $self$i92$sroa$0$0$copyload = HEAP32[$_56>>2]|0;
     $switch3$i93 = ($self$i92$sroa$0$0$copyload|0)==(1);
     if ($switch3$i93) {
      $self$i92$sroa$4$0$$sroa_idx279 = ((($_56)) + 4|0);
      $self$i92$sroa$4$0$copyload = HEAP32[$self$i92$sroa$4$0$$sroa_idx279>>2]|0;
      $self$i92$sroa$5$0$$sroa_idx281 = ((($_56)) + 8|0);
      $self$i92$sroa$5$0$copyload = HEAP32[$self$i92$sroa$5$0$$sroa_idx281>>2]|0;
      HEAP32[$0>>2] = 1;
      $_3$sroa$0$0$$sroa_idx$i125 = ((($0)) + 4|0);
      $491 = $_3$sroa$0$0$$sroa_idx$i125;
      $492 = $491;
      HEAP32[$492>>2] = $self$i92$sroa$4$0$copyload;
      $493 = (($491) + 4)|0;
      $494 = $493;
      HEAP32[$494>>2] = $self$i92$sroa$5$0$copyload;
      break L1;
     } else {
      break;
     }
    }
   } while(0);
   $485 = ((($2)) + 20|0);
   $486 = HEAP32[$485>>2]|0;
   FUNCTION_TABLE_viiii[$486 & 511]($0,$1,15690,1);
   STACKTOP = sp;return;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZN50__LT__BP_mut_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h87e41aa3c11cf168E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_26$i$i = 0, $switch$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_26$i$i = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($1)) + 12|0);
 $4 = $3;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$1>>2]|0;
 $11 = (__ZN4core3fmt9Formatter9alternate17h6978e2e9692c03baE($1)|0);
 $12 = HEAP32[$1>>2]|0;
 if ($11) {
  $13 = $12 | 8;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$3>>2]|0;
  $switch$i$i = ($14|0)==(1);
  if ($switch$i$i) {
   $17 = $13;
  } else {
   HEAP32[$3>>2] = 1;
   $15 = ((($1)) + 16|0);
   HEAP32[$15>>2] = 10;
   $17 = $13;
  }
 } else {
  $17 = $12;
 }
 $16 = $17 | 4;
 HEAP32[$1>>2] = $16;
 HEAP32[$_26$i$i>>2] = $2;
 $18 = (__ZN4core3fmt3num55__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_usize_GT_3fmt17h1f3f900df185c5b8E($_26$i$i,$1)|0);
 $19 = $3;
 $20 = $19;
 HEAP32[$20>>2] = $6;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $9;
 HEAP32[$1>>2] = $10;
 STACKTOP = sp;return ($18|0);
}
function __ZN4core6result13unwrap_failed17hda611ac9ea1cf678E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_10 = sp + 40|0;
 $_5 = sp + 16|0;
 $error = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = 15972;
 $1 = ((($msg)) + 4|0);
 HEAP32[$1>>2] = 43;
 HEAP8[$error>>0] = $0;
 $2 = HEAP32[1395]|0;
 $3 = HEAP32[(5584)>>2]|0;
 $4 = $msg;
 $5 = $error;
 HEAP32[$_10>>2] = $4;
 $6 = ((($_10)) + 4|0);
 HEAP32[$6>>2] = (349);
 $7 = ((($_10)) + 8|0);
 HEAP32[$7>>2] = $5;
 $8 = ((($_10)) + 12|0);
 HEAP32[$8>>2] = (374);
 HEAP32[$_5>>2] = $2;
 $9 = ((($_5)) + 4|0);
 HEAP32[$9>>2] = $3;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $10 = ((($_5)) + 16|0);
 HEAP32[$10>>2] = $_10;
 $11 = ((($_5)) + 20|0);
 HEAP32[$11>>2] = 2;
 __ZN4core9panicking9panic_fmt17hbeea8425e52b5ca1E($_5,5568);
 // unreachable;
}
function __ZN3std10sys_common12thread_local9StaticKey9lazy_init17hb781edeaf6c88045E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0 = 0, $_10$0$copyload = 0, $_22$i = 0, $_22$i12 = 0, $_27$i = 0, $_4$0$$sroa_idx = 0, $_4$0$copyload = 0, $_6$sroa$0$0$$sroa_idx$i$i = 0, $_6$sroa$0$0$$sroa_idx$i$i17 = 0, $_7$i = 0, $_7$i15 = 0, $key$028 = 0, $key$i = 0, $key$i16 = 0, $left_val$i = 0;
 var $left_val$i14 = 0, $right_val$i = 0, $right_val$i13 = 0, $success = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $_22$i12 = sp + 40|0;
 $right_val$i13 = sp + 92|0;
 $left_val$i14 = sp + 88|0;
 $_7$i15 = sp + 84|0;
 $key$i16 = sp + 80|0;
 $_27$i = sp + 24|0;
 $_22$i = sp;
 $right_val$i = sp + 76|0;
 $left_val$i = sp + 72|0;
 $_7$i = sp + 68|0;
 $key$i = sp + 64|0;
 $_4$0$$sroa_idx = ((($0)) + 4|0);
 $_4$0$copyload = HEAP32[$_4$0$$sroa_idx>>2]|0;
 HEAP32[$key$i>>2] = 0;
 $1 = (_pthread_key_create(($key$i|0),($_4$0$copyload|0))|0);
 HEAP32[$_7$i>>2] = $1;
 HEAP32[$left_val$i>>2] = $_7$i;
 HEAP32[$right_val$i>>2] = 23952;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = $left_val$i;
  $4 = $right_val$i;
  HEAP32[$_27$i>>2] = $3;
  $5 = ((($_27$i)) + 4|0);
  HEAP32[$5>>2] = (375);
  $6 = ((($_27$i)) + 8|0);
  HEAP32[$6>>2] = $4;
  $7 = ((($_27$i)) + 12|0);
  HEAP32[$7>>2] = (375);
  HEAP32[$_22$i>>2] = 4724;
  $8 = ((($_22$i)) + 4|0);
  HEAP32[$8>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i$i = ((($_22$i)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i$i>>2] = 0;
  $9 = ((($_22$i)) + 16|0);
  HEAP32[$9>>2] = $_27$i;
  $10 = ((($_22$i)) + 20|0);
  HEAP32[$10>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17h089a948b9fd65060E($_22$i,4992);
  // unreachable;
 }
 $11 = HEAP32[$key$i>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  $_10$0$copyload = HEAP32[$_4$0$$sroa_idx>>2]|0;
  HEAP32[$key$i16>>2] = 0;
  $13 = (_pthread_key_create(($key$i16|0),($_10$0$copyload|0))|0);
  HEAP32[$_7$i15>>2] = $13;
  HEAP32[$left_val$i14>>2] = $_7$i15;
  HEAP32[$right_val$i13>>2] = 23952;
  $14 = ($13|0)==(0);
  if (!($14)) {
   $15 = $left_val$i14;
   $16 = $right_val$i13;
   HEAP32[$_27$i>>2] = $15;
   $17 = ((($_27$i)) + 4|0);
   HEAP32[$17>>2] = (375);
   $18 = ((($_27$i)) + 8|0);
   HEAP32[$18>>2] = $16;
   $19 = ((($_27$i)) + 12|0);
   HEAP32[$19>>2] = (375);
   HEAP32[$_22$i12>>2] = 4724;
   $20 = ((($_22$i12)) + 4|0);
   HEAP32[$20>>2] = 3;
   $_6$sroa$0$0$$sroa_idx$i$i17 = ((($_22$i12)) + 8|0);
   HEAP32[$_6$sroa$0$0$$sroa_idx$i$i17>>2] = 0;
   $21 = ((($_22$i12)) + 16|0);
   HEAP32[$21>>2] = $_27$i;
   $22 = ((($_22$i12)) + 20|0);
   HEAP32[$22>>2] = 2;
   __ZN3std9panicking15begin_panic_fmt17h089a948b9fd65060E($_22$i12,4992);
   // unreachable;
  }
  $23 = HEAP32[$key$i16>>2]|0;
  (_pthread_key_delete(0)|0);
  $24 = ($23|0)==(0);
  if ($24) {
   __ZN3std9panicking11begin_panic17h10fb5a0e6dedd3d3E(16113,26,5004);
   // unreachable;
  } else {
   $key$028 = $23;
  }
 } else {
  $key$028 = $11;
 }
 $25 = HEAP32[$0>>2]|0;if (($25|0) == 0) HEAP32[$0>>2] = $key$028;
 $success = ($25|0)==(0);
 if ($success) {
  $_0$0 = $key$028;
  STACKTOP = sp;return ($_0$0|0);
 }
 (_pthread_key_delete(($key$028|0))|0);
 $_0$0 = $25;
 STACKTOP = sp;return ($_0$0|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h7e3f5ca56b2fe355E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt3num50__LT_impl_u20_core__fmt__Debug_u20_for_u20_i32_GT_3fmt17h5dac7a75605532c3E($2,$1)|0);
 return ($3|0);
}
function __ZN3std6thread5local2os13destroy_value17h33fef26ab8ddde72E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i = 0, $_0$0$i$i8 = 0, $cond$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i$i$i = 0, $cond$i$i6 = 0, $switchtmp$i$i$i$i$i$i$i = 0;
 var $switchtmp$i$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $cond$i$i = ($2|0)==(0);
 if ($cond$i$i) {
  __THREW__ = 0;
  $3 = (invoke_ii(376,($1|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $20 = ___cxa_find_matching_catch_2()|0;
   $21 = tempRet0;
   $22 = ((($0)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $cond$i$i$i$i = ($23|0)==(1);
   if (!($cond$i$i$i$i)) {
    ___rust_deallocate($0,20,4);
    ___resumeException($20|0);
    // unreachable;
   }
   $24 = ((($0)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $switchtmp$i$i$i$i$i$i$i = ($25|0)==(0|0);
   if ($switchtmp$i$i$i$i$i$i$i) {
    ___rust_deallocate($0,20,4);
    ___resumeException($20|0);
    // unreachable;
   }
   $26 = ((($0)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[$27>>2]|0;
   FUNCTION_TABLE_vi[$28 & 511]($25);
   $29 = ((($27)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0);
   if ($31) {
    ___rust_deallocate($0,20,4);
    ___resumeException($20|0);
    // unreachable;
   }
   $32 = ((($27)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   ___rust_deallocate($25,$30,$33);
   ___rust_deallocate($0,20,4);
   ___resumeException($20|0);
   // unreachable;
  } else {
   $_0$0$i$i = $3;
  }
 } else {
  $_0$0$i$i = $2;
 }
 (_pthread_setspecific(($_0$0$i$i|0),((1)|0))|0);
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $cond$i$i$i$i$i = ($7|0)==(1);
 if ($cond$i$i$i$i$i) {
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $switchtmp$i$i$i$i$i$i$i$i = ($9|0)==(0|0);
  if (!($switchtmp$i$i$i$i$i$i$i$i)) {
   $10 = ((($0)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   FUNCTION_TABLE_vi[$12 & 511]($9);
   $13 = ((($11)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0);
   if (!($15)) {
    $16 = ((($11)) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    ___rust_deallocate($9,$14,$17);
   }
  }
 }
 ___rust_deallocate($0,20,4);
 $18 = HEAP32[$1>>2]|0;
 $cond$i$i6 = ($18|0)==(0);
 if (!($cond$i$i6)) {
  $_0$0$i$i8 = $18;
  (_pthread_setspecific(($_0$0$i$i8|0),(0|0))|0);
  return;
 }
 $19 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hb781edeaf6c88045E($1)|0);
 $_0$0$i$i8 = $19;
 (_pthread_setspecific(($_0$0$i$i8|0),(0|0))|0);
 return;
}
function __ZN4core6result13unwrap_failed17h4ce4542d05d0fa71E() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $error = sp + 48|0;
 $_10 = sp + 32|0;
 $_5 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = 16483;
 $0 = ((($msg)) + 4|0);
 HEAP32[$0>>2] = 24;
 $1 = HEAP32[1395]|0;
 $2 = HEAP32[(5584)>>2]|0;
 $3 = $msg;
 $4 = $error;
 HEAP32[$_10>>2] = $3;
 $5 = ((($_10)) + 4|0);
 HEAP32[$5>>2] = (349);
 $6 = ((($_10)) + 8|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($_10)) + 12|0);
 HEAP32[$7>>2] = (377);
 HEAP32[$_5>>2] = $1;
 $8 = ((($_5)) + 4|0);
 HEAP32[$8>>2] = $2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $9 = ((($_5)) + 16|0);
 HEAP32[$9>>2] = $_10;
 $10 = ((($_5)) + 20|0);
 HEAP32[$10>>2] = 2;
 __ZN4core9panicking9panic_fmt17hbeea8425e52b5ca1E($_5,5568);
 // unreachable;
}
function __ZN3std6thread6Thread3new17h2f25155421daeb91E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12$i$i$i$i = 0, $_12$i$i$sroa_raw_idx$i$i = 0;
 var $_13$i$i$i$i = 0, $_3$i$i$i = 0, $_3$i$i$i$i = 0, $_7$sroa$0$0$$sroa_idx$i = 0, $_8$sroa$0$0$$sroa_idx$i = 0, $_8$sroa$0$sroa$4$0$_8$sroa$0$0$$sroa_cast$sroa_idx68$i = 0, $_8$sroa$0$sroa$5$0$_8$sroa$0$0$$sroa_cast$sroa_idx70$i = 0, $_8$sroa$4$0$$sroa_idx$i = 0, $_8$sroa$5$0$$sroa_idx$i = 0, $_8$sroa$6$0$$sroa_idx$i = 0, $_8$sroa$7$0$$sroa_idx$i = 0, $_8$sroa$8$0$$sroa_idx$i = 0, $_8$sroa$9$0$$sroa_idx$i = 0, $_9$i$i$i = 0, $attr$i$i$i = 0, $bytes$sroa$0$0$copyload$i$i$i$i = 0, $bytes$sroa$7$0$$sroa_idx17$i$i$i$i = 0, $bytes$sroa$7$0$$sroa_idx18$i$i$i$i = 0, $bytes$sroa$7$0$copyload$i$i$i$i = 0, $bytes$sroa$8$0$$sroa_idx23$i$i$i$i = 0;
 var $bytes$sroa$8$0$$sroa_idx24$i$i$i$i = 0, $bytes$sroa$8$0$copyload$i$i$i$i = 0, $cname$sroa$0$0 = 0, $cname$sroa$5$0 = 0, $e$sroa$4$0$$sroa_idx22$i$i$i = 0, $e$sroa$5$0$$sroa_idx24$i$i$i = 0, $e$sroa$6$0$$sroa_idx26$i$i$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $name$sroa$0$sroa$0$0$copyload = 0, $name$sroa$0$sroa$4$0$copyload = 0, $name$sroa$0$sroa$4$0$name$sroa$0$0$$sroa_cast$sroa_idx48 = 0, $name$sroa$0$sroa$5$0$copyload = 0, $name$sroa$0$sroa$5$0$name$sroa$0$0$$sroa_cast$sroa_idx50 = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$0$1$ph = 0, $personalityslot$sroa$6$0 = 0, $personalityslot$sroa$6$1$ph = 0, $switch3tmp$i = 0, $switchtmp$i = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $attr$i$i$i = sp + 72|0;
 $_9$i$i$i = sp + 56|0;
 $_13$i$i$i$i = sp + 40|0;
 $_12$i$i$i$i = sp + 32|0;
 $_3$i$i$i$i = sp + 16|0;
 $_3$i$i$i = sp;
 $name$sroa$0$sroa$0$0$copyload = HEAP32[$0>>2]|0;
 $switch3tmp$i = ($name$sroa$0$sroa$0$0$copyload|0)==(0|0);
 L1: do {
  if ($switch3tmp$i) {
   $cname$sroa$0$0 = 0;$cname$sroa$5$0 = 0;
  } else {
   $name$sroa$0$sroa$5$0$name$sroa$0$0$$sroa_cast$sroa_idx50 = ((($0)) + 8|0);
   $name$sroa$0$sroa$5$0$copyload = HEAP32[$name$sroa$0$sroa$5$0$name$sroa$0$0$$sroa_cast$sroa_idx50>>2]|0;
   $name$sroa$0$sroa$4$0$name$sroa$0$0$$sroa_cast$sroa_idx48 = ((($0)) + 4|0);
   $name$sroa$0$sroa$4$0$copyload = HEAP32[$name$sroa$0$sroa$4$0$name$sroa$0$0$$sroa_cast$sroa_idx48>>2]|0;
   HEAP32[$_3$i$i$i$i>>2] = $name$sroa$0$sroa$0$0$copyload;
   $_8$sroa$0$sroa$4$0$_8$sroa$0$0$$sroa_cast$sroa_idx68$i = ((($_3$i$i$i$i)) + 4|0);
   HEAP32[$_8$sroa$0$sroa$4$0$_8$sroa$0$0$$sroa_cast$sroa_idx68$i>>2] = $name$sroa$0$sroa$4$0$copyload;
   $_8$sroa$0$sroa$5$0$_8$sroa$0$0$$sroa_cast$sroa_idx70$i = ((($_3$i$i$i$i)) + 8|0);
   HEAP32[$_8$sroa$0$sroa$5$0$_8$sroa$0$0$$sroa_cast$sroa_idx70$i>>2] = $name$sroa$0$sroa$5$0$copyload;
   __THREW__ = 0;
   invoke_vii(378,($_3$i$i$i|0),($_3$i$i$i$i|0));
   $1 = __THREW__; __THREW__ = 0;
   $2 = $1&1;
   do {
    if (!($2)) {
     $bytes$sroa$0$0$copyload$i$i$i$i = HEAP32[$_3$i$i$i>>2]|0;
     $bytes$sroa$7$0$$sroa_idx17$i$i$i$i = ((($_3$i$i$i)) + 4|0);
     $bytes$sroa$7$0$copyload$i$i$i$i = HEAP32[$bytes$sroa$7$0$$sroa_idx17$i$i$i$i>>2]|0;
     $bytes$sroa$8$0$$sroa_idx23$i$i$i$i = ((($_3$i$i$i)) + 8|0);
     $bytes$sroa$8$0$copyload$i$i$i$i = HEAP32[$bytes$sroa$8$0$$sroa_idx23$i$i$i$i>>2]|0;
     $3 = (_memchr($bytes$sroa$0$0$copyload$i$i$i$i,0,$bytes$sroa$8$0$copyload$i$i$i$i)|0);
     $4 = ($3|0)==(0|0);
     if (!($4)) {
      $5 = $3;
      $6 = $bytes$sroa$0$0$copyload$i$i$i$i;
      $7 = (($5) - ($6))|0;
      HEAP32[$_9$i$i$i>>2] = $7;
      $e$sroa$4$0$$sroa_idx22$i$i$i = ((($_9$i$i$i)) + 4|0);
      HEAP32[$e$sroa$4$0$$sroa_idx22$i$i$i>>2] = $6;
      $e$sroa$5$0$$sroa_idx24$i$i$i = ((($_9$i$i$i)) + 8|0);
      HEAP32[$e$sroa$5$0$$sroa_idx24$i$i$i>>2] = $bytes$sroa$7$0$copyload$i$i$i$i;
      $e$sroa$6$0$$sroa_idx26$i$i$i = ((($_9$i$i$i)) + 12|0);
      HEAP32[$e$sroa$6$0$$sroa_idx26$i$i$i>>2] = $bytes$sroa$8$0$copyload$i$i$i$i;
      __THREW__ = 0;
      invoke_viii(379,(16254|0),47,($_9$i$i$i|0));
      $8 = __THREW__; __THREW__ = 0;
      break;
     }
     HEAP32[$_13$i$i$i$i>>2] = $bytes$sroa$0$0$copyload$i$i$i$i;
     $bytes$sroa$7$0$$sroa_idx18$i$i$i$i = ((($_13$i$i$i$i)) + 4|0);
     HEAP32[$bytes$sroa$7$0$$sroa_idx18$i$i$i$i>>2] = $bytes$sroa$7$0$copyload$i$i$i$i;
     $bytes$sroa$8$0$$sroa_idx24$i$i$i$i = ((($_13$i$i$i$i)) + 8|0);
     HEAP32[$bytes$sroa$8$0$$sroa_idx24$i$i$i$i>>2] = $bytes$sroa$8$0$copyload$i$i$i$i;
     __THREW__ = 0;
     invoke_vii(380,($_12$i$i$i$i|0),($_13$i$i$i$i|0));
     $9 = __THREW__; __THREW__ = 0;
     $10 = $9&1;
     if (!($10)) {
      $11 = HEAP32[$_12$i$i$i$i>>2]|0;
      $_12$i$i$sroa_raw_idx$i$i = ((($_12$i$i$i$i)) + 4|0);
      $12 = HEAP32[$_12$i$i$sroa_raw_idx$i$i>>2]|0;
      $cname$sroa$0$0 = $11;$cname$sroa$5$0 = $12;
      break L1;
     }
    }
   } while(0);
   $55 = ___cxa_find_matching_catch_2()|0;
   $56 = tempRet0;
   $personalityslot$sroa$0$0 = $55;$personalityslot$sroa$6$0 = $56;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
 } while(0);
 (_pthread_mutex_lock(((23760)|0))|0);
 $13 = 23784;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15|0)==(-1);
 $20 = ($18|0)==(-1);
 $21 = $19 & $20;
 do {
  if ($21) {
   (_pthread_mutex_unlock(((23760)|0))|0);
   __THREW__ = 0;
   invoke_viii(353,(16301|0),55,(5016|0));
   $22 = __THREW__; __THREW__ = 0;
   label = 24;
  } else {
   $23 = (_i64Add(($15|0),($18|0),1,0)|0);
   $24 = tempRet0;
   $25 = 23784;
   $26 = $25;
   HEAP32[$26>>2] = $23;
   $27 = (($25) + 4)|0;
   $28 = $27;
   HEAP32[$28>>2] = $24;
   (_pthread_mutex_unlock(((23760)|0))|0);
   $29 = (___rust_allocate(24,8)|0);
   $30 = ($29|0)==(0|0);
   if ($30) {
    __THREW__ = 0;
    invoke_v(367);
    $31 = __THREW__; __THREW__ = 0;
    label = 24;
    break;
   }
   ;HEAP32[$29>>2]=HEAP32[(23792)>>2]|0;HEAP32[$29+4>>2]=HEAP32[(23792)+4>>2]|0;HEAP32[$29+8>>2]=HEAP32[(23792)+8>>2]|0;HEAP32[$29+12>>2]=HEAP32[(23792)+12>>2]|0;HEAP32[$29+16>>2]=HEAP32[(23792)+16>>2]|0;HEAP32[$29+20>>2]=HEAP32[(23792)+20>>2]|0;
   (_pthread_mutexattr_init(($attr$i$i$i|0))|0);
   (_pthread_mutexattr_settype(($attr$i$i$i|0),0)|0);
   (_pthread_mutex_init(($29|0),($attr$i$i$i|0))|0);
   (_pthread_mutexattr_destroy(($attr$i$i$i|0))|0);
   $32 = (___rust_allocate(48,8)|0);
   $33 = ($32|0)==(0|0);
   do {
    if ($33) {
     __THREW__ = 0;
     invoke_v(367);
     $34 = __THREW__; __THREW__ = 0;
     $35 = ___cxa_find_matching_catch_2()|0;
     $36 = tempRet0;
     $eh$lpad$body$index2Z2D = $36;$eh$lpad$body$indexZ2D = $35;
    } else {
     dest=$32; src=(23816); stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     __THREW__ = 0;
     invoke_vi(381,($32|0));
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      $37 = ___cxa_find_matching_catch_2()|0;
      $38 = tempRet0;
      (_pthread_cond_destroy(($32|0))|0);
      ___rust_deallocate($32,48,8);
      $eh$lpad$body$index2Z2D = $38;$eh$lpad$body$indexZ2D = $37;
      break;
     }
     $41 = (___rust_allocate(40,8)|0);
     $42 = ($41|0)==(0|0);
     if (!($42)) {
      $46 = $32;
      $47 = $29;
      HEAP32[$41>>2] = 1;
      $_7$sroa$0$0$$sroa_idx$i = ((($41)) + 4|0);
      HEAP32[$_7$sroa$0$0$$sroa_idx$i>>2] = 1;
      $_8$sroa$0$0$$sroa_idx$i = ((($41)) + 8|0);
      HEAP32[$_8$sroa$0$0$$sroa_idx$i>>2] = $cname$sroa$0$0;
      $_8$sroa$4$0$$sroa_idx$i = ((($41)) + 12|0);
      HEAP32[$_8$sroa$4$0$$sroa_idx$i>>2] = $cname$sroa$5$0;
      $_8$sroa$5$0$$sroa_idx$i = ((($41)) + 16|0);
      $48 = $_8$sroa$5$0$$sroa_idx$i;
      $49 = $48;
      HEAP32[$49>>2] = $15;
      $50 = (($48) + 4)|0;
      $51 = $50;
      HEAP32[$51>>2] = $18;
      $_8$sroa$6$0$$sroa_idx$i = ((($41)) + 24|0);
      HEAP32[$_8$sroa$6$0$$sroa_idx$i>>2] = $47;
      $_8$sroa$7$0$$sroa_idx$i = ((($41)) + 28|0);
      HEAP32[$_8$sroa$7$0$$sroa_idx$i>>2] = 0;
      $_8$sroa$8$0$$sroa_idx$i = ((($41)) + 32|0);
      HEAP32[$_8$sroa$8$0$$sroa_idx$i>>2] = $46;
      $_8$sroa$9$0$$sroa_idx$i = ((($41)) + 36|0);
      HEAP32[$_8$sroa$9$0$$sroa_idx$i>>2] = 0;
      $52 = $41;
      STACKTOP = sp;return ($52|0);
     }
     __THREW__ = 0;
     invoke_v(367);
     $43 = __THREW__; __THREW__ = 0;
     $44 = ___cxa_find_matching_catch_2()|0;
     $45 = tempRet0;
     $personalityslot$sroa$0$0 = $44;$personalityslot$sroa$6$0 = $45;
     ___resumeException($personalityslot$sroa$0$0|0);
     // unreachable;
    }
   } while(0);
   (_pthread_mutex_destroy(($29|0))|0);
   ___rust_deallocate($29,24,8);
   $personalityslot$sroa$0$1$ph = $eh$lpad$body$indexZ2D;$personalityslot$sroa$6$1$ph = $eh$lpad$body$index2Z2D;
  }
 } while(0);
 if ((label|0) == 24) {
  $57 = ___cxa_find_matching_catch_2()|0;
  $58 = tempRet0;
  $personalityslot$sroa$0$1$ph = $57;$personalityslot$sroa$6$1$ph = $58;
 }
 $53 = $cname$sroa$0$0;
 $switchtmp$i = ($cname$sroa$0$0|0)==(0);
 if ($switchtmp$i) {
  $personalityslot$sroa$0$0 = $personalityslot$sroa$0$1$ph;$personalityslot$sroa$6$0 = $personalityslot$sroa$6$1$ph;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 HEAP8[$53>>0] = 0;
 $54 = ($cname$sroa$5$0|0)==(0);
 if ($54) {
  $personalityslot$sroa$0$0 = $personalityslot$sroa$0$1$ph;$personalityslot$sroa$6$0 = $personalityslot$sroa$6$1$ph;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 ___rust_deallocate($53,$cname$sroa$5$0,1);
 $personalityslot$sroa$0$0 = $personalityslot$sroa$0$1$ph;$personalityslot$sroa$6$0 = $personalityslot$sroa$6$1$ph;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
 return (0)|0;
}
function __ZN4core6result13unwrap_failed17h32cac3d896be6be8E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_5 = 0;
 var $_6$sroa$0$0$$sroa_idx$i = 0, $error = 0, $msg = 0, $not$$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_10 = sp + 48|0;
 $_5 = sp + 24|0;
 $error = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = $0;
 $3 = ((($msg)) + 4|0);
 HEAP32[$3>>2] = $1;
 ;HEAP32[$error>>2]=HEAP32[$2>>2]|0;HEAP32[$error+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$error+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$error+12>>2]=HEAP32[$2+12>>2]|0;
 $4 = HEAP32[1395]|0;
 $5 = HEAP32[(5584)>>2]|0;
 $6 = $msg;
 $7 = $error;
 HEAP32[$_10>>2] = $6;
 $8 = ((($_10)) + 4|0);
 HEAP32[$8>>2] = (349);
 $9 = ((($_10)) + 8|0);
 HEAP32[$9>>2] = $7;
 $10 = ((($_10)) + 12|0);
 HEAP32[$10>>2] = (129);
 HEAP32[$_5>>2] = $4;
 $11 = ((($_5)) + 4|0);
 HEAP32[$11>>2] = $5;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $12 = ((($_5)) + 16|0);
 HEAP32[$12>>2] = $_10;
 $13 = ((($_5)) + 20|0);
 HEAP32[$13>>2] = 2;
 __THREW__ = 0;
 invoke_vii(96,($_5|0),(5568|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = ___cxa_find_matching_catch_2()|0;
 $16 = tempRet0;
 $17 = ((($error)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $not$$i$i$i$i$i = ($18|0)==(0);
 if ($not$$i$i$i$i$i) {
  ___resumeException($15|0);
  // unreachable;
 }
 $19 = ((($error)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 ___rust_deallocate($20,$18,1);
 ___resumeException($15|0);
 // unreachable;
}
function __ZN3std3ffi5c_str7CString18from_vec_unchecked17h1f03be756c19fa64E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i = 0, $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_8 = 0, $not$$i$i$i$i = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp;
 $_8 = sp + 24|0;
 $v = sp + 8|0;
 ;HEAP32[$v>>2]=HEAP32[$1>>2]|0;HEAP32[$v+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$v+8>>2]=HEAP32[$1+8>>2]|0;
 __THREW__ = 0;
 invoke_vii(382,($v|0),1);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   $6 = ((($v)) + 8|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($v)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7|0)==($9|0);
   if ($10) {
    __THREW__ = 0;
    invoke_vi(383,($v|0));
    $11 = __THREW__; __THREW__ = 0;
    $12 = $11&1;
    if ($12) {
     break;
    }
    $$pre$i = HEAP32[$6>>2]|0;
    $15 = $$pre$i;
   } else {
    $15 = $7;
   }
   $13 = HEAP32[$v>>2]|0;
   $14 = (($13) + ($15)|0);
   HEAP8[$14>>0] = 0;
   $16 = (($15) + 1)|0;
   HEAP32[$6>>2] = $16;
   ;HEAP32[$_8>>2]=HEAP32[$v>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$v+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$v+8>>2]|0;
   __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_16into_boxed_slice17h65e8f26d8dd7c84bE($2,$_8);
   $$sreg$field = HEAP32[$2>>2]|0;
   $$sreg$index1 = ((($2)) + 4|0);
   $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
   HEAP32[$0>>2] = $$sreg$field;
   $17 = ((($0)) + 4|0);
   HEAP32[$17>>2] = $$sreg$field2;
   STACKTOP = sp;return;
  }
 } while(0);
 $5 = ___cxa_find_matching_catch_2()|0;
 $18 = tempRet0;
 $19 = ((($v)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $not$$i$i$i$i = ($20|0)==(0);
 if ($not$$i$i$i$i) {
  ___resumeException($5|0);
  // unreachable;
 }
 $21 = HEAP32[$v>>2]|0;
 ___rust_deallocate($21,$20,1);
 ___resumeException($5|0);
 // unreachable;
}
function __ZN3std3sys3imp7condvar7Condvar4init17h21ae92b74c1c3d7cE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $_127 = 0, $_132 = 0, $_20 = 0, $_25 = 0, $_55 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_6$sroa$0$0$$sroa_idx$i26 = 0, $_6$sroa$0$0$$sroa_idx$i27 = 0, $_6$sroa$0$0$$sroa_idx$i28 = 0, $_60 = 0, $_92 = 0, $_97 = 0, $attr = 0, $left_val = 0, $left_val2 = 0, $left_val5 = 0, $left_val8 = 0, $r = 0, $r1 = 0, $r4 = 0;
 var $r7 = 0, $right_val = 0, $right_val3 = 0, $right_val6 = 0, $right_val9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $_132 = sp + 152|0;
 $_127 = sp + 128|0;
 $right_val9 = sp + 212|0;
 $left_val8 = sp + 208|0;
 $r7 = sp + 204|0;
 $_97 = sp + 112|0;
 $_92 = sp + 88|0;
 $right_val6 = sp + 200|0;
 $left_val5 = sp + 196|0;
 $r4 = sp + 192|0;
 $_60 = sp + 72|0;
 $_55 = sp + 48|0;
 $right_val3 = sp + 188|0;
 $left_val2 = sp + 184|0;
 $r1 = sp + 180|0;
 $_25 = sp + 32|0;
 $_20 = sp + 8|0;
 $right_val = sp + 176|0;
 $left_val = sp + 172|0;
 $r = sp + 168|0;
 $attr = sp;
 $1 = (_pthread_condattr_init(($attr|0))|0);
 HEAP32[$r>>2] = $1;
 HEAP32[$left_val>>2] = $r;
 HEAP32[$right_val>>2] = 23952;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = $left_val;
  $4 = $right_val;
  HEAP32[$_25>>2] = $3;
  $5 = ((($_25)) + 4|0);
  HEAP32[$5>>2] = (375);
  $6 = ((($_25)) + 8|0);
  HEAP32[$6>>2] = $4;
  $7 = ((($_25)) + 12|0);
  HEAP32[$7>>2] = (375);
  HEAP32[$_20>>2] = 4724;
  $8 = ((($_20)) + 4|0);
  HEAP32[$8>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i = ((($_20)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
  $9 = ((($_20)) + 16|0);
  HEAP32[$9>>2] = $_25;
  $10 = ((($_20)) + 20|0);
  HEAP32[$10>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17h089a948b9fd65060E($_20,5028);
  // unreachable;
 }
 $11 = (_pthread_condattr_setclock(($attr|0),1)|0);
 HEAP32[$r1>>2] = $11;
 HEAP32[$left_val2>>2] = $r1;
 HEAP32[$right_val3>>2] = 23952;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $13 = $left_val2;
  $14 = $right_val3;
  HEAP32[$_60>>2] = $13;
  $15 = ((($_60)) + 4|0);
  HEAP32[$15>>2] = (375);
  $16 = ((($_60)) + 8|0);
  HEAP32[$16>>2] = $14;
  $17 = ((($_60)) + 12|0);
  HEAP32[$17>>2] = (375);
  HEAP32[$_55>>2] = 4724;
  $18 = ((($_55)) + 4|0);
  HEAP32[$18>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i26 = ((($_55)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i26>>2] = 0;
  $19 = ((($_55)) + 16|0);
  HEAP32[$19>>2] = $_60;
  $20 = ((($_55)) + 20|0);
  HEAP32[$20>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17h089a948b9fd65060E($_55,5040);
  // unreachable;
 }
 $21 = (_pthread_cond_init(($0|0),($attr|0))|0);
 HEAP32[$r4>>2] = $21;
 HEAP32[$left_val5>>2] = $r4;
 HEAP32[$right_val6>>2] = 23952;
 $22 = ($21|0)==(0);
 if (!($22)) {
  $23 = $left_val5;
  $24 = $right_val6;
  HEAP32[$_97>>2] = $23;
  $25 = ((($_97)) + 4|0);
  HEAP32[$25>>2] = (375);
  $26 = ((($_97)) + 8|0);
  HEAP32[$26>>2] = $24;
  $27 = ((($_97)) + 12|0);
  HEAP32[$27>>2] = (375);
  HEAP32[$_92>>2] = 4724;
  $28 = ((($_92)) + 4|0);
  HEAP32[$28>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i27 = ((($_92)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i27>>2] = 0;
  $29 = ((($_92)) + 16|0);
  HEAP32[$29>>2] = $_97;
  $30 = ((($_92)) + 20|0);
  HEAP32[$30>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17h089a948b9fd65060E($_92,5052);
  // unreachable;
 }
 $31 = (_pthread_condattr_destroy(($attr|0))|0);
 HEAP32[$r7>>2] = $31;
 HEAP32[$left_val8>>2] = $r7;
 HEAP32[$right_val9>>2] = 23952;
 $32 = ($31|0)==(0);
 if ($32) {
  STACKTOP = sp;return;
 } else {
  $33 = $left_val8;
  $34 = $right_val9;
  HEAP32[$_132>>2] = $33;
  $35 = ((($_132)) + 4|0);
  HEAP32[$35>>2] = (375);
  $36 = ((($_132)) + 8|0);
  HEAP32[$36>>2] = $34;
  $37 = ((($_132)) + 12|0);
  HEAP32[$37>>2] = (375);
  HEAP32[$_127>>2] = 4724;
  $38 = ((($_127)) + 4|0);
  HEAP32[$38>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i28 = ((($_127)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i28>>2] = 0;
  $39 = ((($_127)) + 16|0);
  HEAP32[$39>>2] = $_132;
  $40 = ((($_127)) + 20|0);
  HEAP32[$40>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17h089a948b9fd65060E($_127,5064);
  // unreachable;
 }
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_13reserve_exact17h512524501172e6e4E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$overflow = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)<($1>>>0);
 if (!($7)) {
  return;
 }
 $$arith = (($3) + ($1))|0;
 $$overflow = ($$arith>>>0)<($3>>>0);
 if ($$overflow) {
  __ZN4core6option13expect_failed17h8d3ef54cab66579bE(16458,17);
  // unreachable;
 }
 $8 = ($$arith|0)<(0);
 if ($8) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(5428);
  // unreachable;
 }
 $9 = ($5|0)==(0);
 if ($9) {
  $10 = (___rust_allocate($$arith,1)|0);
  $ptr$0$i = $10;
 } else {
  $11 = HEAP32[$0>>2]|0;
  $12 = (___rust_reallocate($11,$5,$$arith,1)|0);
  $ptr$0$i = $12;
 }
 $13 = ($ptr$0$i|0)==(0|0);
 if ($13) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 }
 HEAP32[$0>>2] = $ptr$0$i;
 HEAP32[$4>>2] = $$arith;
 return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17h7e8c00e2d39bd852E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13$sroa$0$0 = 0, $_13$sroa$5$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $8 = (___rust_allocate(4,1)|0);
   $_13$sroa$0$0 = 4;$_13$sroa$5$0 = $8;
  } else {
   $4 = $2 << 1;
   $5 = ($4|0)<(0);
   if ($5) {
    __ZN4core9panicking5panic17hee9f4f8d26a91787E(5428);
    // unreachable;
   } else {
    $6 = HEAP32[$0>>2]|0;
    $7 = (___rust_reallocate($6,$2,$4,1)|0);
    $_13$sroa$0$0 = $4;$_13$sroa$5$0 = $7;
    break;
   }
  }
 } while(0);
 $9 = ($_13$sroa$5$0|0)==(0|0);
 if ($9) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 } else {
  HEAP32[$0>>2] = $_13$sroa$5$0;
  HEAP32[$1>>2] = $_13$sroa$0$0;
  return;
 }
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_16into_boxed_slice17h65e8f26d8dd7c84bE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i$i$i$i = 0, $not$$i$i$i$i14 = 0, $retVal$index1 = 0, $self$sroa$0$0 = 0, $self$sroa$0$0$copyload = 0, $self$sroa$10$0 = 0;
 var $self$sroa$10$0$$sroa_idx25 = 0, $self$sroa$10$0$copyload = 0, $self$sroa$15$0$$sroa_idx31 = 0, $self$sroa$15$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $self$sroa$0$0$copyload = HEAP32[$0>>2]|0;
 $self$sroa$10$0$$sroa_idx25 = ((($0)) + 4|0);
 $self$sroa$10$0$copyload = HEAP32[$self$sroa$10$0$$sroa_idx25>>2]|0;
 $self$sroa$15$0$$sroa_idx31 = ((($0)) + 8|0);
 $self$sroa$15$0$copyload = HEAP32[$self$sroa$15$0$$sroa_idx31>>2]|0;
 $1 = ($self$sroa$10$0$copyload>>>0)<($self$sroa$15$0$copyload>>>0);
 L1: do {
  if ($1) {
   __THREW__ = 0;
   invoke_vi(78,(5408|0));
   $2 = __THREW__; __THREW__ = 0;
  } else {
   $3 = ($self$sroa$15$0$copyload|0)==(0);
   do {
    if ($3) {
     $not$$i$i$i$i = ($self$sroa$10$0$copyload|0)==(0);
     if ($not$$i$i$i$i) {
      $self$sroa$0$0 = 1;$self$sroa$10$0 = 0;
     } else {
      $4 = $self$sroa$0$0$copyload;
      ___rust_deallocate($4,$self$sroa$10$0$copyload,1);
      $self$sroa$0$0 = 1;$self$sroa$10$0 = 0;
     }
    } else {
     $5 = ($self$sroa$10$0$copyload|0)==($self$sroa$15$0$copyload|0);
     if ($5) {
      $self$sroa$0$0 = $self$sroa$0$0$copyload;$self$sroa$10$0 = $self$sroa$10$0$copyload;
     } else {
      $6 = $self$sroa$0$0$copyload;
      $7 = (___rust_reallocate($6,$self$sroa$10$0$copyload,$self$sroa$15$0$copyload,1)|0);
      $8 = ($7|0)==(0|0);
      if ($8) {
       __THREW__ = 0;
       invoke_v(367);
       $9 = __THREW__; __THREW__ = 0;
       break L1;
      } else {
       $10 = $7;
       $self$sroa$0$0 = $10;$self$sroa$10$0 = $self$sroa$15$0$copyload;
       break;
      }
     }
    }
   } while(0);
   $12 = $self$sroa$0$0;
   HEAP32[$retVal>>2] = $12;
   $retVal$index1 = ((($retVal)) + 4|0);
   HEAP32[$retVal$index1>>2] = $self$sroa$10$0;
   return;
  }
 } while(0);
 $11 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 $not$$i$i$i$i14 = ($self$sroa$10$0$copyload|0)==(0);
 if ($not$$i$i$i$i14) {
  ___resumeException($11|0);
  // unreachable;
 }
 $14 = $self$sroa$0$0$copyload;
 ___rust_deallocate($14,$self$sroa$10$0$copyload,1);
 ___resumeException($11|0);
 // unreachable;
}
function __ZN62__LT_std__ffi__c_str__NulError_u20_as_u20_core__fmt__Debug_GT_3fmt17heaaf9f4b4df3da4dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_16 = 0, $_22 = 0, $builder = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_22 = sp + 20|0;
 $_16 = sp + 16|0;
 $builder = sp;
 $2 = ((($0)) + 4|0);
 __ZN4core3fmt8builders15debug_tuple_new17he50543912fc9d116E($builder,$1,16475,8);
 HEAP32[$_16>>2] = $0;
 (__ZN4core3fmt8builders10DebugTuple5field17hd64ae47e9d46842fE($builder,$_16,224)|0);
 HEAP32[$_22>>2] = $2;
 (__ZN4core3fmt8builders10DebugTuple5field17hd64ae47e9d46842fE($builder,$_22,240)|0);
 $3 = (__ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($builder)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hfb2ad4b44078f3e3E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_8$i$i = 0, $entry$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $entry$i$i$i = sp + 8|0;
 $_8$i$i = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($2)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 __ZN4core3fmt8builders14debug_list_new17h09f66fbfeeea4f70E($_8$i$i,$1);
 $6 = (($3) + ($5)|0);
 $7 = ($5|0)==(0);
 if (!($7)) {
  $9 = $3;
  while(1) {
   $8 = ((($9)) + 1|0);
   HEAP32[$entry$i$i$i>>2] = $9;
   (__ZN4core3fmt8builders9DebugList5entry17h224979876f32754cE($_8$i$i,$entry$i$i$i,256)|0);
   $10 = ($8|0)==($6|0);
   if ($10) {
    break;
   } else {
    $9 = $8;
   }
  }
 }
 $11 = (__ZN4core3fmt8builders9DebugList6finish17h58d6772b9a85eba4E($_8$i$i)|0);
 STACKTOP = sp;return ($11|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h01d1ee5ccd022616E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt3num49__LT_impl_u20_core__fmt__Debug_u20_for_u20_u8_GT_3fmt17h439f9696de9b8938E($2,$1)|0);
 return ($3|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hf2e39b2d6db957ccE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17haa47cdcfcc45afc9E($2,$1)|0);
 return ($3|0);
}
function __ZN3std6thread5local2os13destroy_value17h492a5afbf44832faE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_0$0$i$i = 0, $_0$0$i$i8 = 0, $cond$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i$i$i = 0, $cond$i$i6 = 0, $switchtmp$i$i$i$i$i$i$i = 0, $switchtmp$i$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $cond$i$i = ($2|0)==(0);
 if ($cond$i$i) {
  __THREW__ = 0;
  $3 = (invoke_ii(376,($1|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = tempRet0;
   $16 = ((($0)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $cond$i$i$i$i = ($17|0)==(1);
   if (!($cond$i$i$i$i)) {
    ___rust_deallocate($0,24,4);
    ___resumeException($14|0);
    // unreachable;
   }
   $18 = ((($0)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $switchtmp$i$i$i$i$i$i$i = ($19|0)==(0|0);
   if ($switchtmp$i$i$i$i$i$i$i) {
    ___rust_deallocate($0,24,4);
    ___resumeException($14|0);
    // unreachable;
   }
   $20 = HEAP32[$19>>2]|0;HEAP32[$19>>2] = (($20-1)|0);
   $21 = ($20|0)==(1);
   if (!($21)) {
    ___rust_deallocate($0,24,4);
    ___resumeException($14|0);
    // unreachable;
   }
   /* fence */;
   __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17haa414254399d4f93E($18);
   ___rust_deallocate($0,24,4);
   ___resumeException($14|0);
   // unreachable;
  } else {
   $_0$0$i$i = $3;
  }
 } else {
  $_0$0$i$i = $2;
 }
 (_pthread_setspecific(($_0$0$i$i|0),((1)|0))|0);
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $cond$i$i$i$i$i = ($7|0)==(1);
 if ($cond$i$i$i$i$i) {
  $8 = ((($0)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $switchtmp$i$i$i$i$i$i$i$i = ($9|0)==(0|0);
  if (!($switchtmp$i$i$i$i$i$i$i$i)) {
   $10 = HEAP32[$9>>2]|0;HEAP32[$9>>2] = (($10-1)|0);
   $11 = ($10|0)==(1);
   if ($11) {
    /* fence */;
    __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17haa414254399d4f93E($8);
   }
  }
 }
 ___rust_deallocate($0,24,4);
 $12 = HEAP32[$1>>2]|0;
 $cond$i$i6 = ($12|0)==(0);
 if (!($cond$i$i6)) {
  $_0$0$i$i8 = $12;
  (_pthread_setspecific(($_0$0$i$i8|0),(0|0))|0);
  return;
 }
 $13 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hb781edeaf6c88045E($1)|0);
 $_0$0$i$i8 = $13;
 (_pthread_setspecific(($_0$0$i$i8|0),(0|0))|0);
 return;
}
function __ZN3std3ffi5c_str7CString3new17hafae188671cbf311E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink$i = 0, $$sroa_idx$i$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12$i = 0, $_13$i = 0, $_3$sroa$4$0$copyload = 0, $_9$sroa$4$sroa$0$0$_9$sroa$4$0$$sroa_cast$sroa_idx$i = 0, $_9$sroa$4$sroa$4$0$_9$sroa$4$0$$sroa_cast$sroa_idx38$i = 0;
 var $_9$sroa$4$sroa$5$0$_9$sroa$4$0$$sroa_cast$sroa_idx40$i = 0, $bytes$sroa$7$0$$sroa_idx18$i = 0, $bytes$sroa$8$0$$sroa_idx24$i = 0, $not$$i$i$i$i$i$i$i$i = 0, $ptr$0$i$i$i$i$i$i = 0, $vector$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_13$i = sp + 24|0;
 $_12$i = sp + 16|0;
 $vector$i$i$i$i = sp;
 $3 = ($2|0)<(0);
 if ($3) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(5428);
  // unreachable;
 }
 $5 = ($2|0)==(0);
 if ($5) {
  $ptr$0$i$i$i$i$i$i = (1);
 } else {
  $6 = (___rust_allocate($2,1)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   __ZN5alloc3oom3oom17h3b36c708663c15cdE();
   // unreachable;
  } else {
   $ptr$0$i$i$i$i$i$i = $6;
  }
 }
 $8 = $ptr$0$i$i$i$i$i$i;
 HEAP32[$vector$i$i$i$i>>2] = $8;
 $$sroa_idx$i$i$i$i$i = ((($vector$i$i$i$i)) + 4|0);
 HEAP32[$$sroa_idx$i$i$i$i$i>>2] = $2;
 $9 = ((($vector$i$i$i$i)) + 8|0);
 HEAP32[$9>>2] = 0;
 __THREW__ = 0;
 invoke_vii(368,($vector$i$i$i$i|0),($2|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $12 = tempRet0;
  $13 = HEAP32[$$sroa_idx$i$i$i$i$i>>2]|0;
  $not$$i$i$i$i$i$i$i$i = ($13|0)==(0);
  if ($not$$i$i$i$i$i$i$i$i) {
   ___resumeException($4|0);
   // unreachable;
  }
  $14 = HEAP32[$vector$i$i$i$i>>2]|0;
  ___rust_deallocate($14,$13,1);
  ___resumeException($4|0);
  // unreachable;
 }
 $15 = HEAP32[$9>>2]|0;
 $16 = (($15) + ($2))|0;
 HEAP32[$9>>2] = $16;
 $17 = HEAP32[$vector$i$i$i$i>>2]|0;
 $18 = (($17) + ($15)|0);
 _memcpy(($18|0),($1|0),($2|0))|0;
 $_3$sroa$4$0$copyload = HEAP32[$$sroa_idx$i$i$i$i$i>>2]|0;
 $19 = (_memchr($17,0,$16)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  HEAP32[$_13$i>>2] = $17;
  $bytes$sroa$7$0$$sroa_idx18$i = ((($_13$i)) + 4|0);
  HEAP32[$bytes$sroa$7$0$$sroa_idx18$i>>2] = $_3$sroa$4$0$copyload;
  $bytes$sroa$8$0$$sroa_idx24$i = ((($_13$i)) + 8|0);
  HEAP32[$bytes$sroa$8$0$$sroa_idx24$i>>2] = $16;
  __ZN3std3ffi5c_str7CString18from_vec_unchecked17h1f03be756c19fa64E($_12$i,$_13$i);
  $21 = ((($0)) + 4|0);
  $22 = $_12$i;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = $21;
  $29 = $28;
  HEAP32[$29>>2] = $24;
  $30 = (($28) + 4)|0;
  $31 = $30;
  HEAP32[$31>>2] = $27;
  $$sink$i = 0;
  HEAP32[$0>>2] = $$sink$i;
  STACKTOP = sp;return;
 } else {
  $32 = $19;
  $33 = $17;
  $34 = (($32) - ($33))|0;
  $35 = ((($0)) + 4|0);
  HEAP32[$35>>2] = $34;
  $_9$sroa$4$sroa$0$0$_9$sroa$4$0$$sroa_cast$sroa_idx$i = ((($0)) + 8|0);
  HEAP32[$_9$sroa$4$sroa$0$0$_9$sroa$4$0$$sroa_cast$sroa_idx$i>>2] = $17;
  $_9$sroa$4$sroa$4$0$_9$sroa$4$0$$sroa_cast$sroa_idx38$i = ((($0)) + 12|0);
  HEAP32[$_9$sroa$4$sroa$4$0$_9$sroa$4$0$$sroa_cast$sroa_idx38$i>>2] = $_3$sroa$4$0$copyload;
  $_9$sroa$4$sroa$5$0$_9$sroa$4$0$$sroa_cast$sroa_idx40$i = ((($0)) + 16|0);
  HEAP32[$_9$sroa$4$sroa$5$0$_9$sroa$4$0$$sroa_cast$sroa_idx40$i>>2] = $16;
  $$sink$i = 1;
  HEAP32[$0>>2] = $$sink$i;
  STACKTOP = sp;return;
 }
}
function __ZN3std3ffi5c_str104__LT_impl_u20_core__convert__From_LT_std__ffi__c_str__NulError_GT__u20_for_u20_std__io__error__Error_GT_4from17h0d6696448a24f156E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_4$i$i$i = 0, $_5$sroa$4$0$$sroa_idx$i = 0;
 var $_5$sroa$4$i = 0, $_5$sroa$43$0$$sroa_idx4$i = 0, $not$$i$i$i$i$i = 0, $not$$i$i$i$i$i12 = 0, $x$i$sroa$4$0$$sroa_raw_idx$i = 0, $x$i$sroa$4$i = 0, $x$i$sroa$5$0$$sroa_idx$i = 0, $x$i$sroa$6$0$$sroa_idx$i = 0, $x$sroa$0$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $x$i$sroa$4$i = sp + 31|0;
 $_5$sroa$4$i = sp + 28|0;
 $x$sroa$0$i$i$i$i$i = sp + 16|0;
 $_4$i$i$i = sp;
 __THREW__ = 0;
 invoke_viii(244,($_4$i$i$i|0),(16641|0),33);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   ;HEAP32[$x$sroa$0$i$i$i$i$i>>2]=HEAP32[$_4$i$i$i>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]=HEAP32[$_4$i$i$i+4>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]=HEAP32[$_4$i$i$i+8>>2]|0;
   $4 = (___rust_allocate(12,4)|0);
   $5 = ($4|0)==(0|0);
   if ($5) {
    __THREW__ = 0;
    invoke_v(367);
    $6 = __THREW__; __THREW__ = 0;
    break;
   }
   ;HEAP32[$4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i>>2]|0;HEAP32[$4+4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]|0;
   $7 = (___rust_allocate(12,4)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    __THREW__ = 0;
    invoke_v(367);
    $9 = __THREW__; __THREW__ = 0;
    break;
   }
   HEAP8[$7>>0] = 11;
   $x$i$sroa$4$0$$sroa_raw_idx$i = ((($7)) + 1|0);
   ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$x$i$sroa$4$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$x$i$sroa$4$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$x$i$sroa$4$i+2>>0]|0;
   $x$i$sroa$5$0$$sroa_idx$i = ((($7)) + 4|0);
   HEAP32[$x$i$sroa$5$0$$sroa_idx$i>>2] = $4;
   $x$i$sroa$6$0$$sroa_idx$i = ((($7)) + 8|0);
   HEAP32[$x$i$sroa$6$0$$sroa_idx$i>>2] = 152;
   HEAP8[$0>>0] = 2;
   $_5$sroa$4$0$$sroa_idx$i = ((($0)) + 1|0);
   ;HEAP8[$_5$sroa$4$0$$sroa_idx$i>>0]=HEAP8[$_5$sroa$4$i>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_idx$i+1>>0]=HEAP8[$_5$sroa$4$i+1>>0]|0;HEAP8[$_5$sroa$4$0$$sroa_idx$i+2>>0]=HEAP8[$_5$sroa$4$i+2>>0]|0;
   $_5$sroa$43$0$$sroa_idx4$i = ((($0)) + 4|0);
   HEAP32[$_5$sroa$43$0$$sroa_idx4$i>>2] = $7;
   $11 = ((($1)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $not$$i$i$i$i$i = ($12|0)==(0);
   if ($not$$i$i$i$i$i) {
    STACKTOP = sp;return;
   }
   $13 = ((($1)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   ___rust_deallocate($14,$12,1);
   STACKTOP = sp;return;
  }
 } while(0);
 $10 = ___cxa_find_matching_catch_2()|0;
 $15 = tempRet0;
 $16 = ((($1)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $not$$i$i$i$i$i12 = ($17|0)==(0);
 if ($not$$i$i$i$i$i12) {
  ___resumeException($10|0);
  // unreachable;
 }
 $18 = ((($1)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 ___rust_deallocate($19,$17,1);
 ___resumeException($10|0);
 // unreachable;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h9c7deba288fd694aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$overflow = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i = 0, $ptr$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)<($1>>>0);
 if (!($7)) {
  return;
 }
 $$arith = (($3) + ($1))|0;
 $$overflow = ($$arith>>>0)<($3>>>0);
 if ($$overflow) {
  __ZN4core6option13expect_failed17h8d3ef54cab66579bE(16458,17);
  // unreachable;
 }
 $8 = $5 << 1;
 $9 = ($$arith>>>0)>=($8>>>0);
 $_0$0$sroa$speculated$i$i$i = $9 ? $$arith : $8;
 $10 = ($_0$0$sroa$speculated$i$i$i|0)<(0);
 if ($10) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(5428);
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = (___rust_allocate($_0$0$sroa$speculated$i$i$i,1)|0);
  $ptr$0$i = $12;
 } else {
  $13 = HEAP32[$0>>2]|0;
  $14 = (___rust_reallocate($13,$5,$_0$0$sroa$speculated$i$i$i,1)|0);
  $ptr$0$i = $14;
 }
 $15 = ($ptr$0$i|0)==(0|0);
 if ($15) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 }
 HEAP32[$0>>2] = $ptr$0$i;
 HEAP32[$4>>2] = $_0$0$sroa$speculated$i$i$i;
 return;
}
function __ZN3std3env7_var_os28__u7b__u7b_closure_u7d__u7d_17hd94f13ea4438975aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_6 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $cond$i$i = 0, $e = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_11 = sp + 32|0;
 $_6 = sp + 8|0;
 $e = sp;
 $2 = $1;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $e;
 $9 = $8;
 HEAP32[$9>>2] = $4;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 $12 = $0;
 $13 = $e;
 HEAP32[$_11>>2] = $12;
 $14 = ((($_11)) + 4|0);
 HEAP32[$14>>2] = (384);
 $15 = ((($_11)) + 8|0);
 HEAP32[$15>>2] = $13;
 $16 = ((($_11)) + 12|0);
 HEAP32[$16>>2] = (385);
 HEAP32[$_6>>2] = 5084;
 $17 = ((($_6)) + 4|0);
 HEAP32[$17>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_6)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $18 = ((($_6)) + 16|0);
 HEAP32[$18>>2] = $_11;
 $19 = ((($_6)) + 20|0);
 HEAP32[$19>>2] = 2;
 __THREW__ = 0;
 invoke_vii(386,($_6|0),(5100|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = ___cxa_find_matching_catch_2()|0;
 $22 = tempRet0;
 $23 = HEAP8[$e>>0]|0;
 $cond$i$i = ($23<<24>>24)==(2);
 if (!($cond$i$i)) {
  ___resumeException($21|0);
  // unreachable;
 }
 $24 = ((($e)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($25)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$29>>2]|0;
 FUNCTION_TABLE_vi[$30 & 511]($27);
 $31 = ((($29)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0);
 if (!($33)) {
  $34 = ((($29)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  ___rust_deallocate($27,$32,$35);
 }
 ___rust_deallocate($25,12,4);
 ___resumeException($21|0);
 // unreachable;
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h0d4524164d8e5f0cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN65__LT_std__sys__imp__os_str__Slice_u20_as_u20_core__fmt__Debug_GT_3fmt17h5bf9e50a2be882bdE($2,$4,$1)|0);
 return ($5|0);
}
function __ZN65__LT_std__sys__imp__os_str__Slice_u20_as_u20_core__fmt__Debug_GT_3fmt17h5bf9e50a2be882bdE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i16 = 0, $_6 = 0, $not$$i$i$i$i$i$i = 0;
 var $not$$i$i$i$i$i$i12 = 0, $switch$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_6 = sp;
 __ZN11collections6string6String15from_utf8_lossy17h557010252764494dE($_6,$0,$1);
 $3 = HEAP32[$_6>>2]|0;
 $switch$i = ($3|0)==(1);
 $4 = ((($_6)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 if (!($switch$i)) {
  $6 = ((($_6)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17hc4ff3f3b2f08a94fE($5,$7,$2)|0);
  $_0$sroa$0$0$i16 = $8;
  STACKTOP = sp;return ($_0$sroa$0$0$i16|0);
 }
 $9 = ((($_6)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 __THREW__ = 0;
 $11 = (invoke_iiii(387,($5|0),($10|0),($2|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch_2()|0;
  $17 = tempRet0;
  $18 = ((($_6)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $not$$i$i$i$i$i$i12 = ($19|0)==(0);
  if ($not$$i$i$i$i$i$i12) {
   ___resumeException($14|0);
   // unreachable;
  }
  ___rust_deallocate($5,$19,1);
  ___resumeException($14|0);
  // unreachable;
 } else {
  $15 = ((($_6)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $not$$i$i$i$i$i$i = ($16|0)==(0);
  if ($not$$i$i$i$i$i$i) {
   $_0$sroa$0$0$i16 = $11;
   STACKTOP = sp;return ($_0$sroa$0$0$i16|0);
  }
  ___rust_deallocate($5,$16,1);
  $_0$sroa$0$0$i16 = $11;
  STACKTOP = sp;return ($_0$sroa$0$0$i16|0);
 }
 return (0)|0;
}
function __ZN3std6thread5local2os13destroy_value17ha60533f69151aac8E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i$i = 0, $_0$0$i$i7 = 0, $cond$i$i = 0, $cond$i$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $cond$i$i = ($2|0)==(0);
 if ($cond$i$i) {
  __THREW__ = 0;
  $3 = (invoke_ii(376,($1|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $8 = ___cxa_find_matching_catch_2()|0;
   $9 = tempRet0;
   ___rust_deallocate($0,12,4);
   ___resumeException($8|0);
   // unreachable;
  } else {
   $_0$0$i$i = $3;
  }
 } else {
  $_0$0$i$i = $2;
 }
 (_pthread_setspecific(($_0$0$i$i|0),((1)|0))|0);
 ___rust_deallocate($0,12,4);
 $6 = HEAP32[$1>>2]|0;
 $cond$i$i5 = ($6|0)==(0);
 if (!($cond$i$i5)) {
  $_0$0$i$i7 = $6;
  (_pthread_setspecific(($_0$0$i$i7|0),(0|0))|0);
  return;
 }
 $7 = (__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hb781edeaf6c88045E($1)|0);
 $_0$0$i$i7 = $7;
 (_pthread_setspecific(($_0$0$i$i7|0),(0|0))|0);
 return;
}
function __ZN4drop17h94022395611c34c1E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $not$$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $not$$i$i$i$i = ($2|0)==(0);
 if ($not$$i$i$i$i) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 ___rust_deallocate($3,$2,1);
 return;
}
function __ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17hf47d18b6ff39323fE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (820397168);
 return -1577511168;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hb64ee06167af0f92E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h9c7deba288fd694aE($3,$2);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2))|0;
 HEAP32[$4>>2] = $6;
 $7 = HEAP32[$3>>2]|0;
 $8 = (($7) + ($5)|0);
 _memcpy(($8|0),($1|0),($2|0))|0;
 return 0;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h3e99aa961daf2312E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_19$i$i = 0, $_19$i$i$1$sroa_raw_idx = 0, $_19$i$i$1$sroa_raw_idx7 = 0, $_19$i$i$1$sroa_raw_idx9 = 0, $_19$i$i$2$sroa_raw_idx = 0, $_19$i$i$2$sroa_raw_idx11 = 0;
 var $_19$i$i$3$sroa_raw_idx = 0, $len$0$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_19$i$i = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($1>>>0)<(128);
 if ($3) {
  $4 = $1&255;
  $5 = ((($2)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($2)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)==($8|0);
  if ($9) {
   __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17h7e8c00e2d39bd852E($2);
   $$pre$i$i$i = HEAP32[$5>>2]|0;
   $12 = $$pre$i$i$i;
  } else {
   $12 = $6;
  }
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + ($12)|0);
  HEAP8[$11>>0] = $4;
  $13 = HEAP32[$5>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$5>>2] = $14;
  STACKTOP = sp;return 0;
 }
 HEAP32[$_19$i$i>>2] = 0;
 $15 = ($1>>>0)<(2048);
 do {
  if ($15) {
   $16 = $1 >>> 6;
   $17 = $16 & 31;
   $18 = $17&255;
   $19 = $18 | -64;
   HEAP8[$_19$i$i>>0] = $19;
   $20 = $1 & 63;
   $21 = $20&255;
   $22 = $21 | -128;
   $_19$i$i$1$sroa_raw_idx9 = ((($_19$i$i)) + 1|0);
   HEAP8[$_19$i$i$1$sroa_raw_idx9>>0] = $22;
   $len$0$i$i$i$i = 2;
  } else {
   $23 = ($1>>>0)<(65536);
   if ($23) {
    $24 = $1 >>> 12;
    $25 = $24 & 15;
    $26 = $25&255;
    $27 = $26 | -32;
    HEAP8[$_19$i$i>>0] = $27;
    $28 = $1 >>> 6;
    $29 = $28 & 63;
    $30 = $29&255;
    $31 = $30 | -128;
    $_19$i$i$1$sroa_raw_idx7 = ((($_19$i$i)) + 1|0);
    HEAP8[$_19$i$i$1$sroa_raw_idx7>>0] = $31;
    $32 = $1 & 63;
    $33 = $32&255;
    $34 = $33 | -128;
    $_19$i$i$2$sroa_raw_idx11 = ((($_19$i$i)) + 2|0);
    HEAP8[$_19$i$i$2$sroa_raw_idx11>>0] = $34;
    $len$0$i$i$i$i = 3;
    break;
   } else {
    $35 = $1 >>> 18;
    $36 = $35 & 7;
    $37 = $36&255;
    $38 = $37 | -16;
    HEAP8[$_19$i$i>>0] = $38;
    $39 = $1 >>> 12;
    $40 = $39 & 63;
    $41 = $40&255;
    $42 = $41 | -128;
    $_19$i$i$1$sroa_raw_idx = ((($_19$i$i)) + 1|0);
    HEAP8[$_19$i$i$1$sroa_raw_idx>>0] = $42;
    $43 = $1 >>> 6;
    $44 = $43 & 63;
    $45 = $44&255;
    $46 = $45 | -128;
    $_19$i$i$2$sroa_raw_idx = ((($_19$i$i)) + 2|0);
    HEAP8[$_19$i$i$2$sroa_raw_idx>>0] = $46;
    $47 = $1 & 63;
    $48 = $47&255;
    $49 = $48 | -128;
    $_19$i$i$3$sroa_raw_idx = ((($_19$i$i)) + 3|0);
    HEAP8[$_19$i$i$3$sroa_raw_idx>>0] = $49;
    $len$0$i$i$i$i = 4;
    break;
   }
  }
 } while(0);
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h9c7deba288fd694aE($2,$len$0$i$i$i$i);
 $50 = ((($2)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + ($len$0$i$i$i$i))|0;
 HEAP32[$50>>2] = $52;
 $53 = HEAP32[$2>>2]|0;
 $54 = (($53) + ($51)|0);
 _memcpy(($54|0),($_19$i$i|0),($len$0$i$i$i$i|0))|0;
 STACKTOP = sp;return 0;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hd56c4902f5f5f5daE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_10$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_10$i = sp + 8|0;
 $_8$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_8$i>>2] = $2;
 ;HEAP32[$_10$i>>2]=HEAP32[$1>>2]|0;HEAP32[$_10$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10$i+20>>2]=HEAP32[$1+20>>2]|0;
 $3 = (__ZN4core3fmt5write17ha952368ac9616bb6E($_8$i,56,$_10$i)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN3std3sys3imp2os12error_string17hdf7d17fd92f51e6dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_24 = 0, $buf = 0, $self$sroa$0$0$copyload$i = 0, $self$sroa$6$0$$sroa_idx6$i = 0, $self$sroa$6$0$copyload$i = 0, $self$sroa$8$0$$sroa_idx8$i = 0, $self$sroa$8$0$copyload$i = 0, $switch2$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $_24 = sp;
 $buf = sp + 16|0;
 dest=$buf; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $2 = (_strerror_r($1,$buf,128)|0);
 $3 = ($2|0)<(0);
 if ($3) {
  __ZN3std9panicking11begin_panic17h10fb5a0e6dedd3d3E(17172,18,5164);
  // unreachable;
 }
 $4 = (_strlen($buf)|0);
 $5 = ($4|0)==(-1);
 if ($5) {
  __ZN4core5slice20slice_index_len_fail17hc8606abb7e325facE(-1,0);
  // unreachable;
 }
 __ZN4core3str9from_utf817ha9337cb316bd8650E($_24,$buf,$4);
 $self$sroa$0$0$copyload$i = HEAP32[$_24>>2]|0;
 $self$sroa$6$0$$sroa_idx6$i = ((($_24)) + 4|0);
 $self$sroa$6$0$copyload$i = HEAP32[$self$sroa$6$0$$sroa_idx6$i>>2]|0;
 $switch2$i = ($self$sroa$0$0$copyload$i|0)==(0);
 if ($switch2$i) {
  $self$sroa$8$0$$sroa_idx8$i = ((($_24)) + 8|0);
  $self$sroa$8$0$copyload$i = HEAP32[$self$sroa$8$0$$sroa_idx8$i>>2]|0;
  __ZN11collections3str62__LT_impl_u20_collections__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17h189157b2b25caa18E($0,$self$sroa$6$0$copyload$i,$self$sroa$8$0$copyload$i);
  STACKTOP = sp;return;
 } else {
  $6 = $self$sroa$6$0$copyload$i;
  __ZN4core6result13unwrap_failed17h46df133e56f6508aE($6);
  // unreachable;
 }
}
function __ZN66__LT_collections__string__String_u20_as_u20_core__fmt__Display_GT_3fmt17h8cb585a48140150eE_59($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17h53ffdc2cd959b259E($2,$4,$1)|0);
 return ($5|0);
}
function __ZN4core6result13unwrap_failed17h46df133e56f6508aE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $error = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_10 = sp + 40|0;
 $_5 = sp + 16|0;
 $error = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = 15972;
 $1 = ((($msg)) + 4|0);
 HEAP32[$1>>2] = 43;
 HEAP32[$error>>2] = $0;
 $2 = HEAP32[1395]|0;
 $3 = HEAP32[(5584)>>2]|0;
 $4 = $msg;
 $5 = $error;
 HEAP32[$_10>>2] = $4;
 $6 = ((($_10)) + 4|0);
 HEAP32[$6>>2] = (349);
 $7 = ((($_10)) + 8|0);
 HEAP32[$7>>2] = $5;
 $8 = ((($_10)) + 12|0);
 HEAP32[$8>>2] = (388);
 HEAP32[$_5>>2] = $2;
 $9 = ((($_5)) + 4|0);
 HEAP32[$9>>2] = $3;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $10 = ((($_5)) + 16|0);
 HEAP32[$10>>2] = $_10;
 $11 = ((($_5)) + 20|0);
 HEAP32[$11>>2] = 2;
 __ZN4core9panicking9panic_fmt17hbeea8425e52b5ca1E($_5,5568);
 // unreachable;
}
function __ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17hcc748c3681889155E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 tempRet0 = (1099202904);
 return 1475156443;
}
function __ZN3std6thread4park17h733fc051835a06b9E() {
 var $$cast = 0, $$pre$i$i$i$i$i$i = 0, $$pre$i$i$i$i$i$i$i = 0, $$pre$i$i$i$i$i$i55 = 0, $$pre$phi$i$i$i$i$i$iZ2D = 0, $$pre3$i$i$i$i$i$i = 0, $$pre3$i$i$i$i$i$i$i = 0, $$pre3$i$i$i$i$i$i51 = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i53 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $_8$i = 0, $_8$i25 = 0, $_8$sroa_cast29$i$hi = 0, $_8$sroa_cast29$i37$hi = 0;
 var $_8$sroa_raw_idx$i = 0, $_8$sroa_raw_idx$i35 = 0, $_8$sroa_raw_idx28$i = 0, $_8$sroa_raw_idx28$i36 = 0, $lpad$thr_comm$split$lp$sink$index3ZZ2D = 0, $lpad$thr_comm$split$lp$sink$indexZZ2D = 0, $not$ = 0, $or$cond$i$i = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$6$0 = 0, $success = 0, $switch$i$i$i$i$i$i$i = 0, $switch$i$i$i$i$i$i$i$i = 0, $switch$i$i$i$i$i$i$i49 = 0, $switch2tmp$i$i$i$i$i$i$i$i = 0, $switch2tmp$i$i$i$i$i$i$i$i$i = 0, $switch2tmp$i$i$i$i$i$i$i$i46 = 0, $switch3tmp$i$i = 0, $switchtmp$i$i$i = 0, $thread = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_8$i25 = sp + 16|0;
 $_8$i = sp + 8|0;
 $thread = sp;
 __THREW__ = 0;
 $0 = (invoke_i(356)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if (!($2)) {
   $switchtmp$i$i$i = ($0|0)==(0|0);
   if (!($switchtmp$i$i$i)) {
    __THREW__ = 0;
    $3 = (invoke_i(357)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     break;
    }
    $switch3tmp$i$i = ($3|0)==(0);
    if (!($switch3tmp$i$i)) {
     HEAP32[$thread>>2] = $3;
     $$cast = $3;
     $7 = ((($$cast)) + 24|0);
     $8 = HEAP32[$7>>2]|0;
     (_pthread_mutex_lock(($8|0))|0);
     $9 = $7;
     __THREW__ = 0;
     $10 = (invoke_i(352)|0);
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     L7: do {
      if ($12) {
       label = 45;
      } else {
       $switch2tmp$i$i$i$i$i$i$i$i = ($10|0)==(0|0);
       if ($switch2tmp$i$i$i$i$i$i$i$i) {
        __THREW__ = 0;
        invoke_vii(77,(15492|0),57);
        $13 = __THREW__; __THREW__ = 0;
        label = 45;
        break;
       }
       $14 = HEAP32[$10>>2]|0;
       $switch$i$i$i$i$i$i$i = ($14|0)==(1);
       if ($switch$i$i$i$i$i$i$i) {
        $$sink$in$phi$trans$insert$i$i$i$i$i$i = ((($10)) + 4|0);
        $$pre$i$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i>>2]|0;
        $$pre$phi$i$i$i$i$i$iZ2D = $$sink$in$phi$trans$insert$i$i$i$i$i$i;$19 = $$pre$i$i$i$i$i$i;
       } else {
        $15 = $10;
        $16 = $15;
        HEAP32[$16>>2] = 1;
        $17 = (($15) + 4)|0;
        $18 = $17;
        HEAP32[$18>>2] = 0;
        $$pre3$i$i$i$i$i$i = ((($10)) + 4|0);
        $$pre$phi$i$i$i$i$i$iZ2D = $$pre3$i$i$i$i$i$i;$19 = 0;
       }
       HEAP32[$$pre$phi$i$i$i$i$i$iZ2D>>2] = $19;
       $20 = ($19|0)!=(0);
       $21 = ((($$cast)) + 28|0);
       $22 = HEAP8[$21>>0]|0;
       $not$ = ($22<<24>>24)==(0);
       $23 = $20&1;
       if (!($not$)) {
        HEAP32[$_8$i>>2] = $9;
        $_8$sroa_raw_idx$i = ((($_8$i)) + 4|0);
        HEAP8[$_8$sroa_raw_idx$i>>0] = $23;
        $_8$sroa_raw_idx28$i = ((($_8$i)) + 5|0);
        HEAP8[$_8$sroa_raw_idx28$i>>0]=0&255;HEAP8[$_8$sroa_raw_idx28$i+1>>0]=0>>8;
        $_8$sroa_cast29$i$hi = ((($_8$sroa_raw_idx28$i)) + 2|0);
        HEAP8[$_8$sroa_cast29$i$hi>>0] = 0;
        __THREW__ = 0;
        invoke_vi(389,($_8$i|0));
        $28 = __THREW__; __THREW__ = 0;
        label = 45;
        break;
       }
       $24 = ((($$cast)) + 29|0);
       $25 = HEAP8[$24>>0]|0;
       $26 = ($25<<24>>24)==(0);
       L19: do {
        if ($26) {
         $27 = ((($$cast)) + 28|0);
         while(1) {
          $31 = HEAP32[$thread>>2]|0;
          $32 = HEAP32[$7>>2]|0;
          $33 = $32;
          $34 = ((($31)) + 36|0);
          $35 = HEAP32[$34>>2]|0;if (($35|0) == 0) HEAP32[$34>>2] = $33;
          $success = ($35|0)==(0);
          $36 = ($35|0)==($33|0);
          $or$cond$i$i = $success | $36;
          if (!($or$cond$i$i)) {
           break;
          }
          $41 = ((($31)) + 32|0);
          $42 = HEAP32[$41>>2]|0;
          (_pthread_cond_wait(($42|0),($32|0))|0);
          $43 = HEAP8[$27>>0]|0;
          $44 = ($43<<24>>24)==(0);
          if (!($44)) {
           label = 29;
           break;
          }
          $29 = HEAP8[$24>>0]|0;
          $30 = ($29<<24>>24)==(0);
          if (!($30)) {
           break L19;
          }
         }
         if ((label|0) == 29) {
          HEAP32[$_8$i25>>2] = $9;
          $_8$sroa_raw_idx$i35 = ((($_8$i25)) + 4|0);
          HEAP8[$_8$sroa_raw_idx$i35>>0] = $23;
          $_8$sroa_raw_idx28$i36 = ((($_8$i25)) + 5|0);
          HEAP8[$_8$sroa_raw_idx28$i36>>0]=0&255;HEAP8[$_8$sroa_raw_idx28$i36+1>>0]=0>>8;
          $_8$sroa_cast29$i37$hi = ((($_8$sroa_raw_idx28$i36)) + 2|0);
          HEAP8[$_8$sroa_cast29$i37$hi>>0] = 0;
          __THREW__ = 0;
          invoke_vi(389,($_8$i25|0));
          $56 = __THREW__; __THREW__ = 0;
          label = 45;
          break L7;
         }
         __THREW__ = 0;
         invoke_viii(353,(17387|0),54,(5176|0));
         $38 = __THREW__; __THREW__ = 0;
         $39 = ___cxa_find_matching_catch_2()|0;
         $40 = tempRet0;
         do {
          if (!($20)) {
           __THREW__ = 0;
           $45 = (invoke_i(352)|0);
           $46 = __THREW__; __THREW__ = 0;
           $47 = $46&1;
           if ($47) {
            label = 45;
            break L7;
           }
           $switch2tmp$i$i$i$i$i$i$i$i$i = ($45|0)==(0|0);
           if ($switch2tmp$i$i$i$i$i$i$i$i$i) {
            __THREW__ = 0;
            invoke_vii(77,(15492|0),57);
            $48 = __THREW__; __THREW__ = 0;
            label = 45;
            break L7;
           }
           $49 = HEAP32[$45>>2]|0;
           $switch$i$i$i$i$i$i$i$i = ($49|0)==(1);
           if (!($switch$i$i$i$i$i$i$i$i)) {
            $50 = $45;
            $51 = $50;
            HEAP32[$51>>2] = 1;
            $52 = (($50) + 4)|0;
            $53 = $52;
            HEAP32[$53>>2] = 0;
            $$pre3$i$i$i$i$i$i$i = ((($45)) + 4|0);
            HEAP32[$$pre3$i$i$i$i$i$i$i>>2] = 0;
            break;
           }
           $$sink$in$phi$trans$insert$i$i$i$i$i$i$i = ((($45)) + 4|0);
           $$pre$i$i$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i$i>>2]|0;
           $54 = ($$pre$i$i$i$i$i$i$i|0)==(0);
           if (!($54)) {
            $55 = ((($$cast)) + 28|0);
            HEAP8[$55>>0] = 1;
           }
          }
         } while(0);
         $37 = HEAP32[$7>>2]|0;
         (_pthread_mutex_unlock(($37|0))|0);
         $lpad$thr_comm$split$lp$sink$index3ZZ2D = $40;$lpad$thr_comm$split$lp$sink$indexZZ2D = $39;
         break L7;
        }
       } while(0);
       HEAP8[$24>>0] = 0;
       L40: do {
        if (!($20)) {
         __THREW__ = 0;
         $57 = (invoke_i(352)|0);
         $58 = __THREW__; __THREW__ = 0;
         $59 = $58&1;
         do {
          if (!($59)) {
           $switch2tmp$i$i$i$i$i$i$i$i46 = ($57|0)==(0|0);
           if ($switch2tmp$i$i$i$i$i$i$i$i46) {
            __THREW__ = 0;
            invoke_vii(77,(15492|0),57);
            $60 = __THREW__; __THREW__ = 0;
            break;
           }
           $61 = HEAP32[$57>>2]|0;
           $switch$i$i$i$i$i$i$i49 = ($61|0)==(1);
           if (!($switch$i$i$i$i$i$i$i49)) {
            $62 = $57;
            $63 = $62;
            HEAP32[$63>>2] = 1;
            $64 = (($62) + 4)|0;
            $65 = $64;
            HEAP32[$65>>2] = 0;
            $$pre3$i$i$i$i$i$i51 = ((($57)) + 4|0);
            HEAP32[$$pre3$i$i$i$i$i$i51>>2] = 0;
            break L40;
           }
           $$sink$in$phi$trans$insert$i$i$i$i$i$i53 = ((($57)) + 4|0);
           $$pre$i$i$i$i$i$i55 = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i53>>2]|0;
           $66 = ($$pre$i$i$i$i$i$i55|0)==(0);
           if ($66) {
            break L40;
           }
           $67 = ((($$cast)) + 28|0);
           HEAP8[$67>>0] = 1;
           break L40;
          }
         } while(0);
         $79 = ___cxa_find_matching_catch_2()|0;
         $80 = tempRet0;
         $lpad$thr_comm$split$lp$sink$index3ZZ2D = $80;$lpad$thr_comm$split$lp$sink$indexZZ2D = $79;
         break L7;
        }
       } while(0);
       $68 = HEAP32[$7>>2]|0;
       (_pthread_mutex_unlock(($68|0))|0);
       $69 = HEAP32[$thread>>2]|0;
       $70 = HEAP32[$69>>2]|0;HEAP32[$69>>2] = (($70-1)|0);
       $71 = ($70|0)==(1);
       if (!($71)) {
        STACKTOP = sp;return;
       }
       /* fence */;
       __THREW__ = 0;
       invoke_vi(362,($thread|0));
       $72 = __THREW__; __THREW__ = 0;
       $73 = $72&1;
       if (!($73)) {
        STACKTOP = sp;return;
       }
       $83 = ___cxa_find_matching_catch_2()|0;
       $84 = tempRet0;
       $personalityslot$sroa$0$0 = $83;$personalityslot$sroa$6$0 = $84;
       ___resumeException($personalityslot$sroa$0$0|0);
       // unreachable;
      }
     } while(0);
     if ((label|0) == 45) {
      $81 = ___cxa_find_matching_catch_2()|0;
      $82 = tempRet0;
      $lpad$thr_comm$split$lp$sink$index3ZZ2D = $82;$lpad$thr_comm$split$lp$sink$indexZZ2D = $81;
     }
     $74 = HEAP32[$thread>>2]|0;
     $75 = HEAP32[$74>>2]|0;HEAP32[$74>>2] = (($75-1)|0);
     $76 = ($75|0)==(1);
     if (!($76)) {
      $personalityslot$sroa$0$0 = $lpad$thr_comm$split$lp$sink$indexZZ2D;$personalityslot$sroa$6$0 = $lpad$thr_comm$split$lp$sink$index3ZZ2D;
      ___resumeException($personalityslot$sroa$0$0|0);
      // unreachable;
     }
     /* fence */;
     __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17haa414254399d4f93E($thread);
     $personalityslot$sroa$0$0 = $lpad$thr_comm$split$lp$sink$indexZZ2D;$personalityslot$sroa$6$0 = $lpad$thr_comm$split$lp$sink$index3ZZ2D;
     ___resumeException($personalityslot$sroa$0$0|0);
     // unreachable;
    }
   }
   __THREW__ = 0;
   invoke_vii(77,(17293|0),94);
   $6 = __THREW__; __THREW__ = 0;
  }
 } while(0);
 $77 = ___cxa_find_matching_catch_2()|0;
 $78 = tempRet0;
 $personalityslot$sroa$0$0 = $77;$personalityslot$sroa$6$0 = $78;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
}
function __ZN4core6result13unwrap_failed17ha19036a9a6322342E($0) {
 $0 = $0|0;
 var $$pre$i$i$i$i$i$i$i = 0, $$pre3$i$i$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_10 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $error = 0, $msg = 0, $switch$i$i$i$i$i$i$i$i = 0, $switch2tmp$i$i$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $_10 = sp + 40|0;
 $_5 = sp + 16|0;
 $error = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = 15972;
 $1 = ((($msg)) + 4|0);
 HEAP32[$1>>2] = 43;
 $2 = $0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $error;
 $9 = $8;
 HEAP32[$9>>2] = $4;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 $12 = HEAP32[1395]|0;
 $13 = HEAP32[(5584)>>2]|0;
 $14 = $msg;
 $15 = $error;
 HEAP32[$_10>>2] = $14;
 $16 = ((($_10)) + 4|0);
 HEAP32[$16>>2] = (349);
 $17 = ((($_10)) + 8|0);
 HEAP32[$17>>2] = $15;
 $18 = ((($_10)) + 12|0);
 HEAP32[$18>>2] = (390);
 HEAP32[$_5>>2] = $12;
 $19 = ((($_5)) + 4|0);
 HEAP32[$19>>2] = $13;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $20 = ((($_5)) + 16|0);
 HEAP32[$20>>2] = $_10;
 $21 = ((($_5)) + 20|0);
 HEAP32[$21>>2] = 2;
 __THREW__ = 0;
 invoke_vii(96,($_5|0),(5568|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = ___cxa_find_matching_catch_2()|0;
 $24 = tempRet0;
 $25 = HEAP32[$error>>2]|0;
 $26 = ((($error)) + 4|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = ($27<<24>>24)==(0);
 do {
  if ($28) {
   $29 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h8a6a4da5328889bbE()|0);
   $switch2tmp$i$i$i$i$i$i$i$i$i = ($29|0)==(0|0);
   if ($switch2tmp$i$i$i$i$i$i$i$i$i) {
    __ZN4core6option13expect_failed17h8d3ef54cab66579bE(15492,57);
    // unreachable;
   }
   $30 = HEAP32[$29>>2]|0;
   $switch$i$i$i$i$i$i$i$i = ($30|0)==(1);
   if (!($switch$i$i$i$i$i$i$i$i)) {
    $31 = $29;
    $32 = $31;
    HEAP32[$32>>2] = 1;
    $33 = (($31) + 4)|0;
    $34 = $33;
    HEAP32[$34>>2] = 0;
    $$pre3$i$i$i$i$i$i$i = ((($29)) + 4|0);
    HEAP32[$$pre3$i$i$i$i$i$i$i>>2] = 0;
    break;
   }
   $$sink$in$phi$trans$insert$i$i$i$i$i$i$i = ((($29)) + 4|0);
   $$pre$i$i$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i$i>>2]|0;
   $35 = ($$pre$i$i$i$i$i$i$i|0)==(0);
   if (!($35)) {
    $36 = ((($25)) + 4|0);
    HEAP8[$36>>0] = 1;
   }
  }
 } while(0);
 $37 = HEAP32[$error>>2]|0;
 $38 = HEAP32[$37>>2]|0;
 (_pthread_mutex_unlock(($38|0))|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZN82__LT_std__sys_common__poison__PoisonError_LT_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h803ef17ec0db6d99E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17hc4ff3f3b2f08a94fE(17545,25,$1)|0);
 return ($2|0);
}
function __ZN3std6thread6Thread6unpark17he675f222dec36481E($0) {
 $0 = $0|0;
 var $$pre$i$i$i$i$i$i16 = 0, $$pre$i$i$i$i$i$i32 = 0, $$pre$phi$i$i$i$i$i$iZ2D = 0, $$pre3$i$i$i$i$i$i17 = 0, $$pre3$i$i$i$i$i$i27 = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i14 = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i30 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_8$i = 0, $_8$sroa_cast29$i$hi = 0, $_8$sroa_raw_idx$i = 0, $_8$sroa_raw_idx28$i = 0, $not$ = 0;
 var $switch$i$i$i$i$i$i$i12 = 0, $switch$i$i$i$i$i$i$i25 = 0, $switch2tmp$i$i$i$i$i$i$i$i10 = 0, $switch2tmp$i$i$i$i$i$i$i$i22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_8$i = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 (_pthread_mutex_lock(($3|0))|0);
 $4 = $2;
 $5 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h8a6a4da5328889bbE()|0);
 $switch2tmp$i$i$i$i$i$i$i$i10 = ($5|0)==(0|0);
 if ($switch2tmp$i$i$i$i$i$i$i$i10) {
  __ZN4core6option13expect_failed17h8d3ef54cab66579bE(15492,57);
  // unreachable;
 }
 $6 = HEAP32[$5>>2]|0;
 $switch$i$i$i$i$i$i$i12 = ($6|0)==(1);
 if ($switch$i$i$i$i$i$i$i12) {
  $$sink$in$phi$trans$insert$i$i$i$i$i$i14 = ((($5)) + 4|0);
  $$pre$i$i$i$i$i$i16 = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i14>>2]|0;
  $$pre$phi$i$i$i$i$i$iZ2D = $$sink$in$phi$trans$insert$i$i$i$i$i$i14;$11 = $$pre$i$i$i$i$i$i16;
 } else {
  $7 = $5;
  $8 = $7;
  HEAP32[$8>>2] = 1;
  $9 = (($7) + 4)|0;
  $10 = $9;
  HEAP32[$10>>2] = 0;
  $$pre3$i$i$i$i$i$i17 = ((($5)) + 4|0);
  $$pre$phi$i$i$i$i$i$iZ2D = $$pre3$i$i$i$i$i$i17;$11 = 0;
 }
 HEAP32[$$pre$phi$i$i$i$i$i$iZ2D>>2] = $11;
 $12 = ($11|0)!=(0);
 $13 = ((($1)) + 28|0);
 $14 = HEAP8[$13>>0]|0;
 $not$ = ($14<<24>>24)==(0);
 if (!($not$)) {
  $15 = $12&1;
  HEAP32[$_8$i>>2] = $4;
  $_8$sroa_raw_idx$i = ((($_8$i)) + 4|0);
  HEAP8[$_8$sroa_raw_idx$i>>0] = $15;
  $_8$sroa_raw_idx28$i = ((($_8$i)) + 5|0);
  HEAP8[$_8$sroa_raw_idx28$i>>0]=0&255;HEAP8[$_8$sroa_raw_idx28$i+1>>0]=0>>8;
  $_8$sroa_cast29$i$hi = ((($_8$sroa_raw_idx28$i)) + 2|0);
  HEAP8[$_8$sroa_cast29$i$hi>>0] = 0;
  __ZN4core6result13unwrap_failed17ha19036a9a6322342E($_8$i);
  // unreachable;
 }
 $16 = ((($1)) + 29|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  HEAP8[$16>>0] = 1;
  $19 = ((($1)) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  (_pthread_cond_signal(($20|0))|0);
 }
 if ($12) {
  $28 = HEAP32[$2>>2]|0;
  (_pthread_mutex_unlock(($28|0))|0);
  STACKTOP = sp;return;
 }
 $21 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h8a6a4da5328889bbE()|0);
 $switch2tmp$i$i$i$i$i$i$i$i22 = ($21|0)==(0|0);
 if ($switch2tmp$i$i$i$i$i$i$i$i22) {
  __ZN4core6option13expect_failed17h8d3ef54cab66579bE(15492,57);
  // unreachable;
 }
 $22 = HEAP32[$21>>2]|0;
 $switch$i$i$i$i$i$i$i25 = ($22|0)==(1);
 if (!($switch$i$i$i$i$i$i$i25)) {
  $23 = $21;
  $24 = $23;
  HEAP32[$24>>2] = 1;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = 0;
  $$pre3$i$i$i$i$i$i27 = ((($21)) + 4|0);
  HEAP32[$$pre3$i$i$i$i$i$i27>>2] = 0;
  $28 = HEAP32[$2>>2]|0;
  (_pthread_mutex_unlock(($28|0))|0);
  STACKTOP = sp;return;
 }
 $$sink$in$phi$trans$insert$i$i$i$i$i$i30 = ((($21)) + 4|0);
 $$pre$i$i$i$i$i$i32 = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i30>>2]|0;
 $27 = ($$pre$i$i$i$i$i$i32|0)==(0);
 if ($27) {
  $28 = HEAP32[$2>>2]|0;
  (_pthread_mutex_unlock(($28|0))|0);
  STACKTOP = sp;return;
 }
 HEAP8[$13>>0] = 1;
 $28 = HEAP32[$2>>2]|0;
 (_pthread_mutex_unlock(($28|0))|0);
 STACKTOP = sp;return;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h34c086a965eb6719E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$arith2 = 0, $$overflow = 0, $$overflow3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i = 0;
 var $ptr$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)<($1>>>0);
 if (!($7)) {
  return;
 }
 $$arith = (($3) + ($1))|0;
 $$overflow = ($$arith>>>0)<($3>>>0);
 if ($$overflow) {
  __ZN4core6option13expect_failed17h8d3ef54cab66579bE(16458,17);
  // unreachable;
 }
 $8 = $5 << 1;
 $9 = ($$arith>>>0)>=($8>>>0);
 $_0$0$sroa$speculated$i$i$i = $9 ? $$arith : $8;
 $$arith2 = ($_0$0$sroa$speculated$i$i$i*12)|0;
 $$overflow3 = ($_0$0$sroa$speculated$i$i$i>>>0)>(357913941);
 if ($$overflow3) {
  __ZN4core6option13expect_failed17h8d3ef54cab66579bE(16458,17);
  // unreachable;
 }
 $10 = ($$arith2|0)<(0);
 if ($10) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(5428);
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = (___rust_allocate($$arith2,4)|0);
  $ptr$0$i = $12;
 } else {
  $13 = HEAP32[$0>>2]|0;
  $14 = ($5*12)|0;
  $15 = (___rust_reallocate($13,$14,$$arith2,4)|0);
  $ptr$0$i = $15;
 }
 $16 = ($ptr$0$i|0)==(0|0);
 if ($16) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 }
 HEAP32[$0>>2] = $ptr$0$i;
 HEAP32[$4>>2] = $_0$0$sroa$speculated$i$i$i;
 return;
}
function __ZN3std3ffi5c_str7CString4_new17h1f1ce767c4ad7e8fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_13 = 0;
 var $_9$sroa$4$sroa$0$0$_9$sroa$4$0$$sroa_cast$sroa_idx = 0, $_9$sroa$4$sroa$4$0$_9$sroa$4$0$$sroa_cast$sroa_idx38 = 0, $_9$sroa$4$sroa$5$0$_9$sroa$4$0$$sroa_cast$sroa_idx40 = 0, $bytes$sroa$0$0$copyload = 0, $bytes$sroa$7$0$$sroa_idx17 = 0, $bytes$sroa$7$0$$sroa_idx18 = 0, $bytes$sroa$7$0$copyload = 0, $bytes$sroa$8$0$$sroa_idx23 = 0, $bytes$sroa$8$0$$sroa_idx24 = 0, $bytes$sroa$8$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_13 = sp + 8|0;
 $_12 = sp;
 $bytes$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 $bytes$sroa$7$0$$sroa_idx17 = ((($1)) + 4|0);
 $bytes$sroa$7$0$copyload = HEAP32[$bytes$sroa$7$0$$sroa_idx17>>2]|0;
 $bytes$sroa$8$0$$sroa_idx23 = ((($1)) + 8|0);
 $bytes$sroa$8$0$copyload = HEAP32[$bytes$sroa$8$0$$sroa_idx23>>2]|0;
 $2 = (_memchr($bytes$sroa$0$0$copyload,0,$bytes$sroa$8$0$copyload)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$_13>>2] = $bytes$sroa$0$0$copyload;
  $bytes$sroa$7$0$$sroa_idx18 = ((($_13)) + 4|0);
  HEAP32[$bytes$sroa$7$0$$sroa_idx18>>2] = $bytes$sroa$7$0$copyload;
  $bytes$sroa$8$0$$sroa_idx24 = ((($_13)) + 8|0);
  HEAP32[$bytes$sroa$8$0$$sroa_idx24>>2] = $bytes$sroa$8$0$copyload;
  __ZN3std3ffi5c_str7CString18from_vec_unchecked17h1f03be756c19fa64E($_12,$_13);
  $4 = ((($0)) + 4|0);
  $5 = $_12;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = $4;
  $12 = $11;
  HEAP32[$12>>2] = $7;
  $13 = (($11) + 4)|0;
  $14 = $13;
  HEAP32[$14>>2] = $10;
  $$sink = 0;
  HEAP32[$0>>2] = $$sink;
  STACKTOP = sp;return;
 } else {
  $15 = $2;
  $16 = $bytes$sroa$0$0$copyload;
  $17 = (($15) - ($16))|0;
  $18 = ((($0)) + 4|0);
  HEAP32[$18>>2] = $17;
  $_9$sroa$4$sroa$0$0$_9$sroa$4$0$$sroa_cast$sroa_idx = ((($0)) + 8|0);
  HEAP32[$_9$sroa$4$sroa$0$0$_9$sroa$4$0$$sroa_cast$sroa_idx>>2] = $bytes$sroa$0$0$copyload;
  $_9$sroa$4$sroa$4$0$_9$sroa$4$0$$sroa_cast$sroa_idx38 = ((($0)) + 12|0);
  HEAP32[$_9$sroa$4$sroa$4$0$_9$sroa$4$0$$sroa_cast$sroa_idx38>>2] = $bytes$sroa$7$0$copyload;
  $_9$sroa$4$sroa$5$0$_9$sroa$4$0$$sroa_cast$sroa_idx40 = ((($0)) + 16|0);
  HEAP32[$_9$sroa$4$sroa$5$0$_9$sroa$4$0$$sroa_cast$sroa_idx40>>2] = $bytes$sroa$8$0$copyload;
  $$sink = 1;
  HEAP32[$0>>2] = $$sink;
  STACKTOP = sp;return;
 }
}
function __ZN61__LT_std__ffi__c_str__CString_u20_as_u20_core__ops__Deref_GT_5deref17h6ee1892acd69117dE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$retVal>>2] = $1;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $3;
 return;
}
function __ZN3std3ffi5c_str4CStr8from_ptr17h9c8435f50999c60aE($retVal,$0) {
 $retVal = $retVal|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 HEAP32[$retVal>>2] = $0;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $2;
 return;
}
function __ZN3std3ffi5c_str4CStr6as_ptr17hc1fe027c94b47f14E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN3std3ffi5c_str4CStr15to_string_lossy17h44d0b433f0f1a9d0E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($2) + -1)|0;
 $4 = ($2|0)==(0);
 if ($4) {
  __ZN4core5slice20slice_index_len_fail17hc8606abb7e325facE($3,0);
  // unreachable;
 } else {
  __ZN11collections6string6String15from_utf8_lossy17h557010252764494dE($0,$1,$3);
  return;
 }
}
function __ZN3std10sys_common11at_exit_imp4push17hfbdc24c7c1f5104fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i = 0, $$sroa_idx$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$5$0 = 0, $ret$0$off023 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock(((23912)|0))|0);
 $2 = HEAP32[5990]|0;
 $3 = $2;
 L1: do {
  switch ($2|0) {
  case 0:  {
   $4 = (___rust_allocate(12,4)|0);
   $5 = ($4|0)==(0|0);
   if (!($5)) {
    HEAP32[$4>>2] = 1;
    $$sroa_idx$i$i = ((($4)) + 4|0);
    HEAP32[$$sroa_idx$i$i>>2] = 0;
    $13 = ((($4)) + 8|0);
    HEAP32[$13>>2] = 0;
    HEAP32[5990] = $4;
    $15 = $4;
    break L1;
   }
   __THREW__ = 0;
   invoke_v(367);
   $6 = __THREW__; __THREW__ = 0;
   $7 = ___cxa_find_matching_catch_2()|0;
   $8 = tempRet0;
   $9 = HEAP32[$1>>2]|0;
   FUNCTION_TABLE_vi[$9 & 511]($0);
   $10 = ((($1)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $personalityslot$sroa$0$0 = $7;$personalityslot$sroa$5$0 = $8;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   $38 = ((($1)) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   ___rust_deallocate($0,$11,$39);
   $personalityslot$sroa$0$0 = $7;$personalityslot$sroa$5$0 = $8;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
   break;
  }
  case 1:  {
   (_pthread_mutex_unlock(((23912)|0))|0);
   $40 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   invoke_vi($40|0,($0|0));
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if ($42) {
    $50 = ___cxa_find_matching_catch_2()|0;
    $51 = tempRet0;
    $personalityslot$sroa$0$0 = $50;$personalityslot$sroa$5$0 = $51;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   $43 = ((($1)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0);
   if ($45) {
    $ret$0$off023 = 0;
    return ($ret$0$off023|0);
   }
   $46 = ((($1)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   ___rust_deallocate($0,$44,$47);
   $ret$0$off023 = 0;
   return ($ret$0$off023|0);
   break;
  }
  default: {
   $15 = $3;
  }
  }
 } while(0);
 $14 = ((($15)) + 8|0);
 $16 = HEAP32[$14>>2]|0;
 $17 = ((($15)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($16|0)==($18|0);
 do {
  if ($19) {
   __THREW__ = 0;
   invoke_vi(391,($15|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if (!($21)) {
    $$pre$i = HEAP32[$14>>2]|0;
    $34 = $$pre$i;
    break;
   }
   $22 = ___cxa_find_matching_catch_2()|0;
   $23 = tempRet0;
   $24 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   invoke_vi($24|0,($0|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    $48 = ___cxa_find_matching_catch_2()|0;
    $49 = tempRet0;
    $personalityslot$sroa$0$0 = $48;$personalityslot$sroa$5$0 = $49;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   $27 = ((($1)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0);
   if (!($29)) {
    $30 = ((($1)) + 8|0);
    $31 = HEAP32[$30>>2]|0;
    ___rust_deallocate($0,$28,$31);
   }
   $personalityslot$sroa$0$0 = $22;$personalityslot$sroa$5$0 = $23;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  } else {
   $34 = $16;
  }
 } while(0);
 $32 = HEAP32[$15>>2]|0;
 $33 = (($32) + ($34<<3)|0);
 HEAP32[$33>>2] = $0;
 $35 = (((($32) + ($34<<3)|0)) + 4|0);
 HEAP32[$35>>2] = $1;
 $36 = HEAP32[$14>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[$14>>2] = $37;
 (_pthread_mutex_unlock(((23912)|0))|0);
 $ret$0$off023 = 1;
 return ($ret$0$off023|0);
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17hba8cde8aeb456f77E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13$sroa$0$0 = 0, $_13$sroa$5$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $10 = (___rust_allocate(32,4)|0);
   $_13$sroa$0$0 = 4;$_13$sroa$5$0 = $10;
  } else {
   $4 = $2 << 4;
   $5 = ($4|0)<(0);
   if ($5) {
    __ZN4core9panicking5panic17hee9f4f8d26a91787E(5428);
    // unreachable;
   } else {
    $6 = $2 << 1;
    $7 = HEAP32[$0>>2]|0;
    $8 = $2 << 3;
    $9 = (___rust_reallocate($7,$8,$4,4)|0);
    $_13$sroa$0$0 = $6;$_13$sroa$5$0 = $9;
    break;
   }
  }
 } while(0);
 $11 = ($_13$sroa$5$0|0)==(0|0);
 if ($11) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 } else {
  HEAP32[$0>>2] = $_13$sroa$5$0;
  HEAP32[$1>>2] = $_13$sroa$0$0;
  return;
 }
}
function __ZN3std2io5stdio6stdout17h08356fbd64c2b659E() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_17$sroa$0$0$copyload$i$i = 0, $_17$sroa$0$0$copyload$pre$i$i = 0, $_19$sroa$0$0$copyload$i = 0, $magicptr$i = 0, $ret$i$i = 0, $switch3tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ret$i$i = sp;
 (_pthread_mutex_lock(((288)|0))|0);
 $0 = HEAP32[(312)>>2]|0;
 $magicptr$i = $0;
 L1: do {
  switch ($magicptr$i|0) {
  case 0:  {
   $2 = (___rust_allocate(4,4)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    __ZN5alloc3oom3oom17h3b36c708663c15cdE();
    // unreachable;
   }
   HEAP32[$2>>2] = 288;
   $4 = (__ZN3std10sys_common11at_exit_imp4push17hfbdc24c7c1f5104fE($2,320)|0);
   $5 = HEAP32[(316)>>2]|0;
   $6 = (FUNCTION_TABLE_i[$5 & 511]()|0);
   HEAP32[$ret$i$i>>2] = $6;
   $7 = $6;
   do {
    if ($4) {
     $8 = HEAP32[$7>>2]|0;HEAP32[$7>>2] = (($8+1)|0);
     $9 = ($8|0)<(0);
     if ($9) {
      _llvm_trap();
      // unreachable;
     }
     $10 = (___rust_allocate(4,4)|0);
     $11 = ($10|0)==(0|0);
     if (!($11)) {
      HEAP32[$10>>2] = $7;
      HEAP32[(312)>>2] = $10;
      $_17$sroa$0$0$copyload$pre$i$i = HEAP32[$ret$i$i>>2]|0;
      $_17$sroa$0$0$copyload$i$i = $_17$sroa$0$0$copyload$pre$i$i;
      break;
     }
     __THREW__ = 0;
     invoke_v(367);
     $12 = __THREW__; __THREW__ = 0;
     $1 = ___cxa_find_matching_catch_2()|0;
     $13 = tempRet0;
     $14 = HEAP32[$ret$i$i>>2]|0;
     $15 = HEAP32[$14>>2]|0;HEAP32[$14>>2] = (($15-1)|0);
     $16 = ($15|0)==(1);
     if (!($16)) {
      ___resumeException($1|0);
      // unreachable;
     }
     /* fence */;
     __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h011f944b815a0c26E($ret$i$i);
     ___resumeException($1|0);
     // unreachable;
    } else {
     $_17$sroa$0$0$copyload$i$i = $6;
    }
   } while(0);
   $_19$sroa$0$0$copyload$i = $_17$sroa$0$0$copyload$i$i;
   break;
  }
  case 1:  {
   (_pthread_mutex_unlock(((288)|0))|0);
   __ZN4core6option13expect_failed17h8d3ef54cab66579bE(17570,36);
   // unreachable;
   break;
  }
  default: {
   $17 = HEAP32[$0>>2]|0;
   $18 = HEAP32[$17>>2]|0;HEAP32[$17>>2] = (($18+1)|0);
   $19 = ($18|0)<(0);
   if ($19) {
    _llvm_trap();
    // unreachable;
   } else {
    $20 = $17;
    $_19$sroa$0$0$copyload$i = $20;
    break L1;
   }
  }
  }
 } while(0);
 (_pthread_mutex_unlock(((288)|0))|0);
 $switch3tmp$i = ($_19$sroa$0$0$copyload$i|0)==(0);
 if ($switch3tmp$i) {
  __ZN4core6option13expect_failed17h8d3ef54cab66579bE(17570,36);
  // unreachable;
 } else {
  STACKTOP = sp;return ($_19$sroa$0$0$copyload$i|0);
 }
 return (0)|0;
}
function __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h011f944b815a0c26E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 (_pthread_mutex_destroy(($3|0))|0);
 $4 = HEAP32[$2>>2]|0;
 ___rust_deallocate($4,24,8);
 $5 = ((($1)) + 20|0);
 __ZN4drop17h192a17ef9555c35fE($5);
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;HEAP32[$7>>2] = (($8-1)|0);
 $9 = ($8|0)==(1);
 if (!($9)) {
  return;
 }
 /* fence */;
 ___rust_deallocate($1,44,4);
 return;
}
function __ZN4drop17h192a17ef9555c35fE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_r$i$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i$i$i$i = 0, $not$$i$i$i$i$i$i$i = 0, $not$$i$i$i$i$i2$i$i = 0, $switch$i$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_r$i$i$i = sp;
 $1 = HEAP8[$0>>0]|0;
 $switch$i$i$i$i = ($1<<24>>24)==(1);
 L1: do {
  if ($switch$i$i$i$i) {
   $2 = ((($0)) + 16|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    __THREW__ = 0;
    invoke_vii(392,($_r$i$i$i|0),($0|0));
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    do {
     if (!($6)) {
      $7 = HEAP32[$_r$i$i$i>>2]|0;
      $cond$i$i$i$i = ($7|0)==(1);
      if ($cond$i$i$i$i) {
       $8 = ((($_r$i$i$i)) + 4|0);
       $9 = HEAP8[$8>>0]|0;
       $cond$i$i$i$i$i$i = ($9<<24>>24)==(2);
       if ($cond$i$i$i$i$i$i) {
        $10 = ((($_r$i$i$i)) + 8|0);
        $11 = HEAP32[$10>>2]|0;
        $12 = ((($11)) + 4|0);
        $13 = HEAP32[$12>>2]|0;
        $14 = ((($11)) + 8|0);
        $15 = HEAP32[$14>>2]|0;
        $16 = HEAP32[$15>>2]|0;
        __THREW__ = 0;
        invoke_vi($16|0,($13|0));
        $17 = __THREW__; __THREW__ = 0;
        $18 = $17&1;
        if ($18) {
         break;
        }
        $19 = ((($15)) + 4|0);
        $20 = HEAP32[$19>>2]|0;
        $21 = ($20|0)==(0);
        if (!($21)) {
         $22 = ((($15)) + 8|0);
         $23 = HEAP32[$22>>2]|0;
         ___rust_deallocate($13,$20,$23);
        }
        ___rust_deallocate($11,12,4);
       }
      }
      break L1;
     }
    } while(0);
    $24 = ___cxa_find_matching_catch_2()|0;
    $25 = tempRet0;
    $26 = ((($0)) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $not$$i$i$i$i$i$i$i = ($27|0)==(0);
    if ($not$$i$i$i$i$i$i$i) {
     ___resumeException($24|0);
     // unreachable;
    }
    $28 = ((($0)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    ___rust_deallocate($29,$27,1);
    ___resumeException($24|0);
    // unreachable;
   }
  }
 } while(0);
 $30 = ((($0)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $not$$i$i$i$i$i2$i$i = ($31|0)==(0);
 if ($not$$i$i$i$i$i2$i$i) {
  STACKTOP = sp;return;
 }
 $32 = ((($0)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 ___rust_deallocate($33,$31,1);
 STACKTOP = sp;return;
}
function __ZN46__LT_std__io__buffered__BufWriter_LT_W_GT__GT_9flush_buf17h68208c7a1c5b86cbE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i$i = 0, $_4$i$i$i = 0, $_45$sroa$4$0$$sroa_idx270 = 0;
 var $_45$sroa$5$0$$sroa_idx272 = 0, $cond = 0, $cond$i = 0, $cond$i$i$i = 0, $cond351 = 0, $not$switch$i = 0, $or$cond = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$8$0 = 0, $r$i$i$sroa$6$sroa$6$0$extract$shift = 0, $r$sroa$12$sroa$0$0$insert$ext229 = 0, $r$sroa$12$sroa$0$0$insert$insert231 = 0, $r$sroa$12$sroa$0$2316 = 0, $r$sroa$12$sroa$14$0$insert$insert239 = 0, $r$sroa$12$sroa$14$0$insert$shift237 = 0, $r$sroa$12$sroa$14$1314$in = 0, $r$sroa$12$sroa$15$sroa$0$1313 = 0, $ret$sroa$0$1 = 0, $ret$sroa$0$1439 = 0, $ret$sroa$11$sroa$0$0$insert$ext = 0;
 var $ret$sroa$11$sroa$0$1 = 0, $ret$sroa$11$sroa$0$1437 = 0, $ret$sroa$18$1 = 0, $ret$sroa$18$1438 = 0, $switch$i77 = 0, $written$0$ph391 = 0, $written$0$ph395 = 0, $x$i$sroa$4$0$$sroa_raw_idx$i = 0, $x$i$sroa$4$i = 0, $x$i$sroa$5$0$$sroa_idx$i = 0, $x$i$sroa$6$0$$sroa_idx$i = 0, $x$sroa$0$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $x$i$sroa$4$i = sp + 28|0;
 $x$sroa$0$i$i$i$i$i = sp + 16|0;
 $_4$i$i$i = sp;
 $2 = ((($1)) + 4|0);
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $ret$sroa$0$1439 = 0;$ret$sroa$11$sroa$0$1437 = 0;$ret$sroa$18$1438 = 0;
  } else {
   $6 = ((($1)) + 16|0);
   $7 = ((($1)) + 1|0);
   $written$0$ph395 = 0;
   L3: while(1) {
    while(1) {
     HEAP8[$6>>0] = 1;
     $20 = HEAP8[$1>>0]|0;
     $not$switch$i = ($20<<24>>24)==(1);
     if (!($not$switch$i)) {
      label = 9;
      break L3;
     }
     $22 = HEAP32[$3>>2]|0;
     $23 = ($22>>>0)<($written$0$ph395>>>0);
     if ($23) {
      label = 11;
      break L3;
     }
     $25 = (($22) - ($written$0$ph395))|0;
     $26 = HEAP8[$7>>0]|0;
     $switch$i77 = ($26<<24>>24)==(1);
     if ($switch$i77) {
      $r$sroa$12$sroa$0$2316 = $25;$r$sroa$12$sroa$14$1314$in = $25;
      break;
     }
     $27 = HEAP32[$2>>2]|0;
     $28 = (($27) + ($written$0$ph395)|0);
     $29 = ($25|0)>(-1);
     $_0$0$sroa$speculated$i$i$i$i = $29 ? $25 : 2147483647;
     $30 = (_write(1,$28,$_0$0$sroa$speculated$i$i$i$i)|0);
     $31 = ($30|0)==(-1);
     if (!($31)) {
      label = 20;
      break;
     }
     $32 = (___errno_location()|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(9);
     if ($34) {
      $r$sroa$12$sroa$0$2316 = $25;$r$sroa$12$sroa$14$1314$in = $25;
      break;
     }
     HEAP8[$6>>0] = 0;
     $cond351 = ($33|0)==(4);
     if (!($cond351)) {
      $ret$sroa$0$1 = 1;$ret$sroa$11$sroa$0$1 = 0;$ret$sroa$18$1 = $33;$written$0$ph391 = $written$0$ph395;
      break L3;
     }
    }
    if ((label|0) == 20) {
     label = 0;
     $r$i$i$sroa$6$sroa$6$0$extract$shift = $30 & -256;
     $r$sroa$12$sroa$0$2316 = $30;$r$sroa$12$sroa$14$1314$in = $r$i$i$sroa$6$sroa$6$0$extract$shift;
    }
    HEAP8[$6>>0] = 0;
    $r$sroa$12$sroa$15$sroa$0$1313 = $r$sroa$12$sroa$14$1314$in & -65536;
    $r$sroa$12$sroa$14$0$insert$shift237 = $r$sroa$12$sroa$14$1314$in & 65280;
    $r$sroa$12$sroa$0$0$insert$ext229 = $r$sroa$12$sroa$0$2316 & 255;
    $r$sroa$12$sroa$14$0$insert$insert239 = $r$sroa$12$sroa$14$0$insert$shift237 | $r$sroa$12$sroa$0$0$insert$ext229;
    $r$sroa$12$sroa$0$0$insert$insert231 = $r$sroa$12$sroa$14$0$insert$insert239 | $r$sroa$12$sroa$15$sroa$0$1313;
    $cond = ($r$sroa$12$sroa$0$0$insert$insert231|0)==(0);
    $43 = (($r$sroa$12$sroa$0$0$insert$insert231) + ($written$0$ph395))|0;
    if ($cond) {
     label = 15;
     break;
    }
    $44 = ($43>>>0)<($4>>>0);
    if ($44) {
     $written$0$ph395 = $43;
    } else {
     $ret$sroa$0$1 = 0;$ret$sroa$11$sroa$0$1 = 0;$ret$sroa$18$1 = 0;$written$0$ph391 = $43;
     break;
    }
   }
   L16: do {
    if ((label|0) == 9) {
     __THREW__ = 0;
     invoke_vi(78,(5548|0));
     $21 = __THREW__; __THREW__ = 0;
     label = 31;
    }
    else if ((label|0) == 11) {
     __THREW__ = 0;
     invoke_vii(393,($written$0$ph395|0),($22|0));
     $24 = __THREW__; __THREW__ = 0;
     label = 31;
    }
    else if ((label|0) == 15) {
     __THREW__ = 0;
     invoke_viii(244,($_4$i$i$i|0),(17606|0),33);
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     do {
      if (!($36)) {
       ;HEAP32[$x$sroa$0$i$i$i$i$i>>2]=HEAP32[$_4$i$i$i>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]=HEAP32[$_4$i$i$i+4>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]=HEAP32[$_4$i$i$i+8>>2]|0;
       $37 = (___rust_allocate(12,4)|0);
       $38 = ($37|0)==(0|0);
       if ($38) {
        __THREW__ = 0;
        invoke_v(367);
        $39 = __THREW__; __THREW__ = 0;
        break;
       }
       ;HEAP32[$37>>2]=HEAP32[$x$sroa$0$i$i$i$i$i>>2]|0;HEAP32[$37+4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]|0;HEAP32[$37+8>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]|0;
       $40 = (___rust_allocate(12,4)|0);
       $41 = ($40|0)==(0|0);
       if ($41) {
        __THREW__ = 0;
        invoke_v(367);
        $42 = __THREW__; __THREW__ = 0;
        break;
       } else {
        HEAP8[$40>>0] = 14;
        $x$i$sroa$4$0$$sroa_raw_idx$i = ((($40)) + 1|0);
        ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$x$i$sroa$4$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$x$i$sroa$4$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$x$i$sroa$4$i+2>>0]|0;
        $x$i$sroa$5$0$$sroa_idx$i = ((($40)) + 4|0);
        HEAP32[$x$i$sroa$5$0$$sroa_idx$i>>2] = $37;
        $x$i$sroa$6$0$$sroa_idx$i = ((($40)) + 8|0);
        HEAP32[$x$i$sroa$6$0$$sroa_idx$i>>2] = 152;
        $58 = $40;
        $ret$sroa$0$1 = 1;$ret$sroa$11$sroa$0$1 = 2;$ret$sroa$18$1 = $58;$written$0$ph391 = $written$0$ph395;
        break L16;
       }
      }
     } while(0);
     $54 = ___cxa_find_matching_catch_2()|0;
     $55 = tempRet0;
     $personalityslot$sroa$0$0 = $54;$personalityslot$sroa$8$0 = $55;
     ___resumeException($personalityslot$sroa$0$0|0);
     // unreachable;
    }
   } while(0);
   if ((label|0) == 31) {
    $56 = ___cxa_find_matching_catch_2()|0;
    $57 = tempRet0;
    $personalityslot$sroa$0$0 = $56;$personalityslot$sroa$8$0 = $57;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   $19 = ($written$0$ph391|0)==(0);
   if ($19) {
    $ret$sroa$0$1439 = $ret$sroa$0$1;$ret$sroa$11$sroa$0$1437 = $ret$sroa$11$sroa$0$1;$ret$sroa$18$1438 = $ret$sroa$18$1;
   } else {
    $45 = HEAP32[$3>>2]|0;
    $46 = ($45>>>0)<($written$0$ph391>>>0);
    if (!($46)) {
     HEAP32[$3>>2] = 0;
     $50 = (($45) - ($written$0$ph391))|0;
     $51 = ($50|0)==(0);
     if ($51) {
      $ret$sroa$0$1439 = $ret$sroa$0$1;$ret$sroa$11$sroa$0$1437 = $ret$sroa$11$sroa$0$1;$ret$sroa$18$1438 = $ret$sroa$18$1;
      break;
     }
     $52 = HEAP32[$2>>2]|0;
     $53 = (($52) + ($written$0$ph391)|0);
     _memmove(($52|0),($53|0),($50|0))|0;
     HEAP32[$3>>2] = $50;
     $ret$sroa$0$1439 = $ret$sroa$0$1;$ret$sroa$11$sroa$0$1437 = $ret$sroa$11$sroa$0$1;$ret$sroa$18$1438 = $ret$sroa$18$1;
     break;
    }
    __THREW__ = 0;
    invoke_vi(78,(5292|0));
    $47 = __THREW__; __THREW__ = 0;
    $48 = ___cxa_find_matching_catch_2()|0;
    $49 = tempRet0;
    $cond$i = ($ret$sroa$0$1|0)==(1);
    $cond$i$i$i = ($ret$sroa$11$sroa$0$1<<24>>24)==(2);
    $or$cond = $cond$i$i$i & $cond$i;
    if (!($or$cond)) {
     $personalityslot$sroa$0$0 = $48;$personalityslot$sroa$8$0 = $49;
     ___resumeException($personalityslot$sroa$0$0|0);
     // unreachable;
    }
    $8 = $ret$sroa$18$1;
    $9 = ((($8)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($8)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP32[$12>>2]|0;
    FUNCTION_TABLE_vi[$13 & 511]($10);
    $14 = ((($12)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0);
    if (!($16)) {
     $17 = ((($12)) + 8|0);
     $18 = HEAP32[$17>>2]|0;
     ___rust_deallocate($10,$15,$18);
    }
    ___rust_deallocate($8,12,4);
    $personalityslot$sroa$0$0 = $48;$personalityslot$sroa$8$0 = $49;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
  }
 } while(0);
 $ret$sroa$11$sroa$0$0$insert$ext = $ret$sroa$11$sroa$0$1437&255;
 HEAP32[$0>>2] = $ret$sroa$0$1439;
 $_45$sroa$4$0$$sroa_idx270 = ((($0)) + 4|0);
 HEAP32[$_45$sroa$4$0$$sroa_idx270>>2] = $ret$sroa$11$sroa$0$0$insert$ext;
 $_45$sroa$5$0$$sroa_idx272 = ((($0)) + 8|0);
 HEAP32[$_45$sroa$5$0$$sroa_idx272>>2] = $ret$sroa$18$1438;
 STACKTOP = sp;return;
}
function __ZN50__LT_F_u20_as_u20_alloc__boxed__FnBox_LT_A_GT__GT_8call_box17h25f050d28cb6d859E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_5$sroa$0$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $_5$sroa$0$0$copyload = HEAP32[$0>>2]|0;
 (_pthread_mutex_lock(($_5$sroa$0$0$copyload|0))|0);
 $1 = ((($_5$sroa$0$0$copyload)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = (1);
 (_pthread_mutex_unlock(($_5$sroa$0$0$copyload|0))|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;HEAP32[$3>>2] = (($4-1)|0);
 $5 = ($4|0)==(1);
 if (!($5)) {
  ___rust_deallocate($2,4,4);
  ___rust_deallocate($0,4,4);
  return;
 }
 /* fence */;
 __THREW__ = 0;
 invoke_vi(394,($2|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = tempRet0;
  ___rust_deallocate($0,4,4);
  ___resumeException($8|0);
  // unreachable;
 } else {
  ___rust_deallocate($2,4,4);
  ___rust_deallocate($0,4,4);
  return;
 }
}
function __ZN3std2io5stdio6stdout11stdout_init17hf41e2a08214bb190E() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_5$sroa$14 = 0, $_5$sroa$16 = 0, $_5$sroa$5 = 0, $_5$sroa$9$i$i = 0, $_6$sroa$4$sroa$10 = 0, $_7$sroa$0$0$$sroa_idx$i = 0, $_7$sroa$11 = 0, $attr$i$i = 0, $data$i$sroa$0$0$$sroa_idx = 0, $data$i$sroa$10$0$$sroa_idx = 0, $data$i$sroa$11$0$$sroa_idx = 0;
 var $data$i$sroa$12$0$$sroa_idx = 0, $data$i$sroa$13$0$$sroa_raw_idx = 0, $data$i$sroa$14 = 0, $data$i$sroa$14$0$$sroa_raw_idx = 0, $data$i$sroa$15$0$$sroa_raw_idx = 0, $data$i$sroa$16 = 0, $data$i$sroa$16$0$$sroa_raw_idx = 0, $data$i$sroa$4$0$$sroa_raw_idx = 0, $data$i$sroa$5 = 0, $data$i$sroa$5$0$$sroa_raw_idx = 0, $data$i$sroa$6$0$$sroa_idx = 0, $data$i$sroa$7$0$$sroa_raw_idx = 0, $data$i$sroa$8$0$$sroa_raw_idx = 0, $mutex$i$sroa$5 = 0, $t$i$sroa$11 = 0, $t$i$sroa$13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $attr$i$i = sp;
 $mutex$i$sroa$5 = sp + 37|0;
 $t$i$sroa$11 = sp + 34|0;
 $t$i$sroa$13 = sp + 31|0;
 $_5$sroa$9$i$i = sp + 28|0;
 $data$i$sroa$5 = sp + 25|0;
 $data$i$sroa$14 = sp + 22|0;
 $data$i$sroa$16 = sp + 19|0;
 $_7$sroa$11 = sp + 16|0;
 $_6$sroa$4$sroa$10 = sp + 13|0;
 $_5$sroa$5 = sp + 10|0;
 $_5$sroa$14 = sp + 7|0;
 $_5$sroa$16 = sp + 4|0;
 $0 = (___rust_allocate(1024,1)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 }
 $2 = $0;
 ;HEAP8[$_6$sroa$4$sroa$10>>0]=HEAP8[$_5$sroa$9$i$i>>0]|0;HEAP8[$_6$sroa$4$sroa$10+1>>0]=HEAP8[$_5$sroa$9$i$i+1>>0]|0;HEAP8[$_6$sroa$4$sroa$10+2>>0]=HEAP8[$_5$sroa$9$i$i+2>>0]|0;
 ;HEAP8[$t$i$sroa$11>>0]=HEAP8[$_6$sroa$4$sroa$10>>0]|0;HEAP8[$t$i$sroa$11+1>>0]=HEAP8[$_6$sroa$4$sroa$10+1>>0]|0;HEAP8[$t$i$sroa$11+2>>0]=HEAP8[$_6$sroa$4$sroa$10+2>>0]|0;
 ;HEAP8[$t$i$sroa$13>>0]=HEAP8[$_7$sroa$11>>0]|0;HEAP8[$t$i$sroa$13+1>>0]=HEAP8[$_7$sroa$11+1>>0]|0;HEAP8[$t$i$sroa$13+2>>0]=HEAP8[$_7$sroa$11+2>>0]|0;
 $3 = (___rust_allocate(24,8)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 }
 ;HEAP8[$_5$sroa$14>>0]=HEAP8[$t$i$sroa$11>>0]|0;HEAP8[$_5$sroa$14+1>>0]=HEAP8[$t$i$sroa$11+1>>0]|0;HEAP8[$_5$sroa$14+2>>0]=HEAP8[$t$i$sroa$11+2>>0]|0;
 ;HEAP8[$_5$sroa$16>>0]=HEAP8[$t$i$sroa$13>>0]|0;HEAP8[$_5$sroa$16+1>>0]=HEAP8[$t$i$sroa$13+1>>0]|0;HEAP8[$_5$sroa$16+2>>0]=HEAP8[$t$i$sroa$13+2>>0]|0;
 (_pthread_mutexattr_init(($attr$i$i|0))|0);
 (_pthread_mutexattr_settype(($attr$i$i|0),1)|0);
 (_pthread_mutex_init(($3|0),($attr$i$i|0))|0);
 (_pthread_mutexattr_destroy(($attr$i$i|0))|0);
 ;HEAP8[$_5$sroa$5>>0]=HEAP8[$mutex$i$sroa$5>>0]|0;HEAP8[$_5$sroa$5+1>>0]=HEAP8[$mutex$i$sroa$5+1>>0]|0;HEAP8[$_5$sroa$5+2>>0]=HEAP8[$mutex$i$sroa$5+2>>0]|0;
 ;HEAP8[$data$i$sroa$5>>0]=HEAP8[$_5$sroa$5>>0]|0;HEAP8[$data$i$sroa$5+1>>0]=HEAP8[$_5$sroa$5+1>>0]|0;HEAP8[$data$i$sroa$5+2>>0]=HEAP8[$_5$sroa$5+2>>0]|0;
 ;HEAP8[$data$i$sroa$14>>0]=HEAP8[$_5$sroa$14>>0]|0;HEAP8[$data$i$sroa$14+1>>0]=HEAP8[$_5$sroa$14+1>>0]|0;HEAP8[$data$i$sroa$14+2>>0]=HEAP8[$_5$sroa$14+2>>0]|0;
 ;HEAP8[$data$i$sroa$16>>0]=HEAP8[$_5$sroa$16>>0]|0;HEAP8[$data$i$sroa$16+1>>0]=HEAP8[$_5$sroa$16+1>>0]|0;HEAP8[$data$i$sroa$16+2>>0]=HEAP8[$_5$sroa$16+2>>0]|0;
 $5 = (___rust_allocate(44,4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 } else {
  $7 = $3;
  HEAP32[$5>>2] = 1;
  $_7$sroa$0$0$$sroa_idx$i = ((($5)) + 4|0);
  HEAP32[$_7$sroa$0$0$$sroa_idx$i>>2] = 1;
  $data$i$sroa$0$0$$sroa_idx = ((($5)) + 8|0);
  HEAP32[$data$i$sroa$0$0$$sroa_idx>>2] = $7;
  $data$i$sroa$4$0$$sroa_raw_idx = ((($5)) + 12|0);
  HEAP8[$data$i$sroa$4$0$$sroa_raw_idx>>0] = 0;
  $data$i$sroa$5$0$$sroa_raw_idx = ((($5)) + 13|0);
  ;HEAP8[$data$i$sroa$5$0$$sroa_raw_idx>>0]=HEAP8[$data$i$sroa$5>>0]|0;HEAP8[$data$i$sroa$5$0$$sroa_raw_idx+1>>0]=HEAP8[$data$i$sroa$5+1>>0]|0;HEAP8[$data$i$sroa$5$0$$sroa_raw_idx+2>>0]=HEAP8[$data$i$sroa$5+2>>0]|0;
  $data$i$sroa$6$0$$sroa_idx = ((($5)) + 16|0);
  HEAP32[$data$i$sroa$6$0$$sroa_idx>>2] = 0;
  $data$i$sroa$7$0$$sroa_raw_idx = ((($5)) + 20|0);
  HEAP8[$data$i$sroa$7$0$$sroa_raw_idx>>0] = 1;
  $data$i$sroa$8$0$$sroa_raw_idx = ((($5)) + 21|0);
  HEAP8[$data$i$sroa$8$0$$sroa_raw_idx>>0] = 0;
  $data$i$sroa$10$0$$sroa_idx = ((($5)) + 24|0);
  HEAP32[$data$i$sroa$10$0$$sroa_idx>>2] = $2;
  $data$i$sroa$11$0$$sroa_idx = ((($5)) + 28|0);
  HEAP32[$data$i$sroa$11$0$$sroa_idx>>2] = 1024;
  $data$i$sroa$12$0$$sroa_idx = ((($5)) + 32|0);
  HEAP32[$data$i$sroa$12$0$$sroa_idx>>2] = 0;
  $data$i$sroa$13$0$$sroa_raw_idx = ((($5)) + 36|0);
  HEAP8[$data$i$sroa$13$0$$sroa_raw_idx>>0] = 0;
  $data$i$sroa$14$0$$sroa_raw_idx = ((($5)) + 37|0);
  ;HEAP8[$data$i$sroa$14$0$$sroa_raw_idx>>0]=HEAP8[$data$i$sroa$14>>0]|0;HEAP8[$data$i$sroa$14$0$$sroa_raw_idx+1>>0]=HEAP8[$data$i$sroa$14+1>>0]|0;HEAP8[$data$i$sroa$14$0$$sroa_raw_idx+2>>0]=HEAP8[$data$i$sroa$14+2>>0]|0;
  $data$i$sroa$15$0$$sroa_raw_idx = ((($5)) + 40|0);
  HEAP8[$data$i$sroa$15$0$$sroa_raw_idx>>0] = 0;
  $data$i$sroa$16$0$$sroa_raw_idx = ((($5)) + 41|0);
  ;HEAP8[$data$i$sroa$16$0$$sroa_raw_idx>>0]=HEAP8[$data$i$sroa$16>>0]|0;HEAP8[$data$i$sroa$16$0$$sroa_raw_idx+1>>0]=HEAP8[$data$i$sroa$16+1>>0]|0;HEAP8[$data$i$sroa$16$0$$sroa_raw_idx+2>>0]=HEAP8[$data$i$sroa$16+2>>0]|0;
  $8 = $5;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZN75__LT_std__io__stdio__StdoutLock_LT__u27_a_GT__u20_as_u20_std__io__Write_GT_5write17h3c7faffa88ff4a1aE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $_17$i = 0, $_25$i = 0, $_3$i$i$i = 0;
 var $_3$i$i74$i = 0, $_3$sroa$0$0$$sroa_idx$i$i = 0, $_3$sroa$0$0$$sroa_idx$i73$i = 0, $_43$sroa$6$sroa$0$0$extract$trunc$i = 0, $_50$i = 0, $cond$i$i$i = 0, $cond$i$i$i102$i = 0, $cond$i$i$i94$i = 0, $not$switch$i$i$i$i$i$i$i = 0, $not$switch$i$i$i$i$i$i78$i = 0, $self$i52$sroa$0$0$copyload$i = 0, $self$i52$sroa$4$0$$sroa_idx222$i = 0, $self$i52$sroa$4$0$copyload$i = 0, $self$i52$sroa$6$0$$sroa_idx225$i = 0, $self$i52$sroa$6$0$copyload$i = 0, $self$sroa$0$0$copyload$i$i$i$i = 0, $self$sroa$0$0$copyload$i$i$i76$i = 0, $self$sroa$6$0$$sroa_idx44$i$i$i$i = 0, $self$sroa$6$0$$sroa_idx44$i$i$i81$i = 0, $self$sroa$6$0$copyload$i$i$i$i = 0;
 var $self$sroa$6$0$copyload$i$i$i82$i = 0, $self$sroa$9$0$$sroa_idx49$i$i$i$i = 0, $self$sroa$9$0$$sroa_idx49$i$i$i83$i = 0, $self$sroa$9$0$copyload$i$i$i$i = 0, $self$sroa$9$0$copyload$i$i$i84242$i = 0, $switch11$i = 0, $switch12$i = 0, $switch3$i$i$i$i = 0, $switch3$i$i$i77$i = 0, $switch3$i53$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_3$i$i74$i = sp + 56|0;
 $_3$i$i$i = sp + 40|0;
 $_50$i = sp + 24|0;
 $_25$i = sp + 8|0;
 $_17$i = sp;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $cond$i$i$i = ($6|0)==(0);
 if (!($cond$i$i$i)) {
  __ZN4core6result13unwrap_failed17hf5231363403271c5E();
  // unreachable;
 }
 HEAP32[$5>>2] = -1;
 $7 = ((($4)) + 12|0);
 $8 = ((($4)) + 32|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 do {
  if ($10) {
   label = 10;
  } else {
   __THREW__ = 0;
   invoke_vii(392,($_3$i$i$i|0),($7|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    $self$sroa$0$0$copyload$i$i$i$i = HEAP32[$_3$i$i$i>>2]|0;
    $switch3$i$i$i$i = ($self$sroa$0$0$copyload$i$i$i$i|0)==(1);
    if ($switch3$i$i$i$i) {
     $self$sroa$6$0$$sroa_idx44$i$i$i$i = ((($_3$i$i$i)) + 4|0);
     $self$sroa$6$0$copyload$i$i$i$i = HEAP32[$self$sroa$6$0$$sroa_idx44$i$i$i$i>>2]|0;
     $self$sroa$9$0$$sroa_idx49$i$i$i$i = ((($_3$i$i$i)) + 8|0);
     $self$sroa$9$0$copyload$i$i$i$i = HEAP32[$self$sroa$9$0$$sroa_idx49$i$i$i$i>>2]|0;
     HEAP32[$0>>2] = 1;
     $_3$sroa$0$0$$sroa_idx$i$i = ((($0)) + 4|0);
     $15 = $_3$sroa$0$0$$sroa_idx$i$i;
     $16 = $15;
     HEAP32[$16>>2] = $self$sroa$6$0$copyload$i$i$i$i;
     $17 = (($15) + 4)|0;
     $18 = $17;
     HEAP32[$18>>2] = $self$sroa$9$0$copyload$i$i$i$i;
     HEAP32[$5>>2] = 0;
     STACKTOP = sp;return;
    }
    $13 = HEAP8[$7>>0]|0;
    $not$switch$i$i$i$i$i$i$i = ($13<<24>>24)==(1);
    if ($not$switch$i$i$i$i$i$i$i) {
     HEAP8[$8>>0] = 0;
     label = 10;
     break;
    } else {
     __THREW__ = 0;
     invoke_vi(78,(5548|0));
     $14 = __THREW__; __THREW__ = 0;
     break;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 10) {
   __THREW__ = 0;
   invoke_viiii(395,($_17$i|0),10,($2|0),($3|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    $21 = HEAP32[$_17$i>>2]|0;
    $switch11$i = ($21|0)==(1);
    if (!($switch11$i)) {
     __THREW__ = 0;
     invoke_viiii(396,($0|0),($7|0),($2|0),($3|0));
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      break;
     }
     HEAP32[$5>>2] = 0;
     STACKTOP = sp;return;
    }
    $24 = ((($_17$i)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($25) + 1)|0;
    $27 = ($26>>>0)>($3>>>0);
    if ($27) {
     __THREW__ = 0;
     invoke_vii(358,($26|0),($3|0));
     $28 = __THREW__; __THREW__ = 0;
     break;
    }
    __THREW__ = 0;
    invoke_viiii(396,($_25$i|0),($7|0),($2|0),($26|0));
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if (!($30)) {
     $self$i52$sroa$0$0$copyload$i = HEAP32[$_25$i>>2]|0;
     $self$i52$sroa$4$0$$sroa_idx222$i = ((($_25$i)) + 4|0);
     $self$i52$sroa$4$0$copyload$i = HEAP32[$self$i52$sroa$4$0$$sroa_idx222$i>>2]|0;
     $switch3$i53$i = ($self$i52$sroa$0$0$copyload$i|0)==(1);
     if ($switch3$i53$i) {
      $self$i52$sroa$6$0$$sroa_idx225$i = ((($_25$i)) + 8|0);
      $self$i52$sroa$6$0$copyload$i = HEAP32[$self$i52$sroa$6$0$$sroa_idx225$i>>2]|0;
      HEAP32[$0>>2] = 1;
      $_3$sroa$0$0$$sroa_idx$i73$i = ((($0)) + 4|0);
      $31 = $_3$sroa$0$0$$sroa_idx$i73$i;
      $32 = $31;
      HEAP32[$32>>2] = $self$i52$sroa$4$0$copyload$i;
      $33 = (($31) + 4)|0;
      $34 = $33;
      HEAP32[$34>>2] = $self$i52$sroa$6$0$copyload$i;
      HEAP32[$5>>2] = 0;
      STACKTOP = sp;return;
     }
     HEAP8[$8>>0] = 1;
     __THREW__ = 0;
     invoke_vii(392,($_3$i$i74$i|0),($7|0));
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if (!($36)) {
      $self$sroa$0$0$copyload$i$i$i76$i = HEAP32[$_3$i$i74$i>>2]|0;
      $switch3$i$i$i77$i = ($self$sroa$0$0$copyload$i$i$i76$i|0)==(1);
      if ($switch3$i$i$i77$i) {
       $self$sroa$6$0$$sroa_idx44$i$i$i81$i = ((($_3$i$i74$i)) + 4|0);
       $self$sroa$6$0$copyload$i$i$i82$i = HEAP32[$self$sroa$6$0$$sroa_idx44$i$i$i81$i>>2]|0;
       $self$sroa$9$0$$sroa_idx49$i$i$i83$i = ((($_3$i$i74$i)) + 8|0);
       $self$sroa$9$0$copyload$i$i$i84242$i = HEAP32[$self$sroa$9$0$$sroa_idx49$i$i$i83$i>>2]|0;
       $_43$sroa$6$sroa$0$0$extract$trunc$i = $self$sroa$6$0$copyload$i$i$i82$i&255;
       $cond$i$i$i94$i = ($_43$sroa$6$sroa$0$0$extract$trunc$i<<24>>24)==(2);
       if ($cond$i$i$i94$i) {
        $39 = ((($self$sroa$9$0$copyload$i$i$i84242$i)) + 4|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ((($self$sroa$9$0$copyload$i$i$i84242$i)) + 8|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = HEAP32[$42>>2]|0;
        __THREW__ = 0;
        invoke_vi($43|0,($40|0));
        $44 = __THREW__; __THREW__ = 0;
        $45 = $44&1;
        if ($45) {
         break;
        }
        $46 = ((($42)) + 4|0);
        $47 = HEAP32[$46>>2]|0;
        $48 = ($47|0)==(0);
        if (!($48)) {
         $49 = ((($42)) + 8|0);
         $50 = HEAP32[$49>>2]|0;
         ___rust_deallocate($40,$47,$50);
        }
        ___rust_deallocate($self$sroa$9$0$copyload$i$i$i84242$i,12,4);
       }
      } else {
       $37 = HEAP8[$7>>0]|0;
       $not$switch$i$i$i$i$i$i78$i = ($37<<24>>24)==(1);
       if (!($not$switch$i$i$i$i$i$i78$i)) {
        __THREW__ = 0;
        invoke_vi(78,(5548|0));
        $38 = __THREW__; __THREW__ = 0;
        break;
       }
       HEAP8[$8>>0] = 0;
       $51 = ($self$i52$sroa$4$0$copyload$i|0)==($26|0);
       if ($51) {
        $53 = (($2) + ($26)|0);
        $54 = (($3) - ($26))|0;
        __THREW__ = 0;
        invoke_viiii(396,($_50$i|0),($7|0),($53|0),($54|0));
        $55 = __THREW__; __THREW__ = 0;
        $56 = $55&1;
        if ($56) {
         break;
        }
        $57 = HEAP32[$_50$i>>2]|0;
        $switch12$i = ($57|0)==(1);
        if ($switch12$i) {
         HEAP32[$0>>2] = 0;
         $62 = ((($0)) + 4|0);
         HEAP32[$62>>2] = $26;
         $63 = ((($_50$i)) + 4|0);
         $64 = HEAP8[$63>>0]|0;
         $cond$i$i$i102$i = ($64<<24>>24)==(2);
         if ($cond$i$i$i102$i) {
          $65 = ((($_50$i)) + 8|0);
          $66 = HEAP32[$65>>2]|0;
          $67 = ((($66)) + 4|0);
          $68 = HEAP32[$67>>2]|0;
          $69 = ((($66)) + 8|0);
          $70 = HEAP32[$69>>2]|0;
          $71 = HEAP32[$70>>2]|0;
          __THREW__ = 0;
          invoke_vi($71|0,($68|0));
          $72 = __THREW__; __THREW__ = 0;
          $73 = $72&1;
          if ($73) {
           break;
          }
          $74 = ((($70)) + 4|0);
          $75 = HEAP32[$74>>2]|0;
          $76 = ($75|0)==(0);
          if (!($76)) {
           $77 = ((($70)) + 8|0);
           $78 = HEAP32[$77>>2]|0;
           ___rust_deallocate($68,$75,$78);
          }
          ___rust_deallocate($66,12,4);
         }
        } else {
         $58 = ((($_50$i)) + 4|0);
         $59 = HEAP32[$58>>2]|0;
         $60 = (($59) + ($26))|0;
         HEAP32[$0>>2] = 0;
         $61 = ((($0)) + 4|0);
         HEAP32[$61>>2] = $60;
        }
        HEAP32[$5>>2] = 0;
        STACKTOP = sp;return;
       }
      }
      HEAP32[$0>>2] = 0;
      $52 = ((($0)) + 4|0);
      HEAP32[$52>>2] = $self$i52$sroa$4$0$copyload$i;
      HEAP32[$5>>2] = 0;
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 $79 = ___cxa_find_matching_catch_2()|0;
 $80 = tempRet0;
 HEAP32[$5>>2] = 0;
 ___resumeException($79|0);
 // unreachable;
}
function __ZN3std3sys3imp6memchr7memrchr17h29114e8523cefb1aE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_21$0$i$i = 0, $_27$sroa$10$0$ph$i$i = 0, $g$sroa$0$0$i$i$i$i = 0, $g$sroa$0$0$i$i17$i$i = 0, $g$sroa$0$1$i$i$i$i = 0;
 var $g$sroa$0$1$i$i39$i$i = 0, $offset$0$i$i = 0, $offset$1$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $2;
 $5 = (($4) + ($3))|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $offset$0$i$i = $3;
  } else {
   $8 = ($6>>>0)<($3>>>0);
   $9 = (($3) - ($6))|0;
   $_21$0$i$i = $8 ? $9 : 0;
   $10 = ($_21$0$i$i>>>0)>($3>>>0);
   if ($10) {
    __ZN4core5slice22slice_index_order_fail17ha914aac85326e558E($_21$0$i$i,$3);
    // unreachable;
   }
   $11 = (($2) + ($_21$0$i$i)|0);
   $12 = (($3) - ($_21$0$i$i))|0;
   $13 = (($11) + ($12)|0);
   $14 = $11;
   $16 = $13;$g$sroa$0$0$i$i17$i$i = $12;
   while(1) {
    $15 = $16;
    $17 = (($15) - ($14))|0;
    $18 = ($17>>>0)>(3);
    if (!($18)) {
     $36 = $16;$g$sroa$0$1$i$i39$i$i = $g$sroa$0$0$i$i17$i$i;
     label = 13;
     break;
    }
    $19 = ((($16)) + -1|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = ($20<<24>>24)==($1<<24>>24);
    if ($21) {
     label = 8;
     break;
    }
    $22 = ((($16)) + -2|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = ($23<<24>>24)==($1<<24>>24);
    if ($24) {
     label = 10;
     break;
    }
    $26 = ((($16)) + -3|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = ($27<<24>>24)==($1<<24>>24);
    if ($28) {
     label = 12;
     break;
    }
    $30 = ((($16)) + -4|0);
    $31 = (($g$sroa$0$0$i$i17$i$i) + -4)|0;
    $32 = HEAP8[$30>>0]|0;
    $33 = ($32<<24>>24)==($1<<24>>24);
    if ($33) {
     $_27$sroa$10$0$ph$i$i = $31;
     break;
    } else {
     $16 = $30;$g$sroa$0$0$i$i17$i$i = $31;
    }
   }
   if ((label|0) == 8) {
    $25 = (($g$sroa$0$0$i$i17$i$i) + -1)|0;
    $_27$sroa$10$0$ph$i$i = $25;
   }
   else if ((label|0) == 10) {
    $29 = (($g$sroa$0$0$i$i17$i$i) + -2)|0;
    $_27$sroa$10$0$ph$i$i = $29;
   }
   else if ((label|0) == 12) {
    $34 = (($g$sroa$0$0$i$i17$i$i) + -3)|0;
    $_27$sroa$10$0$ph$i$i = $34;
   }
   else if ((label|0) == 13) {
    while(1) {
     label = 0;
     $35 = ($11|0)==($36|0);
     if ($35) {
      $offset$0$i$i = $_21$0$i$i;
      break L1;
     }
     $37 = ((($36)) + -1|0);
     $38 = (($g$sroa$0$1$i$i39$i$i) + -1)|0;
     $39 = HEAP8[$37>>0]|0;
     $40 = ($39<<24>>24)==($1<<24>>24);
     if ($40) {
      $_27$sroa$10$0$ph$i$i = $38;
      break;
     } else {
      $36 = $37;$g$sroa$0$1$i$i39$i$i = $38;
      label = 13;
     }
    }
   }
   $41 = (($_27$sroa$10$0$ph$i$i) + ($_21$0$i$i))|0;
   HEAP32[$0>>2] = 1;
   $42 = ((($0)) + 4|0);
   HEAP32[$42>>2] = $41;
   return;
  }
 } while(0);
 $43 = $1&255;
 $44 = $43 << 8;
 $45 = $44 | $43;
 $46 = $45 << 16;
 $47 = $46 | $45;
 $offset$1$i$i = $offset$0$i$i;
 while(1) {
  $48 = ($offset$1$i$i>>>0)>(7);
  if (!($48)) {
   break;
  }
  $101 = (($offset$1$i$i) + -8)|0;
  $102 = (($2) + ($101)|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (($offset$1$i$i) + -4)|0;
  $105 = (($2) + ($104)|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $103 ^ $47;
  $108 = (($107) + -16843009)|0;
  $109 = $107 & -2139062144;
  $110 = $109 ^ -2139062144;
  $111 = $110 & $108;
  $112 = $106 ^ $47;
  $113 = (($112) + -16843009)|0;
  $114 = $112 & -2139062144;
  $115 = $114 ^ -2139062144;
  $116 = $115 & $113;
  $117 = $116 | $111;
  $118 = ($117|0)==(0);
  if ($118) {
   $offset$1$i$i = $101;
  } else {
   break;
  }
 }
 $49 = ($offset$1$i$i>>>0)>($3>>>0);
 if ($49) {
  __ZN4core5slice20slice_index_len_fail17hc8606abb7e325facE($offset$1$i$i,$3);
  // unreachable;
 }
 $50 = (($2) + ($offset$1$i$i)|0);
 $52 = $50;$g$sroa$0$0$i$i$i$i = $offset$1$i$i;
 while(1) {
  $51 = $52;
  $53 = (($51) - ($4))|0;
  $54 = ($53>>>0)>(3);
  if (!($54)) {
   $88 = $52;$g$sroa$0$1$i$i$i$i = $g$sroa$0$0$i$i$i$i;
   label = 30;
   break;
  }
  $55 = ((($52)) + -1|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = ($56<<24>>24)==($1<<24>>24);
  if ($57) {
   label = 24;
   break;
  }
  $58 = ((($52)) + -2|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = ($59<<24>>24)==($1<<24>>24);
  if ($60) {
   label = 26;
   break;
  }
  $66 = ((($52)) + -3|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = ($67<<24>>24)==($1<<24>>24);
  if ($68) {
   label = 28;
   break;
  }
  $74 = ((($52)) + -4|0);
  $75 = (($g$sroa$0$0$i$i$i$i) + -4)|0;
  $76 = HEAP8[$74>>0]|0;
  $77 = ($76<<24>>24)==($1<<24>>24);
  if ($77) {
   label = 29;
   break;
  } else {
   $52 = $74;$g$sroa$0$0$i$i$i$i = $75;
  }
 }
 if ((label|0) == 24) {
  $61 = (($g$sroa$0$0$i$i$i$i) + -1)|0;
  $62 = $0;
  $63 = $62;
  HEAP32[$63>>2] = 1;
  $64 = (($62) + 4)|0;
  $65 = $64;
  HEAP32[$65>>2] = $61;
  return;
 }
 else if ((label|0) == 26) {
  $69 = (($g$sroa$0$0$i$i$i$i) + -2)|0;
  $70 = $0;
  $71 = $70;
  HEAP32[$71>>2] = 1;
  $72 = (($70) + 4)|0;
  $73 = $72;
  HEAP32[$73>>2] = $69;
  return;
 }
 else if ((label|0) == 28) {
  $78 = (($g$sroa$0$0$i$i$i$i) + -3)|0;
  $79 = $0;
  $80 = $79;
  HEAP32[$80>>2] = 1;
  $81 = (($79) + 4)|0;
  $82 = $81;
  HEAP32[$82>>2] = $78;
  return;
 }
 else if ((label|0) == 29) {
  $83 = $0;
  $84 = $83;
  HEAP32[$84>>2] = 1;
  $85 = (($83) + 4)|0;
  $86 = $85;
  HEAP32[$86>>2] = $75;
  return;
 }
 else if ((label|0) == 30) {
  while(1) {
   label = 0;
   $87 = ($88|0)==($2|0);
   if ($87) {
    label = 31;
    break;
   }
   $93 = ((($88)) + -1|0);
   $94 = (($g$sroa$0$1$i$i$i$i) + -1)|0;
   $95 = HEAP8[$93>>0]|0;
   $96 = ($95<<24>>24)==($1<<24>>24);
   if ($96) {
    label = 33;
    break;
   } else {
    $88 = $93;$g$sroa$0$1$i$i$i$i = $94;
    label = 30;
   }
  }
  if ((label|0) == 31) {
   $89 = $0;
   $90 = $89;
   HEAP32[$90>>2] = 0;
   $91 = (($89) + 4)|0;
   $92 = $91;
   HEAP32[$92>>2] = 0;
   return;
  }
  else if ((label|0) == 33) {
   $97 = $0;
   $98 = $97;
   HEAP32[$98>>2] = 1;
   $99 = (($97) + 4)|0;
   $100 = $99;
   HEAP32[$100>>2] = $94;
   return;
  }
 }
}
function __ZN72__LT_std__io__buffered__BufWriter_LT_W_GT__u20_as_u20_std__io__Write_GT_5write17hc0c3cb76330357a1E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$pre = 0, $$sink$i$i$i126 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i$i = 0, $_16 = 0, $_3$sroa$0$0$$sroa_idx$i = 0, $_34$sroa$4$0$$sroa_idx91 = 0, $_34$sroa$5$0$$sroa_idx93 = 0, $not$switch$i = 0, $phitmp = 0, $r$i$i$sroa$6$sroa$0$0$extract$trunc128 = 0, $r$i$i$sroa$6$sroa$0$0$insert$insert = 0, $r$i$i$sroa$6$sroa$6$0$extract$shift = 0;
 var $r$i$i$sroa$6$sroa$6$0$extract$trunc130 = 0, $r$sroa$0$1 = 0, $r$sroa$6$1 = 0, $r$sroa$8$1 = 0, $ret$sroa$5$sroa$6$0$i$i125 = 0, $self$i$sroa$0$0$copyload = 0, $self$i$sroa$4$0$$sroa_idx96 = 0, $self$i$sroa$4$0$copyload = 0, $self$i$sroa$5$0$$sroa_idx98 = 0, $self$i$sroa$5$0$copyload = 0, $switch$i38 = 0, $switch3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_16 = sp;
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($3))|0;
 $8 = ((($1)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 do {
  if ($10) {
   __ZN46__LT_std__io__buffered__BufWriter_LT_W_GT__GT_9flush_buf17h68208c7a1c5b86cbE($_16,$1);
   $self$i$sroa$0$0$copyload = HEAP32[$_16>>2]|0;
   $switch3$i = ($self$i$sroa$0$0$copyload|0)==(1);
   if (!($switch3$i)) {
    $$pre = HEAP32[$8>>2]|0;
    $16 = $$pre;
    break;
   }
   $self$i$sroa$4$0$$sroa_idx96 = ((($_16)) + 4|0);
   $self$i$sroa$4$0$copyload = HEAP32[$self$i$sroa$4$0$$sroa_idx96>>2]|0;
   $self$i$sroa$5$0$$sroa_idx98 = ((($_16)) + 8|0);
   $self$i$sroa$5$0$copyload = HEAP32[$self$i$sroa$5$0$$sroa_idx98>>2]|0;
   HEAP32[$0>>2] = 1;
   $_3$sroa$0$0$$sroa_idx$i = ((($0)) + 4|0);
   $11 = $_3$sroa$0$0$$sroa_idx$i;
   $12 = $11;
   HEAP32[$12>>2] = $self$i$sroa$4$0$copyload;
   $13 = (($11) + 4)|0;
   $14 = $13;
   HEAP32[$14>>2] = $self$i$sroa$5$0$copyload;
   STACKTOP = sp;return;
  } else {
   $16 = $9;
  }
 } while(0);
 $15 = ($16>>>0)>($3>>>0);
 if ($15) {
  __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h9c7deba288fd694aE($4,$3);
  $17 = HEAP32[$5>>2]|0;
  $18 = (($17) + ($3))|0;
  HEAP32[$5>>2] = $18;
  $19 = HEAP32[$4>>2]|0;
  $20 = (($19) + ($17)|0);
  _memcpy(($20|0),($2|0),($3|0))|0;
  HEAP32[$0>>2] = 0;
  $21 = ((($0)) + 4|0);
  HEAP32[$21>>2] = $3;
  STACKTOP = sp;return;
 }
 $22 = ((($1)) + 16|0);
 HEAP8[$22>>0] = 1;
 $23 = HEAP8[$1>>0]|0;
 $not$switch$i = ($23<<24>>24)==(1);
 if (!($not$switch$i)) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(5548);
  // unreachable;
 }
 $24 = ((($1)) + 1|0);
 $25 = HEAP8[$24>>0]|0;
 $switch$i38 = ($25<<24>>24)==(1);
 do {
  if ($switch$i38) {
   $r$sroa$0$1 = 0;$r$sroa$6$1 = $3;$r$sroa$8$1 = 0;
  } else {
   $26 = ($3|0)>(-1);
   $_0$0$sroa$speculated$i$i$i$i = $26 ? $3 : 2147483647;
   $27 = (_write(1,$2,$_0$0$sroa$speculated$i$i$i$i)|0);
   $28 = ($27|0)==(-1);
   if ($28) {
    $29 = (___errno_location()|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(9);
    if ($31) {
     $r$sroa$0$1 = 0;$r$sroa$6$1 = $3;$r$sroa$8$1 = 9;
     break;
    } else {
     $$sink$i$i$i126 = 1;$r$i$i$sroa$6$sroa$0$0$extract$trunc128 = 0;$r$i$i$sroa$6$sroa$6$0$extract$trunc130 = 0;$ret$sroa$5$sroa$6$0$i$i125 = $30;
    }
   } else {
    $r$i$i$sroa$6$sroa$6$0$extract$shift = $27 & -256;
    $phitmp = $27 & 255;
    $$sink$i$i$i126 = 0;$r$i$i$sroa$6$sroa$0$0$extract$trunc128 = $phitmp;$r$i$i$sroa$6$sroa$6$0$extract$trunc130 = $r$i$i$sroa$6$sroa$6$0$extract$shift;$ret$sroa$5$sroa$6$0$i$i125 = 0;
   }
   $r$i$i$sroa$6$sroa$0$0$insert$insert = $r$i$i$sroa$6$sroa$0$0$extract$trunc128 | $r$i$i$sroa$6$sroa$6$0$extract$trunc130;
   $r$sroa$0$1 = $$sink$i$i$i126;$r$sroa$6$1 = $r$i$i$sroa$6$sroa$0$0$insert$insert;$r$sroa$8$1 = $ret$sroa$5$sroa$6$0$i$i125;
  }
 } while(0);
 HEAP8[$22>>0] = 0;
 HEAP32[$0>>2] = $r$sroa$0$1;
 $_34$sroa$4$0$$sroa_idx91 = ((($0)) + 4|0);
 HEAP32[$_34$sroa$4$0$$sroa_idx91>>2] = $r$sroa$6$1;
 $_34$sroa$5$0$$sroa_idx93 = ((($0)) + 8|0);
 HEAP32[$_34$sroa$5$0$$sroa_idx93>>2] = $r$sroa$8$1;
 STACKTOP = sp;return;
}
function __ZN3std2io5Write9write_all17h2d9c74a05ba876b0E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sroa_idx = 0, $$sroa_idx65 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i = 0, $_0$0$i$pre = 0, $_10 = 0, $_28$sroa$0$0$$sroa_idx = 0, $_4$i$i$i = 0;
 var $buf$sroa$0$095$ph = 0, $buf$sroa$8$094$ph = 0, $cond = 0, $cond$i$i$i = 0, $cond75 = 0, $or$cond = 0, $switch3 = 0, $switch3130 = 0, $switch3131 = 0, $trunc$i = 0, $trunc$i$clear = 0, $x$i$sroa$4$0$$sroa_raw_idx$i = 0, $x$i$sroa$4$i = 0, $x$i$sroa$5$0$$sroa_idx$i = 0, $x$i$sroa$6$0$$sroa_idx$i = 0, $x$sroa$0$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $x$i$sroa$4$i = sp + 44|0;
 $x$sroa$0$i$i$i$i$i = sp + 32|0;
 $_4$i$i$i = sp + 16|0;
 $_10 = sp;
 $4 = ($3|0)==(0);
 L1: do {
  if (!($4)) {
   $5 = ((($_10)) + 4|0);
   $6 = ((($_10)) + 8|0);
   $7 = ((($_10)) + 4|0);
   $buf$sroa$0$095$ph = $2;$buf$sroa$8$094$ph = $3;
   L3: while(1) {
    __ZN75__LT_std__io__stdio__StdoutLock_LT__u27_a_GT__u20_as_u20_std__io__Write_GT_5write17h3c7faffa88ff4a1aE($_10,$1,$buf$sroa$0$095$ph,$buf$sroa$8$094$ph);
    $8 = HEAP32[$_10>>2]|0;
    $switch3130 = ($8|0)==(1);
    L5: do {
     if ($switch3130) {
      $switch3131 = $switch3130;
      while(1) {
       $20 = HEAP16[$5>>1]|0;
       $21 = $20&255;
       $trunc$i = $20&255;
       $22 = ($20&65535) >>> 8;
       $23 = $22&255;
       $trunc$i$clear = $trunc$i & 3;
       switch ($trunc$i$clear<<24>>24) {
       case 0:  {
        $24 = HEAP32[$6>>2]|0;
        $cond75 = ($24|0)==(4);
        if (!($cond75)) {
         label = 19;
         break L3;
        }
        break;
       }
       case 1:  {
        $_0$0$i = $23;
        label = 18;
        break;
       }
       case 2:  {
        $25 = HEAP32[$6>>2]|0;
        $_0$0$i$pre = HEAP8[$25>>0]|0;
        $_0$0$i = $_0$0$i$pre;
        label = 18;
        break;
       }
       default: {
        label = 15;
        break L3;
       }
       }
       if ((label|0) == 18) {
        label = 0;
        $28 = ($_0$0$i<<24>>24)==(15);
        if (!($28)) {
         label = 19;
         break L3;
        }
       }
       $cond$i$i$i = ($21<<24>>24)==(2);
       $or$cond = $switch3131 & $cond$i$i$i;
       if ($or$cond) {
        $40 = HEAP32[$6>>2]|0;
        $41 = ((($40)) + 4|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = ((($40)) + 8|0);
        $44 = HEAP32[$43>>2]|0;
        $45 = HEAP32[$44>>2]|0;
        __THREW__ = 0;
        invoke_vi($45|0,($42|0));
        $46 = __THREW__; __THREW__ = 0;
        $47 = $46&1;
        if ($47) {
         label = 5;
         break L3;
        }
        $48 = ((($44)) + 4|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = ($49|0)==(0);
        if (!($50)) {
         $51 = ((($44)) + 8|0);
         $52 = HEAP32[$51>>2]|0;
         ___rust_deallocate($42,$49,$52);
        }
        ___rust_deallocate($40,12,4);
       }
       __ZN75__LT_std__io__stdio__StdoutLock_LT__u27_a_GT__u20_as_u20_std__io__Write_GT_5write17h3c7faffa88ff4a1aE($_10,$1,$buf$sroa$0$095$ph,$buf$sroa$8$094$ph);
       $53 = HEAP32[$_10>>2]|0;
       $switch3 = ($53|0)==(1);
       if ($switch3) {
        $switch3131 = $switch3;
       } else {
        break L5;
       }
      }
     }
    } while(0);
    $19 = HEAP32[$7>>2]|0;
    $cond = ($19|0)==(0);
    if ($cond) {
     label = 6;
     break;
    }
    $26 = ($buf$sroa$8$094$ph>>>0)<($19>>>0);
    if ($26) {
     label = 17;
     break;
    }
    $54 = (($buf$sroa$0$095$ph) + ($19)|0);
    $55 = (($buf$sroa$8$094$ph) - ($19))|0;
    $56 = ($55|0)==(0);
    if ($56) {
     break L1;
    } else {
     $buf$sroa$0$095$ph = $54;$buf$sroa$8$094$ph = $55;
    }
   }
   do {
    if ((label|0) == 5) {
     $9 = ___cxa_find_matching_catch_2()|0;
     $10 = tempRet0;
     ___resumeException($9|0);
     // unreachable;
    }
    else if ((label|0) == 6) {
     __THREW__ = 0;
     invoke_viii(244,($_4$i$i$i|0),(15781|0),28);
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if ($12) {
      $9 = ___cxa_find_matching_catch_2()|0;
      $10 = tempRet0;
      ___resumeException($9|0);
      // unreachable;
     }
     ;HEAP32[$x$sroa$0$i$i$i$i$i>>2]=HEAP32[$_4$i$i$i>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]=HEAP32[$_4$i$i$i+4>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]=HEAP32[$_4$i$i$i+8>>2]|0;
     $13 = (___rust_allocate(12,4)|0);
     $14 = ($13|0)==(0|0);
     if ($14) {
      __THREW__ = 0;
      invoke_v(367);
      $15 = __THREW__; __THREW__ = 0;
      $9 = ___cxa_find_matching_catch_2()|0;
      $10 = tempRet0;
      ___resumeException($9|0);
      // unreachable;
     }
     ;HEAP32[$13>>2]=HEAP32[$x$sroa$0$i$i$i$i$i>>2]|0;HEAP32[$13+4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$x$sroa$0$i$i$i$i$i+8>>2]|0;
     $16 = (___rust_allocate(12,4)|0);
     $17 = ($16|0)==(0|0);
     if (!($17)) {
      HEAP8[$16>>0] = 14;
      $x$i$sroa$4$0$$sroa_raw_idx$i = ((($16)) + 1|0);
      ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i>>0]=HEAP8[$x$i$sroa$4$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+1>>0]=HEAP8[$x$i$sroa$4$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i+2>>0]=HEAP8[$x$i$sroa$4$i+2>>0]|0;
      $x$i$sroa$5$0$$sroa_idx$i = ((($16)) + 4|0);
      HEAP32[$x$i$sroa$5$0$$sroa_idx$i>>2] = $13;
      $x$i$sroa$6$0$$sroa_idx$i = ((($16)) + 8|0);
      HEAP32[$x$i$sroa$6$0$$sroa_idx$i>>2] = 152;
      $39 = $16;
      HEAP32[$0>>2] = 1;
      $$sroa_idx = ((($0)) + 4|0);
      HEAP32[$$sroa_idx>>2] = 2;
      $$sroa_idx65 = ((($0)) + 8|0);
      HEAP32[$$sroa_idx65>>2] = $39;
      break;
     }
     __THREW__ = 0;
     invoke_v(367);
     $18 = __THREW__; __THREW__ = 0;
     $9 = ___cxa_find_matching_catch_2()|0;
     $10 = tempRet0;
     ___resumeException($9|0);
     // unreachable;
    }
    else if ((label|0) == 15) {
     // unreachable;
    }
    else if ((label|0) == 17) {
     __THREW__ = 0;
     invoke_vii(393,($19|0),($buf$sroa$8$094$ph|0));
     $27 = __THREW__; __THREW__ = 0;
     $9 = ___cxa_find_matching_catch_2()|0;
     $10 = tempRet0;
     ___resumeException($9|0);
     // unreachable;
    }
    else if ((label|0) == 19) {
     $29 = $5;
     $30 = $29;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($29) + 4)|0;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     HEAP32[$0>>2] = 1;
     $_28$sroa$0$0$$sroa_idx = ((($0)) + 4|0);
     $35 = $_28$sroa$0$0$$sroa_idx;
     $36 = $35;
     HEAP32[$36>>2] = $31;
     $37 = (($35) + 4)|0;
     $38 = $37;
     HEAP32[$38>>2] = $34;
    }
   } while(0);
   STACKTOP = sp;return;
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN57__LT_std__io__stdio__Stdout_u20_as_u20_std__io__Write_GT_9write_fmt17h6a23f2ec3c04c479E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre$i$i$i$i$i$i$i = 0, $$pre$i$i$i$i$i$i$i19 = 0, $$pre$i$i$i$i$i$i$i32 = 0, $$pre$phi$i$i$i$i$i$i$iZ2D = 0, $$pre3$i$i$i$i$i$i$i = 0, $$pre3$i$i$i$i$i$i$i15 = 0, $$pre3$i$i$i$i$i$i$i27 = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i$i17 = 0, $$sink$in$phi$trans$insert$i$i$i$i$i$i$i30 = 0, $$sink1 = 0, $$sink2 = 0, $$sroa_idx$i = 0, $$sroa_idx35$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $_13$i = 0, $_4$i$i$i$i = 0, $_6 = 0, $_7$sroa$0$0$$sroa_idx$i = 0, $args = 0, $cond$i$i = 0, $cond$i$i$i$i = 0, $cond$i$i$i21$i = 0, $cond$i20$i = 0, $output$i = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$5$0 = 0, $switch$i = 0, $switch$i$i$i$i$i$i$i$i = 0, $switch$i$i$i$i$i$i$i$i13 = 0, $switch$i$i$i$i$i$i$i$i25 = 0, $switch2tmp$i$i$i$i$i$i$i$i$i = 0, $switch2tmp$i$i$i$i$i$i$i$i$i11 = 0, $switch2tmp$i$i$i$i$i$i$i$i$i22 = 0;
 var $x$i$sroa$4$0$$sroa_raw_idx$i$i = 0, $x$i$sroa$4$i$i = 0, $x$i$sroa$5$0$$sroa_idx$i$i = 0, $x$i$sroa$6$0$$sroa_idx$i$i = 0, $x$sroa$0$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $x$i$sroa$4$i$i = sp + 100|0;
 $x$sroa$0$i$i$i$i$i$i = sp + 88|0;
 $_4$i$i$i$i = sp + 72|0;
 $_13$i = sp + 48|0;
 $output$i = sp + 32|0;
 $_6 = sp + 24|0;
 $args = sp;
 ;HEAP32[$args>>2]=HEAP32[$2>>2]|0;HEAP32[$args+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$args+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$args+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$args+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$args+20>>2]=HEAP32[$2+20>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 (_pthread_mutex_lock(($5|0))|0);
 $6 = $4;
 $7 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h8a6a4da5328889bbE()|0);
 $switch2tmp$i$i$i$i$i$i$i$i$i = ($7|0)==(0|0);
 if ($switch2tmp$i$i$i$i$i$i$i$i$i) {
  __ZN4core6option13expect_failed17h8d3ef54cab66579bE(15492,57);
  // unreachable;
 }
 $8 = HEAP32[$7>>2]|0;
 $switch$i$i$i$i$i$i$i$i = ($8|0)==(1);
 if ($switch$i$i$i$i$i$i$i$i) {
  $$sink$in$phi$trans$insert$i$i$i$i$i$i$i = ((($7)) + 4|0);
  $$pre$i$i$i$i$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i$i>>2]|0;
  $$pre$phi$i$i$i$i$i$i$iZ2D = $$sink$in$phi$trans$insert$i$i$i$i$i$i$i;$13 = $$pre$i$i$i$i$i$i$i;
 } else {
  $9 = $7;
  $10 = $9;
  HEAP32[$10>>2] = 1;
  $11 = (($9) + 4)|0;
  $12 = $11;
  HEAP32[$12>>2] = 0;
  $$pre3$i$i$i$i$i$i$i = ((($7)) + 4|0);
  $$pre$phi$i$i$i$i$i$i$iZ2D = $$pre3$i$i$i$i$i$i$i;$13 = 0;
 }
 HEAP32[$$pre$phi$i$i$i$i$i$i$iZ2D>>2] = $13;
 $14 = ($13|0)!=(0);
 $15 = ((($3)) + 12|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $14&1;
 $18 = $_6;
 $19 = $18;
 HEAP32[$19>>2] = $6;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $17;
 HEAP32[$output$i>>2] = $_6;
 $_7$sroa$0$0$$sroa_idx$i = ((($output$i)) + 4|0);
 HEAP32[$_7$sroa$0$0$$sroa_idx$i>>2] = 0;
 ;HEAP32[$_13$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_13$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_13$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_13$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_13$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_13$i+20>>2]=HEAP32[$args+20>>2]|0;
 __THREW__ = 0;
 $22 = (invoke_iiii(350,($output$i|0),(336|0),($_13$i|0))|0);
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 L8: do {
  if ($24) {
   label = 23;
  } else {
   $switch$i = ($22<<24>>24)==(0);
   do {
    if ($switch$i) {
     HEAP32[$0>>2] = 0;
     label = 17;
    } else {
     $25 = ((($output$i)) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(1);
     if ($27) {
      ;HEAP32[$0>>2]=HEAP32[$25>>2]|0;HEAP32[$0+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$25+8>>2]|0;
      break;
     }
     __THREW__ = 0;
     invoke_viii(244,($_4$i$i$i$i|0),(15755|0),15);
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      label = 23;
      break L8;
     }
     ;HEAP32[$x$sroa$0$i$i$i$i$i$i>>2]=HEAP32[$_4$i$i$i$i>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i$i+4>>2]=HEAP32[$_4$i$i$i$i+4>>2]|0;HEAP32[$x$sroa$0$i$i$i$i$i$i+8>>2]=HEAP32[$_4$i$i$i$i+8>>2]|0;
     $30 = (___rust_allocate(12,4)|0);
     $31 = ($30|0)==(0|0);
     if ($31) {
      __THREW__ = 0;
      invoke_v(367);
      $32 = __THREW__; __THREW__ = 0;
      label = 23;
      break L8;
     }
     ;HEAP32[$30>>2]=HEAP32[$x$sroa$0$i$i$i$i$i$i>>2]|0;HEAP32[$30+4>>2]=HEAP32[$x$sroa$0$i$i$i$i$i$i+4>>2]|0;HEAP32[$30+8>>2]=HEAP32[$x$sroa$0$i$i$i$i$i$i+8>>2]|0;
     $33 = (___rust_allocate(12,4)|0);
     $34 = ($33|0)==(0|0);
     if ($34) {
      __THREW__ = 0;
      invoke_v(367);
      $35 = __THREW__; __THREW__ = 0;
      label = 23;
      break L8;
     } else {
      HEAP8[$33>>0] = 16;
      $x$i$sroa$4$0$$sroa_raw_idx$i$i = ((($33)) + 1|0);
      ;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i$i>>0]=HEAP8[$x$i$sroa$4$i$i>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i$i+1>>0]=HEAP8[$x$i$sroa$4$i$i+1>>0]|0;HEAP8[$x$i$sroa$4$0$$sroa_raw_idx$i$i+2>>0]=HEAP8[$x$i$sroa$4$i$i+2>>0]|0;
      $x$i$sroa$5$0$$sroa_idx$i$i = ((($33)) + 4|0);
      HEAP32[$x$i$sroa$5$0$$sroa_idx$i$i>>2] = $30;
      $x$i$sroa$6$0$$sroa_idx$i$i = ((($33)) + 8|0);
      HEAP32[$x$i$sroa$6$0$$sroa_idx$i$i>>2] = 152;
      $36 = $33;
      HEAP32[$0>>2] = 1;
      $$sroa_idx$i = ((($0)) + 4|0);
      HEAP32[$$sroa_idx$i>>2] = 2;
      $$sroa_idx35$i = ((($0)) + 8|0);
      HEAP32[$$sroa_idx35$i>>2] = $36;
      label = 17;
      break;
     }
    }
   } while(0);
   if ((label|0) == 17) {
    $37 = HEAP32[$_7$sroa$0$0$$sroa_idx$i>>2]|0;
    $cond$i20$i = ($37|0)==(1);
    if ($cond$i20$i) {
     $38 = ((($output$i)) + 8|0);
     $39 = HEAP8[$38>>0]|0;
     $cond$i$i$i21$i = ($39<<24>>24)==(2);
     if ($cond$i$i$i21$i) {
      $40 = ((($output$i)) + 12|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ((($41)) + 4|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ((($41)) + 8|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = HEAP32[$45>>2]|0;
      __THREW__ = 0;
      invoke_vi($46|0,($43|0));
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       $73 = ___cxa_find_matching_catch_2()|0;
       $74 = tempRet0;
       $$sink1 = $74;$$sink2 = $73;
       break;
      }
      $49 = ((($45)) + 4|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($50|0)==(0);
      if (!($51)) {
       $52 = ((($45)) + 8|0);
       $53 = HEAP32[$52>>2]|0;
       ___rust_deallocate($43,$50,$53);
      }
      ___rust_deallocate($41,12,4);
     }
    }
   }
   $75 = HEAP32[$_6>>2]|0;
   $76 = ((($_6)) + 4|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = ($77<<24>>24)==(0);
   if (!($78)) {
    $90 = HEAP32[$_6>>2]|0;
    $91 = HEAP32[$90>>2]|0;
    (_pthread_mutex_unlock(($91|0))|0);
    STACKTOP = sp;return;
   }
   __THREW__ = 0;
   $79 = (invoke_i(352)|0);
   $80 = __THREW__; __THREW__ = 0;
   $81 = $80&1;
   do {
    if (!($81)) {
     $switch2tmp$i$i$i$i$i$i$i$i$i11 = ($79|0)==(0|0);
     if ($switch2tmp$i$i$i$i$i$i$i$i$i11) {
      __THREW__ = 0;
      invoke_vii(77,(15492|0),57);
      $82 = __THREW__; __THREW__ = 0;
      break;
     }
     $83 = HEAP32[$79>>2]|0;
     $switch$i$i$i$i$i$i$i$i13 = ($83|0)==(1);
     if (!($switch$i$i$i$i$i$i$i$i13)) {
      $84 = $79;
      $85 = $84;
      HEAP32[$85>>2] = 1;
      $86 = (($84) + 4)|0;
      $87 = $86;
      HEAP32[$87>>2] = 0;
      $$pre3$i$i$i$i$i$i$i15 = ((($79)) + 4|0);
      HEAP32[$$pre3$i$i$i$i$i$i$i15>>2] = 0;
      $90 = HEAP32[$_6>>2]|0;
      $91 = HEAP32[$90>>2]|0;
      (_pthread_mutex_unlock(($91|0))|0);
      STACKTOP = sp;return;
     }
     $$sink$in$phi$trans$insert$i$i$i$i$i$i$i17 = ((($79)) + 4|0);
     $$pre$i$i$i$i$i$i$i19 = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i$i17>>2]|0;
     $88 = ($$pre$i$i$i$i$i$i$i19|0)==(0);
     if ($88) {
      $90 = HEAP32[$_6>>2]|0;
      $91 = HEAP32[$90>>2]|0;
      (_pthread_mutex_unlock(($91|0))|0);
      STACKTOP = sp;return;
     }
     $89 = ((($75)) + 4|0);
     HEAP8[$89>>0] = 1;
     $90 = HEAP32[$_6>>2]|0;
     $91 = HEAP32[$90>>2]|0;
     (_pthread_mutex_unlock(($91|0))|0);
     STACKTOP = sp;return;
    }
   } while(0);
   $108 = ___cxa_find_matching_catch_2()|0;
   $109 = tempRet0;
   $personalityslot$sroa$0$0 = $108;$personalityslot$sroa$5$0 = $109;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
 } while(0);
 do {
  if ((label|0) == 23) {
   $54 = ___cxa_find_matching_catch_2()|0;
   $55 = tempRet0;
   $56 = HEAP32[$_7$sroa$0$0$$sroa_idx$i>>2]|0;
   $cond$i$i = ($56|0)==(1);
   if ($cond$i$i) {
    $57 = ((($output$i)) + 8|0);
    $58 = HEAP8[$57>>0]|0;
    $cond$i$i$i$i = ($58<<24>>24)==(2);
    if ($cond$i$i$i$i) {
     $59 = ((($output$i)) + 12|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ((($60)) + 4|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ((($60)) + 8|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = HEAP32[$64>>2]|0;
     __THREW__ = 0;
     invoke_vi($65|0,($62|0));
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      $92 = ___cxa_find_matching_catch_2()|0;
      $93 = tempRet0;
      $$sink1 = $93;$$sink2 = $92;
      break;
     }
     $68 = ((($64)) + 4|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==(0);
     if (!($70)) {
      $71 = ((($64)) + 8|0);
      $72 = HEAP32[$71>>2]|0;
      ___rust_deallocate($62,$69,$72);
     }
     ___rust_deallocate($60,12,4);
     $$sink1 = $55;$$sink2 = $54;
    } else {
     $$sink1 = $55;$$sink2 = $54;
    }
   } else {
    $$sink1 = $55;$$sink2 = $54;
   }
  }
 } while(0);
 $94 = HEAP32[$_6>>2]|0;
 $95 = ((($_6)) + 4|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = ($96<<24>>24)==(0);
 do {
  if ($97) {
   $98 = (__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h8a6a4da5328889bbE()|0);
   $switch2tmp$i$i$i$i$i$i$i$i$i22 = ($98|0)==(0|0);
   if ($switch2tmp$i$i$i$i$i$i$i$i$i22) {
    __ZN4core6option13expect_failed17h8d3ef54cab66579bE(15492,57);
    // unreachable;
   }
   $99 = HEAP32[$98>>2]|0;
   $switch$i$i$i$i$i$i$i$i25 = ($99|0)==(1);
   if (!($switch$i$i$i$i$i$i$i$i25)) {
    $100 = $98;
    $101 = $100;
    HEAP32[$101>>2] = 1;
    $102 = (($100) + 4)|0;
    $103 = $102;
    HEAP32[$103>>2] = 0;
    $$pre3$i$i$i$i$i$i$i27 = ((($98)) + 4|0);
    HEAP32[$$pre3$i$i$i$i$i$i$i27>>2] = 0;
    break;
   }
   $$sink$in$phi$trans$insert$i$i$i$i$i$i$i30 = ((($98)) + 4|0);
   $$pre$i$i$i$i$i$i$i32 = HEAP32[$$sink$in$phi$trans$insert$i$i$i$i$i$i$i30>>2]|0;
   $104 = ($$pre$i$i$i$i$i$i$i32|0)==(0);
   if (!($104)) {
    $105 = ((($94)) + 4|0);
    HEAP8[$105>>0] = 1;
   }
  }
 } while(0);
 $106 = HEAP32[$_6>>2]|0;
 $107 = HEAP32[$106>>2]|0;
 (_pthread_mutex_unlock(($107|0))|0);
 $personalityslot$sroa$0$0 = $$sink2;$personalityslot$sroa$5$0 = $$sink1;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
}
function __ZN4drop17h13008f44e49bc3c9E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond$i = 0, $cond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $cond$i = ($2|0)==(1);
 if (!($cond$i)) {
  return;
 }
 $3 = ((($0)) + 8|0);
 $4 = HEAP8[$3>>0]|0;
 $cond$i$i$i = ($4<<24>>24)==(2);
 if (!($cond$i$i$i)) {
  return;
 }
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($6)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 FUNCTION_TABLE_vi[$11 & 511]($8);
 $12 = ((($10)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = ((($10)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  ___rust_deallocate($8,$13,$16);
 }
 ___rust_deallocate($6,12,4);
 return;
}
function __ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0715d0ac7be8b949E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$057 = 0, $_5 = 0, $cond$i = 0, $cond$i$i$i = 0;
 var $e$sroa$0$0$$sroa_idx = 0, $switch3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_5 = sp;
 $3 = HEAP32[$0>>2]|0;
 __ZN3std2io5Write9write_all17h2d9c74a05ba876b0E($_5,$3,$1,$2);
 $4 = HEAP32[$_5>>2]|0;
 $switch3 = ($4|0)==(1);
 if (!($switch3)) {
  $_0$sroa$0$057 = 0;
  STACKTOP = sp;return ($_0$sroa$0$057|0);
 }
 $e$sroa$0$0$$sroa_idx = ((($_5)) + 4|0);
 $5 = $e$sroa$0$0$$sroa_idx;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $cond$i = ($12|0)==(1);
 $13 = ((($0)) + 8|0);
 if ($cond$i) {
  $14 = HEAP8[$13>>0]|0;
  $cond$i$i$i = ($14<<24>>24)==(2);
  if ($cond$i$i$i) {
   $15 = ((($0)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($16)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP32[$20>>2]|0;
   __THREW__ = 0;
   invoke_vi($21|0,($18|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $33 = ___cxa_find_matching_catch_2()|0;
    $34 = tempRet0;
    HEAP32[$11>>2] = 1;
    $35 = $13;
    $36 = $35;
    HEAP32[$36>>2] = $7;
    $37 = (($35) + 4)|0;
    $38 = $37;
    HEAP32[$38>>2] = $10;
    ___resumeException($33|0);
    // unreachable;
   }
   $24 = ((($20)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   if (!($26)) {
    $27 = ((($20)) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    ___rust_deallocate($18,$25,$28);
   }
   ___rust_deallocate($16,12,4);
  }
 }
 HEAP32[$11>>2] = 1;
 $29 = $13;
 $30 = $29;
 HEAP32[$30>>2] = $7;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $10;
 $_0$sroa$0$057 = 1;
 STACKTOP = sp;return ($_0$sroa$0$057|0);
}
function __ZN4core3fmt5Write10write_char17hbe7e15265ee75335E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $_12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $_12 = sp + 8|0;
 HEAP32[$_12>>2] = 0;
 __ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_11encode_utf817hb5b68bfc485c793fE($2,$1,$_12);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $3 = (__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0715d0ac7be8b949E($0,$$sreg$field,$$sreg$field2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN4core3fmt5Write9write_fmt17h215de9b8f10977b0E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $_10 = 0, $_8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_10 = sp + 8|0;
 $_8 = sp;
 HEAP32[$_8>>2] = $0;
 ;HEAP32[$_10>>2]=HEAP32[$1>>2]|0;HEAP32[$_10+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10+20>>2]=HEAP32[$1+20>>2]|0;
 $2 = (__ZN4core3fmt5write17ha952368ac9616bb6E($_8,360,$_10)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hd48b8fbe210909dcE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0715d0ac7be8b949E($3,$1,$2)|0);
 return ($4|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17hb1479c193a44c5beE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12$i = 0, $len$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_12$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_12$i>>2] = 0;
 $3 = ($1>>>0)<(128);
 do {
  if ($3) {
   $4 = $1&255;
   HEAP8[$_12$i>>0] = $4;
   $len$0$i = 1;
  } else {
   $5 = ($1>>>0)<(2048);
   if ($5) {
    $6 = $1 >>> 6;
    $7 = $6 & 31;
    $8 = $7&255;
    $9 = $8 | -64;
    HEAP8[$_12$i>>0] = $9;
    $10 = $1 & 63;
    $11 = $10&255;
    $12 = ((($_12$i)) + 1|0);
    $13 = $11 | -128;
    HEAP8[$12>>0] = $13;
    $len$0$i = 2;
    break;
   }
   $14 = ($1>>>0)<(65536);
   if ($14) {
    $15 = $1 >>> 12;
    $16 = $15 & 15;
    $17 = $16&255;
    $18 = $17 | -32;
    HEAP8[$_12$i>>0] = $18;
    $19 = $1 >>> 6;
    $20 = $19 & 63;
    $21 = $20&255;
    $22 = ((($_12$i)) + 1|0);
    $23 = $21 | -128;
    HEAP8[$22>>0] = $23;
    $24 = $1 & 63;
    $25 = $24&255;
    $26 = ((($_12$i)) + 2|0);
    $27 = $25 | -128;
    HEAP8[$26>>0] = $27;
    $len$0$i = 3;
    break;
   } else {
    $28 = $1 >>> 18;
    $29 = $28 & 7;
    $30 = $29&255;
    $31 = $30 | -16;
    HEAP8[$_12$i>>0] = $31;
    $32 = $1 >>> 12;
    $33 = $32 & 63;
    $34 = $33&255;
    $35 = ((($_12$i)) + 1|0);
    $36 = $34 | -128;
    HEAP8[$35>>0] = $36;
    $37 = $1 >>> 6;
    $38 = $37 & 63;
    $39 = $38&255;
    $40 = ((($_12$i)) + 2|0);
    $41 = $39 | -128;
    HEAP8[$40>>0] = $41;
    $42 = $1 & 63;
    $43 = $42&255;
    $44 = ((($_12$i)) + 3|0);
    $45 = $43 | -128;
    HEAP8[$44>>0] = $45;
    $len$0$i = 4;
    break;
   }
  }
 } while(0);
 $46 = (__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0715d0ac7be8b949E($2,$_12$i,$len$0$i)|0);
 STACKTOP = sp;return ($46|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h44ae10c8ee931374E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_10$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_10$i = sp + 8|0;
 $_8$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_8$i>>2] = $2;
 ;HEAP32[$_10$i>>2]=HEAP32[$1>>2]|0;HEAP32[$_10$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10$i+20>>2]=HEAP32[$1+20>>2]|0;
 $3 = (__ZN4core3fmt5write17ha952368ac9616bb6E($_8$i,360,$_10$i)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN3std2io5stdio6_print17hc89678418da2f1ecE($0) {
 $0 = $0|0;
 var $$in$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi58Z2D = 0, $$pre57 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_12$sroa$4$0$$sroa_idx$i$i = 0, $_15 = 0, $_16$i$i = 0, $_17$i$i = 0, $_20 = 0, $_6$i$i$i = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_7 = 0, $_8 = 0;
 var $args = 0, $cond = 0, $cond$i$i = 0, $cond$i$i39 = 0, $e = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$7$0 = 0, $phitmp = 0, $phitmp$i = 0, $result = 0, $src$i$sroa$5$0$$sroa_idx22$i$i = 0, $switch = 0, $switch$i = 0, $switch2tmp$i$i = 0, $switchtmp$i = 0, $switchtmp$i42$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $_6$i$i$i = sp + 144|0;
 $_17$i$i = sp + 120|0;
 $_16$i$i = sp + 112|0;
 $_20 = sp + 104|0;
 $_15 = sp + 80|0;
 $e = sp + 72|0;
 $_8 = sp + 48|0;
 $_7 = sp + 40|0;
 $result = sp + 24|0;
 $args = sp;
 ;HEAP32[$args>>2]=HEAP32[$0>>2]|0;HEAP32[$args+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$args+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$args+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$args+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$args+20>>2]=HEAP32[$0+20>>2]|0;
 __THREW__ = 0;
 $1 = (invoke_ii(359,(5188|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 L1: do {
  if (!($3)) {
   $switchtmp$i = ($1|0)==(0|0);
   L3: do {
    if ($switchtmp$i) {
     label = 5;
    } else {
     $4 = HEAP32[$1>>2]|0;
     $cond = ($4|0)==(1);
     if ($cond) {
      __THREW__ = 0;
      $8 = (invoke_ii(359,(5188|0))|0);
      $9 = __THREW__; __THREW__ = 0;
      $10 = $9&1;
      if ($10) {
       break L1;
      }
      $switch2tmp$i$i = ($8|0)==(0|0);
      if ($switch2tmp$i$i) {
       __THREW__ = 0;
       invoke_vii(77,(15492|0),57);
       $11 = __THREW__; __THREW__ = 0;
       break L1;
      }
      $12 = HEAP32[$8>>2]|0;
      $switch$i = ($12|0)==(1);
      if ($switch$i) {
       $17 = ((($8)) + 4|0);
       $$pre$i = HEAP32[$17>>2]|0;
       $phitmp$i = ($$pre$i|0)==(0);
       if ($phitmp$i) {
        $$pre57 = ((($8)) + 8|0);
        $$in$i = $17;$$pre$phi58Z2D = $$pre57;
        label = 13;
       }
      } else {
       $src$i$sroa$5$0$$sroa_idx22$i$i = ((($8)) + 8|0);
       HEAP32[$8>>2] = 1;
       $_12$sroa$4$0$$sroa_idx$i$i = ((($8)) + 4|0);
       HEAP32[$_12$sroa$4$0$$sroa_idx$i$i>>2] = 0;
       $13 = $src$i$sroa$5$0$$sroa_idx22$i$i;
       $14 = $13;
       HEAP32[$14>>2] = 0;
       $15 = (($13) + 4)|0;
       $16 = $15;
       HEAP32[$16>>2] = 0;
       $$in$i = $_12$sroa$4$0$$sroa_idx$i$i;$$pre$phi58Z2D = $src$i$sroa$5$0$$sroa_idx22$i$i;
       label = 13;
      }
      do {
       if ((label|0) == 13) {
        HEAP32[$$in$i>>2] = -1;
        $18 = HEAP32[$$pre$phi58Z2D>>2]|0;
        $switchtmp$i42$i$i = ($18|0)==(0|0);
        if ($switchtmp$i42$i$i) {
         HEAP32[$$in$i>>2] = 0;
         break;
        }
        $19 = ((($8)) + 12|0);
        $20 = HEAP32[$19>>2]|0;
        ;HEAP32[$_6$i$i$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_6$i$i$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_6$i$i$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_6$i$i$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_6$i$i$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_6$i$i$i+20>>2]=HEAP32[$args+20>>2]|0;
        $21 = ((($20)) + 24|0);
        $22 = HEAP32[$21>>2]|0;
        __THREW__ = 0;
        invoke_viii($22|0,($result|0),($18|0),($_6$i$i$i|0));
        $23 = __THREW__; __THREW__ = 0;
        $24 = $23&1;
        if (!($24)) {
         HEAP32[$$in$i>>2] = 0;
         break L3;
        }
        $35 = ___cxa_find_matching_catch_2()|0;
        $36 = tempRet0;
        HEAP32[$$in$i>>2] = 0;
        $personalityslot$sroa$0$0 = $35;$personalityslot$sroa$7$0 = $36;
        ___resumeException($personalityslot$sroa$0$0|0);
        // unreachable;
       }
      } while(0);
      __THREW__ = 0;
      $25 = (invoke_i(397)|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if ($27) {
       break L1;
      }
      HEAP32[$_16$i$i>>2] = $25;
      ;HEAP32[$_17$i$i>>2]=HEAP32[$args>>2]|0;HEAP32[$_17$i$i+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_17$i$i+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_17$i$i+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_17$i$i+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_17$i$i+20>>2]=HEAP32[$args+20>>2]|0;
      $28 = $25;
      __THREW__ = 0;
      invoke_viii(398,($result|0),($_16$i$i|0),($_17$i$i|0));
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if ($30) {
       $39 = ___cxa_find_matching_catch_2()|0;
       $40 = tempRet0;
       $41 = HEAP32[$28>>2]|0;HEAP32[$28>>2] = (($41-1)|0);
       $42 = ($41|0)==(1);
       if (!($42)) {
        $personalityslot$sroa$0$0 = $39;$personalityslot$sroa$7$0 = $40;
        ___resumeException($personalityslot$sroa$0$0|0);
        // unreachable;
       }
       /* fence */;
       __THREW__ = 0;
       invoke_vi(394,($_16$i$i|0));
       $43 = __THREW__; __THREW__ = 0;
       $44 = $43&1;
       if ($44) {
        break L1;
       } else {
        $personalityslot$sroa$0$0 = $39;$personalityslot$sroa$7$0 = $40;
       }
       ___resumeException($personalityslot$sroa$0$0|0);
       // unreachable;
      }
      $31 = HEAP32[$28>>2]|0;HEAP32[$28>>2] = (($31-1)|0);
      $32 = ($31|0)==(1);
      if ($32) {
       /* fence */;
       __THREW__ = 0;
       invoke_vi(394,($_16$i$i|0));
       $33 = __THREW__; __THREW__ = 0;
       $34 = $33&1;
       if ($34) {
        $37 = ___cxa_find_matching_catch_2()|0;
        $38 = tempRet0;
        $personalityslot$sroa$0$0 = $37;$personalityslot$sroa$7$0 = $38;
        ___resumeException($personalityslot$sroa$0$0|0);
        // unreachable;
       }
      }
     } else {
      label = 5;
     }
    }
   } while(0);
   if ((label|0) == 5) {
    __THREW__ = 0;
    $5 = (invoke_i(397)|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     break;
    }
    HEAP32[$_7>>2] = $5;
    ;HEAP32[$_8>>2]=HEAP32[$args>>2]|0;HEAP32[$_8+4>>2]=HEAP32[$args+4>>2]|0;HEAP32[$_8+8>>2]=HEAP32[$args+8>>2]|0;HEAP32[$_8+12>>2]=HEAP32[$args+12>>2]|0;HEAP32[$_8+16>>2]=HEAP32[$args+16>>2]|0;HEAP32[$_8+20>>2]=HEAP32[$args+20>>2]|0;
    $46 = $5;
    __THREW__ = 0;
    invoke_viii(398,($result|0),($_7|0),($_8|0));
    $47 = __THREW__; __THREW__ = 0;
    $48 = $47&1;
    if ($48) {
     $91 = ___cxa_find_matching_catch_2()|0;
     $92 = tempRet0;
     $93 = HEAP32[$46>>2]|0;HEAP32[$46>>2] = (($93-1)|0);
     $94 = ($93|0)==(1);
     if (!($94)) {
      $personalityslot$sroa$0$0 = $91;$personalityslot$sroa$7$0 = $92;
      ___resumeException($personalityslot$sroa$0$0|0);
      // unreachable;
     }
     /* fence */;
     __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h011f944b815a0c26E($_7);
     $personalityslot$sroa$0$0 = $91;$personalityslot$sroa$7$0 = $92;
     ___resumeException($personalityslot$sroa$0$0|0);
     // unreachable;
    }
    $49 = HEAP32[$46>>2]|0;HEAP32[$46>>2] = (($49-1)|0);
    $50 = ($49|0)==(1);
    if ($50) {
     /* fence */;
     __THREW__ = 0;
     invoke_vi(394,($_7|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      $87 = ___cxa_find_matching_catch_2()|0;
      $88 = tempRet0;
      $$pre = HEAP32[$result>>2]|0;
      $phitmp = ($$pre|0)==(1);
      if (!($phitmp)) {
       $personalityslot$sroa$0$0 = $87;$personalityslot$sroa$7$0 = $88;
       ___resumeException($personalityslot$sroa$0$0|0);
       // unreachable;
      }
      $73 = ((($result)) + 4|0);
      $74 = HEAP8[$73>>0]|0;
      $cond$i$i = ($74<<24>>24)==(2);
      if (!($cond$i$i)) {
       $personalityslot$sroa$0$0 = $87;$personalityslot$sroa$7$0 = $88;
       ___resumeException($personalityslot$sroa$0$0|0);
       // unreachable;
      }
      $75 = ((($result)) + 8|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ((($76)) + 4|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ((($76)) + 8|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = HEAP32[$80>>2]|0;
      FUNCTION_TABLE_vi[$81 & 511]($78);
      $82 = ((($80)) + 4|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ($83|0)==(0);
      if (!($84)) {
       $85 = ((($80)) + 8|0);
       $86 = HEAP32[$85>>2]|0;
       ___rust_deallocate($78,$83,$86);
      }
      ___rust_deallocate($76,12,4);
      $personalityslot$sroa$0$0 = $87;$personalityslot$sroa$7$0 = $88;
      ___resumeException($personalityslot$sroa$0$0|0);
      // unreachable;
     }
    }
   }
   $45 = HEAP32[$result>>2]|0;
   $switch = ($45|0)==(1);
   if (!($switch)) {
    STACKTOP = sp;return;
   }
   $53 = ((($result)) + 4|0);
   $54 = $53;
   $55 = $54;
   $56 = HEAP32[$55>>2]|0;
   $57 = (($54) + 4)|0;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = $e;
   $61 = $60;
   HEAP32[$61>>2] = $56;
   $62 = (($60) + 4)|0;
   $63 = $62;
   HEAP32[$63>>2] = $59;
   $64 = $e;
   HEAP32[$_20>>2] = $64;
   $65 = ((($_20)) + 4|0);
   HEAP32[$65>>2] = (385);
   HEAP32[$_15>>2] = 5196;
   $66 = ((($_15)) + 4|0);
   HEAP32[$66>>2] = 1;
   $_6$sroa$0$0$$sroa_idx$i = ((($_15)) + 8|0);
   HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
   $67 = ((($_15)) + 16|0);
   HEAP32[$67>>2] = $_20;
   $68 = ((($_15)) + 20|0);
   HEAP32[$68>>2] = 1;
   __THREW__ = 0;
   invoke_vii(386,($_15|0),(5204|0));
   $69 = __THREW__; __THREW__ = 0;
   $70 = ___cxa_find_matching_catch_2()|0;
   $71 = tempRet0;
   $72 = HEAP8[$e>>0]|0;
   $cond$i$i39 = ($72<<24>>24)==(2);
   if (!($cond$i$i39)) {
    $personalityslot$sroa$0$0 = $70;$personalityslot$sroa$7$0 = $71;
    ___resumeException($personalityslot$sroa$0$0|0);
    // unreachable;
   }
   $95 = ((($e)) + 4|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ((($96)) + 4|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ((($96)) + 8|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = HEAP32[$100>>2]|0;
   FUNCTION_TABLE_vi[$101 & 511]($98);
   $102 = ((($100)) + 4|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==(0);
   if (!($104)) {
    $105 = ((($100)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    ___rust_deallocate($98,$103,$106);
   }
   ___rust_deallocate($96,12,4);
   $personalityslot$sroa$0$0 = $70;$personalityslot$sroa$7$0 = $71;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
 } while(0);
 $89 = ___cxa_find_matching_catch_2()|0;
 $90 = tempRet0;
 $personalityslot$sroa$0$0 = $89;$personalityslot$sroa$7$0 = $90;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
}
function __ZN3std4sync4once4Once10call_inner17hca296050369f5029E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_41$sroa$0$0$$sroa_idx = 0, $complete = 0, $node = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$7$0 = 0, $state$0 = 0, $state$1 = 0;
 var $success = 0, $success5 = 0, $switch3tmp$i$i = 0, $switchtmp$i$i = 0, $switchtmp$i$i$i = 0, $switchtmp$i$i36 = 0, $switchtmp$i$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $node = sp + 8|0;
 $complete = sp;
 $4 = HEAP32[$0>>2]|0;
 $_41$sroa$0$0$$sroa_idx = ((($node)) + 4|0);
 $5 = ((($node)) + 8|0);
 $6 = $node;
 $7 = $6 | 2;
 $state$0 = $4;
 L1: while(1) {
  switch ($state$0|0) {
  case 3:  {
   label = 7;
   break L1;
   break;
  }
  case 1:  {
   if (!($1)) {
    label = 3;
    break L1;
   }
   break;
  }
  case 0:  {
   break;
  }
  default: {
   $9 = $state$0 & 3;
   $10 = ($9|0)==(2);
   if (!($10)) {
    label = 12;
    break L1;
   }
   __THREW__ = 0;
   $19 = (invoke_i(356)|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    label = 34;
    break L1;
   }
   $switchtmp$i$i$i = ($19|0)==(0|0);
   if ($switchtmp$i$i$i) {
    label = 17;
    break L1;
   }
   __THREW__ = 0;
   $22 = (invoke_i(357)|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    label = 34;
    break L1;
   }
   $switch3tmp$i$i = ($22|0)==(0);
   if ($switch3tmp$i$i) {
    label = 17;
    break L1;
   }
   HEAP32[$node>>2] = $22;
   HEAP8[$_41$sroa$0$0$$sroa_idx>>0] = 0;
   HEAP32[$5>>2] = 0;
   $state$1 = $state$0;
   while(1) {
    $26 = $state$1 & 3;
    $27 = ($26|0)==(2);
    if (!($27)) {
     label = 20;
     break;
    }
    $33 = $state$1 & -4;
    $34 = $33;
    HEAP32[$5>>2] = $34;
    $35 = HEAP32[$0>>2]|0;if (($35|0) == ($state$1|0)) HEAP32[$0>>2] = $7;
    $success5 = ($35|0)==($state$1|0);
    if ($success5) {
     break;
    } else {
     $state$1 = $35;
    }
   }
   if ((label|0) == 20) {
    label = 0;
    $28 = HEAP32[$node>>2]|0;
    $switchtmp$i$i36 = ($28|0)==(0|0);
    if (!($switchtmp$i$i36)) {
     $29 = HEAP32[$28>>2]|0;HEAP32[$28>>2] = (($29-1)|0);
     $30 = ($29|0)==(1);
     if ($30) {
      /* fence */;
      __THREW__ = 0;
      invoke_vi(362,($node|0));
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       label = 35;
       break L1;
      }
     }
    }
    $state$0 = $state$1;
    continue L1;
   }
   while(1) {
    $36 = HEAP8[$_41$sroa$0$0$$sroa_idx>>0]|0;
    $37 = ($36<<24>>24)==(0);
    if (!($37)) {
     break;
    }
    __THREW__ = 0;
    invoke_v(400);
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if ($39) {
     label = 31;
     break L1;
    }
   }
   $40 = HEAP32[$0>>2]|0;
   $41 = HEAP32[$node>>2]|0;
   $switchtmp$i$i41 = ($41|0)==(0|0);
   if (!($switchtmp$i$i41)) {
    $42 = HEAP32[$41>>2]|0;HEAP32[$41>>2] = (($42-1)|0);
    $43 = ($42|0)==(1);
    if ($43) {
     /* fence */;
     __THREW__ = 0;
     invoke_vi(362,($node|0));
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 35;
      break L1;
     }
    }
   }
   $state$0 = $40;
   continue L1;
  }
  }
  $8 = HEAP32[$0>>2]|0;if (($8|0) == ($state$0|0)) HEAP32[$0>>2] = 2;
  $success = ($8|0)==($state$0|0);
  if ($success) {
   label = 8;
   break;
  } else {
   $state$0 = $8;
  }
 }
 if ((label|0) == 3) {
  __ZN3std9panicking11begin_panic17h10fb5a0e6dedd3d3E(17766,42,5216);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  HEAP8[$complete>>0] = 1;
  $11 = ((($complete)) + 4|0);
  HEAP32[$11>>2] = $0;
  $12 = ($state$0|0)==(1);
  $13 = ((($3)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  __THREW__ = 0;
  invoke_vii($14|0,($2|0),($12|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $55 = ___cxa_find_matching_catch_2()|0;
   $56 = tempRet0;
   __ZN59__LT_std__sync__once__Finish_u20_as_u20_core__ops__Drop_GT_4drop17h57634ab1734b5b45E($complete);
   $personalityslot$sroa$0$0 = $55;$personalityslot$sroa$7$0 = $56;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
  HEAP8[$complete>>0] = 0;
  __THREW__ = 0;
  invoke_vi(399,($complete|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = $17&1;
  if ($18) {
   label = 35;
  } else {
   STACKTOP = sp;return;
  }
 }
 else if ((label|0) == 12) {
  __ZN3std9panicking11begin_panic17h10fb5a0e6dedd3d3E(17808,47,5228);
  // unreachable;
 }
 else if ((label|0) == 17) {
  __THREW__ = 0;
  invoke_vii(77,(17293|0),94);
  $25 = __THREW__; __THREW__ = 0;
  label = 34;
 }
 else if ((label|0) == 31) {
  $46 = ___cxa_find_matching_catch_2()|0;
  $47 = tempRet0;
  $48 = HEAP32[$node>>2]|0;
  $switchtmp$i$i = ($48|0)==(0|0);
  if ($switchtmp$i$i) {
   $personalityslot$sroa$0$0 = $46;$personalityslot$sroa$7$0 = $47;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
  $49 = HEAP32[$48>>2]|0;HEAP32[$48>>2] = (($49-1)|0);
  $50 = ($49|0)==(1);
  if (!($50)) {
   $personalityslot$sroa$0$0 = $46;$personalityslot$sroa$7$0 = $47;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
  /* fence */;
  __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17haa414254399d4f93E($node);
  $personalityslot$sroa$0$0 = $46;$personalityslot$sroa$7$0 = $47;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 if ((label|0) == 34) {
  $51 = ___cxa_find_matching_catch_2()|0;
  $52 = tempRet0;
  $personalityslot$sroa$0$0 = $51;$personalityslot$sroa$7$0 = $52;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 else if ((label|0) == 35) {
  $53 = ___cxa_find_matching_catch_2()|0;
  $54 = tempRet0;
  $personalityslot$sroa$0$0 = $53;$personalityslot$sroa$7$0 = $54;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
}
function __ZN59__LT_std__sync__once__Finish_u20_as_u20_core__ops__Drop_GT_4drop17h57634ab1734b5b45E($0) {
 $0 = $0|0;
 var $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_12 = 0, $_23 = 0, $_28 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $left_val = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$5$0 = 0, $queue1$031 = 0, $right_val = 0, $switch3tmp$i = 0, $thread = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $thread = sp + 40|0;
 $_28 = sp + 24|0;
 $_23 = sp;
 $right_val = sp + 52|0;
 $left_val = sp + 48|0;
 $_12 = sp + 44|0;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $$sink = $2 ? 3 : 1;
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = $$sink;
 $6 = $5 & 3;
 HEAP32[$_12>>2] = $6;
 HEAP32[$left_val>>2] = $_12;
 HEAP32[$right_val>>2] = 5240;
 $7 = ($6|0)==(2);
 if (!($7)) {
  $8 = $left_val;
  $9 = $right_val;
  HEAP32[$_28>>2] = $8;
  $10 = ((($_28)) + 4|0);
  HEAP32[$10>>2] = (33);
  $11 = ((($_28)) + 8|0);
  HEAP32[$11>>2] = $9;
  $12 = ((($_28)) + 12|0);
  HEAP32[$12>>2] = (33);
  HEAP32[$_23>>2] = 4724;
  $13 = ((($_23)) + 4|0);
  HEAP32[$13>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i = ((($_23)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
  $14 = ((($_23)) + 16|0);
  HEAP32[$14>>2] = $_28;
  $15 = ((($_23)) + 20|0);
  HEAP32[$15>>2] = 2;
  __ZN3std9panicking15begin_panic_fmt17h089a948b9fd65060E($_23,5244);
  // unreachable;
 }
 $16 = $5 & -4;
 $17 = ($16|0)==(0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = $16;
 $queue1$031 = $18;
 while(1) {
  $19 = ((($queue1$031)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$queue1$031>>2]|0;
  HEAP32[$queue1$031>>2] = 0;
  $switch3tmp$i = ($21|0)==(0);
  if ($switch3tmp$i) {
   label = 8;
   break;
  }
  HEAP32[$thread>>2] = $21;
  $25 = ((($queue1$031)) + 4|0);
  HEAP8[$25>>0] = 1;
  __THREW__ = 0;
  invoke_vi(401,($thread|0));
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   label = 13;
   break;
  }
  $28 = HEAP32[$thread>>2]|0;
  $29 = HEAP32[$28>>2]|0;HEAP32[$28>>2] = (($29-1)|0);
  $30 = ($29|0)==(1);
  if ($30) {
   /* fence */;
   __THREW__ = 0;
   invoke_vi(362,($thread|0));
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    label = 15;
    break;
   }
  }
  $33 = ($20|0)==(0|0);
  if ($33) {
   label = 5;
   break;
  } else {
   $queue1$031 = $20;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  __THREW__ = 0;
  invoke_vi(78,(5548|0));
  $22 = __THREW__; __THREW__ = 0;
  $23 = ___cxa_find_matching_catch_2()|0;
  $24 = tempRet0;
  $personalityslot$sroa$0$0 = $23;$personalityslot$sroa$5$0 = $24;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 else if ((label|0) == 13) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = tempRet0;
  $36 = HEAP32[$thread>>2]|0;
  $37 = HEAP32[$36>>2]|0;HEAP32[$36>>2] = (($37-1)|0);
  $38 = ($37|0)==(1);
  if (!($38)) {
   $personalityslot$sroa$0$0 = $34;$personalityslot$sroa$5$0 = $35;
   ___resumeException($personalityslot$sroa$0$0|0);
   // unreachable;
  }
  /* fence */;
  __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17haa414254399d4f93E($thread);
  $personalityslot$sroa$0$0 = $34;$personalityslot$sroa$5$0 = $35;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
 else if ((label|0) == 15) {
  $39 = ___cxa_find_matching_catch_2()|0;
  $40 = tempRet0;
  $personalityslot$sroa$0$0 = $39;$personalityslot$sroa$5$0 = $40;
  ___resumeException($personalityslot$sroa$0$0|0);
  // unreachable;
 }
}
function __ZN3std4sync4once4Once9call_once28__u7b__u7b_closure_u7d__u7d_17hc18bcab76e9ca036E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i$i = 0, $$sroa_idx$i$i$i$i = 0, $$sroa_idx$i$i$i$i$i$i$i = 0, $$sroa_idx$i$i$i$i$i44$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_34$sroa$0$0$copyload$i$i = 0, $_34$sroa$4$0$$sroa_idx67$i$i = 0, $_34$sroa$4$0$copyload$i$i = 0, $_34$sroa$5$0$$sroa_idx69$i$i = 0, $_34$sroa$5$0$copyload$i$i = 0, $iter$sroa$0$0$i$i = 0, $iter$sroa$0$0$ph$i$i = 0;
 var $iter2$sroa$8$0$i$i = 0, $magicptr$i$i = 0, $not$$i$i$i$i$i$i = 0, $not$$i$i$i$i48$i$i = 0, $personalityslot$sroa$0$2$i$i = 0, $personalityslot$sroa$7$2$i$i = 0, $switch2$i = 0, $switch3tmp$i$i$i$i = 0, $switch3tmp$i$i42$i$i = 0, $switchtmp$i$i = 0, $t$sroa$0$0$copyload1$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $t$sroa$0$0$copyload1$i$i$i = HEAP8[$2>>0]|0;
 HEAP8[$2>>0] = 0;
 $switch2$i = ($t$sroa$0$0$copyload1$i$i$i<<24>>24)==(0);
 if ($switch2$i) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(5548);
  // unreachable;
 }
 (_pthread_mutex_lock(((23888)|0))|0);
 __ZN4drop17h45e3e8f0f0125d26E(23956);
 HEAP32[5989] = 0;
 (_pthread_mutex_unlock(((23888)|0))|0);
 $iter$sroa$0$0$ph$i$i = 0;
 L4: while(1) {
  $iter$sroa$0$0$i$i = $iter$sroa$0$0$ph$i$i;
  L6: while(1) {
   $3 = ($iter$sroa$0$0$i$i>>>0)<(10);
   $4 = (($iter$sroa$0$0$i$i) + 1)|0;
   if (!($3)) {
    label = 30;
    break L4;
   }
   (_pthread_mutex_lock(((23912)|0))|0);
   $5 = HEAP32[5990]|0;
   $6 = ($iter$sroa$0$0$i$i|0)==(9);
   $$$i$i = $6 ? (1) : 0;
   HEAP32[5990] = $$$i$i;
   (_pthread_mutex_unlock(((23912)|0))|0);
   $magicptr$i$i = $5;
   switch ($magicptr$i$i|0) {
   case 1:  {
    label = 7;
    break L4;
    break;
   }
   case 0:  {
    $iter$sroa$0$0$i$i = $4;
    break;
   }
   default: {
    break L6;
   }
   }
  }
  $_34$sroa$0$0$copyload$i$i = HEAP32[$5>>2]|0;
  $_34$sroa$4$0$$sroa_idx67$i$i = ((($5)) + 4|0);
  $_34$sroa$4$0$copyload$i$i = HEAP32[$_34$sroa$4$0$$sroa_idx67$i$i>>2]|0;
  $_34$sroa$5$0$$sroa_idx69$i$i = ((($5)) + 8|0);
  $_34$sroa$5$0$copyload$i$i = HEAP32[$_34$sroa$5$0$$sroa_idx69$i$i>>2]|0;
  $7 = (($_34$sroa$0$0$copyload$i$i) + ($_34$sroa$5$0$copyload$i$i<<3)|0);
  $iter2$sroa$8$0$i$i = $_34$sroa$0$0$copyload$i$i;
  while(1) {
   $8 = ($iter2$sroa$8$0$i$i|0)==($7|0);
   if ($8) {
    break;
   }
   $12 = ((($iter2$sroa$8$0$i$i)) + 8|0);
   $26 = HEAP32[$iter2$sroa$8$0$i$i>>2]|0;
   $switchtmp$i$i = ($26|0)==(0);
   if ($switchtmp$i$i) {
    label = 20;
    break;
   }
   $$sroa_idx$i$i$i$i = ((($iter2$sroa$8$0$i$i)) + 4|0);
   $27 = HEAP32[$$sroa_idx$i$i$i$i>>2]|0;
   $28 = $26;
   $29 = ((($27)) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   __THREW__ = 0;
   invoke_vi($30|0,($28|0));
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    label = 11;
    break L4;
   } else {
    $iter2$sroa$8$0$i$i = $12;
   }
  }
  L14: do {
   if ((label|0) == 20) {
    label = 0;
    $33 = ($12|0)==($7|0);
    if (!($33)) {
     $35 = $12;
     while(1) {
      $34 = ((($35)) + 8|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = $36;
      $switch3tmp$i$i42$i$i = ($36|0)==(0);
      if ($switch3tmp$i$i42$i$i) {
       break L14;
      }
      $$sroa_idx$i$i$i$i$i44$i$i = ((($35)) + 4|0);
      $38 = HEAP32[$$sroa_idx$i$i$i$i$i44$i$i>>2]|0;
      $39 = HEAP32[$38>>2]|0;
      __THREW__ = 0;
      invoke_vi($39|0,($37|0));
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 29;
       break L4;
      }
      $42 = ((($38)) + 4|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($43|0)==(0);
      if (!($44)) {
       $46 = ((($38)) + 8|0);
       $47 = HEAP32[$46>>2]|0;
       ___rust_deallocate($37,$43,$47);
      }
      $45 = ($34|0)==($7|0);
      if ($45) {
       break;
      } else {
       $35 = $34;
      }
     }
    }
   }
  } while(0);
  $not$$i$i$i$i48$i$i = ($_34$sroa$4$0$copyload$i$i|0)==(0);
  if (!($not$$i$i$i$i48$i$i)) {
   $48 = $_34$sroa$4$0$copyload$i$i << 3;
   ___rust_deallocate($_34$sroa$0$0$copyload$i$i,$48,4);
  }
  ___rust_deallocate($5,12,4);
  $iter$sroa$0$0$ph$i$i = $4;
 }
 if ((label|0) == 7) {
  __ZN3std9panicking11begin_panic17h10fb5a0e6dedd3d3E(17956,39,5256);
  // unreachable;
 }
 else if ((label|0) == 11) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = tempRet0;
  $11 = ($12|0)==($7|0);
  L29: do {
   if (!($11)) {
    $14 = $12;
    while(1) {
     $13 = ((($14)) + 8|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = $15;
     $switch3tmp$i$i$i$i = ($15|0)==(0);
     if ($switch3tmp$i$i$i$i) {
      break L29;
     }
     $$sroa_idx$i$i$i$i$i$i$i = ((($14)) + 4|0);
     $17 = HEAP32[$$sroa_idx$i$i$i$i$i$i$i>>2]|0;
     $18 = HEAP32[$17>>2]|0;
     FUNCTION_TABLE_vi[$18 & 511]($16);
     $19 = ((($17)) + 4|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(0);
     if (!($21)) {
      $23 = ((($17)) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      ___rust_deallocate($16,$20,$24);
     }
     $22 = ($13|0)==($7|0);
     if ($22) {
      break;
     } else {
      $14 = $13;
     }
    }
   }
  } while(0);
  $not$$i$i$i$i$i$i = ($_34$sroa$4$0$copyload$i$i|0)==(0);
  if ($not$$i$i$i$i$i$i) {
   $personalityslot$sroa$0$2$i$i = $9;$personalityslot$sroa$7$2$i$i = $10;
   ___rust_deallocate($5,12,4);
   ___resumeException($personalityslot$sroa$0$2$i$i|0);
   // unreachable;
  }
  $25 = $_34$sroa$4$0$copyload$i$i << 3;
  ___rust_deallocate($_34$sroa$0$0$copyload$i$i,$25,4);
  $personalityslot$sroa$0$2$i$i = $9;$personalityslot$sroa$7$2$i$i = $10;
  ___rust_deallocate($5,12,4);
  ___resumeException($personalityslot$sroa$0$2$i$i|0);
  // unreachable;
 }
 else if ((label|0) == 29) {
  $49 = ___cxa_find_matching_catch_2()|0;
  $50 = tempRet0;
  $personalityslot$sroa$0$2$i$i = $49;$personalityslot$sroa$7$2$i$i = $50;
  ___rust_deallocate($5,12,4);
  ___resumeException($personalityslot$sroa$0$2$i$i|0);
  // unreachable;
 }
 else if ((label|0) == 30) {
  return;
 }
}
function __ZN4core3ops6FnOnce9call_once17h81d1b88e47def972E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $self = sp;
 HEAP32[$self>>2] = $0;
 __ZN3std4sync4once4Once9call_once28__u7b__u7b_closure_u7d__u7d_17hc18bcab76e9ca036E($self,$1);
 STACKTOP = sp;return;
}
function __ZN4drop17h45e3e8f0f0125d26E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i$i$i$i$i = 0, $not$$i$i$i$i$i$i$i$i = 0, $switchtmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $switchtmp = ($1|0)==(0|0);
 if ($switchtmp) {
  return;
 }
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + (($4*12)|0)|0);
 $6 = ($4|0)==(0);
 if (!($6)) {
  $8 = $2;
  while(1) {
   $7 = ((($8)) + 4|0);
   $9 = HEAP32[$7>>2]|0;
   $not$$i$i$i$i$i$i$i$i = ($9|0)==(0);
   if (!($not$$i$i$i$i$i$i$i$i)) {
    $10 = HEAP32[$8>>2]|0;
    ___rust_deallocate($10,$9,1);
   }
   $11 = ((($8)) + 12|0);
   $12 = ($11|0)==($5|0);
   if ($12) {
    break;
   } else {
    $8 = $11;
   }
  }
 }
 $13 = ((($1)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $not$$i$i$i$i$i = ($14|0)==(0);
 if (!($not$$i$i$i$i$i)) {
  $15 = ($14*12)|0;
  $16 = HEAP32[$1>>2]|0;
  ___rust_deallocate($16,$15,4);
 }
 ___rust_deallocate($1,12,4);
 return;
}
function __ZN3std10sys_common11thread_info3set17h0470cb5897e3f00dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i = 0, $$pre$i23 = 0, $$pre$phi$i36Z2D = 0, $$pre$phi$iZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $_10$sroa$4$0$$sroa_idx48 = 0, $_11$i = 0, $_12$sroa$0$0$copyload12 = 0, $_4$i$i = 0;
 var $_5$sroa$4$0$$sroa_idx13$i$i = 0, $_7$sroa$0$0$$sroa_idx$i$i = 0, $_7$sroa$0$0$copyload35$i$i = 0, $_9$i$i = 0, $_9$i$i18 = 0, $cond$i$i$i = 0, $cond$i$i$i$i$i = 0, $cond$i$i$i$i$i37 = 0, $cond$i$i$i26 = 0, $eh$lpad$body49$index3Z2D = 0, $eh$lpad$body49$indexZ2D = 0, $f$i = 0, $not$switch$i$i$i = 0, $not$switch$i$i$i32 = 0, $personalityslot$sroa$0$016$i = 0, $personalityslot$sroa$5$017$i = 0, $switch$i = 0, $switch$i21 = 0, $switch2tmp$i$i = 0, $switch2tmp$i$i19 = 0;
 var $switchtmp$i$i$i = 0, $switchtmp$i$i$i$i$i$i = 0, $switchtmp$i$i$i$i$i$i28 = 0, $switchtmp$i36$i$i = 0, $thread = 0, $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i = 0, $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i25 = 0, $value$i$sroa$410$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i = 0, $value$i$sroa$411$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $_4$i$i = sp + 88|0;
 $_9$i$i18 = sp + 64|0;
 $_11$i = sp + 48|0;
 $f$i = sp + 32|0;
 $_9$i$i = sp + 8|0;
 $thread = sp;
 $2 = $1;
 $3 = $0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$thread>>2] = $2;
 __THREW__ = 0;
 $9 = (invoke_i(356)|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 L1: do {
  if (!($11)) {
   $switch2tmp$i$i = ($9|0)==(0|0);
   if ($switch2tmp$i$i) {
    __THREW__ = 0;
    invoke_vii(77,(15492|0),57);
    $12 = __THREW__; __THREW__ = 0;
    break;
   }
   $13 = HEAP32[$9>>2]|0;
   $switch$i = ($13|0)==(1);
   do {
    if ($switch$i) {
     $$pre$i = ((($9)) + 4|0);
     $$pre$phi$iZ2D = $$pre$i;
    } else {
     ;HEAP32[$_9$i$i>>2]=HEAP32[$9>>2]|0;HEAP32[$_9$i$i+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$_9$i$i+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$_9$i$i+12>>2]=HEAP32[$9+12>>2]|0;HEAP32[$_9$i$i+16>>2]=HEAP32[$9+16>>2]|0;
     HEAP32[$9>>2] = 1;
     $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i = ((($9)) + 4|0);
     HEAP32[$value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i>>2] = 0;
     $value$i$sroa$410$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i = ((($9)) + 16|0);
     HEAP32[$value$i$sroa$410$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i>>2] = 0;
     $14 = HEAP32[$_9$i$i>>2]|0;
     $cond$i$i$i = ($14|0)==(1);
     if ($cond$i$i$i) {
      $15 = ((($_9$i$i)) + 16|0);
      $16 = HEAP32[$15>>2]|0;
      $switchtmp$i$i$i$i$i$i = ($16|0)==(0|0);
      if (!($switchtmp$i$i$i$i$i$i)) {
       $17 = HEAP32[$16>>2]|0;HEAP32[$16>>2] = (($17-1)|0);
       $18 = ($17|0)==(1);
       if ($18) {
        /* fence */;
        __THREW__ = 0;
        invoke_vi(362,($15|0));
        $19 = __THREW__; __THREW__ = 0;
        $20 = $19&1;
        if ($20) {
         break L1;
        }
       }
      }
     }
     $21 = HEAP32[$9>>2]|0;
     $not$switch$i$i$i = ($21|0)==(1);
     if ($not$switch$i$i$i) {
      $$pre$phi$iZ2D = $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i;
      break;
     } else {
      __THREW__ = 0;
      invoke_vi(78,(5548|0));
      $22 = __THREW__; __THREW__ = 0;
      break L1;
     }
    }
   } while(0);
   $23 = HEAP32[$$pre$phi$iZ2D>>2]|0;
   $cond$i$i$i$i$i = ($23|0)==(-1);
   if ($cond$i$i$i$i$i) {
    __THREW__ = 0;
    invoke_v(369);
    $24 = __THREW__; __THREW__ = 0;
    break;
   }
   $25 = ((($9)) + 16|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   if (!($27)) {
    __THREW__ = 0;
    invoke_viii(353,(18109|0),38,(5268|0));
    $28 = __THREW__; __THREW__ = 0;
    break;
   }
   $_12$sroa$0$0$copyload12 = HEAP32[$thread>>2]|0;
   $29 = $f$i;
   $30 = $29;
   HEAP32[$30>>2] = $5;
   $31 = (($29) + 4)|0;
   $32 = $31;
   HEAP32[$32>>2] = $8;
   $_10$sroa$4$0$$sroa_idx48 = ((($f$i)) + 8|0);
   HEAP32[$_10$sroa$4$0$$sroa_idx48>>2] = $_12$sroa$0$0$copyload12;
   $33 = $_12$sroa$0$0$copyload12;
   __THREW__ = 0;
   $34 = (invoke_i(356)|0);
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   L24: do {
    if ($36) {
     label = 39;
    } else {
     $switch2tmp$i$i19 = ($34|0)==(0|0);
     if ($switch2tmp$i$i19) {
      __THREW__ = 0;
      invoke_vii(77,(15492|0),57);
      $37 = __THREW__; __THREW__ = 0;
      label = 39;
      break;
     }
     ;HEAP32[$_11$i>>2]=HEAP32[$f$i>>2]|0;HEAP32[$_11$i+4>>2]=HEAP32[$f$i+4>>2]|0;HEAP32[$_11$i+8>>2]=HEAP32[$f$i+8>>2]|0;
     $38 = HEAP32[$34>>2]|0;
     $switch$i21 = ($38|0)==(1);
     L29: do {
      if ($switch$i21) {
       $$pre$i23 = ((($34)) + 4|0);
       $$pre$phi$i36Z2D = $$pre$i23;
      } else {
       ;HEAP32[$_9$i$i18>>2]=HEAP32[$34>>2]|0;HEAP32[$_9$i$i18+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$_9$i$i18+8>>2]=HEAP32[$34+8>>2]|0;HEAP32[$_9$i$i18+12>>2]=HEAP32[$34+12>>2]|0;HEAP32[$_9$i$i18+16>>2]=HEAP32[$34+16>>2]|0;
       HEAP32[$34>>2] = 1;
       $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i25 = ((($34)) + 4|0);
       HEAP32[$value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i25>>2] = 0;
       $value$i$sroa$411$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i = ((($34)) + 16|0);
       HEAP32[$value$i$sroa$411$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i>>2] = 0;
       $39 = HEAP32[$_9$i$i18>>2]|0;
       $cond$i$i$i26 = ($39|0)==(1);
       if ($cond$i$i$i26) {
        $40 = ((($_9$i$i18)) + 16|0);
        $41 = HEAP32[$40>>2]|0;
        $switchtmp$i$i$i$i$i$i28 = ($41|0)==(0|0);
        if ($switchtmp$i$i$i$i$i$i28) {
         label = 28;
        } else {
         $42 = HEAP32[$41>>2]|0;HEAP32[$41>>2] = (($42-1)|0);
         $43 = ($42|0)==(1);
         if ($43) {
          /* fence */;
          __THREW__ = 0;
          invoke_vi(362,($40|0));
          $44 = __THREW__; __THREW__ = 0;
          $45 = $44&1;
          if (!($45)) {
           label = 28;
          }
         } else {
          label = 28;
         }
        }
       } else {
        label = 28;
       }
       do {
        if ((label|0) == 28) {
         $46 = HEAP32[$34>>2]|0;
         $not$switch$i$i$i32 = ($46|0)==(1);
         if ($not$switch$i$i$i32) {
          $$pre$phi$i36Z2D = $value$i$sroa$0$0$_12$sroa$4$0$$sroa_cast$i$sroa_idx$i25;
          break L29;
         } else {
          __THREW__ = 0;
          invoke_vi(78,(5548|0));
          $47 = __THREW__; __THREW__ = 0;
          break;
         }
        }
       } while(0);
       $81 = ___cxa_find_matching_catch_2()|0;
       $82 = tempRet0;
       $83 = ((($_11$i)) + 8|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = HEAP32[$84>>2]|0;HEAP32[$84>>2] = (($85-1)|0);
       $86 = ($85|0)==(1);
       if (!($86)) {
        $personalityslot$sroa$0$016$i = $81;$personalityslot$sroa$5$017$i = $82;
        break L24;
       }
       /* fence */;
       __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17haa414254399d4f93E($83);
       $personalityslot$sroa$0$016$i = $81;$personalityslot$sroa$5$017$i = $82;
       break L24;
      }
     } while(0);
     $48 = $_11$i;
     $49 = $48;
     $50 = HEAP32[$49>>2]|0;
     $51 = (($48) + 4)|0;
     $52 = $51;
     $53 = HEAP32[$52>>2]|0;
     $_7$sroa$0$0$$sroa_idx$i$i = ((($_11$i)) + 8|0);
     $_7$sroa$0$0$copyload35$i$i = HEAP32[$_7$sroa$0$0$$sroa_idx$i$i>>2]|0;
     $54 = $_4$i$i;
     $55 = $54;
     HEAP32[$55>>2] = $50;
     $56 = (($54) + 4)|0;
     $57 = $56;
     HEAP32[$57>>2] = $53;
     $_5$sroa$4$0$$sroa_idx13$i$i = ((($_4$i$i)) + 8|0);
     HEAP32[$_5$sroa$4$0$$sroa_idx13$i$i>>2] = $_7$sroa$0$0$copyload35$i$i;
     $58 = HEAP32[$$pre$phi$i36Z2D>>2]|0;
     $cond$i$i$i$i$i37 = ($58|0)==(0);
     $59 = $_7$sroa$0$0$copyload35$i$i;
     if (!($cond$i$i$i$i$i37)) {
      __THREW__ = 0;
      invoke_v(360);
      $60 = __THREW__; __THREW__ = 0;
      $61 = ___cxa_find_matching_catch_2()|0;
      $62 = tempRet0;
      $switchtmp$i$i$i = ($_7$sroa$0$0$copyload35$i$i|0)==(0);
      if ($switchtmp$i$i$i) {
       $personalityslot$sroa$0$016$i = $61;$personalityslot$sroa$5$017$i = $62;
       break;
      }
      $70 = HEAP32[$59>>2]|0;HEAP32[$59>>2] = (($70-1)|0);
      $71 = ($70|0)==(1);
      if (!($71)) {
       $personalityslot$sroa$0$016$i = $61;$personalityslot$sroa$5$017$i = $62;
       break;
      }
      $72 = ((($_4$i$i)) + 8|0);
      /* fence */;
      __THREW__ = 0;
      invoke_vi(362,($72|0));
      $73 = __THREW__; __THREW__ = 0;
      $74 = $73&1;
      if (!($74)) {
       $personalityslot$sroa$0$016$i = $61;$personalityslot$sroa$5$017$i = $62;
       break;
      }
      $87 = ___cxa_find_matching_catch_2()|0;
      $88 = tempRet0;
      $personalityslot$sroa$0$016$i = $87;$personalityslot$sroa$5$017$i = $88;
      break;
     }
     HEAP32[$$pre$phi$i36Z2D>>2] = -1;
     $63 = ((($34)) + 8|0);
     $64 = ((($34)) + 16|0);
     $65 = HEAP32[$64>>2]|0;
     $switchtmp$i36$i$i = ($65|0)==(0|0);
     if ($switchtmp$i36$i$i) {
      ;HEAP32[$63>>2]=HEAP32[$_4$i$i>>2]|0;HEAP32[$63+4>>2]=HEAP32[$_4$i$i+4>>2]|0;HEAP32[$63+8>>2]=HEAP32[$_4$i$i+8>>2]|0;
      HEAP32[$$pre$phi$i36Z2D>>2] = 0;
      STACKTOP = sp;return;
     }
     $66 = HEAP32[$65>>2]|0;HEAP32[$65>>2] = (($66-1)|0);
     $67 = ($66|0)==(1);
     if (!($67)) {
      ;HEAP32[$63>>2]=HEAP32[$_4$i$i>>2]|0;HEAP32[$63+4>>2]=HEAP32[$_4$i$i+4>>2]|0;HEAP32[$63+8>>2]=HEAP32[$_4$i$i+8>>2]|0;
      HEAP32[$$pre$phi$i36Z2D>>2] = 0;
      STACKTOP = sp;return;
     }
     /* fence */;
     __THREW__ = 0;
     invoke_vi(362,($64|0));
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      $75 = ___cxa_find_matching_catch_2()|0;
      $76 = tempRet0;
      ;HEAP32[$63>>2]=HEAP32[$_4$i$i>>2]|0;HEAP32[$63+4>>2]=HEAP32[$_4$i$i+4>>2]|0;HEAP32[$63+8>>2]=HEAP32[$_4$i$i+8>>2]|0;
      HEAP32[$$pre$phi$i36Z2D>>2] = 0;
      $personalityslot$sroa$0$016$i = $75;$personalityslot$sroa$5$017$i = $76;
      break;
     } else {
      ;HEAP32[$63>>2]=HEAP32[$_4$i$i>>2]|0;HEAP32[$63+4>>2]=HEAP32[$_4$i$i+4>>2]|0;HEAP32[$63+8>>2]=HEAP32[$_4$i$i+8>>2]|0;
      HEAP32[$$pre$phi$i36Z2D>>2] = 0;
      STACKTOP = sp;return;
     }
    }
   } while(0);
   if ((label|0) == 39) {
    $77 = ___cxa_find_matching_catch_2()|0;
    $78 = tempRet0;
    $79 = HEAP32[$33>>2]|0;HEAP32[$33>>2] = (($79-1)|0);
    $80 = ($79|0)==(1);
    if ($80) {
     /* fence */;
     __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17haa414254399d4f93E($_10$sroa$4$0$$sroa_idx48);
     $personalityslot$sroa$0$016$i = $77;$personalityslot$sroa$5$017$i = $78;
    } else {
     $personalityslot$sroa$0$016$i = $77;$personalityslot$sroa$5$017$i = $78;
    }
   }
   $eh$lpad$body49$index3Z2D = $personalityslot$sroa$5$017$i;$eh$lpad$body49$indexZ2D = $personalityslot$sroa$0$016$i;
   ___resumeException($eh$lpad$body49$indexZ2D|0);
   // unreachable;
  }
 } while(0);
 $89 = ___cxa_find_matching_catch_2()|0;
 $90 = tempRet0;
 $91 = HEAP32[$thread>>2]|0;
 $92 = HEAP32[$91>>2]|0;HEAP32[$91>>2] = (($92-1)|0);
 $93 = ($92|0)==(1);
 if (!($93)) {
  $eh$lpad$body49$index3Z2D = $90;$eh$lpad$body49$indexZ2D = $89;
  ___resumeException($eh$lpad$body49$indexZ2D|0);
  // unreachable;
 }
 /* fence */;
 __ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17haa414254399d4f93E($thread);
 $eh$lpad$body49$index3Z2D = $90;$eh$lpad$body49$indexZ2D = $89;
 ___resumeException($eh$lpad$body49$indexZ2D|0);
 // unreachable;
}
function _rust_begin_unwind($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $_11 = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_11 = sp + 24|0;
 $msg = sp;
 ;HEAP32[$msg>>2]=HEAP32[$0>>2]|0;HEAP32[$msg+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$msg+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$msg+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$msg+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$msg+20>>2]=HEAP32[$0+20>>2]|0;
 HEAP32[$_11>>2] = $1;
 $4 = ((($_11)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($_11)) + 8|0);
 HEAP32[$5>>2] = $3;
 __ZN3std9panicking15begin_panic_fmt17h089a948b9fd65060E($msg,$_11);
 // unreachable;
}
function __ZN3std2rt10lang_start17h6a4f927dfd0d9229E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$i$i$i$i$i$i$i$i$i$i = 0, $$in$i$i$i$i$i = 0, $$pr$i$i$i$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i$i = 0, $$pre$phi$i$i$iZ2D = 0, $$pre3$i$i$i = 0, $$sink$in$phi$trans$insert$i$i$i = 0, $$sroa_idx$i$i$i$i$i$i = 0, $$sroa_idx$i$i$i$i$i$i$i$i$i$i$i$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_13 = 0, $_17 = 0, $_17$i$i = 0;
 var $_23$sroa$4$0$$sroa_idx$i$i = 0, $_23$sroa$5$0$$sroa_idx$i$i = 0, $_3$i = 0, $_32$i$sroa$7$0$$sroa_idx$i$i$i$i$i = 0, $any_data$i$i = 0, $any_vtable$i$i = 0, $args$sroa$6$0$copyload25$i$i = 0, $data$i$i = 0, $eh$lpad$body$index12Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body7$i$i$i$i$i$index3Z2D = 0, $eh$lpad$body7$i$i$i$i$i$indexZ2D = 0, $f$i$i = 0, $iter$i$sroa$0$059$i$i$i$i$i = 0, $local_len$sroa$5$0$i$lcssa$i$i$i$i$i = 0, $local_len$sroa$5$0$i60$i$i$i$i$i = 0, $not$$i$i$i$i$i$i = 0, $not$$i$i$i$i$i$i$i$i$i = 0, $not$$i$i$i$i$i$i$i$i$i$i$i$i = 0, $not$$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i = 0;
 var $not$$i$i$i$i$i$i$i17$i$i = 0, $personalityslot$sroa$0$0 = 0, $personalityslot$sroa$0$0$i$i$i$i$i$i = 0, $personalityslot$sroa$5$0 = 0, $personalityslot$sroa$8$0$i$i$i$i$i$i = 0, $phitmp$i$i = 0, $ptr$0$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $ptr$0$i61$i$i$i$i$i = 0, $res$sroa$0$0 = 0, $res$sroa$7$0 = 0, $switch$i$i$i$i = 0, $switch2tmp$i$i$i$i$i = 0, $switch6tmp$i$i$i$i$i$i = 0, $switchtmp$i = 0, $switchtmp$i18 = 0, $vector$i$i$i$i$i = 0, $vector$i$i$i$i$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $_17$i$i = sp + 88|0;
 $f$i$i = sp + 80|0;
 $data$i$i = sp + 72|0;
 $any_vtable$i$i = sp + 96|0;
 $any_data$i$i = sp + 92|0;
 $vector$i$i$i$i$i$i$i$i$i$i$i = sp + 56|0;
 $vector$i$i$i$i$i = sp + 40|0;
 $_3$i = sp + 24|0;
 $_17 = sp + 16|0;
 $_13 = sp;
 __ZN5alloc3oom3imp15set_oom_handler17hd0afc904bb614965E(402);
 __THREW__ = 0;
 invoke_viii(403,($_13|0),(18261|0),4);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   label = 57;
  } else {
   ;HEAP32[$_3$i>>2]=HEAP32[$_13>>2]|0;HEAP32[$_3$i+4>>2]=HEAP32[$_13+4>>2]|0;HEAP32[$_3$i+8>>2]=HEAP32[$_13+8>>2]|0;
   __THREW__ = 0;
   $5 = (invoke_ii(370,($_3$i|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    label = 57;
   } else {
    $8 = $_17;
    $9 = $8;
    HEAP32[$9>>2] = 0;
    $10 = (($8) + 4)|0;
    $11 = $10;
    HEAP32[$11>>2] = 0;
    __THREW__ = 0;
    invoke_vii(404,($_17|0),($5|0));
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     label = 57;
    } else {
     HEAP32[$vector$i$i$i$i$i>>2] = 1;
     $$sroa_idx$i$i$i$i$i$i = ((($vector$i$i$i$i$i)) + 4|0);
     HEAP32[$$sroa_idx$i$i$i$i$i$i>>2] = 0;
     $14 = ((($vector$i$i$i$i$i)) + 8|0);
     HEAP32[$14>>2] = 0;
     $15 = ($1|0)>(0);
     $$$i$i$i$i$i$i$i$i$i$i = $15 ? $1 : 0;
     __THREW__ = 0;
     invoke_vii(405,($vector$i$i$i$i$i|0),($$$i$i$i$i$i$i$i$i$i$i|0));
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     L5: do {
      if ($17) {
       $60 = ___cxa_find_matching_catch_2()|0;
       $61 = tempRet0;
       $$pr$i$i$i$i$i = HEAP32[$14>>2]|0;
       $$pre$i$i$i$i$i = HEAP32[$vector$i$i$i$i$i>>2]|0;
       $$in$i$i$i$i$i = $$pre$i$i$i$i$i;$63 = $$pr$i$i$i$i$i;$personalityslot$sroa$0$0$i$i$i$i$i$i = $60;$personalityslot$sroa$8$0$i$i$i$i$i$i = $61;
      } else {
       $18 = HEAP32[$vector$i$i$i$i$i>>2]|0;
       $19 = HEAP32[$14>>2]|0;
       L8: do {
        if ($15) {
         $20 = (($18) + (($19*12)|0)|0);
         $$sroa_idx$i$i$i$i$i$i$i$i$i$i$i$i = ((($vector$i$i$i$i$i$i$i$i$i$i$i)) + 4|0);
         $21 = ((($vector$i$i$i$i$i$i$i$i$i$i$i)) + 8|0);
         $iter$i$sroa$0$059$i$i$i$i$i = 0;$local_len$sroa$5$0$i60$i$i$i$i$i = $19;$ptr$0$i61$i$i$i$i$i = $20;
         while(1) {
          $22 = (($iter$i$sroa$0$059$i$i$i$i$i) + 1)|0;
          $23 = (($2) + ($iter$i$sroa$0$059$i$i$i$i$i<<2)|0);
          $24 = HEAP32[$23>>2]|0;
          $25 = (_strlen($24)|0);
          $26 = ($25|0)==(-1);
          if ($26) {
           label = 8;
           break;
          }
          $28 = ($25|0)<(0);
          if ($28) {
           label = 10;
           break;
          }
          $30 = ($25|0)==(0);
          if ($30) {
           $ptr$0$i$i$i$i$i$i$i$i$i$i$i$i$i = (1);
          } else {
           $31 = (___rust_allocate($25,1)|0);
           $32 = ($31|0)==(0|0);
           if ($32) {
            label = 13;
            break;
           } else {
            $ptr$0$i$i$i$i$i$i$i$i$i$i$i$i$i = $31;
           }
          }
          $34 = $ptr$0$i$i$i$i$i$i$i$i$i$i$i$i$i;
          HEAP32[$vector$i$i$i$i$i$i$i$i$i$i$i>>2] = $34;
          HEAP32[$$sroa_idx$i$i$i$i$i$i$i$i$i$i$i$i>>2] = $25;
          HEAP32[$21>>2] = 0;
          __THREW__ = 0;
          invoke_vii(368,($vector$i$i$i$i$i$i$i$i$i$i$i|0),($25|0));
          $35 = __THREW__; __THREW__ = 0;
          $36 = $35&1;
          if ($36) {
           label = 15;
           break;
          }
          $41 = HEAP32[$21>>2]|0;
          $42 = (($41) + ($25))|0;
          HEAP32[$21>>2] = $42;
          $43 = HEAP32[$vector$i$i$i$i$i$i$i$i$i$i$i>>2]|0;
          $44 = (($43) + ($41)|0);
          _memcpy(($44|0),($24|0),($25|0))|0;
          $45 = $$sroa_idx$i$i$i$i$i$i$i$i$i$i$i$i;
          $46 = $45;
          $47 = HEAP32[$46>>2]|0;
          $48 = (($45) + 4)|0;
          $49 = $48;
          $50 = HEAP32[$49>>2]|0;
          $switch6tmp$i$i$i$i$i$i = ($43|0)==(0|0);
          if ($switch6tmp$i$i$i$i$i$i) {
           $local_len$sroa$5$0$i$lcssa$i$i$i$i$i = $local_len$sroa$5$0$i60$i$i$i$i$i;
           break L8;
          }
          HEAP32[$ptr$0$i61$i$i$i$i$i>>2] = $43;
          $_32$i$sroa$7$0$$sroa_idx$i$i$i$i$i = ((($ptr$0$i61$i$i$i$i$i)) + 4|0);
          $51 = $_32$i$sroa$7$0$$sroa_idx$i$i$i$i$i;
          $52 = $51;
          HEAP32[$52>>2] = $47;
          $53 = (($51) + 4)|0;
          $54 = $53;
          HEAP32[$54>>2] = $50;
          $55 = ((($ptr$0$i61$i$i$i$i$i)) + 12|0);
          $56 = (($local_len$sroa$5$0$i60$i$i$i$i$i) + 1)|0;
          $57 = ($22|0)<($1|0);
          if ($57) {
           $iter$i$sroa$0$059$i$i$i$i$i = $22;$local_len$sroa$5$0$i60$i$i$i$i$i = $56;$ptr$0$i61$i$i$i$i$i = $55;
          } else {
           $local_len$sroa$5$0$i$lcssa$i$i$i$i$i = $56;
           break L8;
          }
         }
         if ((label|0) == 8) {
          __THREW__ = 0;
          invoke_vii(358,-1,0);
          $27 = __THREW__; __THREW__ = 0;
          label = 19;
         }
         else if ((label|0) == 10) {
          __THREW__ = 0;
          invoke_vi(78,(5428|0));
          $29 = __THREW__; __THREW__ = 0;
          label = 19;
         }
         else if ((label|0) == 13) {
          __THREW__ = 0;
          invoke_v(367);
          $33 = __THREW__; __THREW__ = 0;
          label = 19;
         }
         else if ((label|0) == 15) {
          $37 = ___cxa_find_matching_catch_2()|0;
          $38 = tempRet0;
          $39 = HEAP32[$$sroa_idx$i$i$i$i$i$i$i$i$i$i$i$i>>2]|0;
          $not$$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i = ($39|0)==(0);
          if ($not$$i$i$i$i$i$i$i$i$i$i$i$i$i$i$i) {
           $eh$lpad$body7$i$i$i$i$i$index3Z2D = $38;$eh$lpad$body7$i$i$i$i$i$indexZ2D = $37;
          } else {
           $40 = HEAP32[$vector$i$i$i$i$i$i$i$i$i$i$i>>2]|0;
           ___rust_deallocate($40,$39,1);
           $eh$lpad$body7$i$i$i$i$i$index3Z2D = $38;$eh$lpad$body7$i$i$i$i$i$indexZ2D = $37;
          }
         }
         if ((label|0) == 19) {
          $58 = ___cxa_find_matching_catch_2()|0;
          $59 = tempRet0;
          $eh$lpad$body7$i$i$i$i$i$index3Z2D = $59;$eh$lpad$body7$i$i$i$i$i$indexZ2D = $58;
         }
         HEAP32[$14>>2] = $local_len$sroa$5$0$i60$i$i$i$i$i;
         $$in$i$i$i$i$i = $18;$63 = $local_len$sroa$5$0$i60$i$i$i$i$i;$personalityslot$sroa$0$0$i$i$i$i$i$i = $eh$lpad$body7$i$i$i$i$i$indexZ2D;$personalityslot$sroa$8$0$i$i$i$i$i$i = $eh$lpad$body7$i$i$i$i$i$index3Z2D;
         break L5;
        } else {
         $local_len$sroa$5$0$i$lcssa$i$i$i$i$i = $19;
        }
       } while(0);
       HEAP32[$14>>2] = $local_len$sroa$5$0$i$lcssa$i$i$i$i$i;
       $args$sroa$6$0$copyload25$i$i = HEAP32[$$sroa_idx$i$i$i$i$i$i>>2]|0;
       (_pthread_mutex_lock(((23888)|0))|0);
       $73 = HEAP32[5989]|0;
       $74 = ($73|0)==(0|0);
       if (!($74)) {
        __THREW__ = 0;
        invoke_viii(353,(18265|0),34,(5280|0));
        $75 = __THREW__; __THREW__ = 0;
        $76 = ___cxa_find_matching_catch_2()|0;
        $77 = tempRet0;
        $78 = (($18) + (($local_len$sroa$5$0$i$lcssa$i$i$i$i$i*12)|0)|0);
        $79 = ($local_len$sroa$5$0$i$lcssa$i$i$i$i$i|0)==(0);
        if (!($79)) {
         $84 = $18;
         while(1) {
          $83 = ((($84)) + 4|0);
          $85 = HEAP32[$83>>2]|0;
          $not$$i$i$i$i$i$i$i17$i$i = ($85|0)==(0);
          if (!($not$$i$i$i$i$i$i$i17$i$i)) {
           $86 = HEAP32[$84>>2]|0;
           ___rust_deallocate($86,$85,1);
          }
          $87 = ((($84)) + 12|0);
          $88 = ($87|0)==($78|0);
          if ($88) {
           break;
          } else {
           $84 = $87;
          }
         }
        }
        $not$$i$i$i$i$i$i = ($args$sroa$6$0$copyload25$i$i|0)==(0);
        if ($not$$i$i$i$i$i$i) {
         $eh$lpad$body$index12Z2D = $77;$eh$lpad$body$indexZ2D = $76;
         break L1;
        }
        $89 = ($args$sroa$6$0$copyload25$i$i*12)|0;
        ___rust_deallocate($18,$89,4);
        $eh$lpad$body$index12Z2D = $77;$eh$lpad$body$indexZ2D = $76;
        break L1;
       }
       $80 = (___rust_allocate(12,4)|0);
       $81 = ($80|0)==(0|0);
       if ($81) {
        __THREW__ = 0;
        invoke_v(367);
        $82 = __THREW__; __THREW__ = 0;
        label = 57;
        break L1;
       }
       HEAP32[$80>>2] = $18;
       $_23$sroa$4$0$$sroa_idx$i$i = ((($80)) + 4|0);
       HEAP32[$_23$sroa$4$0$$sroa_idx$i$i>>2] = $args$sroa$6$0$copyload25$i$i;
       $_23$sroa$5$0$$sroa_idx$i$i = ((($80)) + 8|0);
       HEAP32[$_23$sroa$5$0$$sroa_idx$i$i>>2] = $local_len$sroa$5$0$i$lcssa$i$i$i$i$i;
       __ZN4drop17h45e3e8f0f0125d26E(23956);
       HEAP32[5989] = $80;
       (_pthread_mutex_unlock(((23888)|0))|0);
       HEAP32[$any_data$i$i>>2] = 0;
       HEAP32[$any_vtable$i$i>>2] = 0;
       HEAP32[$data$i$i>>2] = $0;
       $90 = (___rust_maybe_catch_panic(406,$data$i$i,$any_data$i$i,$any_vtable$i$i)|0);
       $91 = ($90|0)==(0);
       L43: do {
        if ($91) {
         $res$sroa$0$0 = 0;$res$sroa$7$0 = 0;
        } else {
         __THREW__ = 0;
         $92 = (invoke_i(352)|0);
         $93 = __THREW__; __THREW__ = 0;
         $94 = $93&1;
         do {
          if (!($94)) {
           $switch2tmp$i$i$i$i$i = ($92|0)==(0|0);
           if ($switch2tmp$i$i$i$i$i) {
            __THREW__ = 0;
            invoke_vii(77,(15492|0),57);
            $95 = __THREW__; __THREW__ = 0;
            break;
           }
           $96 = HEAP32[$92>>2]|0;
           $switch$i$i$i$i = ($96|0)==(1);
           if ($switch$i$i$i$i) {
            $$sink$in$phi$trans$insert$i$i$i = ((($92)) + 4|0);
            $$pre$i$i$i = HEAP32[$$sink$in$phi$trans$insert$i$i$i>>2]|0;
            $phitmp$i$i = (($$pre$i$i$i) + -1)|0;
            $$pre$phi$i$i$iZ2D = $$sink$in$phi$trans$insert$i$i$i;$101 = $phitmp$i$i;
           } else {
            $97 = $92;
            $98 = $97;
            HEAP32[$98>>2] = 1;
            $99 = (($97) + 4)|0;
            $100 = $99;
            HEAP32[$100>>2] = 0;
            $$pre3$i$i$i = ((($92)) + 4|0);
            $$pre$phi$i$i$iZ2D = $$pre3$i$i$i;$101 = -1;
           }
           HEAP32[$$pre$phi$i$i$iZ2D>>2] = $101;
           $102 = HEAP32[$any_data$i$i>>2]|0;
           $103 = HEAP32[$any_vtable$i$i>>2]|0;
           $res$sroa$0$0 = $102;$res$sroa$7$0 = $103;
           break L43;
          }
         } while(0);
         $127 = ___cxa_find_matching_catch_2()|0;
         $128 = tempRet0;
         $personalityslot$sroa$0$0 = $127;$personalityslot$sroa$5$0 = $128;
         ___resumeException($personalityslot$sroa$0$0|0);
         // unreachable;
        }
       } while(0);
       $104 = HEAP32[5991]|0;
       $105 = ($104|0)==(3);
       do {
        if (!($105)) {
         HEAP8[$f$i$i>>0] = 1;
         HEAP32[$_17$i$i>>2] = $f$i$i;
         __THREW__ = 0;
         invoke_viiii(407,(23964|0),0,($_17$i$i|0),(384|0));
         $106 = __THREW__; __THREW__ = 0;
         $107 = $106&1;
         if (!($107)) {
          break;
         }
         $117 = ___cxa_find_matching_catch_2()|0;
         $118 = tempRet0;
         $switchtmp$i = ($res$sroa$0$0|0)==(0|0);
         if ($switchtmp$i) {
          $personalityslot$sroa$0$0 = $117;$personalityslot$sroa$5$0 = $118;
          ___resumeException($personalityslot$sroa$0$0|0);
          // unreachable;
         }
         $119 = HEAP32[$res$sroa$7$0>>2]|0;
         FUNCTION_TABLE_vi[$119 & 511]($res$sroa$0$0);
         $120 = ((($res$sroa$7$0)) + 4|0);
         $121 = HEAP32[$120>>2]|0;
         $122 = ($121|0)==(0);
         if ($122) {
          $personalityslot$sroa$0$0 = $117;$personalityslot$sroa$5$0 = $118;
          ___resumeException($personalityslot$sroa$0$0|0);
          // unreachable;
         }
         $123 = ((($res$sroa$7$0)) + 8|0);
         $124 = HEAP32[$123>>2]|0;
         ___rust_deallocate($res$sroa$0$0,$121,$124);
         $personalityslot$sroa$0$0 = $117;$personalityslot$sroa$5$0 = $118;
         ___resumeException($personalityslot$sroa$0$0|0);
         // unreachable;
        }
       } while(0);
       $108 = ($res$sroa$0$0|0)!=(0|0);
       $switchtmp$i18 = ($res$sroa$0$0|0)==(0|0);
       if ($switchtmp$i18) {
        $$ = $108 ? 101 : 0;
        STACKTOP = sp;return ($$|0);
       }
       $109 = HEAP32[$res$sroa$7$0>>2]|0;
       __THREW__ = 0;
       invoke_vi($109|0,($res$sroa$0$0|0));
       $110 = __THREW__; __THREW__ = 0;
       $111 = $110&1;
       if ($111) {
        label = 57;
        break L1;
       }
       $112 = ((($res$sroa$7$0)) + 4|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = ($113|0)==(0);
       if ($114) {
        $$ = $108 ? 101 : 0;
        STACKTOP = sp;return ($$|0);
       }
       $115 = ((($res$sroa$7$0)) + 8|0);
       $116 = HEAP32[$115>>2]|0;
       ___rust_deallocate($res$sroa$0$0,$113,$116);
       $$ = $108 ? 101 : 0;
       STACKTOP = sp;return ($$|0);
      }
     } while(0);
     $62 = (($$in$i$i$i$i$i) + (($63*12)|0)|0);
     $64 = ($63|0)==(0);
     if (!($64)) {
      $66 = $$in$i$i$i$i$i;
      while(1) {
       $65 = ((($66)) + 4|0);
       $67 = HEAP32[$65>>2]|0;
       $not$$i$i$i$i$i$i$i$i$i$i$i$i = ($67|0)==(0);
       if (!($not$$i$i$i$i$i$i$i$i$i$i$i$i)) {
        $68 = HEAP32[$66>>2]|0;
        ___rust_deallocate($68,$67,1);
       }
       $69 = ((($66)) + 12|0);
       $70 = ($69|0)==($62|0);
       if ($70) {
        break;
       } else {
        $66 = $69;
       }
      }
     }
     $71 = HEAP32[$$sroa_idx$i$i$i$i$i$i>>2]|0;
     $not$$i$i$i$i$i$i$i$i$i = ($71|0)==(0);
     if ($not$$i$i$i$i$i$i$i$i$i) {
      $eh$lpad$body$index12Z2D = $personalityslot$sroa$8$0$i$i$i$i$i$i;$eh$lpad$body$indexZ2D = $personalityslot$sroa$0$0$i$i$i$i$i$i;
     } else {
      $72 = ($71*12)|0;
      ___rust_deallocate($$in$i$i$i$i$i,$72,4);
      $eh$lpad$body$index12Z2D = $personalityslot$sroa$8$0$i$i$i$i$i$i;$eh$lpad$body$indexZ2D = $personalityslot$sroa$0$0$i$i$i$i$i$i;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 57) {
  $125 = ___cxa_find_matching_catch_2()|0;
  $126 = tempRet0;
  $eh$lpad$body$index12Z2D = $126;$eh$lpad$body$indexZ2D = $125;
 }
 $personalityslot$sroa$0$0 = $eh$lpad$body$indexZ2D;$personalityslot$sroa$5$0 = $eh$lpad$body$index12Z2D;
 ___resumeException($personalityslot$sroa$0$0|0);
 // unreachable;
 return (0)|0;
}
function __ZN3std3sys3imp4init11oom_handler17hcec2650c300a37b8E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_write(2,18404,35)|0);
 _llvm_trap();
 // unreachable;
}
function __ZN3std9panicking3try7do_call17hc15dcd58425f5321E($0) {
 $0 = $0|0;
 var $tmp$0$copyload$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tmp$0$copyload$i = HEAP32[$0>>2]|0;
 FUNCTION_TABLE_v[$tmp$0$copyload$i & 511]();
 return;
}
function __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h515ea29b320619f9E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$arith = 0, $$overflow = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$sroa$speculated$i$i$i = 0, $ptr$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)<($1>>>0);
 if (!($7)) {
  return;
 }
 $$arith = (($3) + ($1))|0;
 $$overflow = ($$arith>>>0)<($3>>>0);
 if ($$overflow) {
  __ZN4core6option13expect_failed17h8d3ef54cab66579bE(18570,17);
  // unreachable;
 }
 $8 = $5 << 1;
 $9 = ($$arith>>>0)>=($8>>>0);
 $_0$0$sroa$speculated$i$i$i = $9 ? $$arith : $8;
 $10 = ($_0$0$sroa$speculated$i$i$i|0)<(0);
 if ($10) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(5428);
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = (___rust_allocate($_0$0$sroa$speculated$i$i$i,1)|0);
  $ptr$0$i = $12;
 } else {
  $13 = HEAP32[$0>>2]|0;
  $14 = (___rust_reallocate($13,$5,$_0$0$sroa$speculated$i$i$i,1)|0);
  $ptr$0$i = $14;
 }
 $15 = ($ptr$0$i|0)==(0|0);
 if ($15) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 }
 HEAP32[$0>>2] = $ptr$0$i;
 HEAP32[$4>>2] = $_0$0$sroa$speculated$i$i$i;
 return;
}
function __ZN11collections3fmt6format17h3afe4169e9ab9778E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_1$sroa$4$0$$sroa_idx2$i = 0, $_1$sroa$5$0$$sroa_idx4$i = 0, $_10$i = 0, $_8$i = 0, $not$$i$i$i$i$i = 0, $output = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_10$i = sp + 24|0;
 $_8$i = sp + 16|0;
 $output = sp;
 HEAP32[$output>>2] = 1;
 $_1$sroa$4$0$$sroa_idx2$i = ((($output)) + 4|0);
 HEAP32[$_1$sroa$4$0$$sroa_idx2$i>>2] = 0;
 $_1$sroa$5$0$$sroa_idx4$i = ((($output)) + 8|0);
 HEAP32[$_1$sroa$5$0$$sroa_idx4$i>>2] = 0;
 HEAP32[$_8$i>>2] = $output;
 ;HEAP32[$_10$i>>2]=HEAP32[$1>>2]|0;HEAP32[$_10$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10$i+20>>2]=HEAP32[$1+20>>2]|0;
 __THREW__ = 0;
 (invoke_iiii(350,($_8$i|0),(408|0),($_10$i|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  ;HEAP32[$0>>2]=HEAP32[$output>>2]|0;HEAP32[$0+4>>2]=HEAP32[$output+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$output+8>>2]|0;
  STACKTOP = sp;return;
 }
 $4 = ___cxa_find_matching_catch_2()|0;
 $5 = tempRet0;
 $6 = HEAP32[$_1$sroa$4$0$$sroa_idx2$i>>2]|0;
 $not$$i$i$i$i$i = ($6|0)==(0);
 if ($not$$i$i$i$i$i) {
  ___resumeException($4|0);
  // unreachable;
 }
 $7 = HEAP32[$output>>2]|0;
 ___rust_deallocate($7,$6,1);
 ___resumeException($4|0);
 // unreachable;
}
function __ZN4drop17h23fdef13404c14d7E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17heb630ca2677a3383E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h515ea29b320619f9E($3,$2);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2))|0;
 HEAP32[$4>>2] = $6;
 $7 = HEAP32[$3>>2]|0;
 $8 = (($7) + ($5)|0);
 _memcpy(($8|0),($1|0),($2|0))|0;
 return 0;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h321b7c7c450d7533E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 __ZN11collections6string6String4push17h4dc6cc4abd69ef6eE($2,$1);
 return 0;
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hf3bfd8560df68002E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_10$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_10$i = sp + 8|0;
 $_8$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_8$i>>2] = $2;
 ;HEAP32[$_10$i>>2]=HEAP32[$1>>2]|0;HEAP32[$_10$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10$i+20>>2]=HEAP32[$1+20>>2]|0;
 $3 = (__ZN4core3fmt5write17ha952368ac9616bb6E($_8$i,408,$_10$i)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN11collections6string6String4push17h4dc6cc4abd69ef6eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_19 = 0;
 var $len$0$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_19 = sp;
 $2 = ($1>>>0)<(128);
 if ($2) {
  $3 = $1&255;
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)==($7|0);
  if ($8) {
   __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17h65fbe980112188fdE($0);
   $$pre$i = HEAP32[$4>>2]|0;
   $11 = $$pre$i;
  } else {
   $11 = $5;
  }
  $9 = HEAP32[$0>>2]|0;
  $10 = (($9) + ($11)|0);
  HEAP8[$10>>0] = $3;
  $12 = HEAP32[$4>>2]|0;
  $13 = (($12) + 1)|0;
  HEAP32[$4>>2] = $13;
  STACKTOP = sp;return;
 }
 HEAP32[$_19>>2] = 0;
 $14 = ($1>>>0)<(2048);
 do {
  if ($14) {
   $15 = $1 >>> 6;
   $16 = $15 & 31;
   $17 = $16&255;
   $18 = $17 | -64;
   HEAP8[$_19>>0] = $18;
   $19 = $1 & 63;
   $20 = $19&255;
   $21 = ((($_19)) + 1|0);
   $22 = $20 | -128;
   HEAP8[$21>>0] = $22;
   $len$0$i$i = 2;
  } else {
   $23 = ($1>>>0)<(65536);
   if ($23) {
    $24 = $1 >>> 12;
    $25 = $24 & 15;
    $26 = $25&255;
    $27 = $26 | -32;
    HEAP8[$_19>>0] = $27;
    $28 = $1 >>> 6;
    $29 = $28 & 63;
    $30 = $29&255;
    $31 = ((($_19)) + 1|0);
    $32 = $30 | -128;
    HEAP8[$31>>0] = $32;
    $33 = $1 & 63;
    $34 = $33&255;
    $35 = ((($_19)) + 2|0);
    $36 = $34 | -128;
    HEAP8[$35>>0] = $36;
    $len$0$i$i = 3;
    break;
   } else {
    $37 = $1 >>> 18;
    $38 = $37 & 7;
    $39 = $38&255;
    $40 = $39 | -16;
    HEAP8[$_19>>0] = $40;
    $41 = $1 >>> 12;
    $42 = $41 & 63;
    $43 = $42&255;
    $44 = ((($_19)) + 1|0);
    $45 = $43 | -128;
    HEAP8[$44>>0] = $45;
    $46 = $1 >>> 6;
    $47 = $46 & 63;
    $48 = $47&255;
    $49 = ((($_19)) + 2|0);
    $50 = $48 | -128;
    HEAP8[$49>>0] = $50;
    $51 = $1 & 63;
    $52 = $51&255;
    $53 = ((($_19)) + 3|0);
    $54 = $52 | -128;
    HEAP8[$53>>0] = $54;
    $len$0$i$i = 4;
    break;
   }
  }
 } while(0);
 __ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h515ea29b320619f9E($0,$len$0$i$i);
 $55 = ((($0)) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + ($len$0$i$i))|0;
 HEAP32[$55>>2] = $57;
 $58 = HEAP32[$0>>2]|0;
 $59 = (($58) + ($56)|0);
 _memcpy(($59|0),($_19|0),($len$0$i$i|0))|0;
 STACKTOP = sp;return;
}
function __ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17h65fbe980112188fdE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_13$sroa$0$0 = 0, $_13$sroa$5$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $8 = (___rust_allocate(4,1)|0);
   $_13$sroa$0$0 = 4;$_13$sroa$5$0 = $8;
  } else {
   $4 = $2 << 1;
   $5 = ($4|0)<(0);
   if ($5) {
    __ZN4core9panicking5panic17hee9f4f8d26a91787E(5428);
    // unreachable;
   } else {
    $6 = HEAP32[$0>>2]|0;
    $7 = (___rust_reallocate($6,$2,$4,1)|0);
    $_13$sroa$0$0 = $4;$_13$sroa$5$0 = $7;
    break;
   }
  }
 } while(0);
 $9 = ($_13$sroa$5$0|0)==(0|0);
 if ($9) {
  __ZN5alloc3oom3oom17h3b36c708663c15cdE();
  // unreachable;
 } else {
  HEAP32[$0>>2] = $_13$sroa$5$0;
  HEAP32[$1>>2] = $_13$sroa$0$0;
  return;
 }
}
function __ZN11collections3str62__LT_impl_u20_collections__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17h189157b2b25caa18E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa_idx$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_3 = 0, $not$$i$i$i$i$i$i$i = 0, $ptr$0$i$i$i$i$i = 0;
 var $vector$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vector$i$i$i = sp + 16|0;
 $_3 = sp;
 $3 = ($2|0)<(0);
 if ($3) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(5428);
  // unreachable;
 }
 $5 = ($2|0)==(0);
 if ($5) {
  $ptr$0$i$i$i$i$i = (1);
 } else {
  $6 = (___rust_allocate($2,1)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   __ZN5alloc3oom3oom17h3b36c708663c15cdE();
   // unreachable;
  } else {
   $ptr$0$i$i$i$i$i = $6;
  }
 }
 $8 = $ptr$0$i$i$i$i$i;
 HEAP32[$vector$i$i$i>>2] = $8;
 $$sroa_idx$i$i$i$i = ((($vector$i$i$i)) + 4|0);
 HEAP32[$$sroa_idx$i$i$i$i>>2] = $2;
 $9 = ((($vector$i$i$i)) + 8|0);
 HEAP32[$9>>2] = 0;
 __THREW__ = 0;
 invoke_vii(408,($vector$i$i$i|0),($2|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  $15 = HEAP32[$9>>2]|0;
  $16 = (($15) + ($2))|0;
  HEAP32[$9>>2] = $16;
  $17 = HEAP32[$vector$i$i$i>>2]|0;
  $18 = (($17) + ($15)|0);
  _memcpy(($18|0),($1|0),($2|0))|0;
  ;HEAP32[$_3>>2]=HEAP32[$vector$i$i$i>>2]|0;HEAP32[$_3+4>>2]=HEAP32[$vector$i$i$i+4>>2]|0;HEAP32[$_3+8>>2]=HEAP32[$vector$i$i$i+8>>2]|0;
  ;HEAP32[$0>>2]=HEAP32[$_3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$_3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$_3+8>>2]|0;
  STACKTOP = sp;return;
 }
 $4 = ___cxa_find_matching_catch_2()|0;
 $12 = tempRet0;
 $13 = HEAP32[$$sroa_idx$i$i$i$i>>2]|0;
 $not$$i$i$i$i$i$i$i = ($13|0)==(0);
 if ($not$$i$i$i$i$i$i$i) {
  ___resumeException($4|0);
  // unreachable;
 }
 $14 = HEAP32[$vector$i$i$i>>2]|0;
 ___rust_deallocate($14,$13,1);
 ___resumeException($4|0);
 // unreachable;
}
function __ZN11collections6string6String15from_utf8_lossy17h557010252764494dE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$off = 0, $$off240 = 0, $$off242 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_282$sroa$0$0$$sroa_idx94 = 0, $_3$sroa$4$0$$sroa_idx2$i = 0, $_3$sroa$5$0$$sroa_idx4$i = 0, $_4 = 0, $cond = 0, $cond10 = 0, $cond8 = 0, $cond9 = 0, $e = 0, $i$0$be = 0, $i$0275 = 0;
 var $not$$i$i$i$i$i = 0, $or$cond106 = 0, $or$cond107 = 0, $or$cond108 = 0, $or$cond109 = 0, $or$cond111 = 0, $or$cond112 = 0, $or$cond116 = 0, $or$cond117 = 0, $or$cond118 = 0, $or$cond119 = 0, $ptr$0$i$i$i = 0, $res = 0, $subseqidx$0$be = 0, $subseqidx$0$lcssa = 0, $subseqidx$0$ph = 0, $subseqidx$0274 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $res = sp + 24|0;
 $e = sp + 16|0;
 $_4 = sp;
 __ZN4core3str9from_utf817ha9337cb316bd8650E($_4,$1,$2);
 $3 = HEAP32[$_4>>2]|0;
 $switch = ($3|0)==(1);
 if (!($switch)) {
  $4 = ((($_4)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($_4)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = 0;
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $5;
  $9 = ((($0)) + 8|0);
  HEAP32[$9>>2] = $7;
  STACKTOP = sp;return;
 }
 $10 = ((($_4)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$e>>2] = $11;
 $12 = (__ZN4core3str9Utf8Error11valid_up_to17h368456ae95e03253E($e)|0);
 $13 = ($2|0)<(0);
 if ($13) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(5428);
  // unreachable;
 }
 $14 = ($2|0)==(0);
 if ($14) {
  $ptr$0$i$i$i = (1);
 } else {
  $15 = (___rust_allocate($2,1)|0);
  $16 = ($15|0)==(0|0);
  if ($16) {
   __ZN5alloc3oom3oom17h3b36c708663c15cdE();
   // unreachable;
  } else {
   $ptr$0$i$i$i = $15;
  }
 }
 $18 = $ptr$0$i$i$i;
 HEAP32[$res>>2] = $18;
 $_3$sroa$4$0$$sroa_idx2$i = ((($res)) + 4|0);
 HEAP32[$_3$sroa$4$0$$sroa_idx2$i>>2] = $2;
 $_3$sroa$5$0$$sroa_idx4$i = ((($res)) + 8|0);
 HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2] = 0;
 $19 = ($12|0)==(0);
 do {
  if ($19) {
   $subseqidx$0$ph = 0;
   label = 15;
  } else {
   $20 = ($12>>>0)>($2>>>0);
   if ($20) {
    __THREW__ = 0;
    invoke_vii(358,($12|0),($2|0));
    $21 = __THREW__; __THREW__ = 0;
    break;
   }
   __THREW__ = 0;
   invoke_vii(408,($res|0),($12|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    $24 = HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2]|0;
    $25 = (($24) + ($12))|0;
    HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2] = $25;
    $26 = HEAP32[$res>>2]|0;
    $27 = (($26) + ($24)|0);
    _memcpy(($27|0),($1|0),($12|0))|0;
    $subseqidx$0$ph = $12;
    label = 15;
   }
  }
 } while(0);
 L18: do {
  if ((label|0) == 15) {
   $28 = ($subseqidx$0$ph>>>0)<($2>>>0);
   L20: do {
    if ($28) {
     $i$0275 = $subseqidx$0$ph;$subseqidx$0274 = $subseqidx$0$ph;
     L22: while(1) {
      $30 = (($1) + ($i$0275)|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = (($i$0275) + 1)|0;
      $33 = ($31<<24>>24)>(-1);
      L24: do {
       if ($33) {
        $i$0$be = $32;$subseqidx$0$be = $subseqidx$0274;
       } else {
        $35 = $31&255;
        $36 = (21301 + ($35)|0);
        $37 = HEAP8[$36>>0]|0;
        switch ($37<<24>>24) {
        case 2:  {
         $38 = ($32>>>0)<($2>>>0);
         if ($38) {
          $42 = (($1) + ($32)|0);
          $43 = HEAP8[$42>>0]|0;
          $44 = $43 & -64;
          $45 = ($44<<24>>24)==(-128);
          if ($45) {
           $47 = (($i$0275) + 2)|0;
           $i$0$be = $47;$subseqidx$0$be = $subseqidx$0274;
           break L24;
          }
         }
         $46 = ($i$0275|0)==($subseqidx$0274|0);
         if (!($46)) {
          $48 = ($i$0275>>>0)<($subseqidx$0274>>>0);
          if ($48) {
           label = 29;
           break L22;
          }
          $50 = ($i$0275>>>0)>($2>>>0);
          if ($50) {
           label = 31;
           break L22;
          }
          $52 = (($i$0275) - ($subseqidx$0274))|0;
          __THREW__ = 0;
          invoke_vii(408,($res|0),($52|0));
          $53 = __THREW__; __THREW__ = 0;
          $54 = $53&1;
          if ($54) {
           break L18;
          }
          $55 = (($1) + ($subseqidx$0274)|0);
          $56 = HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2]|0;
          $57 = (($56) + ($52))|0;
          HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2] = $57;
          $58 = HEAP32[$res>>2]|0;
          $59 = (($58) + ($56)|0);
          _memcpy(($59|0),($55|0),($52|0))|0;
         }
         __THREW__ = 0;
         invoke_vii(408,($res|0),3);
         $60 = __THREW__; __THREW__ = 0;
         $61 = $60&1;
         if ($61) {
          break L18;
         }
         $62 = HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2]|0;
         $63 = (($62) + 3)|0;
         HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2] = $63;
         $64 = HEAP32[$res>>2]|0;
         $65 = (($64) + ($62)|0);
         ;HEAP8[$65>>0]=HEAP8[18587>>0]|0;HEAP8[$65+1>>0]=HEAP8[18587+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[18587+2>>0]|0;
         $i$0$be = $32;$subseqidx$0$be = $32;
         break L24;
         break;
        }
        case 3:  {
         $39 = ($32>>>0)<($2>>>0);
         do {
          if ($39) {
           $66 = (($1) + ($32)|0);
           $67 = HEAP8[$66>>0]|0;
           $cond9 = ($31<<24>>24)==(-32);
           $68 = ($67&255)<(192);
           $69 = $67 & -32;
           $70 = ($69<<24>>24)==(-96);
           $71 = $cond9 & $70;
           if (!($71)) {
            $$off242 = (($31) + 31)<<24>>24;
            $73 = ($$off242&255)<(12);
            $74 = ($67<<24>>24)<(0);
            $or$cond106 = $73 & $74;
            $or$cond107 = $68 & $or$cond106;
            if (!($or$cond107)) {
             $cond10 = ($31<<24>>24)==(-19);
             $or$cond108 = $cond10 & $74;
             $75 = ($67&255)<(160);
             $or$cond109 = $75 & $or$cond108;
             if (!($or$cond109)) {
              $76 = $31 & -2;
              $77 = ($76<<24>>24)==(-18);
              $or$cond111 = $77 & $74;
              $or$cond112 = $68 & $or$cond111;
              if (!($or$cond112)) {
               break;
              }
             }
            }
           }
           $78 = (($i$0275) + 2)|0;
           $79 = ($78>>>0)<($2>>>0);
           if ($79) {
            $98 = (($1) + ($78)|0);
            $99 = HEAP8[$98>>0]|0;
            $100 = $99 & -64;
            $101 = ($100<<24>>24)==(-128);
            if ($101) {
             $103 = (($i$0275) + 3)|0;
             $i$0$be = $103;$subseqidx$0$be = $subseqidx$0274;
             break L24;
            }
           }
           $102 = ($i$0275|0)==($subseqidx$0274|0);
           if (!($102)) {
            $104 = ($i$0275>>>0)<($subseqidx$0274>>>0);
            if ($104) {
             label = 54;
             break L22;
            }
            $106 = ($i$0275>>>0)>($2>>>0);
            if ($106) {
             label = 56;
             break L22;
            }
            $108 = (($i$0275) - ($subseqidx$0274))|0;
            __THREW__ = 0;
            invoke_vii(408,($res|0),($108|0));
            $109 = __THREW__; __THREW__ = 0;
            $110 = $109&1;
            if ($110) {
             break L18;
            }
            $111 = (($1) + ($subseqidx$0274)|0);
            $112 = HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2]|0;
            $113 = (($112) + ($108))|0;
            HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2] = $113;
            $114 = HEAP32[$res>>2]|0;
            $115 = (($114) + ($112)|0);
            _memcpy(($115|0),($111|0),($108|0))|0;
           }
           __THREW__ = 0;
           invoke_vii(408,($res|0),3);
           $116 = __THREW__; __THREW__ = 0;
           $117 = $116&1;
           if ($117) {
            break L18;
           }
           $118 = HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2]|0;
           $119 = (($118) + 3)|0;
           HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2] = $119;
           $120 = HEAP32[$res>>2]|0;
           $121 = (($120) + ($118)|0);
           ;HEAP8[$121>>0]=HEAP8[18587>>0]|0;HEAP8[$121+1>>0]=HEAP8[18587+1>>0]|0;HEAP8[$121+2>>0]=HEAP8[18587+2>>0]|0;
           $i$0$be = $78;$subseqidx$0$be = $78;
           break L24;
          }
         } while(0);
         $72 = ($i$0275|0)==($subseqidx$0274|0);
         if (!($72)) {
          $80 = ($i$0275>>>0)<($subseqidx$0274>>>0);
          if ($80) {
           label = 43;
           break L22;
          }
          $82 = ($i$0275>>>0)>($2>>>0);
          if ($82) {
           label = 45;
           break L22;
          }
          $84 = (($i$0275) - ($subseqidx$0274))|0;
          __THREW__ = 0;
          invoke_vii(408,($res|0),($84|0));
          $85 = __THREW__; __THREW__ = 0;
          $86 = $85&1;
          if ($86) {
           break L18;
          }
          $87 = (($1) + ($subseqidx$0274)|0);
          $88 = HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2]|0;
          $89 = (($88) + ($84))|0;
          HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2] = $89;
          $90 = HEAP32[$res>>2]|0;
          $91 = (($90) + ($88)|0);
          _memcpy(($91|0),($87|0),($84|0))|0;
         }
         __THREW__ = 0;
         invoke_vii(408,($res|0),3);
         $92 = __THREW__; __THREW__ = 0;
         $93 = $92&1;
         if ($93) {
          break L18;
         }
         $94 = HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2]|0;
         $95 = (($94) + 3)|0;
         HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2] = $95;
         $96 = HEAP32[$res>>2]|0;
         $97 = (($96) + ($94)|0);
         ;HEAP8[$97>>0]=HEAP8[18587>>0]|0;HEAP8[$97+1>>0]=HEAP8[18587+1>>0]|0;HEAP8[$97+2>>0]=HEAP8[18587+2>>0]|0;
         $i$0$be = $32;$subseqidx$0$be = $32;
         break L24;
         break;
        }
        case 4:  {
         $40 = ($32>>>0)<($2>>>0);
         do {
          if ($40) {
           $122 = (($1) + ($32)|0);
           $123 = HEAP8[$122>>0]|0;
           $cond = ($31<<24>>24)==(-16);
           $$off = (($123) + 112)<<24>>24;
           $124 = ($$off&255)<(48);
           $125 = $cond & $124;
           if (!($125)) {
            $127 = ($123&255)<(192);
            $$off240 = (($31) + 15)<<24>>24;
            $128 = ($$off240&255)<(3);
            $129 = ($123<<24>>24)<(0);
            $or$cond116 = $128 & $129;
            $or$cond117 = $127 & $or$cond116;
            if (!($or$cond117)) {
             $cond8 = ($31<<24>>24)==(-12);
             $or$cond118 = $cond8 & $129;
             $130 = ($123&255)<(144);
             $or$cond119 = $130 & $or$cond118;
             if (!($or$cond119)) {
              break;
             }
            }
           }
           $131 = (($i$0275) + 2)|0;
           $132 = ($131>>>0)<($2>>>0);
           if ($132) {
            $151 = (($1) + ($131)|0);
            $152 = HEAP8[$151>>0]|0;
            $153 = $152 & -64;
            $154 = ($153<<24>>24)==(-128);
            if ($154) {
             $156 = (($i$0275) + 3)|0;
             $157 = ($156>>>0)<($2>>>0);
             if ($157) {
              $176 = (($1) + ($156)|0);
              $177 = HEAP8[$176>>0]|0;
              $178 = $177 & -64;
              $179 = ($178<<24>>24)==(-128);
              if ($179) {
               $181 = (($i$0275) + 4)|0;
               $i$0$be = $181;$subseqidx$0$be = $subseqidx$0274;
               break L24;
              }
             }
             $180 = ($i$0275|0)==($subseqidx$0274|0);
             if (!($180)) {
              $182 = ($i$0275>>>0)<($subseqidx$0274>>>0);
              if ($182) {
               label = 89;
               break L22;
              }
              $184 = ($i$0275>>>0)>($2>>>0);
              if ($184) {
               label = 91;
               break L22;
              }
              $186 = (($i$0275) - ($subseqidx$0274))|0;
              __THREW__ = 0;
              invoke_vii(408,($res|0),($186|0));
              $187 = __THREW__; __THREW__ = 0;
              $188 = $187&1;
              if ($188) {
               break L18;
              }
              $189 = (($1) + ($subseqidx$0274)|0);
              $190 = HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2]|0;
              $191 = (($190) + ($186))|0;
              HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2] = $191;
              $192 = HEAP32[$res>>2]|0;
              $193 = (($192) + ($190)|0);
              _memcpy(($193|0),($189|0),($186|0))|0;
             }
             __THREW__ = 0;
             invoke_vii(408,($res|0),3);
             $194 = __THREW__; __THREW__ = 0;
             $195 = $194&1;
             if ($195) {
              break L18;
             }
             $196 = HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2]|0;
             $197 = (($196) + 3)|0;
             HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2] = $197;
             $198 = HEAP32[$res>>2]|0;
             $199 = (($198) + ($196)|0);
             ;HEAP8[$199>>0]=HEAP8[18587>>0]|0;HEAP8[$199+1>>0]=HEAP8[18587+1>>0]|0;HEAP8[$199+2>>0]=HEAP8[18587+2>>0]|0;
             $i$0$be = $156;$subseqidx$0$be = $156;
             break L24;
            }
           }
           $155 = ($i$0275|0)==($subseqidx$0274|0);
           if (!($155)) {
            $158 = ($i$0275>>>0)<($subseqidx$0274>>>0);
            if ($158) {
             label = 78;
             break L22;
            }
            $160 = ($i$0275>>>0)>($2>>>0);
            if ($160) {
             label = 80;
             break L22;
            }
            $162 = (($i$0275) - ($subseqidx$0274))|0;
            __THREW__ = 0;
            invoke_vii(408,($res|0),($162|0));
            $163 = __THREW__; __THREW__ = 0;
            $164 = $163&1;
            if ($164) {
             break L18;
            }
            $165 = (($1) + ($subseqidx$0274)|0);
            $166 = HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2]|0;
            $167 = (($166) + ($162))|0;
            HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2] = $167;
            $168 = HEAP32[$res>>2]|0;
            $169 = (($168) + ($166)|0);
            _memcpy(($169|0),($165|0),($162|0))|0;
           }
           __THREW__ = 0;
           invoke_vii(408,($res|0),3);
           $170 = __THREW__; __THREW__ = 0;
           $171 = $170&1;
           if ($171) {
            break L18;
           }
           $172 = HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2]|0;
           $173 = (($172) + 3)|0;
           HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2] = $173;
           $174 = HEAP32[$res>>2]|0;
           $175 = (($174) + ($172)|0);
           ;HEAP8[$175>>0]=HEAP8[18587>>0]|0;HEAP8[$175+1>>0]=HEAP8[18587+1>>0]|0;HEAP8[$175+2>>0]=HEAP8[18587+2>>0]|0;
           $i$0$be = $131;$subseqidx$0$be = $131;
           break L24;
          }
         } while(0);
         $126 = ($i$0275|0)==($subseqidx$0274|0);
         if (!($126)) {
          $133 = ($i$0275>>>0)<($subseqidx$0274>>>0);
          if ($133) {
           label = 67;
           break L22;
          }
          $135 = ($i$0275>>>0)>($2>>>0);
          if ($135) {
           label = 69;
           break L22;
          }
          $137 = (($i$0275) - ($subseqidx$0274))|0;
          __THREW__ = 0;
          invoke_vii(408,($res|0),($137|0));
          $138 = __THREW__; __THREW__ = 0;
          $139 = $138&1;
          if ($139) {
           break L18;
          }
          $140 = (($1) + ($subseqidx$0274)|0);
          $141 = HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2]|0;
          $142 = (($141) + ($137))|0;
          HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2] = $142;
          $143 = HEAP32[$res>>2]|0;
          $144 = (($143) + ($141)|0);
          _memcpy(($144|0),($140|0),($137|0))|0;
         }
         __THREW__ = 0;
         invoke_vii(408,($res|0),3);
         $145 = __THREW__; __THREW__ = 0;
         $146 = $145&1;
         if ($146) {
          break L18;
         }
         $147 = HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2]|0;
         $148 = (($147) + 3)|0;
         HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2] = $148;
         $149 = HEAP32[$res>>2]|0;
         $150 = (($149) + ($147)|0);
         ;HEAP8[$150>>0]=HEAP8[18587>>0]|0;HEAP8[$150+1>>0]=HEAP8[18587+1>>0]|0;HEAP8[$150+2>>0]=HEAP8[18587+2>>0]|0;
         $i$0$be = $32;$subseqidx$0$be = $32;
         break L24;
         break;
        }
        default: {
         $41 = ($i$0275|0)==($subseqidx$0274|0);
         if (!($41)) {
          $200 = ($i$0275>>>0)<($subseqidx$0274>>>0);
          if ($200) {
           label = 97;
           break L22;
          }
          $202 = ($i$0275>>>0)>($2>>>0);
          if ($202) {
           label = 99;
           break L22;
          }
          $204 = (($i$0275) - ($subseqidx$0274))|0;
          __THREW__ = 0;
          invoke_vii(408,($res|0),($204|0));
          $205 = __THREW__; __THREW__ = 0;
          $206 = $205&1;
          if ($206) {
           break L18;
          }
          $207 = (($1) + ($subseqidx$0274)|0);
          $208 = HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2]|0;
          $209 = (($208) + ($204))|0;
          HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2] = $209;
          $210 = HEAP32[$res>>2]|0;
          $211 = (($210) + ($208)|0);
          _memcpy(($211|0),($207|0),($204|0))|0;
         }
         __THREW__ = 0;
         invoke_vii(408,($res|0),3);
         $212 = __THREW__; __THREW__ = 0;
         $213 = $212&1;
         if ($213) {
          break L18;
         }
         $214 = HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2]|0;
         $215 = (($214) + 3)|0;
         HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2] = $215;
         $216 = HEAP32[$res>>2]|0;
         $217 = (($216) + ($214)|0);
         ;HEAP8[$217>>0]=HEAP8[18587>>0]|0;HEAP8[$217+1>>0]=HEAP8[18587+1>>0]|0;HEAP8[$217+2>>0]=HEAP8[18587+2>>0]|0;
         $i$0$be = $32;$subseqidx$0$be = $32;
         break L24;
        }
        }
       }
      } while(0);
      $34 = ($i$0$be>>>0)<($2>>>0);
      if ($34) {
       $i$0275 = $i$0$be;$subseqidx$0274 = $subseqidx$0$be;
      } else {
       $subseqidx$0$lcssa = $subseqidx$0$be;
       break L20;
      }
     }
     switch (label|0) {
      case 29: {
       __THREW__ = 0;
       invoke_vii(393,($subseqidx$0274|0),($i$0275|0));
       $49 = __THREW__; __THREW__ = 0;
       break L18;
       break;
      }
      case 31: {
       __THREW__ = 0;
       invoke_vii(358,($i$0275|0),($2|0));
       $51 = __THREW__; __THREW__ = 0;
       break L18;
       break;
      }
      case 43: {
       __THREW__ = 0;
       invoke_vii(393,($subseqidx$0274|0),($i$0275|0));
       $81 = __THREW__; __THREW__ = 0;
       break L18;
       break;
      }
      case 45: {
       __THREW__ = 0;
       invoke_vii(358,($i$0275|0),($2|0));
       $83 = __THREW__; __THREW__ = 0;
       break L18;
       break;
      }
      case 54: {
       __THREW__ = 0;
       invoke_vii(393,($subseqidx$0274|0),($i$0275|0));
       $105 = __THREW__; __THREW__ = 0;
       break L18;
       break;
      }
      case 56: {
       __THREW__ = 0;
       invoke_vii(358,($i$0275|0),($2|0));
       $107 = __THREW__; __THREW__ = 0;
       break L18;
       break;
      }
      case 67: {
       __THREW__ = 0;
       invoke_vii(393,($subseqidx$0274|0),($i$0275|0));
       $134 = __THREW__; __THREW__ = 0;
       break L18;
       break;
      }
      case 69: {
       __THREW__ = 0;
       invoke_vii(358,($i$0275|0),($2|0));
       $136 = __THREW__; __THREW__ = 0;
       break L18;
       break;
      }
      case 78: {
       __THREW__ = 0;
       invoke_vii(393,($subseqidx$0274|0),($i$0275|0));
       $159 = __THREW__; __THREW__ = 0;
       break L18;
       break;
      }
      case 80: {
       __THREW__ = 0;
       invoke_vii(358,($i$0275|0),($2|0));
       $161 = __THREW__; __THREW__ = 0;
       break L18;
       break;
      }
      case 89: {
       __THREW__ = 0;
       invoke_vii(393,($subseqidx$0274|0),($i$0275|0));
       $183 = __THREW__; __THREW__ = 0;
       break L18;
       break;
      }
      case 91: {
       __THREW__ = 0;
       invoke_vii(358,($i$0275|0),($2|0));
       $185 = __THREW__; __THREW__ = 0;
       break L18;
       break;
      }
      case 97: {
       __THREW__ = 0;
       invoke_vii(393,($subseqidx$0274|0),($i$0275|0));
       $201 = __THREW__; __THREW__ = 0;
       break L18;
       break;
      }
      case 99: {
       __THREW__ = 0;
       invoke_vii(358,($i$0275|0),($2|0));
       $203 = __THREW__; __THREW__ = 0;
       break L18;
       break;
      }
     }
    } else {
     $subseqidx$0$lcssa = $subseqidx$0$ph;
    }
   } while(0);
   $29 = ($subseqidx$0$lcssa>>>0)<($2>>>0);
   if ($29) {
    $218 = (($2) - ($subseqidx$0$lcssa))|0;
    __THREW__ = 0;
    invoke_vii(408,($res|0),($218|0));
    $219 = __THREW__; __THREW__ = 0;
    $220 = $219&1;
    if ($220) {
     break;
    }
    $221 = (($1) + ($subseqidx$0$lcssa)|0);
    $222 = HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2]|0;
    $223 = (($222) + ($218))|0;
    HEAP32[$_3$sroa$5$0$$sroa_idx4$i>>2] = $223;
    $224 = HEAP32[$res>>2]|0;
    $225 = (($224) + ($222)|0);
    _memcpy(($225|0),($221|0),($218|0))|0;
   }
   HEAP32[$0>>2] = 1;
   $_282$sroa$0$0$$sroa_idx94 = ((($0)) + 4|0);
   ;HEAP32[$_282$sroa$0$0$$sroa_idx94>>2]=HEAP32[$res>>2]|0;HEAP32[$_282$sroa$0$0$$sroa_idx94+4>>2]=HEAP32[$res+4>>2]|0;HEAP32[$_282$sroa$0$0$$sroa_idx94+8>>2]=HEAP32[$res+8>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $17 = ___cxa_find_matching_catch_2()|0;
 $226 = tempRet0;
 $227 = HEAP32[$_3$sroa$4$0$$sroa_idx2$i>>2]|0;
 $not$$i$i$i$i$i = ($227|0)==(0);
 if ($not$$i$i$i$i$i) {
  ___resumeException($17|0);
  // unreachable;
 }
 $228 = HEAP32[$res>>2]|0;
 ___rust_deallocate($228,$227,1);
 ___resumeException($17|0);
 // unreachable;
}
function __ZN93__LT_collections__string__String_u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17hab70a9f6912d519dE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11collections3str62__LT_impl_u20_collections__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17h189157b2b25caa18E($0,$1,$2);
 return;
}
function __ZN124__LT_collections__string__String_u20_as_u20_core__convert__From_LT_collections__borrow__Cow_LT__u27_a_C__u20_str_GT__GT__GT_4from17hc574f3c368cacf17E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $_6$sroa$0$sroa$4$0$_6$sroa$0$0$$sroa_cast$sroa_idx61$i = 0, $_6$sroa$0$sroa$5$0$_6$sroa$0$0$$sroa_cast$sroa_idx63$i = 0, $s$sroa$0$0$copyload = 0, $s$sroa$4$0$$sroa_idx16 = 0, $s$sroa$4$0$copyload = 0, $s$sroa$5$0$$sroa_idx18 = 0, $s$sroa$5$0$copyload = 0, $s$sroa$6$0$$sroa_idx20 = 0, $s$sroa$6$0$copyload = 0, $switch3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $s$sroa$0$0$copyload = HEAP32[$1>>2]|0;
 $s$sroa$4$0$$sroa_idx16 = ((($1)) + 4|0);
 $s$sroa$4$0$copyload = HEAP32[$s$sroa$4$0$$sroa_idx16>>2]|0;
 $s$sroa$5$0$$sroa_idx18 = ((($1)) + 8|0);
 $s$sroa$5$0$copyload = HEAP32[$s$sroa$5$0$$sroa_idx18>>2]|0;
 $switch3$i = ($s$sroa$0$0$copyload|0)==(1);
 if ($switch3$i) {
  $s$sroa$6$0$$sroa_idx20 = ((($1)) + 12|0);
  $s$sroa$6$0$copyload = HEAP32[$s$sroa$6$0$$sroa_idx20>>2]|0;
  HEAP32[$0>>2] = $s$sroa$4$0$copyload;
  $_6$sroa$0$sroa$4$0$_6$sroa$0$0$$sroa_cast$sroa_idx61$i = ((($0)) + 4|0);
  HEAP32[$_6$sroa$0$sroa$4$0$_6$sroa$0$0$$sroa_cast$sroa_idx61$i>>2] = $s$sroa$5$0$copyload;
  $_6$sroa$0$sroa$5$0$_6$sroa$0$0$$sroa_cast$sroa_idx63$i = ((($0)) + 8|0);
  HEAP32[$_6$sroa$0$sroa$5$0$_6$sroa$0$0$$sroa_cast$sroa_idx63$i>>2] = $s$sroa$6$0$copyload;
  return;
 } else {
  __ZN11collections3str62__LT_impl_u20_collections__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17h189157b2b25caa18E($0,$s$sroa$4$0$copyload,$s$sroa$5$0$copyload);
  return;
 }
}
function __ZN11collections6string116__LT_impl_u20_core__convert__From_LT_collections__string__String_GT__u20_for_u20_collections__vec__Vec_LT_u8_GT__GT_4from17hb52ab81ead3af7e6E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 return;
}
function __ZN97__LT_collections__vec__Vec_LT_u8_GT__u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17h77fdee4d679ecc8eE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa_idx$i$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$$i$i$i$i$i$i$i = 0, $ptr$0$i$i$i$i$i = 0, $vector$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vector$i$i$i = sp;
 $3 = ($2|0)<(0);
 if ($3) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(5428);
  // unreachable;
 }
 $5 = ($2|0)==(0);
 if ($5) {
  $ptr$0$i$i$i$i$i = (1);
 } else {
  $6 = (___rust_allocate($2,1)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   __ZN5alloc3oom3oom17h3b36c708663c15cdE();
   // unreachable;
  } else {
   $ptr$0$i$i$i$i$i = $6;
  }
 }
 $8 = $ptr$0$i$i$i$i$i;
 HEAP32[$vector$i$i$i>>2] = $8;
 $$sroa_idx$i$i$i$i = ((($vector$i$i$i)) + 4|0);
 HEAP32[$$sroa_idx$i$i$i$i>>2] = $2;
 $9 = ((($vector$i$i$i)) + 8|0);
 HEAP32[$9>>2] = 0;
 __THREW__ = 0;
 invoke_vii(408,($vector$i$i$i|0),($2|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  $15 = HEAP32[$9>>2]|0;
  $16 = (($15) + ($2))|0;
  HEAP32[$9>>2] = $16;
  $17 = HEAP32[$vector$i$i$i>>2]|0;
  $18 = (($17) + ($15)|0);
  _memcpy(($18|0),($1|0),($2|0))|0;
  ;HEAP32[$0>>2]=HEAP32[$vector$i$i$i>>2]|0;HEAP32[$0+4>>2]=HEAP32[$vector$i$i$i+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$vector$i$i$i+8>>2]|0;
  STACKTOP = sp;return;
 }
 $4 = ___cxa_find_matching_catch_2()|0;
 $12 = tempRet0;
 $13 = HEAP32[$$sroa_idx$i$i$i$i>>2]|0;
 $not$$i$i$i$i$i$i$i = ($13|0)==(0);
 if ($not$$i$i$i$i$i$i$i) {
  ___resumeException($4|0);
  // unreachable;
 }
 $14 = HEAP32[$vector$i$i$i>>2]|0;
 ___rust_deallocate($14,$13,1);
 ___resumeException($4|0);
 // unreachable;
}
function __ZN11std_unicode6tables16general_category1N17h3a678ba0a4bfab74E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN11std_unicode6tables23trie_lookup_range_table17h6bda495eebf2e09bE($0,432)|0);
 return ($1|0);
}
function __ZN11std_unicode6tables23trie_lookup_range_table17h6bda495eebf2e09bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<(2048);
 do {
  if ($2) {
   $3 = $0 >>> 6;
   $4 = (($1) + ($3<<3)|0);
   $$sink4 = $4;
  } else {
   $5 = ($0>>>0)<(65536);
   if ($5) {
    $6 = $0 >>> 6;
    $7 = (($6) + -32)|0;
    $8 = ($7>>>0)<(992);
    if (!($8)) {
     __ZN4core9panicking18panic_bounds_check17h196ab917033e60b3E(5312,$7,992);
     // unreachable;
    }
    $9 = (((($1)) + 256|0) + ($7)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = $10&255;
    $12 = ((($1)) + 1252|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11>>>0)<($13>>>0);
    if ($14) {
     $36 = ((($1)) + 1248|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (($37) + ($11<<3)|0);
     $$sink4 = $38;
     break;
    } else {
     __ZN4core9panicking18panic_bounds_check17h196ab917033e60b3E(5336,$11,$13);
     // unreachable;
    }
   }
   $15 = $0 >>> 12;
   $16 = (($15) + -16)|0;
   $17 = ($16>>>0)<(256);
   if (!($17)) {
    __ZN4core9panicking18panic_bounds_check17h196ab917033e60b3E(5312,$16,256);
    // unreachable;
   }
   $18 = (((($1)) + 1256|0) + ($16)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ((($1)) + 1516|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $19&255;
   $23 = $22 << 6;
   $24 = $0 >>> 6;
   $25 = $24 & 63;
   $26 = $23 | $25;
   $27 = ($26>>>0)<($21>>>0);
   if (!($27)) {
    __ZN4core9panicking18panic_bounds_check17h196ab917033e60b3E(5312,$26,$21);
    // unreachable;
   }
   $28 = ((($1)) + 1512|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($26)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = ((($1)) + 1524|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($32>>>0)<($34>>>0);
   if ($35) {
    $39 = ((($1)) + 1520|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + ($32<<3)|0);
    $$sink4 = $41;
    break;
   } else {
    __ZN4core9panicking18panic_bounds_check17h196ab917033e60b3E(5324,$32,$34);
    // unreachable;
   }
  }
 } while(0);
 $42 = $$sink4;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = $0 & 63;
 $49 = (_bitshift64Shl(1,0,($48|0))|0);
 $50 = tempRet0;
 $51 = $44 & $49;
 $52 = $47 & $50;
 $53 = ($51|0)!=(0);
 $54 = ($52|0)!=(0);
 $55 = $53 | $54;
 return ($55|0);
}
function __ZN54__LT_str_u20_as_u20_std_unicode__u_str__UnicodeStr_GT_16split_whitespace12is_not_empty17h754a72f48fb494d3E($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 return ($3|0);
}
function __ZN54__LT_str_u20_as_u20_std_unicode__u_str__UnicodeStr_GT_16split_whitespace13is_whitespace17hd31aa0ee3721a03bE($0) {
 $0 = $0|0;
 var $$off$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $merge$i = 0, $switch$lobit$i = 0, $switch$shifted$i = 0, $switch$tableidx$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $switch$tableidx$i = (($0) + -9)|0;
 $1 = ($switch$tableidx$i>>>0)<(24);
 if ($1) {
  $switch$shifted$i = 8388639 >>> $switch$tableidx$i;
  $22 = $switch$shifted$i & 1;
  $switch$lobit$i = ($22|0)==(0);
  if (!($switch$lobit$i)) {
   $merge$i = 1;
   return ($merge$i|0);
  }
 }
 $$off$i = (($0) + -128)|0;
 $21 = ($$off$i>>>0)<(12224);
 if (!($21)) {
  $merge$i = 0;
  return ($merge$i|0);
 }
 $2 = $0 >>> 6;
 $3 = (19242 + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (2168 + ($5<<3)|0);
 $7 = $6;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $0 & 63;
 $14 = (_bitshift64Shl(1,0,($13|0))|0);
 $15 = tempRet0;
 $16 = $9 & $14;
 $17 = $12 & $15;
 $18 = ($16|0)!=(0);
 $19 = ($17|0)!=(0);
 $20 = $18 | $19;
 $merge$i = $20;
 return ($merge$i|0);
}
function __ZN100__LT_std_unicode__u_str__SplitWhitespace_LT__u27_a_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h3f78e9d5e64b768dE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i$i$i$i$i$i = 0, $$cast$i$i$i$i$i$i$i$i = 0, $$pre$i$i$i$i$i = 0, $$pre5$i$i$i$i$i = 0, $$sink$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $_0$0$i15$i$i$i$i$i$i$i$i$i$i = 0, $_0$0$i22$i$i$i$i$i$i$i$i$i$i = 0, $_0$0$i9$i$i$i$i$i$i$i$i$i$i = 0, $_10$sroa$10$1$ph$i = 0, $_3$sroa$0$0$i$i$i$i$i$i = 0, $_3$sroa$10$0$i$i$i$i$i$i = 0, $_3$sroa$10$1$i$i$i$i$i$i = 0, $_3$sroa$7$0$i$i$i$i$i$i = 0, $_3$sroa$7$1$i$i$i$i$i$i = 0;
 var $_5$sroa$4$0$ph$i$i$i$i$i$i$i$i = 0, $not$$i$i$i$i$i = 0, $phitmp$i$i$i$i$i$i$i$i$i$i = 0, $phitmp31$i$i$i$i$i$i$i$i$i$i = 0, $phitmp32$i$i$i$i$i$i$i$i$i$i = 0, $trunc$i$i$i$i$i$i = 0, $trunc$i$i$i$i$i$i$clear = 0, $x$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$i = sp;
 $2 = ((($1)) + 37|0);
 $3 = ((($1)) + 12|0);
 $4 = ((($1)) + 24|0);
 $5 = ((($1)) + 28|0);
 $6 = ((($1)) + 24|0);
 $7 = ((($1)) + 20|0);
 $8 = ((($1)) + 8|0);
 $9 = ((($1)) + 36|0);
 $10 = ((($1)) + 4|0);
 $11 = ((($x$i)) + 4|0);
 $12 = ((($1)) + 40|0);
 $13 = HEAP8[$2>>0]|0;
 $14 = ($13<<24>>24)==(0);
 L1: do {
  if ($14) {
   L2: while(1) {
    $15 = HEAP32[$3>>2]|0;
    $_3$sroa$10$0$i$i$i$i$i$i = 0;$_3$sroa$7$0$i$i$i$i$i$i = 0;
    L4: while(1) {
     $16 = HEAP32[$4>>2]|0;
     $17 = HEAP32[$5>>2]|0;
     $$cast$i$i$i$i$i$i$i$i = $16;
     $18 = ($$cast$i$i$i$i$i$i$i$i|0)==($17|0);
     if ($18) {
      $_3$sroa$0$0$i$i$i$i$i$i = 2;$_3$sroa$10$1$i$i$i$i$i$i = $_3$sroa$10$0$i$i$i$i$i$i;$_3$sroa$7$1$i$i$i$i$i$i = $_3$sroa$7$0$i$i$i$i$i$i;
     } else {
      $21 = ((($$cast$i$i$i$i$i$i$i$i)) + 1|0);
      HEAP32[$6>>2] = $21;
      $20 = HEAP8[$$cast$i$i$i$i$i$i$i$i>>0]|0;
      $22 = ($20<<24>>24)>(-1);
      $23 = $21;
      if ($22) {
       $19 = $20&255;
       $58 = $23;$_5$sroa$4$0$ph$i$i$i$i$i$i$i$i = $19;
      } else {
       $24 = $20 & 31;
       $25 = $24&255;
       $26 = ($21|0)==($17|0);
       if ($26) {
        $35 = $17;$85 = $23;$_0$0$i22$i$i$i$i$i$i$i$i$i$i = 0;
       } else {
        $27 = ((($$cast$i$i$i$i$i$i$i$i)) + 2|0);
        HEAP32[$6>>2] = $27;
        $28 = HEAP8[$21>>0]|0;
        $phitmp$i$i$i$i$i$i$i$i$i$i = $28 & 63;
        $29 = $27;
        $35 = $27;$85 = $29;$_0$0$i22$i$i$i$i$i$i$i$i$i$i = $phitmp$i$i$i$i$i$i$i$i$i$i;
       }
       $30 = $25 << 6;
       $31 = $_0$0$i22$i$i$i$i$i$i$i$i$i$i&255;
       $32 = $31 | $30;
       $33 = ($20&255)>(223);
       if ($33) {
        $34 = ($35|0)==($17|0);
        if ($34) {
         $46 = $17;$86 = $85;$_0$0$i15$i$i$i$i$i$i$i$i$i$i = 0;
        } else {
         $36 = ((($35)) + 1|0);
         HEAP32[$6>>2] = $36;
         $37 = HEAP8[$35>>0]|0;
         $phitmp31$i$i$i$i$i$i$i$i$i$i = $37 & 63;
         $38 = $36;
         $46 = $36;$86 = $38;$_0$0$i15$i$i$i$i$i$i$i$i$i$i = $phitmp31$i$i$i$i$i$i$i$i$i$i;
        }
        $39 = $31 << 6;
        $40 = $_0$0$i15$i$i$i$i$i$i$i$i$i$i&255;
        $41 = $40 | $39;
        $42 = $25 << 12;
        $43 = $41 | $42;
        $44 = ($20&255)>(239);
        if ($44) {
         $45 = ($46|0)==($17|0);
         if ($45) {
          $87 = $86;$_0$0$i9$i$i$i$i$i$i$i$i$i$i = 0;
         } else {
          $47 = ((($46)) + 1|0);
          HEAP32[$6>>2] = $47;
          $48 = HEAP8[$46>>0]|0;
          $phitmp32$i$i$i$i$i$i$i$i$i$i = $48 & 63;
          $49 = $47;
          $87 = $49;$_0$0$i9$i$i$i$i$i$i$i$i$i$i = $phitmp32$i$i$i$i$i$i$i$i$i$i;
         }
         $50 = $25 << 18;
         $51 = $50 & 1835008;
         $52 = $41 << 6;
         $53 = $_0$0$i9$i$i$i$i$i$i$i$i$i$i&255;
         $54 = $52 | $51;
         $55 = $54 | $53;
         $58 = $87;$_5$sroa$4$0$ph$i$i$i$i$i$i$i$i = $55;
        } else {
         $58 = $86;$_5$sroa$4$0$ph$i$i$i$i$i$i$i$i = $43;
        }
       } else {
        $58 = $85;$_5$sroa$4$0$ph$i$i$i$i$i$i$i$i = $32;
       }
      }
      $56 = HEAP32[$7>>2]|0;
      $57 = (($58) - ($16))|0;
      $59 = (($56) + ($57))|0;
      HEAP32[$7>>2] = $59;
      $60 = HEAP32[$8>>2]|0;
      $61 = (FUNCTION_TABLE_ii[$60 & 511]($_5$sroa$4$0$ph$i$i$i$i$i$i$i$i)|0);
      $62 = $61&1;
      $$$i$i$i$i$i$i = $62 ^ 1;
      $_3$sroa$0$0$i$i$i$i$i$i = $$$i$i$i$i$i$i;$_3$sroa$10$1$i$i$i$i$i$i = $59;$_3$sroa$7$1$i$i$i$i$i$i = $56;
     }
     $trunc$i$i$i$i$i$i = $_3$sroa$0$0$i$i$i$i$i$i&255;
     $trunc$i$i$i$i$i$i$clear = $trunc$i$i$i$i$i$i & 3;
     switch ($trunc$i$i$i$i$i$i$clear<<24>>24) {
     case 1:  {
      $_3$sroa$10$0$i$i$i$i$i$i = $_3$sroa$10$1$i$i$i$i$i$i;$_3$sroa$7$0$i$i$i$i$i$i = $_3$sroa$7$1$i$i$i$i$i$i;
      break;
     }
     case 0:  {
      label = 23;
      break L4;
      break;
     }
     case 2:  {
      label = 18;
      break L4;
      break;
     }
     default: {
      label = 17;
      break L2;
     }
     }
    }
    if ((label|0) == 18) {
     label = 0;
     $63 = HEAP8[$2>>0]|0;
     $64 = ($63<<24>>24)==(0);
     if (!($64)) {
      break L1;
     }
     $65 = HEAP8[$9>>0]|0;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $67 = HEAP32[$10>>2]|0;
      $68 = HEAP32[$1>>2]|0;
      $not$$i$i$i$i$i = ($67|0)==($68|0);
      if ($not$$i$i$i$i$i) {
       break L1;
      } else {
       $71 = $68;$73 = $67;
      }
     } else {
      $$pre$i$i$i$i$i = HEAP32[$1>>2]|0;
      $$pre5$i$i$i$i$i = HEAP32[$10>>2]|0;
      $71 = $$pre$i$i$i$i$i;$73 = $$pre5$i$i$i$i$i;
     }
     HEAP8[$2>>0] = 1;
     $69 = HEAP32[$3>>2]|0;
     $70 = (($69) + ($71)|0);
     $72 = (($73) - ($71))|0;
     $$sink$i = $70;$_10$sroa$10$1$ph$i = $72;
    }
    else if ((label|0) == 23) {
     label = 0;
     $74 = HEAP32[$1>>2]|0;
     $75 = (($15) + ($74)|0);
     $76 = (($_3$sroa$7$1$i$i$i$i$i$i) - ($74))|0;
     HEAP32[$1>>2] = $_3$sroa$10$1$i$i$i$i$i$i;
     $$sink$i = $75;$_10$sroa$10$1$ph$i = $76;
    }
    $77 = $$sink$i;
    HEAP32[$x$i>>2] = $77;
    HEAP32[$11>>2] = $_10$sroa$10$1$ph$i;
    $78 = HEAP32[$12>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 511]($x$i)|0);
    if ($79) {
     break;
    }
    $83 = HEAP8[$2>>0]|0;
    $84 = ($83<<24>>24)==(0);
    if (!($84)) {
     break L1;
    }
   }
   if ((label|0) == 17) {
    // unreachable;
   }
   $80 = HEAP32[$x$i>>2]|0;
   $81 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $80;
   $82 = ((($0)) + 4|0);
   HEAP32[$82>>2] = $81;
   STACKTOP = sp;return;
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 STACKTOP = sp;return;
}
function _rust_eh_personality($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (___gxx_personality_v0(($0|0),($1|0),($2|0),($3|0),($4|0),($5|0))|0);
 return ($6|0);
}
function ___rust_maybe_catch_panic($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sroa_idx$i$i = 0, $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 invoke_vi($0|0,($1|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $_0$0 = 0;
  return ($_0$0|0);
 }
 $6 = ___cxa_find_matching_catch_3(0|0)|0;
 $7 = tempRet0;
 $8 = ($6|0)==(0|0);
 if ($8) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(5348);
  // unreachable;
 }
 $9 = HEAP32[$6>>2]|0;
 $$sroa_idx$i$i = ((($6)) + 4|0);
 $10 = HEAP32[$$sroa_idx$i$i>>2]|0;
 ___cxa_free_exception(($6|0));
 HEAP32[$2>>2] = $9;
 HEAP32[$3>>2] = $10;
 $_0$0 = 1;
 return ($_0$0|0);
}
function ___rust_start_panic($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0;
 $3 = $1;
 $4 = (___cxa_allocate_exception(8)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  HEAP32[$4>>2] = $2;
  $12 = ((($4)) + 4|0);
  HEAP32[$12>>2] = $3;
  ___cxa_throw(($4|0),(0|0),(0|0));
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(5368);
  // unreachable;
 }
 $6 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vi[$6 & 511]($2);
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  return 3;
 }
 $10 = ((($3)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 ___rust_deallocate($2,$8,$11);
 return 3;
}
function __ZN5alloc3oom3oom17h3b36c708663c15cdE() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1362]|0;
 $1 = $0;
 FUNCTION_TABLE_v[$1 & 511]();
 // unreachable;
}
function __ZN5alloc3oom19default_oom_handler17h0cf8585a424e1f73E() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _llvm_trap();
 // unreachable;
}
function __ZN5alloc3oom3imp15set_oom_handler17hd0afc904bb614965E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 HEAP32[1362] = $1;
 return;
}
function ___rust_allocate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_0$0$i = 0, $out$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $out$i$i = sp;
 $2 = ($1>>>0)<(9);
 if ($2) {
  $3 = (_malloc($0)|0);
  $_0$0$i = $3;
  STACKTOP = sp;return ($_0$0$i|0);
 } else {
  HEAP32[$out$i$i>>2] = 0;
  $4 = (_posix_memalign($out$i$i,$1,$0)|0);
  $5 = ($4|0)==(0);
  $6 = HEAP32[$out$i$i>>2]|0;
  $$$i$i = $5 ? $6 : 0;
  $_0$0$i = $$$i$i;
  STACKTOP = sp;return ($_0$0$i|0);
 }
 return (0)|0;
}
function ___rust_deallocate($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function ___rust_reallocate($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i = 0, $_0$0$sroa$speculated$i$i = 0, $not$$i = 0, $out$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $out$i$i$i = sp;
 $4 = ($3>>>0)<(9);
 if ($4) {
  $5 = (_realloc($0,$2)|0);
  $_0$0$i = $5;
  STACKTOP = sp;return ($_0$0$i|0);
 }
 HEAP32[$out$i$i$i>>2] = 0;
 $6 = (_posix_memalign($out$i$i$i,$3,$2)|0);
 $7 = HEAP32[$out$i$i$i>>2]|0;
 $8 = ($7|0)==(0|0);
 $not$$i = ($6|0)!=(0);
 $9 = $not$$i | $8;
 if ($9) {
  $_0$0$i = 0;
  STACKTOP = sp;return ($_0$0$i|0);
 }
 $10 = ($2>>>0)<=($1>>>0);
 $_0$0$sroa$speculated$i$i = $10 ? $2 : $1;
 _memmove(($7|0),($0|0),($_0$0$sroa$speculated$i$i|0))|0;
 _free($0);
 $_0$0$i = $7;
 STACKTOP = sp;return ($_0$0$i|0);
}
function __ZN4core5slice20slice_index_len_fail17hc8606abb7e325facE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $index = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_10 = sp + 24|0;
 $_5 = sp;
 $len = sp + 44|0;
 $index = sp + 40|0;
 HEAP32[$index>>2] = $0;
 HEAP32[$len>>2] = $1;
 $2 = $index;
 $3 = $len;
 HEAP32[$_10>>2] = $2;
 $4 = ((($_10)) + 4|0);
 HEAP32[$4>>2] = (227);
 $5 = ((($_10)) + 8|0);
 HEAP32[$5>>2] = $3;
 $6 = ((($_10)) + 12|0);
 HEAP32[$6>>2] = (227);
 HEAP32[$_5>>2] = 5640;
 $7 = ((($_5)) + 4|0);
 HEAP32[$7>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $8 = ((($_5)) + 16|0);
 HEAP32[$8>>2] = $_10;
 $9 = ((($_5)) + 20|0);
 HEAP32[$9>>2] = 2;
 __ZN4core9panicking9panic_fmt17hbeea8425e52b5ca1E($_5,5656);
 // unreachable;
}
function __ZN4core9panicking18panic_bounds_check17h196ab917033e60b3E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_7 = 0, $index = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_12 = sp + 24|0;
 $_7 = sp;
 $len = sp + 44|0;
 $index = sp + 40|0;
 HEAP32[$index>>2] = $1;
 HEAP32[$len>>2] = $2;
 $3 = $len;
 $4 = $index;
 HEAP32[$_12>>2] = $3;
 $5 = ((($_12)) + 4|0);
 HEAP32[$5>>2] = (227);
 $6 = ((($_12)) + 8|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($_12)) + 12|0);
 HEAP32[$7>>2] = (227);
 HEAP32[$_7>>2] = 5624;
 $8 = ((($_7)) + 4|0);
 HEAP32[$8>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_7)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $9 = ((($_7)) + 16|0);
 HEAP32[$9>>2] = $_12;
 $10 = ((($_7)) + 20|0);
 HEAP32[$10>>2] = 2;
 __ZN4core9panicking9panic_fmt17hbeea8425e52b5ca1E($_7,$0);
 // unreachable;
}
function __ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17h47bc70a70176906cE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$old5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf31 = 0, $curr$0 = 0;
 var $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf31 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2>>>0)>(9999);
 if ($3) {
  $curr$0 = 39;$n$1 = $2;
  while(1) {
   $4 = (($n$1>>>0) % 10000)&-1;
   $5 = (($n$1>>>0) / 10000)&-1;
   $6 = (($4>>>0) / 100)&-1;
   $7 = $6 << 1;
   $8 = (($4>>>0) % 100)&-1;
   $9 = $8 << 1;
   $10 = (($curr$0) + -4)|0;
   $11 = (20664 + ($7)|0);
   $12 = (($buf31) + ($10)|0);
   $13 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8);
   HEAP8[$12>>0]=$13&255;HEAP8[$12+1>>0]=$13>>8;
   $14 = (20664 + ($9)|0);
   $15 = (($curr$0) + -2)|0;
   $16 = (($buf31) + ($15)|0);
   $17 = HEAPU8[$14>>0]|(HEAPU8[$14+1>>0]<<8);
   HEAP8[$16>>0]=$17&255;HEAP8[$16+1>>0]=$17>>8;
   $$old5 = ($n$1>>>0)>(99999999);
   if ($$old5) {
    $curr$0 = $10;$n$1 = $5;
   } else {
    $curr$1 = $10;$n$2 = $5;
    break;
   }
  }
 } else {
  $curr$1 = 39;$n$2 = $2;
 }
 $18 = ($n$2|0)>(99);
 if ($18) {
  $19 = (($n$2>>>0) % 100)&-1;
  $20 = $19 << 1;
  $21 = (($n$2>>>0) / 100)&-1;
  $22 = (($curr$1) + -2)|0;
  $23 = (20664 + ($20)|0);
  $24 = (($buf31) + ($22)|0);
  $25 = HEAPU8[$23>>0]|(HEAPU8[$23+1>>0]<<8);
  HEAP8[$24>>0]=$25&255;HEAP8[$24+1>>0]=$25>>8;
  $curr$2 = $22;$n1$0 = $21;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $26 = ($n1$0|0)<(10);
 if ($26) {
  $27 = (($curr$2) + -1)|0;
  $28 = $n1$0&255;
  $29 = (($buf31) + ($27)|0);
  $30 = (($28) + 48)<<24>>24;
  HEAP8[$29>>0] = $30;
  $curr$3 = $27;
  $36 = (($buf31) + ($curr$3)|0);
  $37 = (39 - ($curr$3))|0;
  $38 = (__ZN4core3fmt9Formatter12pad_integral17hdf67f97d6bf4137cE($1,1,24540,0,$36,$37)|0);
  STACKTOP = sp;return ($38|0);
 } else {
  $31 = $n1$0 << 1;
  $32 = (($curr$2) + -2)|0;
  $33 = (20664 + ($31)|0);
  $34 = (($buf31) + ($32)|0);
  $35 = HEAPU8[$33>>0]|(HEAPU8[$33+1>>0]<<8);
  HEAP8[$34>>0]=$35&255;HEAP8[$34+1>>0]=$35>>8;
  $curr$3 = $32;
  $36 = (($buf31) + ($curr$3)|0);
  $37 = (39 - ($curr$3))|0;
  $38 = (__ZN4core3fmt9Formatter12pad_integral17hdf67f97d6bf4137cE($1,1,24540,0,$36,$37)|0);
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function __ZN4core9panicking9panic_fmt17hbeea8425e52b5ca1E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_7 = 0, $_7$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_7$byval_copy = sp + 24|0;
 $_7 = sp;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 ;HEAP32[$_7>>2]=HEAP32[$0>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$_7+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$_7+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$_7+20>>2]=HEAP32[$0+20>>2]|0;
 ;HEAP32[$_7$byval_copy>>2]=HEAP32[$_7>>2]|0;HEAP32[$_7$byval_copy+4>>2]=HEAP32[$_7+4>>2]|0;HEAP32[$_7$byval_copy+8>>2]=HEAP32[$_7+8>>2]|0;HEAP32[$_7$byval_copy+12>>2]=HEAP32[$_7+12>>2]|0;HEAP32[$_7$byval_copy+16>>2]=HEAP32[$_7+16>>2]|0;HEAP32[$_7$byval_copy+20>>2]=HEAP32[$_7+20>>2]|0;
 _rust_begin_unwind($_7$byval_copy,$2,$4,$6);
 // unreachable;
}
function __ZN4core3fmt9Formatter12pad_integral17hdf67f97d6bf4137cE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$195 = 0, $$pre = 0, $$pre$phi207Z2D = 0, $$pre$phi211Z2D = 0, $$pre204 = 0, $$pre206 = 0, $$pre208 = 0, $$pre210 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$sroa$0$1 = 0, $_15$sroa$0$0$i = 0, $_15$sroa$0$0$i92 = 0, $_15$sroa$6$0$i = 0, $_15$sroa$6$0$i93 = 0;
 var $_16$i = 0, $_16$i$i$i = 0, $_16$i44 = 0, $_16$i65 = 0, $align$0$off0$i = 0, $align$0$off0$i$clear = 0, $align$0$off0$i90 = 0, $align$0$off0$i90$clear = 0, $cond$i = 0, $cond$i88 = 0, $cont_bytes$0$lcssa$i = 0, $cont_bytes$024$i = 0, $extract$t$i = 0, $extract$t$i89 = 0, $fill$i = 0, $fill$i86 = 0, $iter$sroa$0$0$i = 0, $iter$sroa$0$0$i96 = 0, $iter2$sroa$0$0$i = 0, $iter2$sroa$0$0$i106 = 0;
 var $len$0$i$i = 0, $len$0$i$i119 = 0, $not$switch4$i = 0, $not$switch4$i$i = 0, $not$switch4$i$i$i = 0, $not$switch4$i$i$i$i = 0, $not$switch4$i$i108 = 0, $not$switch4$i$i38 = 0, $not$switch4$i$i48 = 0, $not$switch4$i$i69 = 0, $not$switch4$i2$i = 0, $not$switch4$i2$i98 = 0, $not$switch4$i55 = 0, $not$switch4$i76 = 0, $not$switch4$i8$i = 0, $not$switch4$i8$i101 = 0, $prefixed$0 = 0, $sign$sroa$0$0 = 0, $sign$sroa$10$0 = 0, $switch = 0;
 var $switch4$i = 0, $switch4$i$i$i = 0, $switch4$i45 = 0, $switch4$i66 = 0, $width$0 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_16$i$i$i = sp + 20|0;
 $fill$i86 = sp + 16|0;
 $_16$i65 = sp + 12|0;
 $_16$i44 = sp + 8|0;
 $_16$i = sp + 4|0;
 $fill$i = sp;
 if ($1) {
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 & 1;
  $$195 = (($8) + ($5))|0;
  $10 = $7;$sign$sroa$0$0 = $8;$sign$sroa$10$0 = 43;$width$0 = $$195;
 } else {
  $6 = (($5) + 1)|0;
  $$pre = HEAP32[$0>>2]|0;
  $10 = $$pre;$sign$sroa$0$0 = 1;$sign$sroa$10$0 = 45;$width$0 = $6;
 }
 $9 = $10 & 4;
 $11 = ($9|0)==(0);
 if ($11) {
  $prefixed$0 = 0;$width$1 = $width$0;
 } else {
  $12 = (($2) + ($3)|0);
  $13 = ($3|0)==(0);
  if ($13) {
   $cont_bytes$0$lcssa$i = 0;
  } else {
   $15 = $2;$cont_bytes$024$i = 0;
   while(1) {
    $14 = ((($15)) + 1|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16 & -64;
    $18 = ($17<<24>>24)==(-128);
    $19 = $18&1;
    $20 = (($19) + ($cont_bytes$024$i))|0;
    $21 = ($14|0)==($12|0);
    if ($21) {
     $cont_bytes$0$lcssa$i = $20;
     break;
    } else {
     $15 = $14;$cont_bytes$024$i = $20;
    }
   }
  }
  $22 = (($width$0) + ($3))|0;
  $23 = (($22) - ($cont_bytes$0$lcssa$i))|0;
  $prefixed$0 = 1;$width$1 = $23;
 }
 $24 = ((($0)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $switch = ($25|0)==(1);
 if (!($switch)) {
  $switch4$i = ($sign$sroa$0$0|0)==(1);
  if ($switch4$i) {
   $26 = ((($0)) + 28|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($0)) + 32|0);
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$_16$i>>2] = 0;
   HEAP8[$_16$i>>0] = $sign$sroa$10$0;
   $30 = ((($29)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (FUNCTION_TABLE_iiii[$31 & 511]($27,$_16$i,1)|0);
   $not$switch4$i$i38 = ($32<<24>>24)==(0);
   if (!($not$switch4$i$i38)) {
    $_0$sroa$0$1 = 1;
    STACKTOP = sp;return ($_0$sroa$0$1|0);
   }
  }
  $33 = ($prefixed$0<<24>>24)==(0);
  $$pre208 = ((($0)) + 28|0);
  if ($33) {
   $$pre210 = ((($0)) + 32|0);
   $$pre$phi211Z2D = $$pre210;
  } else {
   $34 = HEAP32[$$pre208>>2]|0;
   $35 = ((($0)) + 32|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (FUNCTION_TABLE_iiii[$38 & 511]($34,$2,$3)|0);
   $not$switch4$i = ($39<<24>>24)==(0);
   if ($not$switch4$i) {
    $$pre$phi211Z2D = $35;
   } else {
    $_0$sroa$0$1 = 1;
    STACKTOP = sp;return ($_0$sroa$0$1|0);
   }
  }
  $156 = HEAP32[$$pre208>>2]|0;
  $157 = HEAP32[$$pre$phi211Z2D>>2]|0;
  $158 = ((($157)) + 12|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = (FUNCTION_TABLE_iiii[$159 & 511]($156,$4,$5)|0);
  $_0$sroa$0$1 = $160;
  STACKTOP = sp;return ($_0$sroa$0$1|0);
 }
 $70 = ((($0)) + 16|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71>>>0)>($width$1>>>0);
 if (!($72)) {
  $switch4$i45 = ($sign$sroa$0$0|0)==(1);
  if ($switch4$i45) {
   $40 = ((($0)) + 28|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($0)) + 32|0);
   $43 = HEAP32[$42>>2]|0;
   HEAP32[$_16$i44>>2] = 0;
   HEAP8[$_16$i44>>0] = $sign$sroa$10$0;
   $44 = ((($43)) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (FUNCTION_TABLE_iiii[$45 & 511]($41,$_16$i44,1)|0);
   $not$switch4$i$i48 = ($46<<24>>24)==(0);
   if (!($not$switch4$i$i48)) {
    $_0$sroa$0$1 = 1;
    STACKTOP = sp;return ($_0$sroa$0$1|0);
   }
  }
  $47 = ($prefixed$0<<24>>24)==(0);
  $$pre204 = ((($0)) + 28|0);
  if ($47) {
   $$pre206 = ((($0)) + 32|0);
   $$pre$phi207Z2D = $$pre206;
  } else {
   $48 = HEAP32[$$pre204>>2]|0;
   $49 = ((($0)) + 32|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_iiii[$52 & 511]($48,$2,$3)|0);
   $not$switch4$i55 = ($53<<24>>24)==(0);
   if ($not$switch4$i55) {
    $$pre$phi207Z2D = $49;
   } else {
    $_0$sroa$0$1 = 1;
    STACKTOP = sp;return ($_0$sroa$0$1|0);
   }
  }
  $161 = HEAP32[$$pre204>>2]|0;
  $162 = HEAP32[$$pre$phi207Z2D>>2]|0;
  $163 = ((($162)) + 12|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (FUNCTION_TABLE_iiii[$164 & 511]($161,$4,$5)|0);
  $_0$sroa$0$1 = $165;
  STACKTOP = sp;return ($_0$sroa$0$1|0);
 }
 $73 = $10 & 8;
 $74 = ($73|0)==(0);
 if ($74) {
  $75 = (($71) - ($width$1))|0;
  $76 = ((($0)) + 8|0);
  $extract$t$i89 = HEAP8[$76>>0]|0;
  $cond$i88 = ($extract$t$i89<<24>>24)==(3);
  $align$0$off0$i90 = $cond$i88 ? 1 : $extract$t$i89;
  $align$0$off0$i90$clear = $align$0$off0$i90 & 3;
  switch ($align$0$off0$i90$clear<<24>>24) {
  case 0:  {
   $_15$sroa$0$0$i92 = 0;$_15$sroa$6$0$i93 = $75;
   break;
  }
  case 3: case 1:  {
   $_15$sroa$0$0$i92 = $75;$_15$sroa$6$0$i93 = 0;
   break;
  }
  case 2:  {
   $80 = $75 >>> 1;
   $81 = (($75) + 1)|0;
   $82 = $81 >>> 1;
   $_15$sroa$0$0$i92 = $80;$_15$sroa$6$0$i93 = $82;
   break;
  }
  default: {
   // unreachable;
  }
  }
  HEAP32[$fill$i86>>2] = 0;
  $77 = ((($0)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78>>>0)<(128);
  do {
   if ($79) {
    $115 = $78&255;
    HEAP8[$fill$i86>>0] = $115;
    $len$0$i$i119 = 1;
   } else {
    $116 = ($78>>>0)<(2048);
    if ($116) {
     $117 = $78 >>> 6;
     $118 = $117 & 31;
     $119 = $118&255;
     $120 = $119 | -64;
     HEAP8[$fill$i86>>0] = $120;
     $121 = $78 & 63;
     $122 = $121&255;
     $123 = ((($fill$i86)) + 1|0);
     $124 = $122 | -128;
     HEAP8[$123>>0] = $124;
     $len$0$i$i119 = 2;
     break;
    }
    $125 = ($78>>>0)<(65536);
    if ($125) {
     $126 = $78 >>> 12;
     $127 = $126 & 15;
     $128 = $127&255;
     $129 = $128 | -32;
     HEAP8[$fill$i86>>0] = $129;
     $130 = $78 >>> 6;
     $131 = $130 & 63;
     $132 = $131&255;
     $133 = ((($fill$i86)) + 1|0);
     $134 = $132 | -128;
     HEAP8[$133>>0] = $134;
     $135 = $78 & 63;
     $136 = $135&255;
     $137 = ((($fill$i86)) + 2|0);
     $138 = $136 | -128;
     HEAP8[$137>>0] = $138;
     $len$0$i$i119 = 3;
     break;
    } else {
     $139 = $78 >>> 18;
     $140 = $139&255;
     $141 = $140 | -16;
     HEAP8[$fill$i86>>0] = $141;
     $142 = $78 >>> 12;
     $143 = $142 & 63;
     $144 = $143&255;
     $145 = ((($fill$i86)) + 1|0);
     $146 = $144 | -128;
     HEAP8[$145>>0] = $146;
     $147 = $78 >>> 6;
     $148 = $147 & 63;
     $149 = $148&255;
     $150 = ((($fill$i86)) + 2|0);
     $151 = $149 | -128;
     HEAP8[$150>>0] = $151;
     $152 = $78 & 63;
     $153 = $152&255;
     $154 = ((($fill$i86)) + 3|0);
     $155 = $153 | -128;
     HEAP8[$154>>0] = $155;
     $len$0$i$i119 = 4;
     break;
    }
   }
  } while(0);
  $86 = ((($0)) + 28|0);
  $88 = ((($0)) + 32|0);
  $iter$sroa$0$0$i96 = 0;
  while(1) {
   $83 = ($iter$sroa$0$0$i96>>>0)<($_15$sroa$0$0$i92>>>0);
   if (!($83)) {
    break;
   }
   $84 = (($iter$sroa$0$0$i96) + 1)|0;
   $85 = HEAP32[$86>>2]|0;
   $87 = HEAP32[$88>>2]|0;
   $89 = ((($87)) + 12|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (FUNCTION_TABLE_iiii[$90 & 511]($85,$fill$i86,$len$0$i$i119)|0);
   $not$switch4$i2$i98 = ($91<<24>>24)==(0);
   if ($not$switch4$i2$i98) {
    $iter$sroa$0$0$i96 = $84;
   } else {
    label = 36;
    break;
   }
  }
  if ((label|0) == 36) {
   $_0$sroa$0$1 = 1;
   STACKTOP = sp;return ($_0$sroa$0$1|0);
  }
  $switch4$i$i$i = ($sign$sroa$0$0|0)==(1);
  if ($switch4$i$i$i) {
   $92 = HEAP32[$86>>2]|0;
   $93 = HEAP32[$88>>2]|0;
   HEAP32[$_16$i$i$i>>2] = 0;
   HEAP8[$_16$i$i$i>>0] = $sign$sroa$10$0;
   $94 = ((($93)) + 12|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (FUNCTION_TABLE_iiii[$95 & 511]($92,$_16$i$i$i,1)|0);
   $not$switch4$i$i$i$i = ($96<<24>>24)==(0);
   if ($not$switch4$i$i$i$i) {
    label = 33;
   }
  } else {
   label = 33;
  }
  do {
   if ((label|0) == 33) {
    $97 = ($prefixed$0<<24>>24)==(0);
    if (!($97)) {
     $98 = HEAP32[$86>>2]|0;
     $99 = HEAP32[$88>>2]|0;
     $100 = ((($99)) + 12|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (FUNCTION_TABLE_iiii[$101 & 511]($98,$2,$3)|0);
     $not$switch4$i$i$i = ($102<<24>>24)==(0);
     if (!($not$switch4$i$i$i)) {
      break;
     }
    }
    $103 = HEAP32[$86>>2]|0;
    $104 = HEAP32[$88>>2]|0;
    $105 = ((($104)) + 12|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = (FUNCTION_TABLE_iiii[$106 & 511]($103,$4,$5)|0);
    $not$switch4$i8$i101 = ($107<<24>>24)==(0);
    if ($not$switch4$i8$i101) {
     $iter2$sroa$0$0$i106 = 0;
     while(1) {
      $108 = ($iter2$sroa$0$0$i106>>>0)<($_15$sroa$6$0$i93>>>0);
      if (!($108)) {
       label = 40;
       break;
      }
      $109 = (($iter2$sroa$0$0$i106) + 1)|0;
      $110 = HEAP32[$86>>2]|0;
      $111 = HEAP32[$88>>2]|0;
      $112 = ((($111)) + 12|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = (FUNCTION_TABLE_iiii[$113 & 511]($110,$fill$i86,$len$0$i$i119)|0);
      $not$switch4$i$i108 = ($114<<24>>24)==(0);
      if ($not$switch4$i$i108) {
       $iter2$sroa$0$0$i106 = $109;
      } else {
       label = 41;
       break;
      }
     }
     if ((label|0) == 40) {
      $_0$sroa$0$1 = 0;
      STACKTOP = sp;return ($_0$sroa$0$1|0);
     }
     else if ((label|0) == 41) {
      $_0$sroa$0$1 = 1;
      STACKTOP = sp;return ($_0$sroa$0$1|0);
     }
    }
   }
  } while(0);
  $_0$sroa$0$1 = 1;
  STACKTOP = sp;return ($_0$sroa$0$1|0);
 }
 $54 = ((($0)) + 4|0);
 HEAP32[$54>>2] = 48;
 $switch4$i66 = ($sign$sroa$0$0|0)==(1);
 if ($switch4$i66) {
  $55 = ((($0)) + 28|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($0)) + 32|0);
  $58 = HEAP32[$57>>2]|0;
  HEAP32[$_16$i65>>2] = 0;
  HEAP8[$_16$i65>>0] = $sign$sroa$10$0;
  $59 = ((($58)) + 12|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (FUNCTION_TABLE_iiii[$60 & 511]($56,$_16$i65,1)|0);
  $not$switch4$i$i69 = ($61<<24>>24)==(0);
  if (!($not$switch4$i$i69)) {
   $_0$sroa$0$1 = 1;
   STACKTOP = sp;return ($_0$sroa$0$1|0);
  }
 }
 $62 = ($prefixed$0<<24>>24)==(0);
 if (!($62)) {
  $63 = ((($0)) + 28|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($0)) + 32|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($66)) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (FUNCTION_TABLE_iiii[$68 & 511]($64,$2,$3)|0);
  $not$switch4$i76 = ($69<<24>>24)==(0);
  if (!($not$switch4$i76)) {
   $_0$sroa$0$1 = 1;
   STACKTOP = sp;return ($_0$sroa$0$1|0);
  }
 }
 $166 = (($71) - ($width$1))|0;
 $167 = ((($0)) + 8|0);
 $extract$t$i = HEAP8[$167>>0]|0;
 $cond$i = ($extract$t$i<<24>>24)==(3);
 $align$0$off0$i = $cond$i ? 1 : $extract$t$i;
 $align$0$off0$i$clear = $align$0$off0$i & 3;
 switch ($align$0$off0$i$clear<<24>>24) {
 case 0:  {
  $_15$sroa$0$0$i = 0;$_15$sroa$6$0$i = $166;
  break;
 }
 case 3: case 1:  {
  $_15$sroa$0$0$i = $166;$_15$sroa$6$0$i = 0;
  break;
 }
 case 2:  {
  $170 = $166 >>> 1;
  $171 = (($166) + 1)|0;
  $172 = $171 >>> 1;
  $_15$sroa$0$0$i = $170;$_15$sroa$6$0$i = $172;
  break;
 }
 default: {
  // unreachable;
 }
 }
 HEAP32[$fill$i>>2] = 0;
 $168 = HEAP32[$54>>2]|0;
 $169 = ($168>>>0)<(128);
 do {
  if ($169) {
   $192 = $168&255;
   HEAP8[$fill$i>>0] = $192;
   $len$0$i$i = 1;
  } else {
   $193 = ($168>>>0)<(2048);
   if ($193) {
    $194 = $168 >>> 6;
    $195 = $194 & 31;
    $196 = $195&255;
    $197 = $196 | -64;
    HEAP8[$fill$i>>0] = $197;
    $198 = $168 & 63;
    $199 = $198&255;
    $200 = ((($fill$i)) + 1|0);
    $201 = $199 | -128;
    HEAP8[$200>>0] = $201;
    $len$0$i$i = 2;
    break;
   }
   $202 = ($168>>>0)<(65536);
   if ($202) {
    $203 = $168 >>> 12;
    $204 = $203 & 15;
    $205 = $204&255;
    $206 = $205 | -32;
    HEAP8[$fill$i>>0] = $206;
    $207 = $168 >>> 6;
    $208 = $207 & 63;
    $209 = $208&255;
    $210 = ((($fill$i)) + 1|0);
    $211 = $209 | -128;
    HEAP8[$210>>0] = $211;
    $212 = $168 & 63;
    $213 = $212&255;
    $214 = ((($fill$i)) + 2|0);
    $215 = $213 | -128;
    HEAP8[$214>>0] = $215;
    $len$0$i$i = 3;
    break;
   } else {
    $216 = $168 >>> 18;
    $217 = $216&255;
    $218 = $217 | -16;
    HEAP8[$fill$i>>0] = $218;
    $219 = $168 >>> 12;
    $220 = $219 & 63;
    $221 = $220&255;
    $222 = ((($fill$i)) + 1|0);
    $223 = $221 | -128;
    HEAP8[$222>>0] = $223;
    $224 = $168 >>> 6;
    $225 = $224 & 63;
    $226 = $225&255;
    $227 = ((($fill$i)) + 2|0);
    $228 = $226 | -128;
    HEAP8[$227>>0] = $228;
    $229 = $168 & 63;
    $230 = $229&255;
    $231 = ((($fill$i)) + 3|0);
    $232 = $230 | -128;
    HEAP8[$231>>0] = $232;
    $len$0$i$i = 4;
    break;
   }
  }
 } while(0);
 $175 = ((($0)) + 28|0);
 $177 = ((($0)) + 32|0);
 $iter$sroa$0$0$i = 0;
 while(1) {
  $173 = ($iter$sroa$0$0$i>>>0)<($_15$sroa$0$0$i>>>0);
  $174 = HEAP32[$175>>2]|0;
  $176 = HEAP32[$177>>2]|0;
  if (!($173)) {
   break;
  }
  $178 = (($iter$sroa$0$0$i) + 1)|0;
  $179 = ((($176)) + 12|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (FUNCTION_TABLE_iiii[$180 & 511]($174,$fill$i,$len$0$i$i)|0);
  $not$switch4$i2$i = ($181<<24>>24)==(0);
  if ($not$switch4$i2$i) {
   $iter$sroa$0$0$i = $178;
  } else {
   label = 60;
   break;
  }
 }
 if ((label|0) == 60) {
  $_0$sroa$0$1 = 1;
  STACKTOP = sp;return ($_0$sroa$0$1|0);
 }
 $182 = ((($176)) + 12|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = (FUNCTION_TABLE_iiii[$183 & 511]($174,$4,$5)|0);
 $not$switch4$i8$i = ($184<<24>>24)==(0);
 if ($not$switch4$i8$i) {
  $iter2$sroa$0$0$i = 0;
 } else {
  $_0$sroa$0$1 = 1;
  STACKTOP = sp;return ($_0$sroa$0$1|0);
 }
 while(1) {
  $185 = ($iter2$sroa$0$0$i>>>0)<($_15$sroa$6$0$i>>>0);
  if (!($185)) {
   label = 64;
   break;
  }
  $186 = (($iter2$sroa$0$0$i) + 1)|0;
  $187 = HEAP32[$175>>2]|0;
  $188 = HEAP32[$177>>2]|0;
  $189 = ((($188)) + 12|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = (FUNCTION_TABLE_iiii[$190 & 511]($187,$fill$i,$len$0$i$i)|0);
  $not$switch4$i$i = ($191<<24>>24)==(0);
  if ($not$switch4$i$i) {
   $iter2$sroa$0$0$i = $186;
  } else {
   label = 65;
   break;
  }
 }
 if ((label|0) == 64) {
  $_0$sroa$0$1 = 0;
  STACKTOP = sp;return ($_0$sroa$0$1|0);
 }
 else if ((label|0) == 65) {
  $_0$sroa$0$1 = 1;
  STACKTOP = sp;return ($_0$sroa$0$1|0);
 }
 return (0)|0;
}
function __ZN4core9panicking5panic17hee9f4f8d26a91787E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_17 = 0, $_6 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_17 = sp + 32|0;
 $_10 = sp + 24|0;
 $_6 = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$_10>>2] = $1;
 $10 = ((($_10)) + 4|0);
 HEAP32[$10>>2] = $3;
 HEAP32[$_6>>2] = $_10;
 $11 = ((($_6)) + 4|0);
 HEAP32[$11>>2] = 1;
 $_6$sroa$0$0$$sroa_idx$i = ((($_6)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $12 = ((($_6)) + 16|0);
 HEAP32[$12>>2] = 23968;
 $13 = ((($_6)) + 20|0);
 HEAP32[$13>>2] = 0;
 HEAP32[$_17>>2] = $5;
 $14 = ((($_17)) + 4|0);
 HEAP32[$14>>2] = $7;
 $15 = ((($_17)) + 8|0);
 HEAP32[$15>>2] = $9;
 __ZN4core9panicking9panic_fmt17hbeea8425e52b5ca1E($_6,$_17);
 // unreachable;
}
function __ZN4core5slice22slice_index_order_fail17ha914aac85326e558E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_10 = 0, $_5 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $end = 0, $index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_10 = sp + 24|0;
 $_5 = sp;
 $end = sp + 44|0;
 $index = sp + 40|0;
 HEAP32[$index>>2] = $0;
 HEAP32[$end>>2] = $1;
 $2 = $index;
 $3 = $end;
 HEAP32[$_10>>2] = $2;
 $4 = ((($_10)) + 4|0);
 HEAP32[$4>>2] = (227);
 $5 = ((($_10)) + 8|0);
 HEAP32[$5>>2] = $3;
 $6 = ((($_10)) + 12|0);
 HEAP32[$6>>2] = (227);
 HEAP32[$_5>>2] = 5668;
 $7 = ((($_5)) + 4|0);
 HEAP32[$7>>2] = 2;
 $_6$sroa$0$0$$sroa_idx$i = ((($_5)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $8 = ((($_5)) + 16|0);
 HEAP32[$8>>2] = $_10;
 $9 = ((($_5)) + 20|0);
 HEAP32[$9>>2] = 2;
 __ZN4core9panicking9panic_fmt17hbeea8425e52b5ca1E($_5,5684);
 // unreachable;
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_u64_GT_3fmt17h974573b19c7c9934E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf31 = 0, $curr$0 = 0, $curr$1 = 0, $curr$2 = 0, $curr$3 = 0;
 var $n$2$off0 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf31 = sp;
 $2 = $0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(0);
 $9 = ($4>>>0)>(9999);
 $10 = ($7|0)==(0);
 $11 = $10 & $9;
 $12 = $8 | $11;
 if ($12) {
  $13 = $4;$14 = $7;$curr$0 = 39;
  while(1) {
   $15 = (___uremdi3(($13|0),($14|0),10000,0)|0);
   $16 = tempRet0;
   $17 = (___udivdi3(($13|0),($14|0),10000,0)|0);
   $18 = tempRet0;
   $19 = (($15>>>0) / 100)&-1;
   $20 = $19 << 1;
   $21 = (($15>>>0) % 100)&-1;
   $22 = $21 << 1;
   $23 = (($curr$0) + -4)|0;
   $24 = (20664 + ($20)|0);
   $25 = (($buf31) + ($23)|0);
   $26 = HEAPU8[$24>>0]|(HEAPU8[$24+1>>0]<<8);
   HEAP8[$25>>0]=$26&255;HEAP8[$25+1>>0]=$26>>8;
   $27 = (20664 + ($22)|0);
   $28 = (($curr$0) + -2)|0;
   $29 = (($buf31) + ($28)|0);
   $30 = HEAPU8[$27>>0]|(HEAPU8[$27+1>>0]<<8);
   HEAP8[$29>>0]=$30&255;HEAP8[$29+1>>0]=$30>>8;
   $31 = ($14>>>0)>(0);
   $32 = ($13>>>0)>(99999999);
   $33 = ($14|0)==(0);
   $34 = $33 & $32;
   $35 = $31 | $34;
   if ($35) {
    $13 = $17;$14 = $18;$curr$0 = $23;
   } else {
    break;
   }
  }
  $curr$1 = $23;$n$2$off0 = $17;
 } else {
  $curr$1 = 39;$n$2$off0 = $4;
 }
 $36 = ($n$2$off0|0)>(99);
 if ($36) {
  $37 = (($n$2$off0>>>0) % 100)&-1;
  $38 = $37 << 1;
  $39 = (($n$2$off0>>>0) / 100)&-1;
  $40 = (($curr$1) + -2)|0;
  $41 = (20664 + ($38)|0);
  $42 = (($buf31) + ($40)|0);
  $43 = HEAPU8[$41>>0]|(HEAPU8[$41+1>>0]<<8);
  HEAP8[$42>>0]=$43&255;HEAP8[$42+1>>0]=$43>>8;
  $curr$2 = $40;$n1$0 = $39;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2$off0;
 }
 $44 = ($n1$0|0)<(10);
 if ($44) {
  $45 = (($curr$2) + -1)|0;
  $46 = $n1$0&255;
  $47 = (($buf31) + ($45)|0);
  $48 = (($46) + 48)<<24>>24;
  HEAP8[$47>>0] = $48;
  $curr$3 = $45;
  $54 = (($buf31) + ($curr$3)|0);
  $55 = (39 - ($curr$3))|0;
  $56 = (__ZN4core3fmt9Formatter12pad_integral17hdf67f97d6bf4137cE($1,1,24540,0,$54,$55)|0);
  STACKTOP = sp;return ($56|0);
 } else {
  $49 = $n1$0 << 1;
  $50 = (($curr$2) + -2)|0;
  $51 = (20664 + ($49)|0);
  $52 = (($buf31) + ($50)|0);
  $53 = HEAPU8[$51>>0]|(HEAPU8[$51+1>>0]<<8);
  HEAP8[$52>>0]=$53&255;HEAP8[$52+1>>0]=$53>>8;
  $curr$3 = $50;
  $54 = (($buf31) + ($curr$3)|0);
  $55 = (39 - ($curr$3))|0;
  $56 = (__ZN4core3fmt9Formatter12pad_integral17hdf67f97d6bf4137cE($1,1,24540,0,$54,$55)|0);
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function __ZN4core3fmt9Formatter3pad17h365f7bd5560e0c90E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast$i$i$i$i = 0, $$cast$i$i21$i$i = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$sroa$0$0 = 0, $_15$sroa$0$0$i = 0, $_15$sroa$6$0$i = 0;
 var $_17$sroa$0$0 = 0, $align$0$off0$i = 0, $align$0$off0$i$clear = 0, $cond$i = 0, $cont_bytes$0$lcssa$i = 0, $cont_bytes$0$lcssa$i31 = 0, $cont_bytes$024$i = 0, $cont_bytes$024$i32 = 0, $extract$t$i = 0, $fill$i = 0, $iter$sroa$0$0$i = 0, $iter2$sroa$0$0$i = 0, $len$0$i$i = 0, $n$020$i$i = 0, $not$$i$i = 0, $not$switch4$i$i = 0, $not$switch4$i2$i = 0, $not$switch4$i8$i = 0, $or$cond = 0, $or$cond$i$i = 0;
 var $s1$sroa$10$0 = 0, $s1$sroa$10$091 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $fill$i = sp;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 $$phi$trans$insert = ((($0)) + 20|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $switch = ($$pre|0)==(1);
 if ($5) {
  if ($switch) {
   label = 6;
  } else {
   $s1$sroa$10$091 = $2;
  }
 } else {
  if ($switch) {
   label = 6;
  } else {
   $6 = ((($0)) + 28|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 32|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($9)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (FUNCTION_TABLE_iiii[$11 & 511]($7,$1,$2)|0);
   $_0$sroa$0$0 = $12;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
  }
 }
 if ((label|0) == 6) {
  $13 = ((($0)) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($1) + ($2)|0);
  $16 = ($14|0)==(0);
  $17 = ($2|0)==(0);
  $or$cond = $16 | $17;
  L8: do {
   if ($or$cond) {
    $s1$sroa$10$0 = 0;
   } else {
    $18 = $1;
    $$cast$i$i21$i$i = $1;$20 = $18;$_17$sroa$0$0 = 0;$n$020$i$i = $14;
    while(1) {
     $25 = ((($$cast$i$i21$i$i)) + 1|0);
     $26 = HEAP8[$$cast$i$i21$i$i>>0]|0;
     $27 = ($26<<24>>24)>(-1);
     $28 = $25;
     if ($27) {
      $22 = $28;
     } else {
      $29 = ($25|0)==($15|0);
      $30 = ((($$cast$i$i21$i$i)) + 2|0);
      $31 = $30;
      $32 = $29 ? $28 : $31;
      $33 = $29 ? $15 : $30;
      $34 = ($26&255)>(223);
      if ($34) {
       $35 = ($33|0)==($15|0);
       $36 = ((($33)) + 1|0);
       $37 = $36;
       $38 = $35 ? $32 : $37;
       $39 = $35 ? $15 : $36;
       $40 = ($26&255)>(239);
       if ($40) {
        $41 = ($39|0)==($15|0);
        $42 = ((($39)) + 1|0);
        $43 = $42;
        $44 = $41 ? $38 : $43;
        $22 = $44;
       } else {
        $22 = $38;
       }
      } else {
       $22 = $32;
      }
     }
     $45 = ($n$020$i$i|0)==(0);
     if ($45) {
      break;
     }
     $19 = (($_17$sroa$0$0) - ($20))|0;
     $21 = (($19) + ($22))|0;
     $23 = (($n$020$i$i) + -1)|0;
     $$cast$i$i$i$i = $22;
     $24 = ($$cast$i$i$i$i|0)==($15|0);
     if ($24) {
      $s1$sroa$10$0 = $2;
      break L8;
     } else {
      $$cast$i$i21$i$i = $$cast$i$i$i$i;$20 = $22;$_17$sroa$0$0 = $21;$n$020$i$i = $23;
     }
    }
    $46 = ($_17$sroa$0$0|0)==(0);
    $47 = ($_17$sroa$0$0|0)==($2|0);
    $or$cond$i$i = $46 | $47;
    if ($or$cond$i$i) {
     $s1$sroa$10$0 = $_17$sroa$0$0;
    } else {
     $not$$i$i = ($_17$sroa$0$0>>>0)<($2>>>0);
     if (!($not$$i$i)) {
      __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($1,$2,0,$_17$sroa$0$0);
      // unreachable;
     }
     $48 = (($1) + ($_17$sroa$0$0)|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = ($49<<24>>24)>(-65);
     if ($50) {
      $s1$sroa$10$0 = $_17$sroa$0$0;
     } else {
      __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($1,$2,0,$_17$sroa$0$0);
      // unreachable;
     }
    }
   }
  } while(0);
  if ($5) {
   $s1$sroa$10$091 = $s1$sroa$10$0;
  } else {
   $51 = ((($0)) + 28|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($0)) + 32|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($54)) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (FUNCTION_TABLE_iiii[$56 & 511]($52,$1,$s1$sroa$10$0)|0);
   $_0$sroa$0$0 = $57;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
  }
 }
 $65 = ((($0)) + 16|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($1) + ($s1$sroa$10$091)|0);
 $68 = ($s1$sroa$10$091|0)==(0);
 if ($68) {
  $cont_bytes$0$lcssa$i31 = 0;
 } else {
  $70 = $1;$cont_bytes$024$i32 = 0;
  while(1) {
   $69 = ((($70)) + 1|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71 & -64;
   $73 = ($72<<24>>24)==(-128);
   $74 = $73&1;
   $75 = (($74) + ($cont_bytes$024$i32))|0;
   $76 = ($69|0)==($67|0);
   if ($76) {
    $cont_bytes$0$lcssa$i31 = $75;
    break;
   } else {
    $70 = $69;$cont_bytes$024$i32 = $75;
   }
  }
 }
 $77 = (($s1$sroa$10$091) - ($cont_bytes$0$lcssa$i31))|0;
 $78 = ($77>>>0)<($66>>>0);
 if (!($78)) {
  $58 = ((($0)) + 28|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($0)) + 32|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (FUNCTION_TABLE_iiii[$63 & 511]($59,$1,$s1$sroa$10$091)|0);
  $_0$sroa$0$0 = $64;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 if ($68) {
  $cont_bytes$0$lcssa$i = 0;
 } else {
  $80 = $1;$cont_bytes$024$i = 0;
  while(1) {
   $79 = ((($80)) + 1|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $81 & -64;
   $83 = ($82<<24>>24)==(-128);
   $84 = $83&1;
   $85 = (($84) + ($cont_bytes$024$i))|0;
   $86 = ($79|0)==($67|0);
   if ($86) {
    $cont_bytes$0$lcssa$i = $85;
    break;
   } else {
    $80 = $79;$cont_bytes$024$i = $85;
   }
  }
 }
 $87 = (($cont_bytes$0$lcssa$i) - ($s1$sroa$10$091))|0;
 $88 = (($87) + ($66))|0;
 $89 = ((($0)) + 8|0);
 $extract$t$i = HEAP8[$89>>0]|0;
 $cond$i = ($extract$t$i<<24>>24)==(3);
 $align$0$off0$i = $cond$i ? 0 : $extract$t$i;
 $align$0$off0$i$clear = $align$0$off0$i & 3;
 switch ($align$0$off0$i$clear<<24>>24) {
 case 0:  {
  $_15$sroa$0$0$i = 0;$_15$sroa$6$0$i = $88;
  break;
 }
 case 3: case 1:  {
  $_15$sroa$0$0$i = $88;$_15$sroa$6$0$i = 0;
  break;
 }
 case 2:  {
  $93 = $88 >>> 1;
  $94 = (($88) + 1)|0;
  $95 = $94 >>> 1;
  $_15$sroa$0$0$i = $93;$_15$sroa$6$0$i = $95;
  break;
 }
 default: {
  // unreachable;
 }
 }
 HEAP32[$fill$i>>2] = 0;
 $90 = ((($0)) + 4|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91>>>0)<(128);
 do {
  if ($92) {
   $115 = $91&255;
   HEAP8[$fill$i>>0] = $115;
   $len$0$i$i = 1;
  } else {
   $116 = ($91>>>0)<(2048);
   if ($116) {
    $117 = $91 >>> 6;
    $118 = $117 & 31;
    $119 = $118&255;
    $120 = $119 | -64;
    HEAP8[$fill$i>>0] = $120;
    $121 = $91 & 63;
    $122 = $121&255;
    $123 = ((($fill$i)) + 1|0);
    $124 = $122 | -128;
    HEAP8[$123>>0] = $124;
    $len$0$i$i = 2;
    break;
   }
   $125 = ($91>>>0)<(65536);
   if ($125) {
    $126 = $91 >>> 12;
    $127 = $126 & 15;
    $128 = $127&255;
    $129 = $128 | -32;
    HEAP8[$fill$i>>0] = $129;
    $130 = $91 >>> 6;
    $131 = $130 & 63;
    $132 = $131&255;
    $133 = ((($fill$i)) + 1|0);
    $134 = $132 | -128;
    HEAP8[$133>>0] = $134;
    $135 = $91 & 63;
    $136 = $135&255;
    $137 = ((($fill$i)) + 2|0);
    $138 = $136 | -128;
    HEAP8[$137>>0] = $138;
    $len$0$i$i = 3;
    break;
   } else {
    $139 = $91 >>> 18;
    $140 = $139&255;
    $141 = $140 | -16;
    HEAP8[$fill$i>>0] = $141;
    $142 = $91 >>> 12;
    $143 = $142 & 63;
    $144 = $143&255;
    $145 = ((($fill$i)) + 1|0);
    $146 = $144 | -128;
    HEAP8[$145>>0] = $146;
    $147 = $91 >>> 6;
    $148 = $147 & 63;
    $149 = $148&255;
    $150 = ((($fill$i)) + 2|0);
    $151 = $149 | -128;
    HEAP8[$150>>0] = $151;
    $152 = $91 & 63;
    $153 = $152&255;
    $154 = ((($fill$i)) + 3|0);
    $155 = $153 | -128;
    HEAP8[$154>>0] = $155;
    $len$0$i$i = 4;
    break;
   }
  }
 } while(0);
 $98 = ((($0)) + 28|0);
 $100 = ((($0)) + 32|0);
 $iter$sroa$0$0$i = 0;
 while(1) {
  $96 = ($iter$sroa$0$0$i>>>0)<($_15$sroa$0$0$i>>>0);
  $97 = HEAP32[$98>>2]|0;
  $99 = HEAP32[$100>>2]|0;
  if (!($96)) {
   break;
  }
  $101 = (($iter$sroa$0$0$i) + 1)|0;
  $102 = ((($99)) + 12|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (FUNCTION_TABLE_iiii[$103 & 511]($97,$fill$i,$len$0$i$i)|0);
  $not$switch4$i2$i = ($104<<24>>24)==(0);
  if ($not$switch4$i2$i) {
   $iter$sroa$0$0$i = $101;
  } else {
   label = 33;
   break;
  }
 }
 if ((label|0) == 33) {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 $105 = ((($99)) + 12|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (FUNCTION_TABLE_iiii[$106 & 511]($97,$1,$s1$sroa$10$091)|0);
 $not$switch4$i8$i = ($107<<24>>24)==(0);
 if ($not$switch4$i8$i) {
  $iter2$sroa$0$0$i = 0;
 } else {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 while(1) {
  $108 = ($iter2$sroa$0$0$i>>>0)<($_15$sroa$6$0$i>>>0);
  if (!($108)) {
   label = 37;
   break;
  }
  $109 = (($iter2$sroa$0$0$i) + 1)|0;
  $110 = HEAP32[$98>>2]|0;
  $111 = HEAP32[$100>>2]|0;
  $112 = ((($111)) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (FUNCTION_TABLE_iiii[$113 & 511]($110,$fill$i,$len$0$i$i)|0);
  $not$switch4$i$i = ($114<<24>>24)==(0);
  if ($not$switch4$i$i) {
   $iter2$sroa$0$0$i = $109;
  } else {
   label = 38;
   break;
  }
 }
 if ((label|0) == 37) {
  $_0$sroa$0$0 = 0;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 else if ((label|0) == 38) {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 return (0)|0;
}
function __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$71 = 0, $$sink$i$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$i15$i$i = 0, $_0$0$i22$i$i = 0, $_0$0$i9$i$i = 0, $_104 = 0, $_118 = 0, $_123 = 0, $_3$sroa$6$0$ph$i = 0;
 var $_30 = 0, $_35 = 0, $_59 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_6$sroa$0$0$$sroa_idx$i20 = 0, $_6$sroa$0$0$$sroa_idx$i27 = 0, $_64 = 0, $_9$sroa$0$0 = 0, $_9$sroa$8$0 = 0, $begin = 0, $ch = 0, $char_range = 0, $char_start$0$lcssa = 0, $char_start$059 = 0, $char_start$062 = 0, $ellipsis = 0, $end = 0, $index = 0, $max$0$i63 = 0, $not$$i = 0;
 var $not$$i$i31 = 0, $not$$i22 = 0, $oob_index = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i29 = 0, $or$cond$i21 = 0, $or$cond$i2161 = 0, $phitmp$i$i = 0, $phitmp31$i$i = 0, $phitmp32$i$i = 0, $s_trunc = 0, $storemerge = 0, $storemerge19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $_123 = sp + 160|0;
 $_118 = sp + 136|0;
 $char_range = sp + 128|0;
 $_104 = sp + 120|0;
 $ch = sp + 216|0;
 $index = sp + 212|0;
 $_64 = sp + 88|0;
 $_59 = sp + 64|0;
 $_35 = sp + 40|0;
 $_30 = sp + 16|0;
 $oob_index = sp + 208|0;
 $ellipsis = sp + 8|0;
 $s_trunc = sp;
 $end = sp + 204|0;
 $begin = sp + 200|0;
 HEAP32[$begin>>2] = $2;
 HEAP32[$end>>2] = $3;
 $4 = ($1>>>0)<(257);
 L1: do {
  if ($4) {
   $_9$sroa$0$0 = 1;$_9$sroa$8$0 = $1;
  } else {
   $max$0$i63 = 256;
   while(1) {
    $not$$i$i31 = ($max$0$i63>>>0)<($1>>>0);
    if ($not$$i$i31) {
     $5 = (($0) + ($max$0$i63)|0);
     $6 = HEAP8[$5>>0]|0;
     $7 = ($6<<24>>24)>(-65);
     if ($7) {
      $_9$sroa$0$0 = 0;$_9$sroa$8$0 = $max$0$i63;
      break L1;
     }
    }
    $8 = (($max$0$i63) + -1)|0;
    $9 = ($8|0)==(0);
    $10 = ($8|0)==($1|0);
    $or$cond$i$i29 = $9 | $10;
    if ($or$cond$i$i29) {
     $_9$sroa$0$0 = 0;$_9$sroa$8$0 = $8;
     break;
    } else {
     $max$0$i63 = $8;
    }
   }
  }
 } while(0);
 $11 = $0;
 HEAP32[$s_trunc>>2] = $11;
 $12 = ((($s_trunc)) + 4|0);
 HEAP32[$12>>2] = $_9$sroa$8$0;
 $$ = $_9$sroa$0$0 ? 24540 : 20939;
 $$71 = $_9$sroa$0$0 ? 0 : 5;
 HEAP32[$ellipsis>>2] = $$;
 $13 = ((($ellipsis)) + 4|0);
 HEAP32[$13>>2] = $$71;
 $14 = ($2>>>0)>($1>>>0);
 $15 = ($3>>>0)>($1>>>0);
 $or$cond = $14 | $15;
 if ($or$cond) {
  $storemerge19 = $14 ? $2 : $3;
  HEAP32[$oob_index>>2] = $storemerge19;
  $16 = $oob_index;
  $17 = $s_trunc;
  $18 = $ellipsis;
  HEAP32[$_35>>2] = $16;
  $19 = ((($_35)) + 4|0);
  HEAP32[$19>>2] = (227);
  $20 = ((($_35)) + 8|0);
  HEAP32[$20>>2] = $17;
  $21 = ((($_35)) + 12|0);
  HEAP32[$21>>2] = (409);
  $22 = ((($_35)) + 16|0);
  HEAP32[$22>>2] = $18;
  $23 = ((($_35)) + 20|0);
  HEAP32[$23>>2] = (409);
  HEAP32[$_30>>2] = 5696;
  $24 = ((($_30)) + 4|0);
  HEAP32[$24>>2] = 3;
  $_6$sroa$0$0$$sroa_idx$i = ((($_30)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
  $25 = ((($_30)) + 16|0);
  HEAP32[$25>>2] = $_35;
  $26 = ((($_30)) + 20|0);
  HEAP32[$26>>2] = 3;
  __ZN4core9panicking9panic_fmt17hbeea8425e52b5ca1E($_30,5720);
  // unreachable;
 }
 $27 = ($2>>>0)>($3>>>0);
 if ($27) {
  $28 = $begin;
  $29 = $end;
  $30 = $s_trunc;
  $31 = $ellipsis;
  HEAP32[$_64>>2] = $28;
  $32 = ((($_64)) + 4|0);
  HEAP32[$32>>2] = (227);
  $33 = ((($_64)) + 8|0);
  HEAP32[$33>>2] = $29;
  $34 = ((($_64)) + 12|0);
  HEAP32[$34>>2] = (227);
  $35 = ((($_64)) + 16|0);
  HEAP32[$35>>2] = $30;
  $36 = ((($_64)) + 20|0);
  HEAP32[$36>>2] = (409);
  $37 = ((($_64)) + 24|0);
  HEAP32[$37>>2] = $31;
  $38 = ((($_64)) + 28|0);
  HEAP32[$38>>2] = (409);
  HEAP32[$_59>>2] = 5732;
  $39 = ((($_59)) + 4|0);
  HEAP32[$39>>2] = 4;
  $_6$sroa$0$0$$sroa_idx$i20 = ((($_59)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i20>>2] = 0;
  $40 = ((($_59)) + 16|0);
  HEAP32[$40>>2] = $_64;
  $41 = ((($_59)) + 20|0);
  HEAP32[$41>>2] = 4;
  __ZN4core9panicking9panic_fmt17hbeea8425e52b5ca1E($_59,5764);
  // unreachable;
 }
 $42 = ($2|0)==(0);
 $43 = ($2|0)==($1|0);
 $or$cond$i = $42 | $43;
 if ($or$cond$i) {
  label = 12;
 } else {
  $not$$i = ($2>>>0)<($1>>>0);
  if ($not$$i) {
   $44 = (($0) + ($2)|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)>(-65);
   if ($46) {
    label = 12;
   } else {
    $storemerge = $2;
   }
  } else {
   $storemerge = $2;
  }
 }
 if ((label|0) == 12) {
  $storemerge = $3;
 }
 HEAP32[$index>>2] = $storemerge;
 $47 = ($storemerge|0)==(0);
 $48 = ($storemerge|0)==($1|0);
 $or$cond$i2161 = $47 | $48;
 L20: do {
  if ($or$cond$i2161) {
   $char_start$0$lcssa = $storemerge;
   label = 14;
  } else {
   $char_start$062 = $storemerge;
   while(1) {
    $not$$i22 = ($char_start$062>>>0)<($1>>>0);
    if ($not$$i22) {
     $49 = (($0) + ($char_start$062)|0);
     $50 = HEAP8[$49>>0]|0;
     $51 = ($50<<24>>24)>(-65);
     if ($51) {
      break;
     }
    }
    $110 = (($char_start$062) + -1)|0;
    $111 = ($110|0)==(0);
    $112 = ($110|0)==($1|0);
    $or$cond$i21 = $111 | $112;
    if ($or$cond$i21) {
     $char_start$0$lcssa = $110;
     label = 14;
     break L20;
    } else {
     $char_start$062 = $110;
    }
   }
   $113 = $_104;$char_start$059 = $char_start$062;
  }
 } while(0);
 if ((label|0) == 14) {
  $113 = $_104;$char_start$059 = $char_start$0$lcssa;
 }
 $52 = (($0) + ($char_start$059)|0);
 $53 = (($1) - ($char_start$059))|0;
 $54 = (($52) + ($53)|0);
 $55 = ($53|0)==(0);
 if ($55) {
  $$sink$i$i = 0;
 } else {
  $58 = ((($52)) + 1|0);
  $57 = HEAP8[$52>>0]|0;
  $59 = ($57<<24>>24)>(-1);
  if ($59) {
   $56 = $57&255;
   $_3$sroa$6$0$ph$i = $56;
  } else {
   $60 = $57 & 31;
   $61 = $60&255;
   $62 = ($53|0)==(1);
   if ($62) {
    $70 = $54;$_0$0$i22$i$i = 0;
   } else {
    $63 = ((($52)) + 2|0);
    $64 = HEAP8[$58>>0]|0;
    $phitmp$i$i = $64 & 63;
    $70 = $63;$_0$0$i22$i$i = $phitmp$i$i;
   }
   $65 = $61 << 6;
   $66 = $_0$0$i22$i$i&255;
   $67 = $66 | $65;
   $68 = ($57&255)>(223);
   if ($68) {
    $69 = ($70|0)==($54|0);
    if ($69) {
     $80 = $54;$_0$0$i15$i$i = 0;
    } else {
     $71 = ((($70)) + 1|0);
     $72 = HEAP8[$70>>0]|0;
     $phitmp31$i$i = $72 & 63;
     $80 = $71;$_0$0$i15$i$i = $phitmp31$i$i;
    }
    $73 = $66 << 6;
    $74 = $_0$0$i15$i$i&255;
    $75 = $74 | $73;
    $76 = $61 << 12;
    $77 = $75 | $76;
    $78 = ($57&255)>(239);
    if ($78) {
     $79 = ($80|0)==($54|0);
     if ($79) {
      $_0$0$i9$i$i = 0;
     } else {
      $81 = HEAP8[$80>>0]|0;
      $phitmp32$i$i = $81 & 63;
      $_0$0$i9$i$i = $phitmp32$i$i;
     }
     $82 = $61 << 18;
     $83 = $82 & 1835008;
     $84 = $75 << 6;
     $85 = $_0$0$i9$i$i&255;
     $86 = $84 | $83;
     $87 = $86 | $85;
     $_3$sroa$6$0$ph$i = $87;
    } else {
     $_3$sroa$6$0$ph$i = $77;
    }
   } else {
    $_3$sroa$6$0$ph$i = $67;
   }
  }
  $88 = ((($_104)) + 4|0);
  HEAP32[$88>>2] = $_3$sroa$6$0$ph$i;
  $$sink$i$i = 1;
 }
 HEAP32[$_104>>2] = $$sink$i$i;
 $89 = (__ZN38__LT_core__option__Option_LT_T_GT__GT_6unwrap17h7fe6ae418b535b23E($_104)|0);
 HEAP32[$ch>>2] = $89;
 $90 = (__ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_8len_utf817ha035e89688d8cf37E($89)|0);
 $91 = (($90) + ($char_start$059))|0;
 HEAP32[$char_range>>2] = $char_start$059;
 $92 = ((($char_range)) + 4|0);
 HEAP32[$92>>2] = $91;
 $93 = $index;
 $94 = $ch;
 $95 = $char_range;
 $96 = $s_trunc;
 $97 = $ellipsis;
 HEAP32[$_123>>2] = $93;
 $98 = ((($_123)) + 4|0);
 HEAP32[$98>>2] = (227);
 $99 = ((($_123)) + 8|0);
 HEAP32[$99>>2] = $94;
 $100 = ((($_123)) + 12|0);
 HEAP32[$100>>2] = (410);
 $101 = ((($_123)) + 16|0);
 HEAP32[$101>>2] = $95;
 $102 = ((($_123)) + 20|0);
 HEAP32[$102>>2] = (411);
 $103 = ((($_123)) + 24|0);
 HEAP32[$103>>2] = $96;
 $104 = ((($_123)) + 28|0);
 HEAP32[$104>>2] = (409);
 $105 = ((($_123)) + 32|0);
 HEAP32[$105>>2] = $97;
 $106 = ((($_123)) + 36|0);
 HEAP32[$106>>2] = (409);
 HEAP32[$_118>>2] = 5776;
 $107 = ((($_118)) + 4|0);
 HEAP32[$107>>2] = 5;
 $_6$sroa$0$0$$sroa_idx$i27 = ((($_118)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i27>>2] = 0;
 $108 = ((($_118)) + 16|0);
 HEAP32[$108>>2] = $_123;
 $109 = ((($_118)) + 20|0);
 HEAP32[$109>>2] = 5;
 __ZN4core9panicking9panic_fmt17hbeea8425e52b5ca1E($_118,5816);
 // unreachable;
}
function __ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h6a6831a043775741E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN4core3fmt9Formatter3pad17h365f7bd5560e0c90E($1,$2,$4)|0);
 return ($5|0);
}
function __ZN38__LT_core__option__Option_LT_T_GT__GT_6unwrap17h7fe6ae418b535b23E($0) {
 $0 = $0|0;
 var $self$sroa$0$0$copyload = 0, $self$sroa$5$0$$sroa_idx5 = 0, $self$sroa$5$0$copyload = 0, $switch2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $self$sroa$0$0$copyload = HEAP32[$0>>2]|0;
 $switch2 = ($self$sroa$0$0$copyload|0)==(0);
 if ($switch2) {
  __ZN4core9panicking5panic17hee9f4f8d26a91787E(5548);
  // unreachable;
 } else {
  $self$sroa$5$0$$sroa_idx5 = ((($0)) + 4|0);
  $self$sroa$5$0$copyload = HEAP32[$self$sroa$5$0$$sroa_idx5>>2]|0;
  return ($self$sroa$5$0$copyload|0);
 }
 return (0)|0;
}
function __ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_8len_utf817ha035e89688d8cf37E($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $_0$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(128);
 if ($1) {
  $_0$0 = 1;
 } else {
  $2 = ($0>>>0)<(2048);
  if ($2) {
   $_0$0 = 2;
  } else {
   $3 = ($0>>>0)<(65536);
   $$ = $3 ? 3 : 4;
   $_0$0 = $$;
  }
 }
 return ($_0$0|0);
}
function __ZN41__LT_char_u20_as_u20_core__fmt__Debug_GT_3fmt17h0fb18a40f03ac388E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0 = 0, $_21$sroa$14$1$ph = 0, $init_state$sroa$0$0$i = 0, $init_state$sroa$9$0$i = 0, $iter$sroa$0$0 = 0, $iter$sroa$0$1$ph = 0, $not$switch4$i = 0, $not$switch4$i11 = 0, $trunc = 0;
 var $trunc$clear = 0, $trunc$i = 0, $trunc$i$clear = 0, $trunc$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iii[$7 & 511]($3,39)|0);
 $not$switch4$i = ($8<<24>>24)==(0);
 if (!($not$switch4$i)) {
  $_0$sroa$0$0 = 1;
  return ($_0$sroa$0$0|0);
 }
 $trunc = HEAP32[$0>>2]|0;
 $trunc$clear = $trunc & 2097151;
 switch ($trunc$clear|0) {
 case 9:  {
  $48 = 0;$49 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 116;
  break;
 }
 case 13:  {
  $48 = 0;$49 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 114;
  break;
 }
 case 10:  {
  $48 = 0;$49 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 110;
  break;
 }
 case 34: case 39: case 92:  {
  $48 = 0;$49 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = $trunc;
  break;
 }
 default: {
  $9 = (__ZN4core12char_private12is_printable17hba3449ff818b3fe4E($trunc)|0);
  if ($9) {
   $48 = 0;$49 = 0;$init_state$sroa$0$0$i = 1;$init_state$sroa$9$0$i = $trunc;
  } else {
   $10 = $trunc | 1;
   $11 = (Math_clz32(($10|0))|0);
   $12 = (31 - ($11))|0;
   $13 = $12 >>> 2;
   $48 = 5;$49 = $13;$init_state$sroa$0$0$i = 3;$init_state$sroa$9$0$i = $trunc;
  }
 }
 }
 $15 = $48;$22 = $49;$iter$sroa$0$0 = $init_state$sroa$0$0$i;
 L11: while(1) {
  $trunc$i = $iter$sroa$0$0&255;
  $trunc$i$clear = $trunc$i & 3;
  L13: do {
   switch ($trunc$i$clear<<24>>24) {
   case 0:  {
    label = 22;
    break L11;
    break;
   }
   case 1:  {
    $50 = $15;$51 = $22;$_21$sroa$14$1$ph = $init_state$sroa$9$0$i;$iter$sroa$0$1$ph = 0;
    break;
   }
   case 2:  {
    $50 = $15;$51 = $22;$_21$sroa$14$1$ph = 92;$iter$sroa$0$1$ph = 1;
    break;
   }
   case 3:  {
    $14 = $15&255;
    $trunc$i$i$clear = $14 & 7;
    switch ($trunc$i$i$clear<<24>>24) {
    case 0:  {
     label = 22;
     break L11;
     break;
    }
    case 1:  {
     $34 = $15 & -256;
     $50 = $34;$51 = $22;$_21$sroa$14$1$ph = 125;$iter$sroa$0$1$ph = $iter$sroa$0$0;
     break L13;
     break;
    }
    case 2:  {
     $23 = (_bitshift64Shl(($22|0),0,2)|0);
     $24 = tempRet0;
     $25 = $23 & 28;
     $26 = $init_state$sroa$9$0$i >>> $25;
     $27 = $26 & 15;
     $28 = $27&255;
     $29 = ($28&255)<(10);
     $30 = $27 | 48;
     $31 = (($27) + 87)|0;
     $$sink$i$i = $29 ? $30 : $31;
     $32 = $$sink$i$i & 127;
     $33 = ($22|0)==(0);
     if ($33) {
      $35 = $15 & -256;
      $36 = $35 | 1;
      $50 = $36;$51 = $22;$_21$sroa$14$1$ph = $32;$iter$sroa$0$1$ph = $iter$sroa$0$0;
      break L13;
     } else {
      $37 = (($22) + -1)|0;
      $50 = $15;$51 = $37;$_21$sroa$14$1$ph = $32;$iter$sroa$0$1$ph = $iter$sroa$0$0;
      break L13;
     }
     break;
    }
    case 3:  {
     $20 = $15 & -256;
     $21 = $20 | 2;
     $50 = $21;$51 = $22;$_21$sroa$14$1$ph = 123;$iter$sroa$0$1$ph = $iter$sroa$0$0;
     break L13;
     break;
    }
    case 4:  {
     $18 = $15 & -256;
     $19 = $18 | 3;
     $50 = $19;$51 = $22;$_21$sroa$14$1$ph = 117;$iter$sroa$0$1$ph = $iter$sroa$0$0;
     break L13;
     break;
    }
    case 5:  {
     $16 = $15 & -256;
     $17 = $16 | 4;
     $50 = $17;$51 = $22;$_21$sroa$14$1$ph = 92;$iter$sroa$0$1$ph = $iter$sroa$0$0;
     break L13;
     break;
    }
    default: {
     label = 20;
     break L11;
    }
    }
    break;
   }
   default: {
    label = 21;
    break L11;
   }
   }
  } while(0);
  $43 = HEAP32[$2>>2]|0;
  $44 = HEAP32[$4>>2]|0;
  $45 = ((($44)) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (FUNCTION_TABLE_iii[$46 & 511]($43,$_21$sroa$14$1$ph)|0);
  $not$switch4$i11 = ($47<<24>>24)==(0);
  if ($not$switch4$i11) {
   $15 = $50;$22 = $51;$iter$sroa$0$0 = $iter$sroa$0$1$ph;
  } else {
   $_0$sroa$0$0 = 1;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return ($_0$sroa$0$0|0);
 }
 else if ((label|0) == 20) {
  // unreachable;
 }
 else if ((label|0) == 21) {
  // unreachable;
 }
 else if ((label|0) == 22) {
  $38 = HEAP32[$2>>2]|0;
  $39 = HEAP32[$4>>2]|0;
  $40 = ((($39)) + 16|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (FUNCTION_TABLE_iii[$41 & 511]($38,39)|0);
  $_0$sroa$0$0 = $42;
  return ($_0$sroa$0$0|0);
 }
 return (0)|0;
}
function __ZN64__LT_core__ops__Range_LT_Idx_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h605826c1f62e4f2aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_11 = 0, $_6$sroa$4$0$$sroa_idx6 = 0, $_6$sroa$5$0$$sroa_idx8 = 0, $_6$sroa$611$0$$sroa_idx13 = 0, $_6$sroa$7$0$$sroa_idx15 = 0, $_7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_7$i = sp + 16|0;
 $_11 = sp;
 $2 = ((($0)) + 4|0);
 $3 = $0;
 $4 = $2;
 HEAP32[$_11>>2] = $3;
 $5 = ((($_11)) + 4|0);
 HEAP32[$5>>2] = (412);
 $6 = ((($_11)) + 8|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($_11)) + 12|0);
 HEAP32[$7>>2] = (412);
 $8 = ((($1)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$_7$i>>2] = 5452;
 $_6$sroa$4$0$$sroa_idx6 = ((($_7$i)) + 4|0);
 HEAP32[$_6$sroa$4$0$$sroa_idx6>>2] = 2;
 $_6$sroa$5$0$$sroa_idx8 = ((($_7$i)) + 8|0);
 HEAP32[$_6$sroa$5$0$$sroa_idx8>>2] = 0;
 $_6$sroa$611$0$$sroa_idx13 = ((($_7$i)) + 16|0);
 HEAP32[$_6$sroa$611$0$$sroa_idx13>>2] = $_11;
 $_6$sroa$7$0$$sroa_idx15 = ((($_7$i)) + 20|0);
 HEAP32[$_6$sroa$7$0$$sroa_idx15>>2] = 2;
 $12 = (__ZN4core3fmt5write17ha952368ac9616bb6E($9,$11,$_7$i)|0);
 STACKTOP = sp;return ($12|0);
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17haa47cdcfcc45afc9E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17h47bc70a70176906cE($0,$1)|0);
 return ($2|0);
}
function __ZN4core3fmt5write17ha952368ac9616bb6E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa_idx = 0, $$sroa_idx73 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$sroa$0$0 = 0, $_12$sroa$8$2$i = 0, $_6$sroa$0$0$$sroa_idx = 0;
 var $_7$sroa$0$0$$sroa_idx = 0, $_8$sroa$8$2$i = 0, $args$sroa$0$0$copyload = 0, $args$sroa$12$0$$sroa_idx46 = 0, $args$sroa$12$0$copyload = 0, $args$sroa$5$0$$sroa_idx31 = 0, $args$sroa$5$0$copyload = 0, $args$sroa$6$0$$sroa_idx34 = 0, $args$sroa$6$0$copyload = 0, $args$sroa$8$0$$sroa_idx38 = 0, $args$sroa$8$0$copyload = 0, $args$sroa$9$0$$sroa_idx41 = 0, $args$sroa$9$0$copyload = 0, $formatter = 0, $iter$sroa$0$0 = 0, $iter2$sroa$0$0$in = 0, $not$switch4$i = 0, $not$switch4$i60 = 0, $not$switch4$i62 = 0, $not$switch4$i64 = 0;
 var $not$switch4$i66 = 0, $or$cond = 0, $pieces$sroa$0$0 = 0, $pieces$sroa$0$1 = 0, $pieces$sroa$0$4 = 0, $switch$i = 0, $switch17tmp = 0, $switch18tmp = 0, $switchtmp = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i5$i = 0, $trunc$i5$i$clear = 0, $value$sroa$0$0$i = 0, $value$sroa$0$0$in$i = 0, $value$sroa$5$0$i = 0, $value$sroa$5$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $formatter = sp;
 $args$sroa$0$0$copyload = HEAP32[$2>>2]|0;
 $args$sroa$5$0$$sroa_idx31 = ((($2)) + 4|0);
 $args$sroa$5$0$copyload = HEAP32[$args$sroa$5$0$$sroa_idx31>>2]|0;
 $args$sroa$6$0$$sroa_idx34 = ((($2)) + 8|0);
 $args$sroa$6$0$copyload = HEAP32[$args$sroa$6$0$$sroa_idx34>>2]|0;
 $args$sroa$8$0$$sroa_idx38 = ((($2)) + 12|0);
 $args$sroa$8$0$copyload = HEAP32[$args$sroa$8$0$$sroa_idx38>>2]|0;
 $args$sroa$9$0$$sroa_idx41 = ((($2)) + 16|0);
 $args$sroa$9$0$copyload = HEAP32[$args$sroa$9$0$$sroa_idx41>>2]|0;
 $args$sroa$12$0$$sroa_idx46 = ((($2)) + 20|0);
 $args$sroa$12$0$copyload = HEAP32[$args$sroa$12$0$$sroa_idx46>>2]|0;
 $3 = (($args$sroa$9$0$copyload) + ($args$sroa$12$0$copyload<<3)|0);
 $4 = $args$sroa$9$0$copyload;
 $5 = $3;
 HEAP32[$formatter>>2] = 0;
 $6 = ((($formatter)) + 4|0);
 HEAP32[$6>>2] = 32;
 $7 = ((($formatter)) + 8|0);
 HEAP8[$7>>0] = 3;
 $_6$sroa$0$0$$sroa_idx = ((($formatter)) + 12|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx>>2] = 0;
 $_7$sroa$0$0$$sroa_idx = ((($formatter)) + 20|0);
 HEAP32[$_7$sroa$0$0$$sroa_idx>>2] = 0;
 $8 = ((($formatter)) + 28|0);
 HEAP32[$8>>2] = $0;
 $9 = ((($formatter)) + 32|0);
 HEAP32[$9>>2] = $1;
 $$sroa_idx = ((($formatter)) + 36|0);
 HEAP32[$$sroa_idx>>2] = $4;
 $$sroa_idx73 = ((($formatter)) + 40|0);
 HEAP32[$$sroa_idx73>>2] = $5;
 $10 = ((($formatter)) + 44|0);
 HEAP32[$10>>2] = $args$sroa$9$0$copyload;
 $11 = ((($formatter)) + 48|0);
 HEAP32[$11>>2] = $args$sroa$12$0$copyload;
 $12 = (($args$sroa$0$0$copyload) + ($args$sroa$5$0$copyload<<3)|0);
 $switchtmp = ($args$sroa$6$0$copyload|0)==(0|0);
 L1: do {
  if ($switchtmp) {
   $iter$sroa$0$0 = $4;$pieces$sroa$0$1 = $args$sroa$0$0$copyload;
   while(1) {
    $18 = $iter$sroa$0$0;
    $19 = ($18|0)==($3|0);
    if ($19) {
     $pieces$sroa$0$0 = $pieces$sroa$0$1;
     label = 3;
     break L1;
    }
    $20 = ((($18)) + 8|0);
    $21 = $20;
    $22 = ($pieces$sroa$0$1|0)==($12|0);
    if ($22) {
     label = 43;
     break L1;
    }
    $23 = ((($pieces$sroa$0$1)) + 8|0);
    $switch18tmp = ($iter$sroa$0$0|0)==(0);
    if ($switch18tmp) {
     $pieces$sroa$0$0 = $23;
     label = 3;
     break L1;
    }
    $24 = HEAP32[$8>>2]|0;
    $25 = HEAP32[$9>>2]|0;
    $26 = HEAP32[$pieces$sroa$0$1>>2]|0;
    $27 = ((($pieces$sroa$0$1)) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ((($25)) + 12|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (FUNCTION_TABLE_iiii[$30 & 511]($24,$26,$28)|0);
    $not$switch4$i66 = ($31<<24>>24)==(0);
    if (!($not$switch4$i66)) {
     label = 10;
     break L1;
    }
    $32 = ((($18)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$18>>2]|0;
    $35 = (FUNCTION_TABLE_iii[$33 & 511]($34,$formatter)|0);
    $not$switch4$i64 = ($35<<24>>24)==(0);
    if ($not$switch4$i64) {
     $iter$sroa$0$0 = $21;$pieces$sroa$0$1 = $23;
    } else {
     label = 10;
     break;
    }
   }
  } else {
   $13 = (($args$sroa$6$0$copyload) + (($args$sroa$8$0$copyload*36)|0)|0);
   $14 = ((($formatter)) + 12|0);
   $15 = ((($formatter)) + 20|0);
   $16 = ((($formatter)) + 36|0);
   $iter2$sroa$0$0$in = $args$sroa$6$0$copyload;$pieces$sroa$0$4 = $args$sroa$0$0$copyload;
   L9: while(1) {
    $36 = ($iter2$sroa$0$0$in|0)==($13|0);
    if ($36) {
     $pieces$sroa$0$0 = $pieces$sroa$0$4;
     label = 3;
     break L1;
    }
    $37 = ((($iter2$sroa$0$0$in)) + 36|0);
    $38 = ($pieces$sroa$0$4|0)==($12|0);
    if ($38) {
     label = 43;
     break L1;
    }
    $39 = ((($pieces$sroa$0$4)) + 8|0);
    $40 = HEAP32[$8>>2]|0;
    $41 = HEAP32[$9>>2]|0;
    $42 = HEAP32[$pieces$sroa$0$4>>2]|0;
    $43 = ((($pieces$sroa$0$4)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($41)) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (FUNCTION_TABLE_iiii[$46 & 511]($40,$42,$44)|0);
    $not$switch4$i62 = ($47<<24>>24)==(0);
    if (!($not$switch4$i62)) {
     label = 10;
     break L1;
    }
    $48 = ((($iter2$sroa$0$0$in)) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    HEAP32[$6>>2] = $49;
    $50 = ((($iter2$sroa$0$0$in)) + 12|0);
    $51 = HEAP8[$50>>0]|0;
    HEAP8[$7>>0] = $51;
    $52 = ((($iter2$sroa$0$0$in)) + 16|0);
    $53 = HEAP32[$52>>2]|0;
    HEAP32[$formatter>>2] = $53;
    $54 = ((($iter2$sroa$0$0$in)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $trunc$i$i = $55&255;
    $trunc$i$i$clear = $trunc$i$i & 3;
    switch ($trunc$i$i$clear<<24>>24) {
    case 0:  {
     $65 = ((($iter2$sroa$0$0$in)) + 32|0);
     $66 = HEAP32[$65>>2]|0;
     $79 = 0;$82 = 1;$_8$sroa$8$2$i = $66;
     break;
    }
    case 1:  {
     $67 = ((($iter2$sroa$0$0$in)) + 32|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = HEAP32[$11>>2]|0;
     $70 = ($68>>>0)<($69>>>0);
     if (!($70)) {
      label = 23;
      break L9;
     }
     $71 = HEAP32[$10>>2]|0;
     $72 = (((($71) + ($68<<3)|0)) + 4|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)==((413)|0);
     if ($74) {
      $75 = (($71) + ($68<<3)|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = HEAP32[$76>>2]|0;
      $79 = 0;$82 = 1;$_8$sroa$8$2$i = $77;
     } else {
      $79 = 0;$82 = 0;$_8$sroa$8$2$i = 0;
     }
     break;
    }
    case 2:  {
     $56 = HEAP32[$16>>2]|0;
     $57 = HEAP32[$$sroa_idx73>>2]|0;
     $58 = ($56|0)==($57|0);
     if ($58) {
      $79 = 0;$82 = 0;$_8$sroa$8$2$i = 0;
     } else {
      $59 = ((($56)) + 8|0);
      HEAP32[$16>>2] = $59;
      $60 = ((($56)) + 4|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==((413)|0);
      if ($62) {
       $63 = HEAP32[$56>>2]|0;
       $64 = HEAP32[$63>>2]|0;
       $79 = 0;$82 = 1;$_8$sroa$8$2$i = $64;
      } else {
       $79 = 0;$82 = 0;$_8$sroa$8$2$i = 0;
      }
     }
     break;
    }
    case 3:  {
     $79 = 0;$82 = 0;$_8$sroa$8$2$i = 0;
     break;
    }
    default: {
     label = 22;
     break L9;
    }
    }
    $78 = $_8$sroa$8$2$i | $79;
    $80 = $14;
    $81 = $80;
    HEAP32[$81>>2] = $82;
    $83 = (($80) + 4)|0;
    $84 = $83;
    HEAP32[$84>>2] = $78;
    $85 = ((($iter2$sroa$0$0$in)) + 20|0);
    $86 = HEAP32[$85>>2]|0;
    $trunc$i5$i = $86&255;
    $trunc$i5$i$clear = $trunc$i5$i & 3;
    switch ($trunc$i5$i$clear<<24>>24) {
    case 0:  {
     $96 = ((($iter2$sroa$0$0$in)) + 24|0);
     $97 = HEAP32[$96>>2]|0;
     $110 = 0;$113 = 1;$_12$sroa$8$2$i = $97;
     break;
    }
    case 1:  {
     $98 = ((($iter2$sroa$0$0$in)) + 24|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = HEAP32[$11>>2]|0;
     $101 = ($99>>>0)<($100>>>0);
     if (!($101)) {
      label = 33;
      break L9;
     }
     $102 = HEAP32[$10>>2]|0;
     $103 = (((($102) + ($99<<3)|0)) + 4|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==((413)|0);
     if ($105) {
      $106 = (($102) + ($99<<3)|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = HEAP32[$107>>2]|0;
      $110 = 0;$113 = 1;$_12$sroa$8$2$i = $108;
     } else {
      $110 = 0;$113 = 0;$_12$sroa$8$2$i = 0;
     }
     break;
    }
    case 2:  {
     $87 = HEAP32[$16>>2]|0;
     $88 = HEAP32[$$sroa_idx73>>2]|0;
     $89 = ($87|0)==($88|0);
     if ($89) {
      $110 = 0;$113 = 0;$_12$sroa$8$2$i = 0;
     } else {
      $90 = ((($87)) + 8|0);
      HEAP32[$16>>2] = $90;
      $91 = ((($87)) + 4|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = ($92|0)==((413)|0);
      if ($93) {
       $94 = HEAP32[$87>>2]|0;
       $95 = HEAP32[$94>>2]|0;
       $110 = 0;$113 = 1;$_12$sroa$8$2$i = $95;
      } else {
       $110 = 0;$113 = 0;$_12$sroa$8$2$i = 0;
      }
     }
     break;
    }
    case 3:  {
     $110 = 0;$113 = 0;$_12$sroa$8$2$i = 0;
     break;
    }
    default: {
     label = 32;
     break L9;
    }
    }
    $109 = $_12$sroa$8$2$i | $110;
    $111 = $15;
    $112 = $111;
    HEAP32[$112>>2] = $113;
    $114 = (($111) + 4)|0;
    $115 = $114;
    HEAP32[$115>>2] = $109;
    $116 = HEAP32[$iter2$sroa$0$0$in>>2]|0;
    $switch$i = ($116|0)==(1);
    if ($switch$i) {
     $122 = ((($iter2$sroa$0$0$in)) + 4|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = HEAP32[$11>>2]|0;
     $125 = ($123>>>0)<($124>>>0);
     if (!($125)) {
      label = 40;
      break;
     }
     $126 = HEAP32[$10>>2]|0;
     $127 = (($126) + ($123<<3)|0);
     $128 = (((($126) + ($123<<3)|0)) + 4|0);
     $value$sroa$0$0$in$i = $127;$value$sroa$5$0$in$i = $128;
    } else {
     $117 = HEAP32[$16>>2]|0;
     $118 = HEAP32[$$sroa_idx73>>2]|0;
     $119 = ($117|0)==($118|0);
     if ($119) {
      label = 37;
      break;
     }
     $120 = ((($117)) + 8|0);
     HEAP32[$16>>2] = $120;
     $121 = ((($117)) + 4|0);
     $value$sroa$0$0$in$i = $117;$value$sroa$5$0$in$i = $121;
    }
    $value$sroa$5$0$i = HEAP32[$value$sroa$5$0$in$i>>2]|0;
    $value$sroa$0$0$i = HEAP32[$value$sroa$0$0$in$i>>2]|0;
    $129 = (FUNCTION_TABLE_iii[$value$sroa$5$0$i & 511]($value$sroa$0$0$i,$formatter)|0);
    $not$switch4$i60 = ($129<<24>>24)==(0);
    if ($not$switch4$i60) {
     $iter2$sroa$0$0$in = $37;$pieces$sroa$0$4 = $39;
    } else {
     label = 10;
     break L1;
    }
   }
   if ((label|0) == 22) {
    // unreachable;
   }
   else if ((label|0) == 23) {
    __ZN4core9panicking18panic_bounds_check17h196ab917033e60b3E(5828,$68,$69);
    // unreachable;
   }
   else if ((label|0) == 32) {
    // unreachable;
   }
   else if ((label|0) == 33) {
    __ZN4core9panicking18panic_bounds_check17h196ab917033e60b3E(5828,$99,$100);
    // unreachable;
   }
   else if ((label|0) == 37) {
    __ZN4core9panicking5panic17hee9f4f8d26a91787E(5548);
    // unreachable;
   }
   else if ((label|0) == 40) {
    __ZN4core9panicking18panic_bounds_check17h196ab917033e60b3E(5840,$123,$124);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $17 = ($pieces$sroa$0$0|0)==($12|0);
  $switch17tmp = ($pieces$sroa$0$0|0)==(0|0);
  $or$cond = $17 | $switch17tmp;
  if ($or$cond) {
   label = 43;
  } else {
   $130 = HEAP32[$8>>2]|0;
   $131 = HEAP32[$9>>2]|0;
   $132 = HEAP32[$pieces$sroa$0$0>>2]|0;
   $133 = ((($pieces$sroa$0$0)) + 4|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ((($131)) + 12|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (FUNCTION_TABLE_iiii[$136 & 511]($130,$132,$134)|0);
   $not$switch4$i = ($137<<24>>24)==(0);
   if ($not$switch4$i) {
    label = 43;
   } else {
    label = 10;
   }
  }
 }
 if ((label|0) == 10) {
  $_0$sroa$0$0 = 1;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 else if ((label|0) == 43) {
  $_0$sroa$0$0 = 0;
  STACKTOP = sp;return ($_0$sroa$0$0|0);
 }
 return (0)|0;
}
function __ZN4core3fmt10ArgumentV110show_usize17ha55ad8a12b4eb237E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17h47bc70a70176906cE($0,$1)|0);
 return ($2|0);
}
function __ZN4core12char_private12is_printable17hba3449ff818b3fe4E($0) {
 $0 = $0|0;
 var $$off = 0, $$off10 = 0, $$off6 = 0, $$off8 = 0, $$off9 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$shrunk = 0, $_0$0$sroa$speculated$i$i$i = 0, $_0$0$sroa$speculated$i$i$i26 = 0, $cond$i = 0, $cond$i29 = 0, $iter$sroa$0$0$in$i = 0, $iter$sroa$0$0$in$i17 = 0, $iter2$sroa$0$0$in$i = 0, $iter2$sroa$0$0$in$i23 = 0, $iter2$sroa$6$0$i = 0;
 var $iter2$sroa$6$0$i24 = 0, $not$ = 0, $or$cond = 0, $or$cond37 = 0, $or$cond39 = 0, $or$cond41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&65535;
 $2 = ($0>>>0)<(65536);
 if ($2) {
  $iter$sroa$0$0$in$i = 6568;
  while(1) {
   $3 = ($iter$sroa$0$0$in$i|0)==((7174)|0);
   if ($3) {
    break;
   }
   $4 = HEAP16[$iter$sroa$0$0$in$i>>1]|0;
   $5 = ($4<<16>>16)==($1<<16>>16);
   if ($5) {
    $_0$0$shrunk = 0;
    label = 22;
    break;
   }
   $6 = ((($iter$sroa$0$0$in$i)) + 2|0);
   $7 = ($4&65535)>($1&65535);
   if ($7) {
    break;
   } else {
    $iter$sroa$0$0$in$i = $6;
   }
  }
  if ((label|0) == 22) {
   return ($_0$0$shrunk|0);
  }
  $8 = $0 & 65535;
  $iter2$sroa$0$0$in$i = 7174;$iter2$sroa$6$0$i = 300;
  while(1) {
   $9 = ($iter2$sroa$6$0$i|0)==(0);
   if ($9) {
    $_0$0$shrunk = 1;
    label = 22;
    break;
   }
   $10 = ($iter2$sroa$6$0$i>>>0)>(2);
   $_0$0$sroa$speculated$i$i$i = $10 ? 2 : $iter2$sroa$6$0$i;
   $11 = (($iter2$sroa$0$0$in$i) + ($_0$0$sroa$speculated$i$i$i<<1)|0);
   $12 = (($iter2$sroa$6$0$i) - ($_0$0$sroa$speculated$i$i$i))|0;
   $cond$i = ($_0$0$sroa$speculated$i$i$i|0)==(1);
   if ($cond$i) {
    label = 10;
    break;
   }
   $13 = HEAP16[$iter2$sroa$0$0$in$i>>1]|0;
   $14 = $13&65535;
   $15 = (($8) - ($14))|0;
   $16 = ($15|0)>(-1);
   if (!($16)) {
    $_0$0$shrunk = 1;
    label = 22;
    break;
   }
   $17 = ((($iter2$sroa$0$0$in$i)) + 2|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = $18&65535;
   $20 = ($15|0)<($19|0);
   if ($20) {
    $_0$0$shrunk = 0;
    label = 22;
    break;
   } else {
    $iter2$sroa$0$0$in$i = $11;$iter2$sroa$6$0$i = $12;
   }
  }
  if ((label|0) == 10) {
   __ZN4core9panicking18panic_bounds_check17h196ab917033e60b3E(5852,1,1);
   // unreachable;
  }
  else if ((label|0) == 22) {
   return ($_0$0$shrunk|0);
  }
 }
 $21 = ($0>>>0)<(131072);
 if ($21) {
  $iter$sroa$0$0$in$i17 = 7774;
 } else {
  $$off = (($0) + -173783)|0;
  $40 = ($$off>>>0)<(41);
  $$off6 = (($0) + -177973)|0;
  $41 = ($$off6>>>0)<(11);
  $or$cond = $40 | $41;
  $42 = $0 & -2;
  $43 = ($42|0)==(178206);
  $or$cond37 = $43 | $or$cond;
  $$off8 = (($0) + -183970)|0;
  $44 = ($$off8>>>0)<(10590);
  $or$cond39 = $44 | $or$cond37;
  $$off9 = (($0) + -195102)|0;
  $45 = ($$off9>>>0)<(722658);
  $or$cond41 = $45 | $or$cond39;
  if ($or$cond41) {
   $_0$0$shrunk = 0;
   return ($_0$0$shrunk|0);
  } else {
   $$off10 = (($0) + -918000)|0;
   $not$ = ($$off10>>>0)>(196111);
   return ($not$|0);
  }
 }
 while(1) {
  $22 = ($iter$sroa$0$0$in$i17|0)==((8066)|0);
  if ($22) {
   break;
  }
  $23 = HEAP16[$iter$sroa$0$0$in$i17>>1]|0;
  $24 = ($23<<16>>16)==($1<<16>>16);
  if ($24) {
   $_0$0$shrunk = 0;
   label = 22;
   break;
  }
  $25 = ((($iter$sroa$0$0$in$i17)) + 2|0);
  $26 = ($23&65535)>($1&65535);
  if ($26) {
   break;
  } else {
   $iter$sroa$0$0$in$i17 = $25;
  }
 }
 if ((label|0) == 22) {
  return ($_0$0$shrunk|0);
 }
 $27 = $0 & 65535;
 $iter2$sroa$0$0$in$i23 = 8066;$iter2$sroa$6$0$i24 = 302;
 while(1) {
  $28 = ($iter2$sroa$6$0$i24|0)==(0);
  if ($28) {
   $_0$0$shrunk = 1;
   label = 22;
   break;
  }
  $29 = ($iter2$sroa$6$0$i24>>>0)>(2);
  $_0$0$sroa$speculated$i$i$i26 = $29 ? 2 : $iter2$sroa$6$0$i24;
  $30 = (($iter2$sroa$0$0$in$i23) + ($_0$0$sroa$speculated$i$i$i26<<1)|0);
  $31 = (($iter2$sroa$6$0$i24) - ($_0$0$sroa$speculated$i$i$i26))|0;
  $cond$i29 = ($_0$0$sroa$speculated$i$i$i26|0)==(1);
  if ($cond$i29) {
   label = 20;
   break;
  }
  $32 = HEAP16[$iter2$sroa$0$0$in$i23>>1]|0;
  $33 = $32&65535;
  $34 = (($27) - ($33))|0;
  $35 = ($34|0)>(-1);
  if (!($35)) {
   $_0$0$shrunk = 1;
   label = 22;
   break;
  }
  $36 = ((($iter2$sroa$0$0$in$i23)) + 2|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37&65535;
  $39 = ($34|0)<($38|0);
  if ($39) {
   $_0$0$shrunk = 0;
   label = 22;
   break;
  } else {
   $iter2$sroa$0$0$in$i23 = $30;$iter2$sroa$6$0$i24 = $31;
  }
 }
 if ((label|0) == 20) {
  __ZN4core9panicking18panic_bounds_check17h196ab917033e60b3E(5852,1,1);
  // unreachable;
 }
 else if ((label|0) == 22) {
  return ($_0$0$shrunk|0);
 }
 return (0)|0;
}
function __ZN4core3fmt8builders10DebugTuple5field17hd64ae47e9d46842fE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i$i = 0, $$16$i$i = 0, $$17$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0;
 var $_0$sroa$0$0$i$i = 0, $_15$i$i = 0, $_20$i$i = 0, $_34$sroa$4$0$$sroa_idx20$i$i = 0, $_34$sroa$5$0$$sroa_idx22$i$i = 0, $_34$sroa$625$0$$sroa_idx27$i$i = 0, $_34$sroa$7$0$$sroa_idx29$i$i = 0, $_39$i$i = 0, $_7$i$i$i = 0, $_7$sroa$0$0$$sroa_idx = 0, $_7$sroa$0$0$copyload = 0, $_8$sroa$0$0$$sroa_idx$i$i$i = 0, $_8$sroa$4$0$$sroa_idx2$i$i$i = 0, $prefix$i$i = 0, $space$i$i = 0, $switch3$i = 0, $value = 0, $writer$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $_7$i$i$i = sp + 96|0;
 $_39$i$i = sp + 72|0;
 $_20$i$i = sp + 56|0;
 $_15$i$i = sp + 32|0;
 $writer$i$i = sp + 24|0;
 $space$i$i = sp + 16|0;
 $prefix$i$i = sp + 8|0;
 $value = sp;
 HEAP32[$value>>2] = $1;
 $3 = ((($value)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_7$sroa$0$0$$sroa_idx = ((($0)) + 4|0);
 $_7$sroa$0$0$copyload = HEAP8[$_7$sroa$0$0$$sroa_idx>>0]|0;
 $4 = $value;
 $switch3$i = ($_7$sroa$0$0$copyload<<24>>24)==(0);
 $5 = ((($0)) + 8|0);
 if (!($switch3$i)) {
  $_0$sroa$0$0$i = 1;
  HEAP8[$_7$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
  $37 = HEAP32[$5>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[$5>>2] = $38;
  STACKTOP = sp;return ($0|0);
 }
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 $8 = $7&1;
 $$$i$i = $8 ^ 1;
 $$16$i$i = $7 ? 24540 : 21271;
 $$17$i$i = $7 ? 15902 : 15911;
 HEAP32[$prefix$i$i>>2] = $$17$i$i;
 $9 = ((($prefix$i$i)) + 4|0);
 HEAP32[$9>>2] = 1;
 HEAP32[$space$i$i>>2] = $$16$i$i;
 $10 = ((($space$i$i)) + 4|0);
 HEAP32[$10>>2] = $$$i$i;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 4;
 $14 = ($13|0)==(0);
 if ($14) {
  $25 = $prefix$i$i;
  $26 = $space$i$i;
  HEAP32[$_39$i$i>>2] = $25;
  $27 = ((($_39$i$i)) + 4|0);
  HEAP32[$27>>2] = (409);
  $28 = ((($_39$i$i)) + 8|0);
  HEAP32[$28>>2] = $26;
  $29 = ((($_39$i$i)) + 12|0);
  HEAP32[$29>>2] = (409);
  $30 = ((($_39$i$i)) + 16|0);
  HEAP32[$30>>2] = $4;
  $31 = ((($_39$i$i)) + 20|0);
  HEAP32[$31>>2] = (414);
  $32 = ((($11)) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($11)) + 32|0);
  $35 = HEAP32[$34>>2]|0;
  HEAP32[$_7$i$i$i>>2] = 5952;
  $_34$sroa$4$0$$sroa_idx20$i$i = ((($_7$i$i$i)) + 4|0);
  HEAP32[$_34$sroa$4$0$$sroa_idx20$i$i>>2] = 3;
  $_34$sroa$5$0$$sroa_idx22$i$i = ((($_7$i$i$i)) + 8|0);
  HEAP32[$_34$sroa$5$0$$sroa_idx22$i$i>>2] = 0;
  $_34$sroa$625$0$$sroa_idx27$i$i = ((($_7$i$i$i)) + 16|0);
  HEAP32[$_34$sroa$625$0$$sroa_idx27$i$i>>2] = $_39$i$i;
  $_34$sroa$7$0$$sroa_idx29$i$i = ((($_7$i$i$i)) + 20|0);
  HEAP32[$_34$sroa$7$0$$sroa_idx29$i$i>>2] = 3;
  $36 = (__ZN4core3fmt5write17ha952368ac9616bb6E($33,$35,$_7$i$i$i)|0);
  $_0$sroa$0$0$i$i = $36;
 } else {
  $15 = $11;
  HEAP32[$writer$i$i>>2] = $15;
  $16 = ((($writer$i$i)) + 4|0);
  HEAP8[$16>>0] = 0;
  $17 = $prefix$i$i;
  HEAP32[$_20$i$i>>2] = $17;
  $18 = ((($_20$i$i)) + 4|0);
  HEAP32[$18>>2] = (409);
  $19 = ((($_20$i$i)) + 8|0);
  HEAP32[$19>>2] = $4;
  $20 = ((($_20$i$i)) + 12|0);
  HEAP32[$20>>2] = (414);
  HEAP32[$_15$i$i>>2] = 5864;
  $21 = ((($_15$i$i)) + 4|0);
  HEAP32[$21>>2] = 2;
  $_8$sroa$0$0$$sroa_idx$i$i$i = ((($_15$i$i)) + 8|0);
  HEAP32[$_8$sroa$0$0$$sroa_idx$i$i$i>>2] = 5880;
  $_8$sroa$4$0$$sroa_idx2$i$i$i = ((($_15$i$i)) + 12|0);
  HEAP32[$_8$sroa$4$0$$sroa_idx2$i$i$i>>2] = 2;
  $22 = ((($_15$i$i)) + 16|0);
  HEAP32[$22>>2] = $_20$i$i;
  $23 = ((($_15$i$i)) + 20|0);
  HEAP32[$23>>2] = 2;
  $24 = (__ZN4core3fmt5write17ha952368ac9616bb6E($writer$i$i,2216,$_15$i$i)|0);
  $_0$sroa$0$0$i$i = $24;
 }
 $_0$sroa$0$0$i = $_0$sroa$0$0$i$i;
 HEAP8[$_7$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
 $37 = HEAP32[$5>>2]|0;
 $38 = (($37) + 1)|0;
 HEAP32[$5>>2] = $38;
 STACKTOP = sp;return ($0|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h0541f07e46fa4d37E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 511]($2,$1)|0);
 return ($7|0);
}
function __ZN4drop17h7cc369624c73b9b7E($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h37b44e562102531bE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i$i$i = 0, $$cast$i$i$i$i$i = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $9 = 0, $_0$0$i15$i$i$i$i$i$i$i = 0, $_0$0$i22$i$i$i$i$i$i$i = 0, $_0$0$i9$i$i$i$i$i$i$i = 0, $_0$sroa$0$0 = 0, $_3$sroa$0$0$i$i$i = 0, $_3$sroa$7$0$i$i$i = 0, $_3$sroa$7$1$i$i$i = 0, $_5$sroa$4$0$ph$i$i$i$i$i = 0, $_7$sroa$6$0$i = 0, $_7$sroa$6$1$i = 0, $not$$i$i = 0, $not$$i$i$i = 0, $not$$i$i36 = 0, $not$switch4$i = 0, $not$switch4$i33 = 0, $or$cond$i$i35 = 0, $phitmp$i$i$i$i$i$i$i = 0;
 var $phitmp31$i$i$i$i$i$i$i = 0, $phitmp32$i$i$i$i$i$i$i = 0, $s$sroa$0$055 = 0, $s$sroa$10$054 = 0, $split$0 = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $_0$sroa$0$0 = 0;
  return ($_0$sroa$0$0|0);
 }
 $4 = ((($0)) + 4|0);
 $s$sroa$0$055 = $1;$s$sroa$10$054 = $2;
 L4: while(1) {
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if (!($6)) {
   $7 = HEAP32[$0>>2]|0;
   $8 = ((($7)) + 28|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($7)) + 32|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (FUNCTION_TABLE_iiii[$13 & 511]($9,21272,4)|0);
   $not$switch4$i = ($14<<24>>24)==(0);
   if (!($not$switch4$i)) {
    $_0$sroa$0$0 = 1;
    label = 5;
    break;
   }
  }
  $15 = (($s$sroa$0$055) + ($s$sroa$10$054)|0);
  $16 = $s$sroa$0$055;
  $17 = $16;$_3$sroa$7$0$i$i$i = 0;$_7$sroa$6$0$i = 0;
  L9: while(1) {
   $$cast$i$i$i$i$i = $17;
   $18 = ($$cast$i$i$i$i$i|0)==($15|0);
   if ($18) {
    $78 = $17;$_3$sroa$0$0$i$i$i = 2;$_3$sroa$7$1$i$i$i = $_3$sroa$7$0$i$i$i;$_7$sroa$6$1$i = $_7$sroa$6$0$i;
   } else {
    $21 = ((($$cast$i$i$i$i$i)) + 1|0);
    $20 = HEAP8[$$cast$i$i$i$i$i>>0]|0;
    $22 = ($20<<24>>24)>(-1);
    $23 = $21;
    if ($22) {
     $19 = $20&255;
     $58 = $23;$_5$sroa$4$0$ph$i$i$i$i$i = $19;
    } else {
     $24 = $20 & 31;
     $25 = $24&255;
     $26 = ($21|0)==($15|0);
     if ($26) {
      $35 = $15;$79 = $23;$_0$0$i22$i$i$i$i$i$i$i = 0;
     } else {
      $27 = ((($$cast$i$i$i$i$i)) + 2|0);
      $28 = HEAP8[$21>>0]|0;
      $phitmp$i$i$i$i$i$i$i = $28 & 63;
      $29 = $27;
      $35 = $27;$79 = $29;$_0$0$i22$i$i$i$i$i$i$i = $phitmp$i$i$i$i$i$i$i;
     }
     $30 = $25 << 6;
     $31 = $_0$0$i22$i$i$i$i$i$i$i&255;
     $32 = $31 | $30;
     $33 = ($20&255)>(223);
     if ($33) {
      $34 = ($35|0)==($15|0);
      if ($34) {
       $46 = $15;$80 = $79;$_0$0$i15$i$i$i$i$i$i$i = 0;
      } else {
       $36 = ((($35)) + 1|0);
       $37 = HEAP8[$35>>0]|0;
       $phitmp31$i$i$i$i$i$i$i = $37 & 63;
       $38 = $36;
       $46 = $36;$80 = $38;$_0$0$i15$i$i$i$i$i$i$i = $phitmp31$i$i$i$i$i$i$i;
      }
      $39 = $31 << 6;
      $40 = $_0$0$i15$i$i$i$i$i$i$i&255;
      $41 = $40 | $39;
      $42 = $25 << 12;
      $43 = $41 | $42;
      $44 = ($20&255)>(239);
      if ($44) {
       $45 = ($46|0)==($15|0);
       if ($45) {
        $81 = $80;$_0$0$i9$i$i$i$i$i$i$i = 0;
       } else {
        $47 = ((($46)) + 1|0);
        $48 = HEAP8[$46>>0]|0;
        $phitmp32$i$i$i$i$i$i$i = $48 & 63;
        $49 = $47;
        $81 = $49;$_0$0$i9$i$i$i$i$i$i$i = $phitmp32$i$i$i$i$i$i$i;
       }
       $50 = $25 << 18;
       $51 = $50 & 1835008;
       $52 = $41 << 6;
       $53 = $_0$0$i9$i$i$i$i$i$i$i&255;
       $54 = $52 | $51;
       $55 = $54 | $53;
       $58 = $81;$_5$sroa$4$0$ph$i$i$i$i$i = $55;
      } else {
       $58 = $80;$_5$sroa$4$0$ph$i$i$i$i$i = $43;
      }
     } else {
      $58 = $79;$_5$sroa$4$0$ph$i$i$i$i$i = $32;
     }
    }
    $56 = (($_7$sroa$6$0$i) - ($17))|0;
    $57 = (($56) + ($58))|0;
    $not$$i$i$i = ($_5$sroa$4$0$ph$i$i$i$i$i|0)!=(10);
    $$$i$i$i = $not$$i$i$i&1;
    $78 = $58;$_3$sroa$0$0$i$i$i = $$$i$i$i;$_3$sroa$7$1$i$i$i = $_7$sroa$6$0$i;$_7$sroa$6$1$i = $57;
   }
   $trunc$i$i$i = $_3$sroa$0$0$i$i$i&255;
   $trunc$i$i$i$clear = $trunc$i$i$i & 3;
   switch ($trunc$i$i$i$clear<<24>>24) {
   case 1:  {
    $17 = $78;$_3$sroa$7$0$i$i$i = $_3$sroa$7$1$i$i$i;$_7$sroa$6$0$i = $_7$sroa$6$1$i;
    break;
   }
   case 0:  {
    label = 23;
    break L9;
    break;
   }
   case 2:  {
    label = 22;
    break L9;
    break;
   }
   default: {
    label = 21;
    break L4;
   }
   }
  }
  if ((label|0) == 22) {
   label = 0;
   HEAP8[$4>>0] = 0;
   $split$0 = $s$sroa$10$054;
  }
  else if ((label|0) == 23) {
   label = 0;
   HEAP8[$4>>0] = 1;
   $59 = (($_3$sroa$7$1$i$i$i) + 1)|0;
   $split$0 = $59;
  }
  $60 = HEAP32[$0>>2]|0;
  $61 = ($split$0|0)==(0);
  $62 = ($s$sroa$10$054|0)==($split$0|0);
  $or$cond$i$i35 = $61 | $62;
  if (!($or$cond$i$i35)) {
   $not$$i$i36 = ($s$sroa$10$054>>>0)>($split$0>>>0);
   if (!($not$$i$i36)) {
    label = 27;
    break;
   }
   $63 = (($s$sroa$0$055) + ($split$0)|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = ($64<<24>>24)>(-65);
   if (!($65)) {
    label = 27;
    break;
   }
  }
  $66 = ((($60)) + 28|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ((($60)) + 32|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($69)) + 12|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (FUNCTION_TABLE_iiii[$71 & 511]($67,$s$sroa$0$055,$split$0)|0);
  $not$switch4$i33 = ($72<<24>>24)==(0);
  if (!($not$switch4$i33)) {
   $_0$sroa$0$0 = 1;
   label = 5;
   break;
  }
  if ($or$cond$i$i35) {
   $$pre$i = (($s$sroa$0$055) + ($split$0)|0);
   $$pre$phi$iZ2D = $$pre$i;
  } else {
   $not$$i$i = ($s$sroa$10$054>>>0)>($split$0>>>0);
   if (!($not$$i$i)) {
    label = 33;
    break;
   }
   $73 = (($s$sroa$0$055) + ($split$0)|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = ($74<<24>>24)>(-65);
   if ($75) {
    $$pre$phi$iZ2D = $73;
   } else {
    label = 33;
    break;
   }
  }
  $76 = (($s$sroa$10$054) - ($split$0))|0;
  $77 = ($76|0)==(0);
  if ($77) {
   $_0$sroa$0$0 = 0;
   label = 5;
   break;
  } else {
   $s$sroa$0$055 = $$pre$phi$iZ2D;$s$sroa$10$054 = $76;
  }
 }
 if ((label|0) == 5) {
  return ($_0$sroa$0$0|0);
 }
 else if ((label|0) == 21) {
  // unreachable;
 }
 else if ((label|0) == 27) {
  __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($s$sroa$0$055,$s$sroa$10$054,0,$split$0);
  // unreachable;
 }
 else if ((label|0) == 33) {
  __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($s$sroa$0$055,$s$sroa$10$054,$split$0,$s$sroa$10$054);
  // unreachable;
 }
 return (0)|0;
}
function __ZN4core3fmt5Write10write_char17h06a01587a9c79e0aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sreg$field = 0, $$sreg$field2 = 0, $$sreg$index1 = 0, $2 = 0, $3 = 0, $_12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $_12 = sp + 8|0;
 HEAP32[$_12>>2] = 0;
 __ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_11encode_utf817hb5b68bfc485c793fE_582($2,$1,$_12);
 $$sreg$field = HEAP32[$2>>2]|0;
 $$sreg$index1 = ((($2)) + 4|0);
 $$sreg$field2 = HEAP32[$$sreg$index1>>2]|0;
 $3 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h37b44e562102531bE($0,$$sreg$field,$$sreg$field2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN4core3fmt5Write9write_fmt17h40a7168063601ff2E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $_10 = 0, $_8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_10 = sp + 8|0;
 $_8 = sp;
 HEAP32[$_8>>2] = $0;
 ;HEAP32[$_10>>2]=HEAP32[$1>>2]|0;HEAP32[$_10+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10+20>>2]=HEAP32[$1+20>>2]|0;
 $2 = (__ZN4core3fmt5write17ha952368ac9616bb6E($_8,2240,$_10)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hbb59877877bc7fa5E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h37b44e562102531bE($3,$1,$2)|0);
 return ($4|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h5f120dc7ebaf285aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12$i = 0, $len$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_12$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_12$i>>2] = 0;
 $3 = ($1>>>0)<(128);
 do {
  if ($3) {
   $4 = $1&255;
   HEAP8[$_12$i>>0] = $4;
   $len$0$i = 1;
  } else {
   $5 = ($1>>>0)<(2048);
   if ($5) {
    $6 = $1 >>> 6;
    $7 = $6 & 31;
    $8 = $7&255;
    $9 = $8 | -64;
    HEAP8[$_12$i>>0] = $9;
    $10 = $1 & 63;
    $11 = $10&255;
    $12 = ((($_12$i)) + 1|0);
    $13 = $11 | -128;
    HEAP8[$12>>0] = $13;
    $len$0$i = 2;
    break;
   }
   $14 = ($1>>>0)<(65536);
   if ($14) {
    $15 = $1 >>> 12;
    $16 = $15 & 15;
    $17 = $16&255;
    $18 = $17 | -32;
    HEAP8[$_12$i>>0] = $18;
    $19 = $1 >>> 6;
    $20 = $19 & 63;
    $21 = $20&255;
    $22 = ((($_12$i)) + 1|0);
    $23 = $21 | -128;
    HEAP8[$22>>0] = $23;
    $24 = $1 & 63;
    $25 = $24&255;
    $26 = ((($_12$i)) + 2|0);
    $27 = $25 | -128;
    HEAP8[$26>>0] = $27;
    $len$0$i = 3;
    break;
   } else {
    $28 = $1 >>> 18;
    $29 = $28 & 7;
    $30 = $29&255;
    $31 = $30 | -16;
    HEAP8[$_12$i>>0] = $31;
    $32 = $1 >>> 12;
    $33 = $32 & 63;
    $34 = $33&255;
    $35 = ((($_12$i)) + 1|0);
    $36 = $34 | -128;
    HEAP8[$35>>0] = $36;
    $37 = $1 >>> 6;
    $38 = $37 & 63;
    $39 = $38&255;
    $40 = ((($_12$i)) + 2|0);
    $41 = $39 | -128;
    HEAP8[$40>>0] = $41;
    $42 = $1 & 63;
    $43 = $42&255;
    $44 = ((($_12$i)) + 3|0);
    $45 = $43 | -128;
    HEAP8[$44>>0] = $45;
    $len$0$i = 4;
    break;
   }
  }
 } while(0);
 $46 = (__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h37b44e562102531bE($2,$_12$i,$len$0$i)|0);
 STACKTOP = sp;return ($46|0);
}
function __ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h4b6e85232c40c198E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $_10$i = 0, $_8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_10$i = sp + 8|0;
 $_8$i = sp;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$_8$i>>2] = $2;
 ;HEAP32[$_10$i>>2]=HEAP32[$1>>2]|0;HEAP32[$_10$i+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_10$i+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_10$i+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_10$i+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_10$i+20>>2]=HEAP32[$1+20>>2]|0;
 $3 = (__ZN4core3fmt5write17ha952368ac9616bb6E($_8$i,2240,$_10$i)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN44__LT_char_u20_as_u20_core__char__CharExt_GT_11encode_utf817hb5b68bfc485c793fE_582($retVal,$0,$1) {
 $retVal = $retVal|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $len$0 = 0, $retVal$index1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<(128);
 do {
  if ($2) {
   $3 = $0&255;
   HEAP8[$1>>0] = $3;
   $len$0 = 1;
  } else {
   $4 = ($0>>>0)<(2048);
   if ($4) {
    $5 = $0 >>> 6;
    $6 = $5 & 31;
    $7 = $6&255;
    $8 = $7 | -64;
    HEAP8[$1>>0] = $8;
    $9 = $0 & 63;
    $10 = $9&255;
    $11 = ((($1)) + 1|0);
    $12 = $10 | -128;
    HEAP8[$11>>0] = $12;
    $len$0 = 2;
    break;
   }
   $13 = ($0>>>0)<(65536);
   if ($13) {
    $14 = $0 >>> 12;
    $15 = $14 & 15;
    $16 = $15&255;
    $17 = $16 | -32;
    HEAP8[$1>>0] = $17;
    $18 = $0 >>> 6;
    $19 = $18 & 63;
    $20 = $19&255;
    $21 = ((($1)) + 1|0);
    $22 = $20 | -128;
    HEAP8[$21>>0] = $22;
    $23 = $0 & 63;
    $24 = $23&255;
    $25 = ((($1)) + 2|0);
    $26 = $24 | -128;
    HEAP8[$25>>0] = $26;
    $len$0 = 3;
    break;
   } else {
    $27 = $0 >>> 18;
    $28 = $27 & 7;
    $29 = $28&255;
    $30 = $29 | -16;
    HEAP8[$1>>0] = $30;
    $31 = $0 >>> 12;
    $32 = $31 & 63;
    $33 = $32&255;
    $34 = ((($1)) + 1|0);
    $35 = $33 | -128;
    HEAP8[$34>>0] = $35;
    $36 = $0 >>> 6;
    $37 = $36 & 63;
    $38 = $37&255;
    $39 = ((($1)) + 2|0);
    $40 = $38 | -128;
    HEAP8[$39>>0] = $40;
    $41 = $0 & 63;
    $42 = $41&255;
    $43 = ((($1)) + 3|0);
    $44 = $42 | -128;
    HEAP8[$43>>0] = $44;
    $len$0 = 4;
    break;
   }
  }
 } while(0);
 HEAP32[$retVal>>2] = $1;
 $retVal$index1 = ((($retVal)) + 4|0);
 HEAP32[$retVal$index1>>2] = $len$0;
 return;
}
function __ZN60__LT_core__cell__BorrowError_u20_as_u20_core__fmt__Debug_GT_3fmt17ha8267545098840ceE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 511]($3,21276,11)|0);
 return ($8|0);
}
function __ZN63__LT_core__cell__BorrowMutError_u20_as_u20_core__fmt__Debug_GT_3fmt17h3e79de746c1e082aE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 511]($3,21287,14)|0);
 return ($8|0);
}
function __ZN4core6option13expect_failed17h8d3ef54cab66579bE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_3 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $_8 = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_8 = sp + 32|0;
 $_3 = sp + 8|0;
 $msg = sp;
 HEAP32[$msg>>2] = $0;
 $2 = ((($msg)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = $msg;
 HEAP32[$_8>>2] = $3;
 $4 = ((($_8)) + 4|0);
 HEAP32[$4>>2] = (409);
 HEAP32[$_3>>2] = 5976;
 $5 = ((($_3)) + 4|0);
 HEAP32[$5>>2] = 1;
 $_6$sroa$0$0$$sroa_idx$i = ((($_3)) + 8|0);
 HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
 $6 = ((($_3)) + 16|0);
 HEAP32[$6>>2] = $_8;
 $7 = ((($_3)) + 20|0);
 HEAP32[$7>>2] = 1;
 __ZN4core9panicking9panic_fmt17hbeea8425e52b5ca1E($_3,5984);
 // unreachable;
}
function __ZN4core3str9Utf8Error11valid_up_to17h368456ae95e03253E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN4core3str9from_utf817ha9337cb316bd8650E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i = 0, $$off$i = 0, $$off108$i = 0, $$off110$i = 0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $cond$i = 0, $cond12$i = 0, $cond13$i = 0, $cond14$i = 0, $cond15$i = 0;
 var $cond19$i = 0, $cond7$i = 0, $index$0$be$i = 0, $index$0125$i = 0, $index$0125$i$sink = 0, $index$1$i = 0, $index$2$lcssa$i = 0, $index$2120$i = 0, $index$3122$i = 0, $or$cond100$i = 0, $or$cond101$i = 0, $or$cond102$i = 0, $or$cond103$i = 0, $or$cond104$i = 0, $or$cond105$i = 0, $or$cond106$i = 0, $or$cond107$i = 0, $or$cond83$i = 0, $or$cond85$i = 0, $or$cond86$i = 0;
 var $or$cond87$i = 0, $or$cond88$i = 0, $or$cond89$i = 0, $or$cond90$i = 0, $or$cond92$i = 0, $or$cond93$i = 0, $or$cond94$i = 0, $or$cond97$i = 0, $or$cond98$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)>(7);
 $4 = (($2) + -7)|0;
 $$$i = $3 ? $4 : 0;
 $5 = ($2|0)==(0);
 L1: do {
  if (!($5)) {
   $6 = $1;
   $index$0125$i = 0;
   L3: while(1) {
    $7 = (($1) + ($index$0125$i)|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)<(0);
    L5: do {
     if ($9) {
      $14 = (($index$0125$i) + 1)|0;
      $15 = ($14>>>0)<($2>>>0);
      if (!($15)) {
       break L3;
      }
      $16 = $8&255;
      $17 = (21301 + ($16)|0);
      $18 = HEAP8[$17>>0]|0;
      $19 = (($1) + ($14)|0);
      $20 = HEAP8[$19>>0]|0;
      switch ($18<<24>>24) {
      case 2:  {
       $21 = $20 & -64;
       $22 = ($21<<24>>24)==(-128);
       if ($22) {
        $index$1$i = $14;
       } else {
        break L3;
       }
       break;
      }
      case 3:  {
       $23 = (($index$0125$i) + 2)|0;
       $24 = ($23>>>0)<($2>>>0);
       if (!($24)) {
        break L3;
       }
       $28 = (($1) + ($23)|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29 & -64;
       $cond14$i = ($8<<24>>24)==(-32);
       $31 = ($20&255)<(192);
       $32 = $20 & -32;
       $33 = ($32<<24>>24)==(-96);
       $34 = $cond14$i & $33;
       $cond19$i = ($30<<24>>24)==(-128);
       $or$cond83$i = $34 & $cond19$i;
       if ($or$cond83$i) {
        $index$1$i = $23;
       } else {
        $$off110$i = (($8) + 31)<<24>>24;
        $35 = ($$off110$i&255)<(12);
        $36 = ($20<<24>>24)<(0);
        $or$cond85$i = $35 & $36;
        $or$cond86$i = $31 & $or$cond85$i;
        $or$cond87$i = $or$cond86$i & $cond19$i;
        if ($or$cond87$i) {
         $index$1$i = $23;
        } else {
         $cond15$i = ($8<<24>>24)==(-19);
         $or$cond88$i = $cond15$i & $36;
         $37 = ($20&255)<(160);
         $or$cond89$i = $37 & $or$cond88$i;
         $or$cond90$i = $or$cond89$i & $cond19$i;
         if ($or$cond90$i) {
          $index$1$i = $23;
         } else {
          $38 = $8 & -2;
          $39 = ($38<<24>>24)==(-18);
          $or$cond92$i = $39 & $36;
          $or$cond93$i = $31 & $or$cond92$i;
          $or$cond94$i = $or$cond93$i & $cond19$i;
          if ($or$cond94$i) {
           $index$1$i = $23;
          } else {
           break L3;
          }
         }
        }
       }
       break;
      }
      case 4:  {
       $25 = (($index$0125$i) + 2)|0;
       $26 = ($25>>>0)<($2>>>0);
       if (!($26)) {
        break L3;
       }
       $40 = (($index$0125$i) + 3)|0;
       $41 = ($40>>>0)<($2>>>0);
       if (!($41)) {
        break L3;
       }
       $42 = (($1) + ($25)|0);
       $43 = HEAP8[$42>>0]|0;
       $44 = $43 & -64;
       $45 = (($1) + ($40)|0);
       $46 = HEAP8[$45>>0]|0;
       $47 = $46 & -64;
       $cond$i = ($8<<24>>24)==(-16);
       $$off$i = (($20) + 112)<<24>>24;
       $48 = ($$off$i&255)<(48);
       $49 = $cond$i & $48;
       $cond12$i = ($44<<24>>24)==(-128);
       $or$cond97$i = $49 & $cond12$i;
       $cond13$i = ($47<<24>>24)==(-128);
       $or$cond98$i = $or$cond97$i & $cond13$i;
       if ($or$cond98$i) {
        $index$1$i = $40;
       } else {
        $50 = ($20&255)<(192);
        $$off108$i = (($8) + 15)<<24>>24;
        $51 = ($$off108$i&255)<(3);
        $52 = ($20<<24>>24)<(0);
        $or$cond100$i = $51 & $52;
        $or$cond101$i = $50 & $or$cond100$i;
        $or$cond102$i = $or$cond101$i & $cond12$i;
        $or$cond103$i = $or$cond102$i & $cond13$i;
        if ($or$cond103$i) {
         $index$1$i = $40;
        } else {
         $cond7$i = ($8<<24>>24)==(-12);
         $or$cond104$i = $cond7$i & $52;
         $53 = ($20&255)<(144);
         $or$cond105$i = $53 & $or$cond104$i;
         $or$cond106$i = $or$cond105$i & $cond12$i;
         $or$cond107$i = $or$cond106$i & $cond13$i;
         if ($or$cond107$i) {
          $index$1$i = $40;
         } else {
          break L3;
         }
        }
       }
       break;
      }
      default: {
       break L3;
      }
      }
      $27 = (($index$1$i) + 1)|0;
      $index$0$be$i = $27;
     } else {
      $10 = (($index$0125$i) + ($6))|0;
      $11 = $10 & 3;
      $12 = ($11|0)==(0);
      if (!($12)) {
       $54 = (($index$0125$i) + 1)|0;
       $index$0$be$i = $54;
       break;
      }
      $13 = ($index$0125$i>>>0)<($$$i>>>0);
      L25: do {
       if ($13) {
        $index$2120$i = $index$0125$i;
        while(1) {
         $56 = (($1) + ($index$2120$i)|0);
         $57 = HEAP32[$56>>2]|0;
         $58 = ((($56)) + 4|0);
         $59 = HEAP32[$58>>2]|0;
         $60 = $59 | $57;
         $61 = $60 & -2139062144;
         $62 = ($61|0)==(0);
         if (!($62)) {
          $index$2$lcssa$i = $index$2120$i;
          break L25;
         }
         $64 = (($index$2120$i) + 8)|0;
         $65 = ($64>>>0)<($$$i>>>0);
         if ($65) {
          $index$2120$i = $64;
         } else {
          $index$2$lcssa$i = $64;
          break;
         }
        }
       } else {
        $index$2$lcssa$i = $index$0125$i;
       }
      } while(0);
      $63 = ($index$2$lcssa$i>>>0)<($2>>>0);
      if ($63) {
       $index$3122$i = $index$2$lcssa$i;
       while(1) {
        $66 = (($1) + ($index$3122$i)|0);
        $67 = HEAP8[$66>>0]|0;
        $68 = ($67<<24>>24)>(-1);
        if (!($68)) {
         $index$0$be$i = $index$3122$i;
         break L5;
        }
        $69 = (($index$3122$i) + 1)|0;
        $70 = ($69>>>0)<($2>>>0);
        if ($70) {
         $index$3122$i = $69;
        } else {
         $index$0$be$i = $69;
         break;
        }
       }
      } else {
       $index$0$be$i = $index$2$lcssa$i;
      }
     }
    } while(0);
    $55 = ($index$0$be$i>>>0)<($2>>>0);
    if ($55) {
     $index$0125$i = $index$0$be$i;
    } else {
     break L1;
    }
   }
   HEAP32[$0>>2] = 1;
   $$sink1 = 0;$index$0125$i$sink = $index$0125$i;
   $72 = (((($0)) + 4|0) + ($$sink1<<2)|0);
   HEAP32[$72>>2] = $index$0125$i$sink;
   return;
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 $71 = ((($0)) + 4|0);
 HEAP32[$71>>2] = $1;
 $$sink1 = 1;$index$0125$i$sink = $2;
 $72 = (((($0)) + 4|0) + ($$sink1<<2)|0);
 HEAP32[$72>>2] = $index$0125$i$sink;
 return;
}
function __ZN4core3fmt8builders11DebugStruct5field17h5582ccb8e8bed3f0E($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$$i$i = 0, $$26$i$i = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0;
 var $_0$sroa$0$0$i$i = 0, $_12$i$i = 0, $_17$i$i = 0, $_36$sroa$4$0$$sroa_idx16$i$i = 0, $_36$sroa$5$0$$sroa_idx18$i$i = 0, $_36$sroa$621$0$$sroa_idx23$i$i = 0, $_36$sroa$7$0$$sroa_idx25$i$i = 0, $_41$i$i = 0, $_7$i$i$i = 0, $_8$sroa$0$0$$sroa_idx$i$i$i = 0, $_8$sroa$4$0$$sroa_idx2$i$i$i = 0, $_9$sroa$0$0$$sroa_idx = 0, $_9$sroa$0$0$copyload = 0, $name = 0, $prefix$i$i = 0, $switch3$i = 0, $value = 0, $writer$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $_7$i$i$i = sp + 104|0;
 $_41$i$i = sp + 80|0;
 $_17$i$i = sp + 56|0;
 $_12$i$i = sp + 32|0;
 $writer$i$i = sp + 24|0;
 $prefix$i$i = sp + 16|0;
 $value = sp + 8|0;
 $name = sp;
 HEAP32[$name>>2] = $1;
 $5 = ((($name)) + 4|0);
 HEAP32[$5>>2] = $2;
 HEAP32[$value>>2] = $3;
 $6 = ((($value)) + 4|0);
 HEAP32[$6>>2] = $4;
 $_9$sroa$0$0$$sroa_idx = ((($0)) + 4|0);
 $_9$sroa$0$0$copyload = HEAP8[$_9$sroa$0$0$$sroa_idx>>0]|0;
 $7 = $name;
 $8 = $value;
 $switch3$i = ($_9$sroa$0$0$copyload<<24>>24)==(0);
 if (!($switch3$i)) {
  $$pre = ((($0)) + 5|0);
  $$pre$phiZ2D = $$pre;$_0$sroa$0$0$i = 1;
  HEAP8[$_9$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return ($0|0);
 }
 $9 = ((($0)) + 5|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(0);
 $$$i$i = $11 ? 21557 : 15911;
 $$26$i$i = $11 ? 2 : 1;
 HEAP32[$prefix$i$i>>2] = $$$i$i;
 $12 = ((($prefix$i$i)) + 4|0);
 HEAP32[$12>>2] = $$26$i$i;
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 4;
 $16 = ($15|0)==(0);
 if ($16) {
  $29 = $prefix$i$i;
  HEAP32[$_41$i$i>>2] = $29;
  $30 = ((($_41$i$i)) + 4|0);
  HEAP32[$30>>2] = (409);
  $31 = ((($_41$i$i)) + 8|0);
  HEAP32[$31>>2] = $7;
  $32 = ((($_41$i$i)) + 12|0);
  HEAP32[$32>>2] = (409);
  $33 = ((($_41$i$i)) + 16|0);
  HEAP32[$33>>2] = $8;
  $34 = ((($_41$i$i)) + 20|0);
  HEAP32[$34>>2] = (414);
  $35 = ((($13)) + 28|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($13)) + 32|0);
  $38 = HEAP32[$37>>2]|0;
  HEAP32[$_7$i$i$i>>2] = 6128;
  $_36$sroa$4$0$$sroa_idx16$i$i = ((($_7$i$i$i)) + 4|0);
  HEAP32[$_36$sroa$4$0$$sroa_idx16$i$i>>2] = 3;
  $_36$sroa$5$0$$sroa_idx18$i$i = ((($_7$i$i$i)) + 8|0);
  HEAP32[$_36$sroa$5$0$$sroa_idx18$i$i>>2] = 0;
  $_36$sroa$621$0$$sroa_idx23$i$i = ((($_7$i$i$i)) + 16|0);
  HEAP32[$_36$sroa$621$0$$sroa_idx23$i$i>>2] = $_41$i$i;
  $_36$sroa$7$0$$sroa_idx25$i$i = ((($_7$i$i$i)) + 20|0);
  HEAP32[$_36$sroa$7$0$$sroa_idx25$i$i>>2] = 3;
  $39 = (__ZN4core3fmt5write17ha952368ac9616bb6E($36,$38,$_7$i$i$i)|0);
  $_0$sroa$0$0$i$i = $39;
 } else {
  $17 = $13;
  HEAP32[$writer$i$i>>2] = $17;
  $18 = ((($writer$i$i)) + 4|0);
  HEAP8[$18>>0] = 0;
  $19 = $prefix$i$i;
  HEAP32[$_17$i$i>>2] = $19;
  $20 = ((($_17$i$i)) + 4|0);
  HEAP32[$20>>2] = (409);
  $21 = ((($_17$i$i)) + 8|0);
  HEAP32[$21>>2] = $7;
  $22 = ((($_17$i$i)) + 12|0);
  HEAP32[$22>>2] = (409);
  $23 = ((($_17$i$i)) + 16|0);
  HEAP32[$23>>2] = $8;
  $24 = ((($_17$i$i)) + 20|0);
  HEAP32[$24>>2] = (414);
  HEAP32[$_12$i$i>>2] = 5996;
  $25 = ((($_12$i$i)) + 4|0);
  HEAP32[$25>>2] = 3;
  $_8$sroa$0$0$$sroa_idx$i$i$i = ((($_12$i$i)) + 8|0);
  HEAP32[$_8$sroa$0$0$$sroa_idx$i$i$i>>2] = 6020;
  $_8$sroa$4$0$$sroa_idx2$i$i$i = ((($_12$i$i)) + 12|0);
  HEAP32[$_8$sroa$4$0$$sroa_idx2$i$i$i>>2] = 3;
  $26 = ((($_12$i$i)) + 16|0);
  HEAP32[$26>>2] = $_17$i$i;
  $27 = ((($_12$i$i)) + 20|0);
  HEAP32[$27>>2] = 3;
  $28 = (__ZN4core3fmt5write17ha952368ac9616bb6E($writer$i$i,2216,$_12$i$i)|0);
  $_0$sroa$0$0$i$i = $28;
 }
 $$pre$phiZ2D = $9;$_0$sroa$0$0$i = $_0$sroa$0$0$i$i;
 HEAP8[$_9$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
 HEAP8[$$pre$phiZ2D>>0] = 1;
 STACKTOP = sp;return ($0|0);
}
function __ZN4core3fmt8builders15debug_tuple_new17he50543912fc9d116E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_9$sroa$0$0$$sroa_idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_iiii[$9 & 511]($5,$2,$3)|0);
 $11 = ($3|0)==(0);
 HEAP32[$0>>2] = $1;
 $_9$sroa$0$0$$sroa_idx = ((($0)) + 4|0);
 HEAP8[$_9$sroa$0$0$$sroa_idx>>0] = $10;
 $12 = ((($0)) + 8|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 12|0);
 $14 = $11&1;
 HEAP8[$13>>0] = $14;
 return;
}
function __ZN4core3fmt8builders10DebugTuple6finish17h6a8c0050559c7e05E($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $_10$sroa$0$0$$sroa_idx$phi$trans$insert = 0, $_10$sroa$0$0$copyload = 0, $_10$sroa$0$0$copyload$pre = 0;
 var $not$switch4$i$i$i = 0, $not$switch4$i17$i$i = 0, $switch4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $_10$sroa$0$0$$sroa_idx$phi$trans$insert = ((($0)) + 4|0);
 $_10$sroa$0$0$copyload$pre = HEAP8[$_10$sroa$0$0$$sroa_idx$phi$trans$insert>>0]|0;
 if ($3) {
  $_10$sroa$0$0$copyload = $_10$sroa$0$0$copyload$pre;
  return ($_10$sroa$0$0$copyload|0);
 }
 $switch4$i = ($_10$sroa$0$0$copyload$pre<<24>>24)==(0);
 do {
  if ($switch4$i) {
   $4 = HEAP32[$0>>2]|0;
   $5 = HEAP32[$4>>2]|0;
   $6 = $5 & 4;
   $7 = ($6|0)==(0);
   if ($7) {
    $16 = $2;
   } else {
    $8 = ((($4)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($4)) + 32|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($11)) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 511]($9,21269,1)|0);
    $not$switch4$i$i$i = ($14<<24>>24)==(0);
    if (!($not$switch4$i$i$i)) {
     $_0$sroa$0$0$i = 1;
     break;
    }
    $$pre = HEAP32[$1>>2]|0;
    $16 = $$pre;
   }
   $15 = ($16|0)==(1);
   if ($15) {
    $17 = ((($0)) + 12|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(0);
    if (!($19)) {
     $20 = HEAP32[$0>>2]|0;
     $21 = ((($20)) + 28|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($20)) + 32|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($24)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (FUNCTION_TABLE_iiii[$26 & 511]($22,15911,1)|0);
     $not$switch4$i17$i$i = ($27<<24>>24)==(0);
     if (!($not$switch4$i17$i$i)) {
      $_0$sroa$0$0$i = 1;
      break;
     }
    }
   }
   $28 = HEAP32[$0>>2]|0;
   $29 = ((($28)) + 28|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($28)) + 32|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_iiii[$34 & 511]($30,21270,1)|0);
   $_0$sroa$0$0$i = $35;
  } else {
   $_0$sroa$0$0$i = 1;
  }
 } while(0);
 HEAP8[$_10$sroa$0$0$$sroa_idx$phi$trans$insert>>0] = $_0$sroa$0$0$i;
 $_10$sroa$0$0$copyload = $_0$sroa$0$0$i;
 return ($_10$sroa$0$0$copyload|0);
}
function __ZN4core3fmt8builders10DebugInner5entry17h2dd835cd6ade1fa1E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i$i = 0, $$26$i$i = 0, $$27$i$i = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $_12$i$i = 0, $_17$i$i = 0;
 var $_33$sroa$4$0$$sroa_idx13$i$i = 0, $_33$sroa$5$0$$sroa_idx15$i$i = 0, $_33$sroa$618$0$$sroa_idx20$i$i = 0, $_33$sroa$7$0$$sroa_idx22$i$i = 0, $_38$i$i = 0, $_6$sroa$0$0$$sroa_idx = 0, $_6$sroa$0$0$copyload = 0, $_7$i$i$i = 0, $_8$sroa$0$0$$sroa_idx$i$i$i = 0, $_8$sroa$4$0$$sroa_idx2$i$i$i = 0, $entry = 0, $prefix$i$i = 0, $prefix1$i$i = 0, $switch3$i = 0, $writer$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $_7$i$i$i = sp + 88|0;
 $_38$i$i = sp + 72|0;
 $prefix1$i$i = sp + 64|0;
 $_17$i$i = sp + 48|0;
 $_12$i$i = sp + 24|0;
 $prefix$i$i = sp + 16|0;
 $writer$i$i = sp + 8|0;
 $entry = sp;
 HEAP32[$entry>>2] = $1;
 $3 = ((($entry)) + 4|0);
 HEAP32[$3>>2] = $2;
 $_6$sroa$0$0$$sroa_idx = ((($0)) + 4|0);
 $_6$sroa$0$0$copyload = HEAP8[$_6$sroa$0$0$$sroa_idx>>0]|0;
 $4 = $entry;
 $switch3$i = ($_6$sroa$0$0$copyload<<24>>24)==(0);
 if (!($switch3$i)) {
  $$pre = ((($0)) + 5|0);
  $$pre$phiZ2D = $$pre;$_0$sroa$0$0$i = 1;
  HEAP8[$_6$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 4;
 $8 = ($7|0)==(0);
 $9 = ((($0)) + 5|0);
 $10 = HEAP8[$9>>0]|0;
 if ($8) {
  $24 = ($10<<24>>24)==(0);
  $$26$i$i = $24 ? 24540 : 21563;
  $$27$i$i = $24 ? 0 : 2;
  HEAP32[$prefix1$i$i>>2] = $$26$i$i;
  $25 = ((($prefix1$i$i)) + 4|0);
  HEAP32[$25>>2] = $$27$i$i;
  $26 = $prefix1$i$i;
  HEAP32[$_38$i$i>>2] = $26;
  $27 = ((($_38$i$i)) + 4|0);
  HEAP32[$27>>2] = (409);
  $28 = ((($_38$i$i)) + 8|0);
  HEAP32[$28>>2] = $4;
  $29 = ((($_38$i$i)) + 12|0);
  HEAP32[$29>>2] = (414);
  $30 = ((($5)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($5)) + 32|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$_7$i$i$i>>2] = 6152;
  $_33$sroa$4$0$$sroa_idx13$i$i = ((($_7$i$i$i)) + 4|0);
  HEAP32[$_33$sroa$4$0$$sroa_idx13$i$i>>2] = 2;
  $_33$sroa$5$0$$sroa_idx15$i$i = ((($_7$i$i$i)) + 8|0);
  HEAP32[$_33$sroa$5$0$$sroa_idx15$i$i>>2] = 0;
  $_33$sroa$618$0$$sroa_idx20$i$i = ((($_7$i$i$i)) + 16|0);
  HEAP32[$_33$sroa$618$0$$sroa_idx20$i$i>>2] = $_38$i$i;
  $_33$sroa$7$0$$sroa_idx22$i$i = ((($_7$i$i$i)) + 20|0);
  HEAP32[$_33$sroa$7$0$$sroa_idx22$i$i>>2] = 2;
  $34 = (__ZN4core3fmt5write17ha952368ac9616bb6E($31,$33,$_7$i$i$i)|0);
  $$pre$phiZ2D = $9;$_0$sroa$0$0$i = $34;
  HEAP8[$_6$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return;
 } else {
  $11 = $5;
  HEAP32[$writer$i$i>>2] = $11;
  $12 = ((($writer$i$i)) + 4|0);
  HEAP8[$12>>0] = 0;
  $13 = ($10<<24>>24)==(0);
  $$$i$i = $13 ? 24540 : 15911;
  $14 = $10&255;
  HEAP32[$prefix$i$i>>2] = $$$i$i;
  $15 = ((($prefix$i$i)) + 4|0);
  HEAP32[$15>>2] = $14;
  $16 = $prefix$i$i;
  HEAP32[$_17$i$i>>2] = $16;
  $17 = ((($_17$i$i)) + 4|0);
  HEAP32[$17>>2] = (409);
  $18 = ((($_17$i$i)) + 8|0);
  HEAP32[$18>>2] = $4;
  $19 = ((($_17$i$i)) + 12|0);
  HEAP32[$19>>2] = (414);
  HEAP32[$_12$i$i>>2] = 5864;
  $20 = ((($_12$i$i)) + 4|0);
  HEAP32[$20>>2] = 2;
  $_8$sroa$0$0$$sroa_idx$i$i$i = ((($_12$i$i)) + 8|0);
  HEAP32[$_8$sroa$0$0$$sroa_idx$i$i$i>>2] = 5880;
  $_8$sroa$4$0$$sroa_idx2$i$i$i = ((($_12$i$i)) + 12|0);
  HEAP32[$_8$sroa$4$0$$sroa_idx2$i$i$i>>2] = 2;
  $21 = ((($_12$i$i)) + 16|0);
  HEAP32[$21>>2] = $_17$i$i;
  $22 = ((($_12$i$i)) + 20|0);
  HEAP32[$22>>2] = 2;
  $23 = (__ZN4core3fmt5write17ha952368ac9616bb6E($writer$i$i,2216,$_12$i$i)|0);
  $$pre$phiZ2D = $9;$_0$sroa$0$0$i = $23;
  HEAP8[$_6$sroa$0$0$$sroa_idx>>0] = $_0$sroa$0$0$i;
  HEAP8[$$pre$phiZ2D>>0] = 1;
  STACKTOP = sp;return;
 }
}
function __ZN4core3fmt8builders14debug_list_new17h09f66fbfeeea4f70E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_11$sroa$4$0$$sroa_idx = 0, $_11$sroa$5$0$$sroa_idx = 0, $_5$sroa$4$0$$sroa_idx9 = 0, $_5$sroa$5$0$$sroa_idx11 = 0, $_5$sroa$614$0$$sroa_idx16 = 0, $_5$sroa$7$0$$sroa_idx18 = 0, $_7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_7$i = sp;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$_7$i>>2] = 6168;
 $_5$sroa$4$0$$sroa_idx9 = ((($_7$i)) + 4|0);
 HEAP32[$_5$sroa$4$0$$sroa_idx9>>2] = 1;
 $_5$sroa$5$0$$sroa_idx11 = ((($_7$i)) + 8|0);
 HEAP32[$_5$sroa$5$0$$sroa_idx11>>2] = 0;
 $_5$sroa$614$0$$sroa_idx16 = ((($_7$i)) + 16|0);
 HEAP32[$_5$sroa$614$0$$sroa_idx16>>2] = 23968;
 $_5$sroa$7$0$$sroa_idx18 = ((($_7$i)) + 20|0);
 HEAP32[$_5$sroa$7$0$$sroa_idx18>>2] = 0;
 $6 = (__ZN4core3fmt5write17ha952368ac9616bb6E($3,$5,$_7$i)|0);
 HEAP32[$0>>2] = $1;
 $_11$sroa$4$0$$sroa_idx = ((($0)) + 4|0);
 HEAP8[$_11$sroa$4$0$$sroa_idx>>0] = $6;
 $_11$sroa$5$0$$sroa_idx = ((($0)) + 5|0);
 HEAP8[$_11$sroa$5$0$$sroa_idx>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN4core3fmt8builders9DebugList5entry17h224979876f32754cE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4core3fmt8builders10DebugInner5entry17h2dd835cd6ade1fa1E($0,$1,$2);
 return ($0|0);
}
function __ZN4core3fmt8builders9DebugList6finish17h58d6772b9a85eba4E($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $_9$sroa$0$0$$sroa_idx$i = 0, $_9$sroa$0$0$copyload$i = 0, $prefix$sroa$0$0$i = 0, $prefix$sroa$5$0$i = 0, $switch3$i$i = 0, $switch4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 4;
 $4 = ($3|0)==(0);
 if ($4) {
  label = 3;
 } else {
  $5 = ((($0)) + 5|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   label = 3;
  } else {
   $prefix$sroa$0$0$i = 21269;$prefix$sroa$5$0$i = 1;
  }
 }
 if ((label|0) == 3) {
  $prefix$sroa$0$0$i = 24540;$prefix$sroa$5$0$i = 0;
 }
 $_9$sroa$0$0$$sroa_idx$i = ((($0)) + 4|0);
 $_9$sroa$0$0$copyload$i = HEAP8[$_9$sroa$0$0$$sroa_idx$i>>0]|0;
 $switch3$i$i = ($_9$sroa$0$0$copyload$i<<24>>24)==(0);
 if (!($switch3$i$i)) {
  HEAP8[$_9$sroa$0$0$$sroa_idx$i>>0] = 1;
  $_0$sroa$0$0$i = 1;
  return ($_0$sroa$0$0$i|0);
 }
 $8 = ((($1)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiii[$13 & 511]($9,$prefix$sroa$0$0$i,$prefix$sroa$5$0$i)|0);
 HEAP8[$_9$sroa$0$0$$sroa_idx$i>>0] = $14;
 $switch4$i = ($14<<24>>24)==(0);
 if (!($switch4$i)) {
  $_0$sroa$0$0$i = 1;
  return ($_0$sroa$0$0$i|0);
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = ((($15)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($15)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_iiii[$21 & 511]($17,15941,1)|0);
 $_0$sroa$0$0$i = $22;
 return ($_0$sroa$0$0$i|0);
}
function __ZN4core3fmt10ArgumentV110from_usize17h47fa924ebb3f45a0E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 413;
 return;
}
function __ZN73__LT_core__fmt__Arguments_LT__u27_a_GT__u20_as_u20_core__fmt__Display_GT_3fmt17h7599f74842116fddE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_7 = sp;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 ;HEAP32[$_7>>2]=HEAP32[$0>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$_7+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$_7+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$_7+20>>2]=HEAP32[$0+20>>2]|0;
 $6 = (__ZN4core3fmt5write17ha952368ac9616bb6E($3,$5,$_7)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN4core3fmt9Formatter9write_fmt17hadece32d1a4edb44E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $_7 = sp;
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 ;HEAP32[$_7>>2]=HEAP32[$1>>2]|0;HEAP32[$_7+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$_7+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$_7+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$_7+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$_7+20>>2]=HEAP32[$1+20>>2]|0;
 $6 = (__ZN4core3fmt5write17ha952368ac9616bb6E($3,$5,$_7)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN4core3fmt9Formatter9alternate17h6978e2e9692c03baE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)!=(0);
 return ($3|0);
}
function __ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17hc4ff3f3b2f08a94fE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i41 = 0, $$cast$i = 0, $$cast$i195 = 0, $$cast$i195206 = 0, $$cast$i198 = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $$sink$i$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_0$0$i = 0, $_0$0$i15$i$i$i = 0;
 var $_0$0$i22$i$i$i = 0, $_0$0$i9$i$i$i = 0, $_0$sroa$0$0 = 0, $_4$0$i$i$i$i$i = 0, $_5$sroa$4$0$ph$i = 0, $_53$sroa$14$2$ph = 0, $from$0$ph$lcssa194 = 0, $from$0$ph$lcssa194245 = 0, $from$0$ph$lcssa194246 = 0, $from$0$ph204 = 0, $init_state$sroa$0$0$i = 0, $init_state$sroa$9$0$i = 0, $iter$sroa$0$0$ph202 = 0, $iter$sroa$0$0197 = 0, $iter$sroa$6$0$ph201 = 0, $iter$sroa$6$0196 = 0, $iter$sroa$6$1 = 0, $iter$sroa$6$2 = 0, $iter$sroa$6$3 = 0, $iter$sroa$6$4 = 0;
 var $iter2$sroa$0$0 = 0, $iter2$sroa$0$1$ph = 0, $not$$i$i = 0, $not$$i$i58 = 0, $not$$i8$i = 0, $not$switch4$i = 0, $not$switch4$i39 = 0, $not$switch4$i44 = 0, $not$switch4$i55 = 0, $or$cond$i$i = 0, $or$cond$i$i57 = 0, $or$cond$i7$i = 0, $phitmp$i$i$i = 0, $phitmp31$i$i$i = 0, $phitmp32$i$i$i = 0, $trunc$i = 0, $trunc$i$clear = 0, $trunc$i$i$clear = 0, $trunc$i$i$i$i = 0, $trunc$i$i$i$i$clear = 0;
 var $trunc$i$i$i$i$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iii[$8 & 511]($4,34)|0);
 $not$switch4$i = ($9<<24>>24)==(0);
 if (!($not$switch4$i)) {
  $_0$sroa$0$0 = 1;
  return ($_0$sroa$0$0|0);
 }
 $10 = (($0) + ($1)|0);
 $11 = ($1|0)==(0);
 do {
  if ($11) {
   $from$0$ph$lcssa194246 = 0;
   label = 17;
  } else {
   $12 = $0;
   $$cast$i195206 = $0;$from$0$ph204 = 0;$iter$sroa$0$0$ph202 = 0;$iter$sroa$6$0$ph201 = $12;
   L6: while(1) {
    $$cast$i198 = $$cast$i195206;$iter$sroa$0$0197 = $iter$sroa$0$0$ph202;$iter$sroa$6$0196 = $iter$sroa$6$0$ph201;
    L8: while(1) {
     $15 = ((($$cast$i198)) + 1|0);
     $16 = $15;
     $14 = HEAP8[$$cast$i198>>0]|0;
     $17 = ($14<<24>>24)>(-1);
     if ($17) {
      $13 = $14&255;
      $_5$sroa$4$0$ph$i = $13;$iter$sroa$6$4 = $16;
     } else {
      $18 = $14 & 31;
      $19 = $18&255;
      $20 = ($15|0)==($10|0);
      if ($20) {
       $29 = $10;$_0$0$i22$i$i$i = 0;$iter$sroa$6$1 = $16;
      } else {
       $21 = ((($$cast$i198)) + 2|0);
       $22 = $21;
       $23 = HEAP8[$15>>0]|0;
       $phitmp$i$i$i = $23 & 63;
       $29 = $21;$_0$0$i22$i$i$i = $phitmp$i$i$i;$iter$sroa$6$1 = $22;
      }
      $24 = $19 << 6;
      $25 = $_0$0$i22$i$i$i&255;
      $26 = $25 | $24;
      $27 = ($14&255)>(223);
      if ($27) {
       $28 = ($29|0)==($10|0);
       if ($28) {
        $40 = $10;$_0$0$i15$i$i$i = 0;$iter$sroa$6$2 = $iter$sroa$6$1;
       } else {
        $30 = ((($29)) + 1|0);
        $31 = $30;
        $32 = HEAP8[$29>>0]|0;
        $phitmp31$i$i$i = $32 & 63;
        $40 = $30;$_0$0$i15$i$i$i = $phitmp31$i$i$i;$iter$sroa$6$2 = $31;
       }
       $33 = $25 << 6;
       $34 = $_0$0$i15$i$i$i&255;
       $35 = $34 | $33;
       $36 = $19 << 12;
       $37 = $35 | $36;
       $38 = ($14&255)>(239);
       if ($38) {
        $39 = ($40|0)==($10|0);
        if ($39) {
         $_0$0$i9$i$i$i = 0;$iter$sroa$6$3 = $iter$sroa$6$2;
        } else {
         $41 = ((($40)) + 1|0);
         $42 = $41;
         $43 = HEAP8[$40>>0]|0;
         $phitmp32$i$i$i = $43 & 63;
         $_0$0$i9$i$i$i = $phitmp32$i$i$i;$iter$sroa$6$3 = $42;
        }
        $44 = $19 << 18;
        $45 = $44 & 1835008;
        $46 = $35 << 6;
        $47 = $_0$0$i9$i$i$i&255;
        $48 = $46 | $45;
        $49 = $48 | $47;
        $_5$sroa$4$0$ph$i = $49;$iter$sroa$6$4 = $iter$sroa$6$3;
       } else {
        $_5$sroa$4$0$ph$i = $37;$iter$sroa$6$4 = $iter$sroa$6$2;
       }
      } else {
       $_5$sroa$4$0$ph$i = $26;$iter$sroa$6$4 = $iter$sroa$6$1;
      }
     }
     $61 = (($iter$sroa$0$0197) - ($iter$sroa$6$0196))|0;
     $62 = (($61) + ($iter$sroa$6$4))|0;
     switch ($_5$sroa$4$0$ph$i|0) {
     case 9:  {
      $69 = 0;$71 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 116;
      break;
     }
     case 13:  {
      $69 = 0;$71 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 114;
      break;
     }
     case 10:  {
      $69 = 0;$71 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = 110;
      break;
     }
     case 34: case 39: case 92:  {
      $69 = 0;$71 = 0;$init_state$sroa$0$0$i = 2;$init_state$sroa$9$0$i = $_5$sroa$4$0$ph$i;
      break;
     }
     default: {
      $63 = (__ZN4core12char_private12is_printable17hba3449ff818b3fe4E($_5$sroa$4$0$ph$i)|0);
      if ($63) {
       $69 = 0;$71 = 0;$init_state$sroa$0$0$i = 1;$init_state$sroa$9$0$i = $_5$sroa$4$0$ph$i;
      } else {
       $64 = $_5$sroa$4$0$ph$i | 1;
       $65 = (Math_clz32(($64|0))|0);
       $66 = (31 - ($65))|0;
       $67 = $66 >>> 2;
       $69 = 5;$71 = $67;$init_state$sroa$0$0$i = 3;$init_state$sroa$9$0$i = $_5$sroa$4$0$ph$i;
      }
     }
     }
     $trunc$i$i$i$i = $init_state$sroa$0$0$i&255;
     $trunc$i$i$i$i$clear = $trunc$i$i$i$i & 3;
     switch ($trunc$i$i$i$i$clear<<24>>24) {
     case 2: case 0:  {
      break L8;
      break;
     }
     case 1:  {
      break;
     }
     case 3:  {
      $68 = $69&255;
      $trunc$i$i$i$i$i$clear = $68 & 7;
      switch ($trunc$i$i$i$i$i$clear<<24>>24) {
      case 0:  {
       $_4$0$i$i$i$i$i = 0;
       break;
      }
      case 1:  {
       $_4$0$i$i$i$i$i = 1;
       break;
      }
      case 2:  {
       $_4$0$i$i$i$i$i = 2;
       break;
      }
      case 3:  {
       $_4$0$i$i$i$i$i = 3;
       break;
      }
      case 4:  {
       $_4$0$i$i$i$i$i = 4;
       break;
      }
      case 5:  {
       $_4$0$i$i$i$i$i = 5;
       break;
      }
      default: {
       label = 35;
       break L6;
      }
      }
      $70 = (($_4$0$i$i$i$i$i) + ($71))|0;
      $72 = ($70|0)==(1);
      if (!($72)) {
       break L8;
      }
      break;
     }
     default: {
      label = 36;
      break L6;
     }
     }
     $$cast$i = $iter$sroa$6$4;
     $73 = ($$cast$i|0)==($10|0);
     if ($73) {
      $from$0$ph$lcssa194 = $from$0$ph204;
      label = 16;
      break L6;
     } else {
      $$cast$i198 = $$cast$i;$iter$sroa$0$0197 = $62;$iter$sroa$6$0196 = $iter$sroa$6$4;
     }
    }
    $74 = ($iter$sroa$0$0197>>>0)<($from$0$ph204>>>0);
    if ($74) {
     label = 40;
     break;
    }
    $80 = ($from$0$ph204|0)==(0);
    $81 = ($from$0$ph204|0)==($1|0);
    $or$cond$i7$i = $80 | $81;
    if (!($or$cond$i7$i)) {
     $not$$i8$i = ($from$0$ph204>>>0)<($1>>>0);
     if (!($not$$i8$i)) {
      label = 40;
      break;
     }
     $82 = (($0) + ($from$0$ph204)|0);
     $83 = HEAP8[$82>>0]|0;
     $84 = ($83<<24>>24)>(-65);
     if (!($84)) {
      label = 40;
      break;
     }
    }
    $75 = ($iter$sroa$0$0197|0)==(0);
    $76 = ($iter$sroa$0$0197|0)==($1|0);
    $or$cond$i$i = $75 | $76;
    if (!($or$cond$i$i)) {
     $not$$i$i = ($iter$sroa$0$0197>>>0)<($1>>>0);
     if (!($not$$i$i)) {
      label = 40;
      break;
     }
     $77 = (($0) + ($iter$sroa$0$0197)|0);
     $78 = HEAP8[$77>>0]|0;
     $79 = ($78<<24>>24)>(-65);
     if (!($79)) {
      label = 40;
      break;
     }
    }
    $85 = (($0) + ($from$0$ph204)|0);
    $86 = (($iter$sroa$0$0197) - ($from$0$ph204))|0;
    $87 = HEAP32[$3>>2]|0;
    $88 = HEAP32[$5>>2]|0;
    $89 = ((($88)) + 12|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (FUNCTION_TABLE_iiii[$90 & 511]($87,$85,$86)|0);
    $not$switch4$i44 = ($91<<24>>24)==(0);
    if ($not$switch4$i44) {
     $100 = $71;$93 = $69;$iter2$sroa$0$0 = $init_state$sroa$0$0$i;
    } else {
     $_0$sroa$0$0 = 1;
     label = 4;
     break;
    }
    L52: while(1) {
     $trunc$i = $iter2$sroa$0$0&255;
     $trunc$i$clear = $trunc$i & 3;
     L54: do {
      switch ($trunc$i$clear<<24>>24) {
      case 0:  {
       break L52;
       break;
      }
      case 1:  {
       $131 = $93;$132 = $100;$_53$sroa$14$2$ph = $init_state$sroa$9$0$i;$iter2$sroa$0$1$ph = 0;
       break;
      }
      case 2:  {
       $131 = $93;$132 = $100;$_53$sroa$14$2$ph = 92;$iter2$sroa$0$1$ph = 1;
       break;
      }
      case 3:  {
       $92 = $93&255;
       $trunc$i$i$clear = $92 & 7;
       switch ($trunc$i$i$clear<<24>>24) {
       case 0:  {
        break L52;
        break;
       }
       case 1:  {
        $112 = $93 & -256;
        $131 = $112;$132 = $100;$_53$sroa$14$2$ph = 125;$iter2$sroa$0$1$ph = $iter2$sroa$0$0;
        break L54;
        break;
       }
       case 2:  {
        $101 = (_bitshift64Shl(($100|0),0,2)|0);
        $102 = tempRet0;
        $103 = $101 & 28;
        $104 = $init_state$sroa$9$0$i >>> $103;
        $105 = $104 & 15;
        $106 = $105&255;
        $107 = ($106&255)<(10);
        $108 = $105 | 48;
        $109 = (($105) + 87)|0;
        $$sink$i$i = $107 ? $108 : $109;
        $110 = $$sink$i$i & 127;
        $111 = ($100|0)==(0);
        if ($111) {
         $113 = $93 & -256;
         $114 = $113 | 1;
         $131 = $114;$132 = $100;$_53$sroa$14$2$ph = $110;$iter2$sroa$0$1$ph = $iter2$sroa$0$0;
         break L54;
        } else {
         $115 = (($100) + -1)|0;
         $131 = $93;$132 = $115;$_53$sroa$14$2$ph = $110;$iter2$sroa$0$1$ph = $iter2$sroa$0$0;
         break L54;
        }
        break;
       }
       case 3:  {
        $98 = $93 & -256;
        $99 = $98 | 2;
        $131 = $99;$132 = $100;$_53$sroa$14$2$ph = 123;$iter2$sroa$0$1$ph = $iter2$sroa$0$0;
        break L54;
        break;
       }
       case 4:  {
        $96 = $93 & -256;
        $97 = $96 | 3;
        $131 = $97;$132 = $100;$_53$sroa$14$2$ph = 117;$iter2$sroa$0$1$ph = $iter2$sroa$0$0;
        break L54;
        break;
       }
       case 5:  {
        $94 = $93 & -256;
        $95 = $94 | 4;
        $131 = $95;$132 = $100;$_53$sroa$14$2$ph = 92;$iter2$sroa$0$1$ph = $iter2$sroa$0$0;
        break L54;
        break;
       }
       default: {
        label = 58;
        break L6;
       }
       }
       break;
      }
      default: {
       label = 59;
       break L6;
      }
      }
     } while(0);
     $121 = HEAP32[$3>>2]|0;
     $122 = HEAP32[$5>>2]|0;
     $123 = ((($122)) + 16|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = (FUNCTION_TABLE_iii[$124 & 511]($121,$_53$sroa$14$2$ph)|0);
     $not$switch4$i39 = ($125<<24>>24)==(0);
     if ($not$switch4$i39) {
      $100 = $132;$93 = $131;$iter2$sroa$0$0 = $iter2$sroa$0$1$ph;
     } else {
      $_0$sroa$0$0 = 1;
      label = 4;
      break L6;
     }
    }
    $116 = ($_5$sroa$4$0$ph$i>>>0)<(128);
    if ($116) {
     $_0$0$i = 1;
    } else {
     $117 = ($_5$sroa$4$0$ph$i>>>0)<(2048);
     if ($117) {
      $_0$0$i = 2;
     } else {
      $118 = ($_5$sroa$4$0$ph$i>>>0)<(65536);
      $$$i41 = $118 ? 3 : 4;
      $_0$0$i = $$$i41;
     }
    }
    $119 = (($_0$0$i) + ($iter$sroa$0$0197))|0;
    $$cast$i195 = $iter$sroa$6$4;
    $120 = ($$cast$i195|0)==($10|0);
    if ($120) {
     $from$0$ph$lcssa194 = $119;
     label = 16;
     break;
    } else {
     $$cast$i195206 = $$cast$i195;$from$0$ph204 = $119;$iter$sroa$0$0$ph202 = $62;$iter$sroa$6$0$ph201 = $iter$sroa$6$4;
    }
   }
   if ((label|0) == 4) {
    return ($_0$sroa$0$0|0);
   }
   else if ((label|0) == 16) {
    $50 = ($from$0$ph$lcssa194|0)==(0);
    $51 = ($from$0$ph$lcssa194|0)==($1|0);
    $or$cond$i$i57 = $50 | $51;
    if ($or$cond$i$i57) {
     $from$0$ph$lcssa194246 = $from$0$ph$lcssa194;
     label = 17;
     break;
    }
    $not$$i$i58 = ($from$0$ph$lcssa194>>>0)<($1>>>0);
    if (!($not$$i$i58)) {
     __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($0,$1,$from$0$ph$lcssa194,$1);
     // unreachable;
    }
    $52 = (($0) + ($from$0$ph$lcssa194)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = ($53<<24>>24)>(-65);
    if ($54) {
     $$pre$phi$iZ2D = $52;$from$0$ph$lcssa194245 = $from$0$ph$lcssa194;
     break;
    }
    __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($0,$1,$from$0$ph$lcssa194,$1);
    // unreachable;
   }
   else if ((label|0) == 35) {
    // unreachable;
   }
   else if ((label|0) == 36) {
    // unreachable;
   }
   else if ((label|0) == 40) {
    __ZN4core3str16slice_error_fail17h87e6afb88cf955c7E($0,$1,$from$0$ph204,$iter$sroa$0$0197);
    // unreachable;
   }
   else if ((label|0) == 58) {
    // unreachable;
   }
   else if ((label|0) == 59) {
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 17) {
  $$pre$i = (($0) + ($from$0$ph$lcssa194246)|0);
  $$pre$phi$iZ2D = $$pre$i;$from$0$ph$lcssa194245 = $from$0$ph$lcssa194246;
 }
 $55 = (($1) - ($from$0$ph$lcssa194245))|0;
 $56 = HEAP32[$3>>2]|0;
 $57 = HEAP32[$5>>2]|0;
 $58 = ((($57)) + 12|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (FUNCTION_TABLE_iiii[$59 & 511]($56,$$pre$phi$iZ2D,$55)|0);
 $not$switch4$i55 = ($60<<24>>24)==(0);
 if (!($not$switch4$i55)) {
  $_0$sroa$0$0 = 1;
  return ($_0$sroa$0$0|0);
 }
 $126 = HEAP32[$3>>2]|0;
 $127 = HEAP32[$5>>2]|0;
 $128 = ((($127)) + 16|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = (FUNCTION_TABLE_iii[$129 & 511]($126,34)|0);
 $_0$sroa$0$0 = $130;
 return ($_0$sroa$0$0|0);
}
function __ZN42__LT_str_u20_as_u20_core__fmt__Display_GT_3fmt17h53ffdc2cd959b259E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN4core3fmt9Formatter3pad17h365f7bd5560e0c90E($2,$0,$1)|0);
 return ($3|0);
}
function __ZN43__LT_char_u20_as_u20_core__fmt__Display_GT_3fmt17hc4d9580eeb78c2b7E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0 = 0, $_19 = 0;
 var $len$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_19 = sp;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  $5 = ((($1)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(1);
  if (!($7)) {
   $8 = HEAP32[$0>>2]|0;
   $9 = ((($1)) + 28|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($1)) + 32|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($12)) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (FUNCTION_TABLE_iii[$14 & 511]($10,$8)|0);
   $_0$sroa$0$0 = $15;
   STACKTOP = sp;return ($_0$sroa$0$0|0);
  }
 }
 $16 = HEAP32[$0>>2]|0;
 HEAP32[$_19>>2] = 0;
 $17 = ($16>>>0)<(128);
 do {
  if ($17) {
   $18 = $16&255;
   HEAP8[$_19>>0] = $18;
   $len$0$i = 1;
  } else {
   $19 = ($16>>>0)<(2048);
   if ($19) {
    $20 = $16 >>> 6;
    $21 = $20 & 31;
    $22 = $21&255;
    $23 = $22 | -64;
    HEAP8[$_19>>0] = $23;
    $24 = $16 & 63;
    $25 = $24&255;
    $26 = ((($_19)) + 1|0);
    $27 = $25 | -128;
    HEAP8[$26>>0] = $27;
    $len$0$i = 2;
    break;
   }
   $28 = ($16>>>0)<(65536);
   if ($28) {
    $29 = $16 >>> 12;
    $30 = $29 & 15;
    $31 = $30&255;
    $32 = $31 | -32;
    HEAP8[$_19>>0] = $32;
    $33 = $16 >>> 6;
    $34 = $33 & 63;
    $35 = $34&255;
    $36 = ((($_19)) + 1|0);
    $37 = $35 | -128;
    HEAP8[$36>>0] = $37;
    $38 = $16 & 63;
    $39 = $38&255;
    $40 = ((($_19)) + 2|0);
    $41 = $39 | -128;
    HEAP8[$40>>0] = $41;
    $len$0$i = 3;
    break;
   } else {
    $42 = $16 >>> 18;
    $43 = $42&255;
    $44 = $43 | -16;
    HEAP8[$_19>>0] = $44;
    $45 = $16 >>> 12;
    $46 = $45 & 63;
    $47 = $46&255;
    $48 = ((($_19)) + 1|0);
    $49 = $47 | -128;
    HEAP8[$48>>0] = $49;
    $50 = $16 >>> 6;
    $51 = $50 & 63;
    $52 = $51&255;
    $53 = ((($_19)) + 2|0);
    $54 = $52 | -128;
    HEAP8[$53>>0] = $54;
    $55 = $16 & 63;
    $56 = $55&255;
    $57 = ((($_19)) + 3|0);
    $58 = $56 | -128;
    HEAP8[$57>>0] = $58;
    $len$0$i = 4;
    break;
   }
  }
 } while(0);
 $59 = (__ZN4core3fmt9Formatter3pad17h365f7bd5560e0c90E($1,$_19,$len$0$i)|0);
 $_0$sroa$0$0 = $59;
 STACKTOP = sp;return ($_0$sroa$0$0|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h7b84da574e12974fE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17h47bc70a70176906cE($2,$1)|0);
 return ($3|0);
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_u32_GT_3fmt17h550cffab2fb40d60E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$old5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf31 = 0, $curr$0 = 0;
 var $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf31 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2>>>0)>(9999);
 if ($3) {
  $curr$0 = 39;$n$1 = $2;
  while(1) {
   $4 = (($n$1>>>0) % 10000)&-1;
   $5 = (($n$1>>>0) / 10000)&-1;
   $6 = (($4>>>0) / 100)&-1;
   $7 = $6 << 1;
   $8 = (($4>>>0) % 100)&-1;
   $9 = $8 << 1;
   $10 = (($curr$0) + -4)|0;
   $11 = (20664 + ($7)|0);
   $12 = (($buf31) + ($10)|0);
   $13 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8);
   HEAP8[$12>>0]=$13&255;HEAP8[$12+1>>0]=$13>>8;
   $14 = (20664 + ($9)|0);
   $15 = (($curr$0) + -2)|0;
   $16 = (($buf31) + ($15)|0);
   $17 = HEAPU8[$14>>0]|(HEAPU8[$14+1>>0]<<8);
   HEAP8[$16>>0]=$17&255;HEAP8[$16+1>>0]=$17>>8;
   $$old5 = ($n$1>>>0)>(99999999);
   if ($$old5) {
    $curr$0 = $10;$n$1 = $5;
   } else {
    $curr$1 = $10;$n$2 = $5;
    break;
   }
  }
 } else {
  $curr$1 = 39;$n$2 = $2;
 }
 $18 = ($n$2|0)>(99);
 if ($18) {
  $19 = (($n$2>>>0) % 100)&-1;
  $20 = $19 << 1;
  $21 = (($n$2>>>0) / 100)&-1;
  $22 = (($curr$1) + -2)|0;
  $23 = (20664 + ($20)|0);
  $24 = (($buf31) + ($22)|0);
  $25 = HEAPU8[$23>>0]|(HEAPU8[$23+1>>0]<<8);
  HEAP8[$24>>0]=$25&255;HEAP8[$24+1>>0]=$25>>8;
  $curr$2 = $22;$n1$0 = $21;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $26 = ($n1$0|0)<(10);
 if ($26) {
  $27 = (($curr$2) + -1)|0;
  $28 = $n1$0&255;
  $29 = (($buf31) + ($27)|0);
  $30 = (($28) + 48)<<24>>24;
  HEAP8[$29>>0] = $30;
  $curr$3 = $27;
  $36 = (($buf31) + ($curr$3)|0);
  $37 = (39 - ($curr$3))|0;
  $38 = (__ZN4core3fmt9Formatter12pad_integral17hdf67f97d6bf4137cE($1,1,24540,0,$36,$37)|0);
  STACKTOP = sp;return ($38|0);
 } else {
  $31 = $n1$0 << 1;
  $32 = (($curr$2) + -2)|0;
  $33 = (20664 + ($31)|0);
  $34 = (($buf31) + ($32)|0);
  $35 = HEAPU8[$33>>0]|(HEAPU8[$33+1>>0]<<8);
  HEAP8[$34>>0]=$35&255;HEAP8[$34+1>>0]=$35>>8;
  $curr$3 = $32;
  $36 = (($buf31) + ($curr$3)|0);
  $37 = (39 - ($curr$3))|0;
  $38 = (__ZN4core3fmt9Formatter12pad_integral17hdf67f97d6bf4137cE($1,1,24540,0,$36,$37)|0);
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function __ZN4core3num14from_str_radix17had35bd32e1576409E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$arith = 0, $$arith13 = 0, $$arith16 = 0, $$arith4 = 0, $$denom = 0, $$denom18 = 0, $$div = 0, $$div19 = 0, $$ispos = 0, $$ispos9 = 0, $$iszero = 0, $$iszero17 = 0, $$negcheck = 0, $$negcheck8 = 0, $$negtemp = 0, $$negtemp6 = 0, $$off = 0, $$off$i = 0, $$off$i36 = 0, $$off6$i = 0;
 var $$off6$i41 = 0, $$off7$i = 0, $$off7$i43 = 0, $$overflow = 0, $$overflow21 = 0, $$poscheck = 0, $$poscheck7 = 0, $$postemp = 0, $$postemp5 = 0, $$ptr138 = 0, $$same = 0, $$same20 = 0, $$select = 0, $$select10 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_17 = 0, $_41$sroa$0$0$off0 = 0, $_41$sroa$10$0 = 0, $_41$sroa$10$0109110 = 0, $_41$sroa$612$0 = 0, $_41$sroa$612$0108111 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $iter$sroa$0$0$in133 = 0, $iter2$sroa$0$0$in135 = 0, $not$ = 0, $radix = 0;
 var $result$0134 = 0, $result$1136 = 0, $result$2 = 0, $val$0$i = 0, $val$0$i45 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_17 = sp + 24|0;
 $_12 = sp;
 $radix = sp + 32|0;
 HEAP32[$radix>>2] = $3;
 $$off = (($3) + -2)|0;
 $not$ = ($$off>>>0)>(34);
 if ($not$) {
  $4 = $radix;
  HEAP32[$_17>>2] = $4;
  $5 = ((($_17)) + 4|0);
  HEAP32[$5>>2] = (363);
  HEAP32[$_12>>2] = 6176;
  $6 = ((($_12)) + 4|0);
  HEAP32[$6>>2] = 1;
  $_6$sroa$0$0$$sroa_idx$i = ((($_12)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
  $7 = ((($_12)) + 16|0);
  HEAP32[$7>>2] = $_17;
  $8 = ((($_12)) + 20|0);
  HEAP32[$8>>2] = 1;
  __ZN4core9panicking9panic_fmt17hbeea8425e52b5ca1E($_12,6184);
  // unreachable;
 }
 $9 = ($2|0)==(0);
 L4: do {
  if ($9) {
   $$sink = 0;
  } else {
   $11 = HEAP8[$1>>0]|0;
   switch ($11<<24>>24) {
   case 43:  {
    $_41$sroa$0$0$off0 = 1;
    label = 8;
    break;
   }
   case 45:  {
    $_41$sroa$0$0$off0 = 0;
    label = 8;
    break;
   }
   default: {
    $_41$sroa$10$0109110 = $2;$_41$sroa$612$0108111 = $1;
    label = 10;
   }
   }
   if ((label|0) == 8) {
    $_41$sroa$612$0 = ((($1)) + 1|0);
    $_41$sroa$10$0 = (($2) + -1)|0;
    $12 = ($_41$sroa$10$0|0)==(0);
    if ($12) {
     $$sink = 0;
     break;
    }
    if ($_41$sroa$0$0$off0) {
     $_41$sroa$10$0109110 = $_41$sroa$10$0;$_41$sroa$612$0108111 = $_41$sroa$612$0;
     label = 10;
    } else {
     $$ptr138 = (($1) + ($2)|0);
     $15 = ($3>>>0)>(36);
     if ($15) {
      __ZN4core9panicking5panic17hee9f4f8d26a91787E(5528);
      // unreachable;
     } else {
      $iter2$sroa$0$0$in135 = $_41$sroa$612$0;$result$1136 = 0;
     }
     while(1) {
      $26 = ((($iter2$sroa$0$0$in135)) + 1|0);
      $27 = HEAP8[$iter2$sroa$0$0$in135>>0]|0;
      $28 = $27&255;
      $$off$i = (($28) + -48)|0;
      $29 = ($$off$i>>>0)<(10);
      do {
       if ($29) {
        $val$0$i = $$off$i;
       } else {
        $$off6$i = (($28) + -97)|0;
        $32 = ($$off6$i>>>0)<(26);
        if ($32) {
         $30 = (($28) + -87)|0;
         $val$0$i = $30;
         break;
        }
        $$off7$i = (($28) + -65)|0;
        $33 = ($$off7$i>>>0)<(26);
        if (!($33)) {
         $$sink = 1;
         break L4;
        }
        $31 = (($28) + -55)|0;
        $val$0$i = $31;
       }
      } while(0);
      $34 = ($val$0$i>>>0)<($3>>>0);
      if (!($34)) {
       $$sink = 1;
       break L4;
      }
      $$arith13 = Math_imul($result$1136, $3)|0;
      $$iszero = ($3|0)==(0);
      $$denom = $$iszero ? 1 : $3;
      $$div = (($$arith13|0) / ($$denom|0))&-1;
      $$same = ($$div|0)!=($result$1136|0);
      $$overflow = $$iszero ? 0 : $$same;
      if ($$overflow) {
       $$sink = 3;
       break L4;
      }
      $$arith4 = (($$arith13) - ($val$0$i))|0;
      $$postemp5 = (($$arith13) + -2147483647)|0;
      $$negtemp6 = (($$arith13) + -2147483648)|0;
      $$poscheck7 = ($$arith4|0)<($$postemp5|0);
      $$negcheck8 = ($$arith4|0)>($$negtemp6|0);
      $$ispos9 = ($$arith13|0)>=(0);
      $$select10 = $$ispos9 ? $$poscheck7 : $$negcheck8;
      if ($$select10) {
       $$sink = 3;
       break L4;
      }
      $35 = ($26|0)==($$ptr138|0);
      if ($35) {
       $result$2 = $$arith4;
       break;
      } else {
       $iter2$sroa$0$0$in135 = $26;$result$1136 = $$arith4;
      }
     }
    }
   }
   if ((label|0) == 10) {
    $13 = (($_41$sroa$612$0108111) + ($_41$sroa$10$0109110)|0);
    $14 = ($3>>>0)>(36);
    if ($14) {
     __ZN4core9panicking5panic17hee9f4f8d26a91787E(5528);
     // unreachable;
    } else {
     $iter$sroa$0$0$in133 = $_41$sroa$612$0108111;$result$0134 = 0;
    }
    while(1) {
     $16 = ((($iter$sroa$0$0$in133)) + 1|0);
     $17 = HEAP8[$iter$sroa$0$0$in133>>0]|0;
     $18 = $17&255;
     $$off$i36 = (($18) + -48)|0;
     $19 = ($$off$i36>>>0)<(10);
     do {
      if ($19) {
       $val$0$i45 = $$off$i36;
      } else {
       $$off6$i41 = (($18) + -97)|0;
       $22 = ($$off6$i41>>>0)<(26);
       if ($22) {
        $20 = (($18) + -87)|0;
        $val$0$i45 = $20;
        break;
       }
       $$off7$i43 = (($18) + -65)|0;
       $23 = ($$off7$i43>>>0)<(26);
       if (!($23)) {
        $$sink = 1;
        break L4;
       }
       $21 = (($18) + -55)|0;
       $val$0$i45 = $21;
      }
     } while(0);
     $24 = ($val$0$i45>>>0)<($3>>>0);
     if (!($24)) {
      $$sink = 1;
      break L4;
     }
     $$arith16 = Math_imul($result$0134, $3)|0;
     $$iszero17 = ($3|0)==(0);
     $$denom18 = $$iszero17 ? 1 : $3;
     $$div19 = (($$arith16|0) / ($$denom18|0))&-1;
     $$same20 = ($$div19|0)!=($result$0134|0);
     $$overflow21 = $$iszero17 ? 0 : $$same20;
     if ($$overflow21) {
      $$sink = 2;
      break L4;
     }
     $$arith = (($$arith16) + ($val$0$i45))|0;
     $$postemp = (($$arith16) + -2147483648)|0;
     $$negtemp = (($$arith16) + 2147483647)|0;
     $$poscheck = ($$arith|0)<($$postemp|0);
     $$negcheck = ($$arith|0)>($$negtemp|0);
     $$ispos = ($$arith16|0)>=(0);
     $$select = $$ispos ? $$poscheck : $$negcheck;
     if ($$select) {
      $$sink = 2;
      break L4;
     }
     $25 = ($16|0)==($13|0);
     if ($25) {
      $result$2 = $$arith;
      break;
     } else {
      $iter$sroa$0$0$in133 = $16;$result$0134 = $$arith;
     }
    }
   }
   HEAP8[$0>>0] = 0;
   $36 = ((($0)) + 4|0);
   HEAP32[$36>>2] = $result$2;
   STACKTOP = sp;return;
  }
 } while(0);
 HEAP8[$0>>0] = 1;
 $10 = ((($0)) + 1|0);
 HEAP8[$10>>0] = $$sink;
 STACKTOP = sp;return;
}
function __ZN4core3num14from_str_radix17h219c9e963977893dE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$arith = 0, $$arith4 = 0, $$denom = 0, $$div = 0, $$iszero = 0, $$off = 0, $$off$i36 = 0, $$off6$i41 = 0, $$off7$i43 = 0, $$overflow = 0, $$overflow5 = 0, $$same = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_12 = 0, $_17 = 0, $_41$sroa$10$0108 = 0;
 var $_41$sroa$612$0107 = 0, $_6$sroa$0$0$$sroa_idx$i = 0, $cond = 0, $iter$sroa$0$0$in125 = 0, $not$ = 0, $radix = 0, $result$0126 = 0, $val$0$i45 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $_17 = sp + 24|0;
 $_12 = sp;
 $radix = sp + 32|0;
 HEAP32[$radix>>2] = $3;
 $$off = (($3) + -2)|0;
 $not$ = ($$off>>>0)>(34);
 if ($not$) {
  $4 = $radix;
  HEAP32[$_17>>2] = $4;
  $5 = ((($_17)) + 4|0);
  HEAP32[$5>>2] = (363);
  HEAP32[$_12>>2] = 6176;
  $6 = ((($_12)) + 4|0);
  HEAP32[$6>>2] = 1;
  $_6$sroa$0$0$$sroa_idx$i = ((($_12)) + 8|0);
  HEAP32[$_6$sroa$0$0$$sroa_idx$i>>2] = 0;
  $7 = ((($_12)) + 16|0);
  HEAP32[$7>>2] = $_17;
  $8 = ((($_12)) + 20|0);
  HEAP32[$8>>2] = 1;
  __ZN4core9panicking9panic_fmt17hbeea8425e52b5ca1E($_12,6184);
  // unreachable;
 }
 $9 = ($2|0)==(0);
 L4: do {
  if ($9) {
   $$sink = 0;
  } else {
   $11 = HEAP8[$1>>0]|0;
   $cond = ($11<<24>>24)==(43);
   if ($cond) {
    $12 = ((($1)) + 1|0);
    $13 = (($2) + -1)|0;
    $14 = ($13|0)==(0);
    if ($14) {
     $$sink = 0;
     break;
    } else {
     $_41$sroa$10$0108 = $13;$_41$sroa$612$0107 = $12;
    }
   } else {
    $_41$sroa$10$0108 = $2;$_41$sroa$612$0107 = $1;
   }
   $15 = (($_41$sroa$612$0107) + ($_41$sroa$10$0108)|0);
   $16 = ($3>>>0)>(36);
   if ($16) {
    __ZN4core9panicking5panic17hee9f4f8d26a91787E(5528);
    // unreachable;
   } else {
    $iter$sroa$0$0$in125 = $_41$sroa$612$0107;$result$0126 = 0;
   }
   while(1) {
    $17 = ((($iter$sroa$0$0$in125)) + 1|0);
    $18 = HEAP8[$iter$sroa$0$0$in125>>0]|0;
    $19 = $18&255;
    $$off$i36 = (($19) + -48)|0;
    $20 = ($$off$i36>>>0)<(10);
    do {
     if ($20) {
      $val$0$i45 = $$off$i36;
     } else {
      $$off6$i41 = (($19) + -97)|0;
      $23 = ($$off6$i41>>>0)<(26);
      if ($23) {
       $21 = (($19) + -87)|0;
       $val$0$i45 = $21;
       break;
      }
      $$off7$i43 = (($19) + -65)|0;
      $24 = ($$off7$i43>>>0)<(26);
      if (!($24)) {
       $$sink = 1;
       break L4;
      }
      $22 = (($19) + -55)|0;
      $val$0$i45 = $22;
     }
    } while(0);
    $25 = ($val$0$i45>>>0)<($3>>>0);
    if (!($25)) {
     $$sink = 1;
     break L4;
    }
    $$arith4 = Math_imul($result$0126, $3)|0;
    $$iszero = ($3|0)==(0);
    $$denom = $$iszero ? 1 : $3;
    $$div = (($$arith4>>>0) / ($$denom>>>0))&-1;
    $$same = ($$div|0)!=($result$0126|0);
    $$overflow5 = $$iszero ? 0 : $$same;
    if ($$overflow5) {
     $$sink = 2;
     break L4;
    }
    $$arith = (($$arith4) + ($val$0$i45))|0;
    $$overflow = ($$arith>>>0)<($$arith4>>>0);
    if ($$overflow) {
     $$sink = 2;
     break L4;
    }
    $26 = ($17|0)==($15|0);
    if ($26) {
     break;
    } else {
     $iter$sroa$0$0$in125 = $17;$result$0126 = $$arith;
    }
   }
   HEAP8[$0>>0] = 0;
   $27 = ((($0)) + 4|0);
   HEAP32[$27>>2] = $$arith;
   STACKTOP = sp;return;
  }
 } while(0);
 HEAP8[$0>>0] = 1;
 $10 = ((($0)) + 1|0);
 HEAP8[$10>>0] = $$sink;
 STACKTOP = sp;return;
}
function __ZN4core3num52__LT_impl_u20_core__str__FromStr_u20_for_u20_i32_GT_8from_str17h53ea4a06f4a409d3E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4core3num14from_str_radix17had35bd32e1576409E($0,$1,$2,10);
 return;
}
function __ZN4core3num54__LT_impl_u20_core__str__FromStr_u20_for_u20_usize_GT_8from_str17h5121c8062a733666E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4core3num14from_str_radix17h219c9e963977893dE($0,$1,$2,10);
 return;
}
function __ZN61__LT_core__num__ParseIntError_u20_as_u20_core__fmt__Debug_GT_3fmt17h473d7a476a96fc27E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_0$sroa$0$0$i$i = 0, $_17 = 0, $_9$sroa$0$0$$sroa_idx$i$i = 0, $_9$sroa$0$0$copyload$i = 0, $_9$sroa$0$0$copyload$pre$i = 0, $builder = 0, $switch4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_17 = sp + 8|0;
 $builder = sp;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 511]($3,21737,13)|0);
 HEAP32[$builder>>2] = $1;
 $_9$sroa$0$0$$sroa_idx$i$i = ((($builder)) + 4|0);
 HEAP8[$_9$sroa$0$0$$sroa_idx$i$i>>0] = $8;
 $9 = ((($builder)) + 5|0);
 HEAP8[$9>>0] = 0;
 HEAP32[$_17>>2] = $0;
 (__ZN4core3fmt8builders11DebugStruct5field17h5582ccb8e8bed3f0E($builder,21566,4,$_17,2280)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(0);
 $_9$sroa$0$0$copyload$pre$i = HEAP8[$_9$sroa$0$0$$sroa_idx$i$i>>0]|0;
 if ($11) {
  $_9$sroa$0$0$copyload$i = $_9$sroa$0$0$copyload$pre$i;
  STACKTOP = sp;return ($_9$sroa$0$0$copyload$i|0);
 }
 $switch4$i$i = ($_9$sroa$0$0$copyload$pre$i<<24>>24)==(0);
 if ($switch4$i$i) {
  $12 = HEAP32[$builder>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 4;
  $15 = ($14|0)==(0);
  $16 = ((($12)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($12)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $$sink = $15 ? 21561 : 21559;
  $22 = (FUNCTION_TABLE_iiii[$21 & 511]($17,$$sink,2)|0);
  $_0$sroa$0$0$i$i = $22;
 } else {
  $_0$sroa$0$0$i$i = 1;
 }
 HEAP8[$_9$sroa$0$0$$sroa_idx$i$i>>0] = $_0$sroa$0$0$i$i;
 $_9$sroa$0$0$copyload$i = $_0$sroa$0$0$i$i;
 STACKTOP = sp;return ($_9$sroa$0$0$copyload$i|0);
}
function __ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hdea142439e160487E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$sroa$0$0$i = 0, $trunc$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $trunc$i = HEAP8[$2>>0]|0;
 $trunc$i$clear = $trunc$i & 3;
 switch ($trunc$i$clear<<24>>24) {
 case 0:  {
  $3 = ((($1)) + 28|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($1)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiii[$8 & 511]($4,21570,5)|0);
  $_0$sroa$0$0$i = $9;
  return ($_0$sroa$0$0$i|0);
  break;
 }
 case 1:  {
  $10 = ((($1)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($1)) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (FUNCTION_TABLE_iiii[$15 & 511]($11,21750,12)|0);
  $_0$sroa$0$0$i = $16;
  return ($_0$sroa$0$0$i|0);
  break;
 }
 case 2:  {
  $17 = ((($1)) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($1)) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (FUNCTION_TABLE_iiii[$22 & 511]($18,21762,8)|0);
  $_0$sroa$0$0$i = $23;
  return ($_0$sroa$0$0$i|0);
  break;
 }
 case 3:  {
  $24 = ((($1)) + 28|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($1)) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (FUNCTION_TABLE_iiii[$29 & 511]($25,21770,9)|0);
  $_0$sroa$0$0$i = $30;
  return ($_0$sroa$0$0$i|0);
  break;
 }
 default: {
  // unreachable;
 }
 }
 return (0)|0;
}
function __ZN4core3fmt3num49__LT_impl_u20_core__fmt__Debug_u20_for_u20_u8_GT_3fmt17h439f9696de9b8938E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf31$i = 0, $curr$232$i = 0, $curr$3$i = 0, $div$i = 0, $n1$033$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf31$i = sp;
 $2 = HEAP8[$0>>0]|0;
 $3 = $2&255;
 $4 = ($2&255)>(99);
 if ($4) {
  $5 = (($2&255) % 100)&-1;
  $6 = $5&255;
  $7 = $6 << 1;
  $div$i = (($2&255) / 100)&-1;
  $8 = $div$i&255;
  $9 = (20664 + ($7)|0);
  $10 = ((($buf31$i)) + 37|0);
  $11 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8);
  HEAP8[$10>>0]=$11&255;HEAP8[$10+1>>0]=$11>>8;
  $curr$232$i = 36;$n1$033$i = $8;
  label = 4;
 } else {
  $12 = ($2&255)<(10);
  if ($12) {
   $curr$232$i = 38;$n1$033$i = $3;
   label = 4;
  } else {
   $16 = $3 << 1;
   $17 = (20664 + ($16)|0);
   $18 = ((($buf31$i)) + 37|0);
   $19 = HEAPU8[$17>>0]|(HEAPU8[$17+1>>0]<<8);
   HEAP8[$18>>0]=$19&255;HEAP8[$18+1>>0]=$19>>8;
   $curr$3$i = 37;
  }
 }
 if ((label|0) == 4) {
  $13 = $n1$033$i&255;
  $14 = (($buf31$i) + ($curr$232$i)|0);
  $15 = (($13) + 48)<<24>>24;
  HEAP8[$14>>0] = $15;
  $curr$3$i = $curr$232$i;
 }
 $20 = (($buf31$i) + ($curr$3$i)|0);
 $21 = (39 - ($curr$3$i))|0;
 $22 = (__ZN4core3fmt9Formatter12pad_integral17hdf67f97d6bf4137cE($1,1,24540,0,$20,$21)|0);
 STACKTOP = sp;return ($22|0);
}
function __ZN4core3fmt3num50__LT_impl_u20_core__fmt__Debug_u20_for_u20_i32_GT_3fmt17h5dac7a75605532c3E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_i32_GT_3fmt17ha659d9187fbcb19eE($0,$1)|0);
 return ($2|0);
}
function __ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_i32_GT_3fmt17ha659d9187fbcb19eE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$old5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf31 = 0, $curr$0 = 0, $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf31 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)>(-1);
 $4 = (0 - ($2))|0;
 $$ = $3 ? $2 : $4;
 $5 = ($$>>>0)>(9999);
 if ($5) {
  $curr$0 = 39;$n$1 = $$;
  while(1) {
   $6 = (($n$1>>>0) % 10000)&-1;
   $7 = (($n$1>>>0) / 10000)&-1;
   $8 = (($6>>>0) / 100)&-1;
   $9 = $8 << 1;
   $10 = (($6>>>0) % 100)&-1;
   $11 = $10 << 1;
   $12 = (($curr$0) + -4)|0;
   $13 = (20664 + ($9)|0);
   $14 = (($buf31) + ($12)|0);
   $15 = HEAPU8[$13>>0]|(HEAPU8[$13+1>>0]<<8);
   HEAP8[$14>>0]=$15&255;HEAP8[$14+1>>0]=$15>>8;
   $16 = (20664 + ($11)|0);
   $17 = (($curr$0) + -2)|0;
   $18 = (($buf31) + ($17)|0);
   $19 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8);
   HEAP8[$18>>0]=$19&255;HEAP8[$18+1>>0]=$19>>8;
   $$old5 = ($n$1>>>0)>(99999999);
   if ($$old5) {
    $curr$0 = $12;$n$1 = $7;
   } else {
    $curr$1 = $12;$n$2 = $7;
    break;
   }
  }
 } else {
  $curr$1 = 39;$n$2 = $$;
 }
 $20 = ($n$2|0)>(99);
 if ($20) {
  $21 = (($n$2>>>0) % 100)&-1;
  $22 = $21 << 1;
  $23 = (($n$2>>>0) / 100)&-1;
  $24 = (($curr$1) + -2)|0;
  $25 = (20664 + ($22)|0);
  $26 = (($buf31) + ($24)|0);
  $27 = HEAPU8[$25>>0]|(HEAPU8[$25+1>>0]<<8);
  HEAP8[$26>>0]=$27&255;HEAP8[$26+1>>0]=$27>>8;
  $curr$2 = $24;$n1$0 = $23;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $28 = ($n1$0|0)<(10);
 if ($28) {
  $29 = (($curr$2) + -1)|0;
  $30 = $n1$0&255;
  $31 = (($buf31) + ($29)|0);
  $32 = (($30) + 48)<<24>>24;
  HEAP8[$31>>0] = $32;
  $curr$3 = $29;
  $38 = (($buf31) + ($curr$3)|0);
  $39 = (39 - ($curr$3))|0;
  $40 = (__ZN4core3fmt9Formatter12pad_integral17hdf67f97d6bf4137cE($1,$3,24540,0,$38,$39)|0);
  STACKTOP = sp;return ($40|0);
 } else {
  $33 = $n1$0 << 1;
  $34 = (($curr$2) + -2)|0;
  $35 = (20664 + ($33)|0);
  $36 = (($buf31) + ($34)|0);
  $37 = HEAPU8[$35>>0]|(HEAPU8[$35+1>>0]<<8);
  HEAP8[$36>>0]=$37&255;HEAP8[$36+1>>0]=$37>>8;
  $curr$3 = $34;
  $38 = (($buf31) + ($curr$3)|0);
  $39 = (39 - ($curr$3))|0;
  $40 = (__ZN4core3fmt9Formatter12pad_integral17hdf67f97d6bf4137cE($1,$3,24540,0,$38,$39)|0);
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_isize_GT_3fmt17h56e2258afbf9d866E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$old5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf31 = 0, $curr$0 = 0, $curr$1 = 0, $curr$2 = 0, $curr$3 = 0, $n$1 = 0, $n$2 = 0, $n1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf31 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)>(-1);
 $4 = (0 - ($2))|0;
 $$ = $3 ? $2 : $4;
 $5 = ($$>>>0)>(9999);
 if ($5) {
  $curr$0 = 39;$n$1 = $$;
  while(1) {
   $6 = (($n$1>>>0) % 10000)&-1;
   $7 = (($n$1>>>0) / 10000)&-1;
   $8 = (($6>>>0) / 100)&-1;
   $9 = $8 << 1;
   $10 = (($6>>>0) % 100)&-1;
   $11 = $10 << 1;
   $12 = (($curr$0) + -4)|0;
   $13 = (20664 + ($9)|0);
   $14 = (($buf31) + ($12)|0);
   $15 = HEAPU8[$13>>0]|(HEAPU8[$13+1>>0]<<8);
   HEAP8[$14>>0]=$15&255;HEAP8[$14+1>>0]=$15>>8;
   $16 = (20664 + ($11)|0);
   $17 = (($curr$0) + -2)|0;
   $18 = (($buf31) + ($17)|0);
   $19 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8);
   HEAP8[$18>>0]=$19&255;HEAP8[$18+1>>0]=$19>>8;
   $$old5 = ($n$1>>>0)>(99999999);
   if ($$old5) {
    $curr$0 = $12;$n$1 = $7;
   } else {
    $curr$1 = $12;$n$2 = $7;
    break;
   }
  }
 } else {
  $curr$1 = 39;$n$2 = $$;
 }
 $20 = ($n$2|0)>(99);
 if ($20) {
  $21 = (($n$2>>>0) % 100)&-1;
  $22 = $21 << 1;
  $23 = (($n$2>>>0) / 100)&-1;
  $24 = (($curr$1) + -2)|0;
  $25 = (20664 + ($22)|0);
  $26 = (($buf31) + ($24)|0);
  $27 = HEAPU8[$25>>0]|(HEAPU8[$25+1>>0]<<8);
  HEAP8[$26>>0]=$27&255;HEAP8[$26+1>>0]=$27>>8;
  $curr$2 = $24;$n1$0 = $23;
 } else {
  $curr$2 = $curr$1;$n1$0 = $n$2;
 }
 $28 = ($n1$0|0)<(10);
 if ($28) {
  $29 = (($curr$2) + -1)|0;
  $30 = $n1$0&255;
  $31 = (($buf31) + ($29)|0);
  $32 = (($30) + 48)<<24>>24;
  HEAP8[$31>>0] = $32;
  $curr$3 = $29;
  $38 = (($buf31) + ($curr$3)|0);
  $39 = (39 - ($curr$3))|0;
  $40 = (__ZN4core3fmt9Formatter12pad_integral17hdf67f97d6bf4137cE($1,$3,24540,0,$38,$39)|0);
  STACKTOP = sp;return ($40|0);
 } else {
  $33 = $n1$0 << 1;
  $34 = (($curr$2) + -2)|0;
  $35 = (20664 + ($33)|0);
  $36 = (($buf31) + ($34)|0);
  $37 = HEAPU8[$35>>0]|(HEAPU8[$35+1>>0]<<8);
  HEAP8[$36>>0]=$37&255;HEAP8[$36+1>>0]=$37>>8;
  $curr$3 = $34;
  $38 = (($buf31) + ($curr$3)|0);
  $39 = (39 - ($curr$3))|0;
  $40 = (__ZN4core3fmt9Formatter12pad_integral17hdf67f97d6bf4137cE($1,$3,24540,0,$38,$39)|0);
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZN57__LT_core__str__Utf8Error_u20_as_u20_core__fmt__Debug_GT_3fmt17h633ebf9467a08838E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_0$sroa$0$0$i$i = 0, $_17 = 0, $_9$sroa$0$0$$sroa_idx$i$i = 0, $_9$sroa$0$0$copyload$i = 0, $_9$sroa$0$0$copyload$pre$i = 0, $builder = 0, $switch4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_17 = sp + 8|0;
 $builder = sp;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 511]($3,21779,9)|0);
 HEAP32[$builder>>2] = $1;
 $_9$sroa$0$0$$sroa_idx$i$i = ((($builder)) + 4|0);
 HEAP8[$_9$sroa$0$0$$sroa_idx$i$i>>0] = $8;
 $9 = ((($builder)) + 5|0);
 HEAP8[$9>>0] = 0;
 HEAP32[$_17>>2] = $0;
 (__ZN4core3fmt8builders11DebugStruct5field17h5582ccb8e8bed3f0E($builder,21788,11,$_17,2264)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(0);
 $_9$sroa$0$0$copyload$pre$i = HEAP8[$_9$sroa$0$0$$sroa_idx$i$i>>0]|0;
 if ($11) {
  $_9$sroa$0$0$copyload$i = $_9$sroa$0$0$copyload$pre$i;
  STACKTOP = sp;return ($_9$sroa$0$0$copyload$i|0);
 }
 $switch4$i$i = ($_9$sroa$0$0$copyload$pre$i<<24>>24)==(0);
 if ($switch4$i$i) {
  $12 = HEAP32[$builder>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 4;
  $15 = ($14|0)==(0);
  $16 = ((($12)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($12)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $$sink = $15 ? 21561 : 21559;
  $22 = (FUNCTION_TABLE_iiii[$21 & 511]($17,$$sink,2)|0);
  $_0$sroa$0$0$i$i = $22;
 } else {
  $_0$sroa$0$0$i$i = 1;
 }
 HEAP8[$_9$sroa$0$0$$sroa_idx$i$i>>0] = $_0$sroa$0$0$i$i;
 $_9$sroa$0$0$copyload$i = $_0$sroa$0$0$i$i;
 STACKTOP = sp;return ($_9$sroa$0$0$copyload$i|0);
}
function __ZN4core3fmt3num51__LT_impl_u20_core__fmt__Display_u20_for_u20_u8_GT_3fmt17h106b7670ae1de9daE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf31 = 0, $curr$232 = 0, $curr$3 = 0, $div = 0, $n1$033 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $buf31 = sp;
 $2 = HEAP8[$0>>0]|0;
 $3 = $2&255;
 $4 = ($2&255)>(99);
 if ($4) {
  $5 = (($2&255) % 100)&-1;
  $6 = $5&255;
  $7 = $6 << 1;
  $div = (($2&255) / 100)&-1;
  $8 = $div&255;
  $9 = (20664 + ($7)|0);
  $10 = ((($buf31)) + 37|0);
  $11 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8);
  HEAP8[$10>>0]=$11&255;HEAP8[$10+1>>0]=$11>>8;
  $curr$232 = 36;$n1$033 = $8;
  label = 4;
 } else {
  $12 = ($2&255)<(10);
  if ($12) {
   $curr$232 = 38;$n1$033 = $3;
   label = 4;
  } else {
   $16 = $3 << 1;
   $17 = (20664 + ($16)|0);
   $18 = ((($buf31)) + 37|0);
   $19 = HEAPU8[$17>>0]|(HEAPU8[$17+1>>0]<<8);
   HEAP8[$18>>0]=$19&255;HEAP8[$18+1>>0]=$19>>8;
   $curr$3 = 37;
  }
 }
 if ((label|0) == 4) {
  $13 = $n1$033&255;
  $14 = (($buf31) + ($curr$232)|0);
  $15 = (($13) + 48)<<24>>24;
  HEAP8[$14>>0] = $15;
  $curr$3 = $curr$232;
 }
 $20 = (($buf31) + ($curr$3)|0);
 $21 = (39 - ($curr$3))|0;
 $22 = (__ZN4core3fmt9Formatter12pad_integral17hdf67f97d6bf4137cE($1,1,24540,0,$20,$21)|0);
 STACKTOP = sp;return ($22|0);
}
function __ZN4core3fmt3num55__LT_impl_u20_core__fmt__LowerHex_u20_for_u20_usize_GT_3fmt17h1f3f900df185c5b8E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0$0$i15$i = 0, $buf$i = 0, $curr$0$i = 0, $iter$sroa$4$0$in$i = 0, $x$0$i = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $buf$i = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($buf$i)) + 128|0);
 dest=$buf$i; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $curr$0$i = 128;$iter$sroa$4$0$in$i = $3;$x$0$i = $2;
 while(1) {
  $4 = ((($iter$sroa$4$0$in$i)) + -1|0);
  $5 = $x$0$i & 15;
  $6 = $x$0$i >>> 4;
  $7 = $5&255;
  $8 = ($7&255)<(10);
  $9 = $7 | 48;
  $10 = (($7) + 87)<<24>>24;
  $_0$0$i15$i = $8 ? $9 : $10;
  HEAP8[$4>>0] = $_0$0$i15$i;
  $11 = (($curr$0$i) + -1)|0;
  $12 = ($6|0)==(0);
  if ($12) {
   break;
  } else {
   $curr$0$i = $11;$iter$sroa$4$0$in$i = $4;$x$0$i = $6;
  }
 }
 $13 = ($11>>>0)>(128);
 if ($13) {
  __ZN4core5slice22slice_index_order_fail17ha914aac85326e558E($11,128);
  // unreachable;
 } else {
  $14 = (($buf$i) + ($11)|0);
  $15 = (129 - ($curr$0$i))|0;
  $16 = (__ZN4core3fmt9Formatter12pad_integral17hdf67f97d6bf4137cE($1,1,21575,2,$14,$15)|0);
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23968|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_738($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $25 = ($26|0)<(0);
    if ($25) {
     break;
    }
    $34 = (($$04855) - ($26))|0;
    $35 = ((($$04954)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($26>>>0)>($36>>>0);
    $38 = ((($$04954)) + 8|0);
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = (($39) + ($$04756))|0;
    $40 = $37 ? $36 : 0;
    $$0 = (($26) - ($40))|0;
    $41 = HEAP32[$$150>>2]|0;
    $42 = (($41) + ($$0)|0);
    HEAP32[$$150>>2] = $42;
    $43 = ((($$150)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - ($$0))|0;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$13>>2]|0;
    $47 = $$150;
    HEAP32[$vararg_buffer3>>2] = $46;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $47;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $48 = (___syscall146(146,($vararg_buffer3|0))|0);
    $49 = (___syscall_ret($48)|0);
    $50 = ($34|0)==($49|0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $34;$$04954 = $$150;$26 = $49;
    }
   }
   $27 = ((($0)) + 16|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = $28 | 32;
   HEAP32[$0>>2] = $29;
   $30 = ($$04756|0)==(2);
   if ($30) {
    $$051 = 0;
   } else {
    $31 = ((($$04954)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($2) - ($32))|0;
    $$051 = $33;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$4>>2] = $20;
  HEAP32[$7>>2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_108()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function ___pthread_self_108() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6196|0);
}
function _dummy_738($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 415;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_105()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function ___pthread_self_105() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (21799 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 21887;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 21887;
  } else {
   $$01214 = 21887;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall4(4,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((24032|0));
 return (24040|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((24032|0));
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[1641]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[1641]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 511]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 511]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _htons($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___bswap_16($0)|0);
 return ($1|0);
}
function ___bswap_16($0) {
 $0 = $0|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($0|0))|0);
 return ($rev|0);
}
function _htonl($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___bswap_32($0)|0);
 return ($1|0);
}
function ___bswap_32($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_llvm_bswap_i32(($0|0))|0);
 return ($1|0);
}
function _ntohs($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___bswap_16_494($0)|0);
 return ($1|0);
}
function ___bswap_16_494($0) {
 $0 = $0|0;
 var $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev = (_llvm_bswap_i16(($0|0))|0);
 return ($rev|0);
}
function _strerror_r($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strerror($0)|0);
 $4 = (_strlen($3)|0);
 $5 = ($4>>>0)<($2>>>0);
 if ($5) {
  $9 = (($4) + 1)|0;
  _memcpy(($1|0),($3|0),($9|0))|0;
  $$0 = 0;
 } else {
  $6 = ($2|0)==(0);
  $7 = (($2) + -1)|0;
  if ($6) {
   $$0 = 34;
  } else {
   $8 = (($1) + ($7)|0);
   _memcpy(($1|0),($3|0),($7|0))|0;
   HEAP8[$8>>0] = 0;
   $$0 = 34;
  }
 }
 return ($$0|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4236$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01928$i = 0, $$0193$lcssa$i = 0, $$01937$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0;
 var $$0212$i$i = 0, $$024371$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0;
 var $$124470$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234253237$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$415$i = 0;
 var $$4236$i = 0, $$4351$lcssa$i = 0, $$435114$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435713$i = 0, $$723948$i = 0, $$749$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i210 = 0, $$pre$i212 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0;
 var $$pre10$i$i = 0, $$sink1$i = 0, $$sink1$i$i = 0, $$sink16$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0, $not$$i$i = 0, $not$$i17$i = 0, $not$$i209 = 0, $not$$i216 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$5$i = 0, $not$7$i$i = 0, $not$8$i = 0, $not$9$i = 0;
 var $or$cond$i = 0, $or$cond$i214 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i215 = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[6011]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (24084 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[6011] = $24;
     } else {
      $25 = HEAP32[(24060)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(24052)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (24084 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[6011] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(24060)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(24064)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (24084 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[6011] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(24060)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(24052)>>2] = $84;
     HEAP32[(24064)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(24048)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (24348 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $139 = ((($134)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $not$5$i = ($140|0)==(0|0);
     $$sink16$i = $not$5$i&1;
     $141 = (((($134)) + 16|0) + ($$sink16$i<<2)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==(0|0);
     if ($143) {
      $$0192$lcssa$i = $134;$$0193$lcssa$i = $138;
     } else {
      $$01928$i = $134;$$01937$i = $138;$145 = $142;
      while(1) {
       $144 = ((($145)) + 4|0);
       $146 = HEAP32[$144>>2]|0;
       $147 = $146 & -8;
       $148 = (($147) - ($6))|0;
       $149 = ($148>>>0)<($$01937$i>>>0);
       $$$0193$i = $149 ? $148 : $$01937$i;
       $$$0192$i = $149 ? $145 : $$01928$i;
       $150 = ((($145)) + 16|0);
       $151 = HEAP32[$150>>2]|0;
       $not$$i = ($151|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $152 = (((($145)) + 16|0) + ($$sink1$i<<2)|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($153|0)==(0|0);
       if ($154) {
        $$0192$lcssa$i = $$$0192$i;$$0193$lcssa$i = $$$0193$i;
        break;
       } else {
        $$01928$i = $$$0192$i;$$01937$i = $$$0193$i;$145 = $153;
       }
      }
     }
     $155 = HEAP32[(24060)>>2]|0;
     $156 = ($$0192$lcssa$i>>>0)<($155>>>0);
     if ($156) {
      _abort();
      // unreachable;
     }
     $157 = (($$0192$lcssa$i) + ($6)|0);
     $158 = ($$0192$lcssa$i>>>0)<($157>>>0);
     if (!($158)) {
      _abort();
      // unreachable;
     }
     $159 = ((($$0192$lcssa$i)) + 24|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ((($$0192$lcssa$i)) + 12|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = ($162|0)==($$0192$lcssa$i|0);
     do {
      if ($163) {
       $173 = ((($$0192$lcssa$i)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $176 = ((($$0192$lcssa$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $$3$i = 0;
         break;
        } else {
         $$1196$i = $177;$$1198$i = $176;
        }
       } else {
        $$1196$i = $174;$$1198$i = $173;
       }
       while(1) {
        $179 = ((($$1196$i)) + 20|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $$1196$i = $180;$$1198$i = $179;
         continue;
        }
        $182 = ((($$1196$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if ($184) {
         break;
        } else {
         $$1196$i = $183;$$1198$i = $182;
        }
       }
       $185 = ($$1198$i>>>0)<($155>>>0);
       if ($185) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1198$i>>2] = 0;
        $$3$i = $$1196$i;
        break;
       }
      } else {
       $164 = ((($$0192$lcssa$i)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165>>>0)<($155>>>0);
       if ($166) {
        _abort();
        // unreachable;
       }
       $167 = ((($165)) + 12|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==($$0192$lcssa$i|0);
       if (!($169)) {
        _abort();
        // unreachable;
       }
       $170 = ((($162)) + 8|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==($$0192$lcssa$i|0);
       if ($172) {
        HEAP32[$167>>2] = $162;
        HEAP32[$170>>2] = $165;
        $$3$i = $162;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $186 = ($160|0)==(0|0);
     L73: do {
      if (!($186)) {
       $187 = ((($$0192$lcssa$i)) + 28|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = (24348 + ($188<<2)|0);
       $190 = HEAP32[$189>>2]|0;
       $191 = ($$0192$lcssa$i|0)==($190|0);
       do {
        if ($191) {
         HEAP32[$189>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $192 = 1 << $188;
          $193 = $192 ^ -1;
          $194 = $108 & $193;
          HEAP32[(24048)>>2] = $194;
          break L73;
         }
        } else {
         $195 = HEAP32[(24060)>>2]|0;
         $196 = ($160>>>0)<($195>>>0);
         if ($196) {
          _abort();
          // unreachable;
         } else {
          $197 = ((($160)) + 16|0);
          $198 = HEAP32[$197>>2]|0;
          $not$1$i = ($198|0)!=($$0192$lcssa$i|0);
          $$sink2$i = $not$1$i&1;
          $199 = (((($160)) + 16|0) + ($$sink2$i<<2)|0);
          HEAP32[$199>>2] = $$3$i;
          $200 = ($$3$i|0)==(0|0);
          if ($200) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while(0);
       $201 = HEAP32[(24060)>>2]|0;
       $202 = ($$3$i>>>0)<($201>>>0);
       if ($202) {
        _abort();
        // unreachable;
       }
       $203 = ((($$3$i)) + 24|0);
       HEAP32[$203>>2] = $160;
       $204 = ((($$0192$lcssa$i)) + 16|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = ($205|0)==(0|0);
       do {
        if (!($206)) {
         $207 = ($205>>>0)<($201>>>0);
         if ($207) {
          _abort();
          // unreachable;
         } else {
          $208 = ((($$3$i)) + 16|0);
          HEAP32[$208>>2] = $205;
          $209 = ((($205)) + 24|0);
          HEAP32[$209>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $210 = ((($$0192$lcssa$i)) + 20|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = ($211|0)==(0|0);
       if (!($212)) {
        $213 = HEAP32[(24060)>>2]|0;
        $214 = ($211>>>0)<($213>>>0);
        if ($214) {
         _abort();
         // unreachable;
        } else {
         $215 = ((($$3$i)) + 20|0);
         HEAP32[$215>>2] = $211;
         $216 = ((($211)) + 24|0);
         HEAP32[$216>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $217 = ($$0193$lcssa$i>>>0)<(16);
     if ($217) {
      $218 = (($$0193$lcssa$i) + ($6))|0;
      $219 = $218 | 3;
      $220 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$220>>2] = $219;
      $221 = (($$0192$lcssa$i) + ($218)|0);
      $222 = ((($221)) + 4|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = $223 | 1;
      HEAP32[$222>>2] = $224;
     } else {
      $225 = $6 | 3;
      $226 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$226>>2] = $225;
      $227 = $$0193$lcssa$i | 1;
      $228 = ((($157)) + 4|0);
      HEAP32[$228>>2] = $227;
      $229 = (($157) + ($$0193$lcssa$i)|0);
      HEAP32[$229>>2] = $$0193$lcssa$i;
      $230 = ($37|0)==(0);
      if (!($230)) {
       $231 = HEAP32[(24064)>>2]|0;
       $232 = $37 >>> 3;
       $233 = $232 << 1;
       $234 = (24084 + ($233<<2)|0);
       $235 = 1 << $232;
       $236 = $8 & $235;
       $237 = ($236|0)==(0);
       if ($237) {
        $238 = $8 | $235;
        HEAP32[6011] = $238;
        $$pre$i = ((($234)) + 8|0);
        $$0189$i = $234;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $239 = ((($234)) + 8|0);
        $240 = HEAP32[$239>>2]|0;
        $241 = HEAP32[(24060)>>2]|0;
        $242 = ($240>>>0)<($241>>>0);
        if ($242) {
         _abort();
         // unreachable;
        } else {
         $$0189$i = $240;$$pre$phi$iZ2D = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $231;
       $243 = ((($$0189$i)) + 12|0);
       HEAP32[$243>>2] = $231;
       $244 = ((($231)) + 8|0);
       HEAP32[$244>>2] = $$0189$i;
       $245 = ((($231)) + 12|0);
       HEAP32[$245>>2] = $234;
      }
      HEAP32[(24052)>>2] = $$0193$lcssa$i;
      HEAP32[(24064)>>2] = $157;
     }
     $246 = ((($$0192$lcssa$i)) + 8|0);
     $$0 = $246;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $247 = ($0>>>0)>(4294967231);
   if ($247) {
    $$0197 = -1;
   } else {
    $248 = (($0) + 11)|0;
    $249 = $248 & -8;
    $250 = HEAP32[(24048)>>2]|0;
    $251 = ($250|0)==(0);
    if ($251) {
     $$0197 = $249;
    } else {
     $252 = (0 - ($249))|0;
     $253 = $248 >>> 8;
     $254 = ($253|0)==(0);
     if ($254) {
      $$0358$i = 0;
     } else {
      $255 = ($249>>>0)>(16777215);
      if ($255) {
       $$0358$i = 31;
      } else {
       $256 = (($253) + 1048320)|0;
       $257 = $256 >>> 16;
       $258 = $257 & 8;
       $259 = $253 << $258;
       $260 = (($259) + 520192)|0;
       $261 = $260 >>> 16;
       $262 = $261 & 4;
       $263 = $262 | $258;
       $264 = $259 << $262;
       $265 = (($264) + 245760)|0;
       $266 = $265 >>> 16;
       $267 = $266 & 2;
       $268 = $263 | $267;
       $269 = (14 - ($268))|0;
       $270 = $264 << $267;
       $271 = $270 >>> 15;
       $272 = (($269) + ($271))|0;
       $273 = $272 << 1;
       $274 = (($272) + 7)|0;
       $275 = $249 >>> $274;
       $276 = $275 & 1;
       $277 = $276 | $273;
       $$0358$i = $277;
      }
     }
     $278 = (24348 + ($$0358$i<<2)|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ($279|0)==(0|0);
     L117: do {
      if ($280) {
       $$2355$i = 0;$$3$i201 = 0;$$3350$i = $252;
       label = 81;
      } else {
       $281 = ($$0358$i|0)==(31);
       $282 = $$0358$i >>> 1;
       $283 = (25 - ($282))|0;
       $284 = $281 ? 0 : $283;
       $285 = $249 << $284;
       $$0342$i = 0;$$0347$i = $252;$$0353$i = $279;$$0359$i = $285;$$0362$i = 0;
       while(1) {
        $286 = ((($$0353$i)) + 4|0);
        $287 = HEAP32[$286>>2]|0;
        $288 = $287 & -8;
        $289 = (($288) - ($249))|0;
        $290 = ($289>>>0)<($$0347$i>>>0);
        if ($290) {
         $291 = ($289|0)==(0);
         if ($291) {
          $$415$i = $$0353$i;$$435114$i = 0;$$435713$i = $$0353$i;
          label = 85;
          break L117;
         } else {
          $$1343$i = $$0353$i;$$1348$i = $289;
         }
        } else {
         $$1343$i = $$0342$i;$$1348$i = $$0347$i;
        }
        $292 = ((($$0353$i)) + 20|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = $$0359$i >>> 31;
        $295 = (((($$0353$i)) + 16|0) + ($294<<2)|0);
        $296 = HEAP32[$295>>2]|0;
        $297 = ($293|0)==(0|0);
        $298 = ($293|0)==($296|0);
        $or$cond2$i = $297 | $298;
        $$1363$i = $or$cond2$i ? $$0362$i : $293;
        $299 = ($296|0)==(0|0);
        $not$8$i = $299 ^ 1;
        $300 = $not$8$i&1;
        $$0359$$i = $$0359$i << $300;
        if ($299) {
         $$2355$i = $$1363$i;$$3$i201 = $$1343$i;$$3350$i = $$1348$i;
         label = 81;
         break;
        } else {
         $$0342$i = $$1343$i;$$0347$i = $$1348$i;$$0353$i = $296;$$0359$i = $$0359$$i;$$0362$i = $$1363$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 81) {
      $301 = ($$2355$i|0)==(0|0);
      $302 = ($$3$i201|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $$0358$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $250 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $$0197 = $249;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (24348 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $$4$ph$i = 0;$$4357$ph$i = $332;
      } else {
       $$4$ph$i = $$3$i201;$$4357$ph$i = $$2355$i;
      }
      $333 = ($$4357$ph$i|0)==(0|0);
      if ($333) {
       $$4$lcssa$i = $$4$ph$i;$$4351$lcssa$i = $$3350$i;
      } else {
       $$415$i = $$4$ph$i;$$435114$i = $$3350$i;$$435713$i = $$4357$ph$i;
       label = 85;
      }
     }
     if ((label|0) == 85) {
      while(1) {
       label = 0;
       $334 = ((($$435713$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($249))|0;
       $338 = ($337>>>0)<($$435114$i>>>0);
       $$$4351$i = $338 ? $337 : $$435114$i;
       $$4357$$4$i = $338 ? $$435713$i : $$415$i;
       $339 = ((($$435713$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $not$1$i203 = ($340|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $341 = (((($$435713$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $342 = HEAP32[$341>>2]|0;
       $343 = ($342|0)==(0|0);
       if ($343) {
        $$4$lcssa$i = $$4357$$4$i;$$4351$lcssa$i = $$$4351$i;
        break;
       } else {
        $$415$i = $$4357$$4$i;$$435114$i = $$$4351$i;$$435713$i = $342;
        label = 85;
       }
      }
     }
     $344 = ($$4$lcssa$i|0)==(0|0);
     if ($344) {
      $$0197 = $249;
     } else {
      $345 = HEAP32[(24052)>>2]|0;
      $346 = (($345) - ($249))|0;
      $347 = ($$4351$lcssa$i>>>0)<($346>>>0);
      if ($347) {
       $348 = HEAP32[(24060)>>2]|0;
       $349 = ($$4$lcssa$i>>>0)<($348>>>0);
       if ($349) {
        _abort();
        // unreachable;
       }
       $350 = (($$4$lcssa$i) + ($249)|0);
       $351 = ($$4$lcssa$i>>>0)<($350>>>0);
       if (!($351)) {
        _abort();
        // unreachable;
       }
       $352 = ((($$4$lcssa$i)) + 24|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ((($$4$lcssa$i)) + 12|0);
       $355 = HEAP32[$354>>2]|0;
       $356 = ($355|0)==($$4$lcssa$i|0);
       do {
        if ($356) {
         $366 = ((($$4$lcssa$i)) + 20|0);
         $367 = HEAP32[$366>>2]|0;
         $368 = ($367|0)==(0|0);
         if ($368) {
          $369 = ((($$4$lcssa$i)) + 16|0);
          $370 = HEAP32[$369>>2]|0;
          $371 = ($370|0)==(0|0);
          if ($371) {
           $$3372$i = 0;
           break;
          } else {
           $$1370$i = $370;$$1374$i = $369;
          }
         } else {
          $$1370$i = $367;$$1374$i = $366;
         }
         while(1) {
          $372 = ((($$1370$i)) + 20|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = ($373|0)==(0|0);
          if (!($374)) {
           $$1370$i = $373;$$1374$i = $372;
           continue;
          }
          $375 = ((($$1370$i)) + 16|0);
          $376 = HEAP32[$375>>2]|0;
          $377 = ($376|0)==(0|0);
          if ($377) {
           break;
          } else {
           $$1370$i = $376;$$1374$i = $375;
          }
         }
         $378 = ($$1374$i>>>0)<($348>>>0);
         if ($378) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1374$i>>2] = 0;
          $$3372$i = $$1370$i;
          break;
         }
        } else {
         $357 = ((($$4$lcssa$i)) + 8|0);
         $358 = HEAP32[$357>>2]|0;
         $359 = ($358>>>0)<($348>>>0);
         if ($359) {
          _abort();
          // unreachable;
         }
         $360 = ((($358)) + 12|0);
         $361 = HEAP32[$360>>2]|0;
         $362 = ($361|0)==($$4$lcssa$i|0);
         if (!($362)) {
          _abort();
          // unreachable;
         }
         $363 = ((($355)) + 8|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==($$4$lcssa$i|0);
         if ($365) {
          HEAP32[$360>>2] = $355;
          HEAP32[$363>>2] = $358;
          $$3372$i = $355;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $379 = ($353|0)==(0|0);
       L164: do {
        if ($379) {
         $470 = $250;
        } else {
         $380 = ((($$4$lcssa$i)) + 28|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = (24348 + ($381<<2)|0);
         $383 = HEAP32[$382>>2]|0;
         $384 = ($$4$lcssa$i|0)==($383|0);
         do {
          if ($384) {
           HEAP32[$382>>2] = $$3372$i;
           $cond$i208 = ($$3372$i|0)==(0|0);
           if ($cond$i208) {
            $385 = 1 << $381;
            $386 = $385 ^ -1;
            $387 = $250 & $386;
            HEAP32[(24048)>>2] = $387;
            $470 = $387;
            break L164;
           }
          } else {
           $388 = HEAP32[(24060)>>2]|0;
           $389 = ($353>>>0)<($388>>>0);
           if ($389) {
            _abort();
            // unreachable;
           } else {
            $390 = ((($353)) + 16|0);
            $391 = HEAP32[$390>>2]|0;
            $not$$i209 = ($391|0)!=($$4$lcssa$i|0);
            $$sink3$i = $not$$i209&1;
            $392 = (((($353)) + 16|0) + ($$sink3$i<<2)|0);
            HEAP32[$392>>2] = $$3372$i;
            $393 = ($$3372$i|0)==(0|0);
            if ($393) {
             $470 = $250;
             break L164;
            } else {
             break;
            }
           }
          }
         } while(0);
         $394 = HEAP32[(24060)>>2]|0;
         $395 = ($$3372$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3372$i)) + 24|0);
         HEAP32[$396>>2] = $353;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3372$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3372$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $250;
         } else {
          $406 = HEAP32[(24060)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3372$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3372$i;
           $470 = $250;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4351$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4351$lcssa$i) + ($249))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $249 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4351$lcssa$i | 1;
         $421 = ((($350)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($350) + ($$4351$lcssa$i)|0);
         HEAP32[$422>>2] = $$4351$lcssa$i;
         $423 = $$4351$lcssa$i >>> 3;
         $424 = ($$4351$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (24084 + ($425<<2)|0);
          $427 = HEAP32[6011]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[6011] = $431;
           $$pre$i210 = ((($426)) + 8|0);
           $$0368$i = $426;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(24060)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0368$i = $433;$$pre$phi$i211Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $350;
          $436 = ((($$0368$i)) + 12|0);
          HEAP32[$436>>2] = $350;
          $437 = ((($350)) + 8|0);
          HEAP32[$437>>2] = $$0368$i;
          $438 = ((($350)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4351$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0361$i = 0;
         } else {
          $441 = ($$4351$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0361$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4351$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0361$i = $463;
          }
         }
         $464 = (24348 + ($$0361$i<<2)|0);
         $465 = ((($350)) + 28|0);
         HEAP32[$465>>2] = $$0361$i;
         $466 = ((($350)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0361$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(24048)>>2] = $472;
          HEAP32[$464>>2] = $350;
          $473 = ((($350)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($350)) + 12|0);
          HEAP32[$474>>2] = $350;
          $475 = ((($350)) + 8|0);
          HEAP32[$475>>2] = $350;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0361$i|0)==(31);
         $478 = $$0361$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4351$lcssa$i << $480;
         $$0344$i = $481;$$0345$i = $476;
         while(1) {
          $482 = ((($$0345$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4351$lcssa$i|0);
          if ($485) {
           label = 139;
           break;
          }
          $486 = $$0344$i >>> 31;
          $487 = (((($$0345$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0344$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 136;
           break;
          } else {
           $$0344$i = $488;$$0345$i = $489;
          }
         }
         if ((label|0) == 136) {
          $491 = HEAP32[(24060)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $350;
           $493 = ((($350)) + 24|0);
           HEAP32[$493>>2] = $$0345$i;
           $494 = ((($350)) + 12|0);
           HEAP32[$494>>2] = $350;
           $495 = ((($350)) + 8|0);
           HEAP32[$495>>2] = $350;
           break;
          }
         }
         else if ((label|0) == 139) {
          $496 = ((($$0345$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(24060)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$9$i = ($$0345$i>>>0)>=($498>>>0);
          $500 = $499 & $not$9$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $350;
           HEAP32[$496>>2] = $350;
           $502 = ((($350)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($350)) + 12|0);
           HEAP32[$503>>2] = $$0345$i;
           $504 = ((($350)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $249;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(24052)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(24064)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(24064)>>2] = $511;
   HEAP32[(24052)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(24052)>>2] = 0;
   HEAP32[(24064)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(24056)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(24056)>>2] = $526;
  $527 = HEAP32[(24068)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(24068)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[6129]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(24524)>>2] = 4096;
  HEAP32[(24520)>>2] = 4096;
  HEAP32[(24528)>>2] = -1;
  HEAP32[(24532)>>2] = -1;
  HEAP32[(24536)>>2] = 0;
  HEAP32[(24488)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[6129] = $538;
  $542 = 4096;
 } else {
  $$pre$i212 = HEAP32[(24524)>>2]|0;
  $542 = $$pre$i212;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(24484)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(24476)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i = $550 | $551;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(24488)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L244: do {
  if ($554) {
   $555 = HEAP32[(24068)>>2]|0;
   $556 = ($555|0)==(0|0);
   L246: do {
    if ($556) {
     label = 163;
    } else {
     $$0$i$i = (24492);
     while(1) {
      $557 = HEAP32[$$0$i$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 163;
       break L246;
      } else {
       $$0$i$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if ($596) {
        $$2234253237$i = $589;
       } else {
        $$723948$i = $589;$$749$i = $591;
        label = 180;
        break L244;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 171;
      }
     } else {
      $$2234253237$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 163) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if ($567) {
      $$2234253237$i = 0;
     } else {
      $568 = $566;
      $569 = HEAP32[(24520)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(24476)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i214 = $580 & $581;
      if ($or$cond$i214) {
       $582 = HEAP32[(24484)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i215 = $584 | $585;
        if ($or$cond2$i215) {
         $$2234253237$i = 0;
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723948$i = $$$i;$$749$i = $566;
        label = 180;
        break L244;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 171;
       }
      } else {
       $$2234253237$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 171) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $610 = ($$2247$ph$i|0)==((-1)|0);
      if ($610) {
       $$2234253237$i = 0;
       break;
      } else {
       $$723948$i = $$2253$ph$i;$$749$i = $$2247$ph$i;
       label = 180;
       break L244;
      }
     }
     $601 = HEAP32[(24524)>>2]|0;
     $602 = (($540) - ($$2253$ph$i))|0;
     $603 = (($602) + ($601))|0;
     $604 = (0 - ($601))|0;
     $605 = $603 & $604;
     $606 = ($605>>>0)<(2147483647);
     if (!($606)) {
      $$723948$i = $$2253$ph$i;$$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
     $607 = (_sbrk(($605|0))|0);
     $608 = ($607|0)==((-1)|0);
     if ($608) {
      (_sbrk(($597|0))|0);
      $$2234253237$i = 0;
      break;
     } else {
      $609 = (($605) + ($$2253$ph$i))|0;
      $$723948$i = $609;$$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
    }
   } while(0);
   $611 = HEAP32[(24488)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(24488)>>2] = $612;
   $$4236$i = $$2234253237$i;
   label = 178;
  } else {
   $$4236$i = 0;
   label = 178;
  }
 } while(0);
 if ((label|0) == 178) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   $619 = $615;
   $620 = $614;
   $621 = (($619) - ($620))|0;
   $622 = (($$0197) + 40)|0;
   $623 = ($621>>>0)>($622>>>0);
   $$$4236$i = $623 ? $621 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $624 = ($614|0)==((-1)|0);
   $not$$i216 = $623 ^ 1;
   $625 = $624 | $not$$i216;
   $or$cond50$i = $625 | $or$cond11$not$i;
   if (!($or$cond50$i)) {
    $$723948$i = $$$4236$i;$$749$i = $614;
    label = 180;
   }
  }
 }
 if ((label|0) == 180) {
  $626 = HEAP32[(24476)>>2]|0;
  $627 = (($626) + ($$723948$i))|0;
  HEAP32[(24476)>>2] = $627;
  $628 = HEAP32[(24480)>>2]|0;
  $629 = ($627>>>0)>($628>>>0);
  if ($629) {
   HEAP32[(24480)>>2] = $627;
  }
  $630 = HEAP32[(24068)>>2]|0;
  $631 = ($630|0)==(0|0);
  do {
   if ($631) {
    $632 = HEAP32[(24060)>>2]|0;
    $633 = ($632|0)==(0|0);
    $634 = ($$749$i>>>0)<($632>>>0);
    $or$cond12$i = $633 | $634;
    if ($or$cond12$i) {
     HEAP32[(24060)>>2] = $$749$i;
    }
    HEAP32[(24492)>>2] = $$749$i;
    HEAP32[(24496)>>2] = $$723948$i;
    HEAP32[(24504)>>2] = 0;
    $635 = HEAP32[6129]|0;
    HEAP32[(24080)>>2] = $635;
    HEAP32[(24076)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $636 = $$01$i$i << 1;
     $637 = (24084 + ($636<<2)|0);
     $638 = ((($637)) + 12|0);
     HEAP32[$638>>2] = $637;
     $639 = ((($637)) + 8|0);
     HEAP32[$639>>2] = $637;
     $640 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($640|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $640;
     }
    }
    $641 = (($$723948$i) + -40)|0;
    $642 = ((($$749$i)) + 8|0);
    $643 = $642;
    $644 = $643 & 7;
    $645 = ($644|0)==(0);
    $646 = (0 - ($643))|0;
    $647 = $646 & 7;
    $648 = $645 ? 0 : $647;
    $649 = (($$749$i) + ($648)|0);
    $650 = (($641) - ($648))|0;
    HEAP32[(24068)>>2] = $649;
    HEAP32[(24056)>>2] = $650;
    $651 = $650 | 1;
    $652 = ((($649)) + 4|0);
    HEAP32[$652>>2] = $651;
    $653 = (($649) + ($650)|0);
    $654 = ((($653)) + 4|0);
    HEAP32[$654>>2] = 40;
    $655 = HEAP32[(24532)>>2]|0;
    HEAP32[(24072)>>2] = $655;
   } else {
    $$024371$i = (24492);
    while(1) {
     $656 = HEAP32[$$024371$i>>2]|0;
     $657 = ((($$024371$i)) + 4|0);
     $658 = HEAP32[$657>>2]|0;
     $659 = (($656) + ($658)|0);
     $660 = ($$749$i|0)==($659|0);
     if ($660) {
      label = 190;
      break;
     }
     $661 = ((($$024371$i)) + 8|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = ($662|0)==(0|0);
     if ($663) {
      break;
     } else {
      $$024371$i = $662;
     }
    }
    if ((label|0) == 190) {
     $664 = ((($$024371$i)) + 12|0);
     $665 = HEAP32[$664>>2]|0;
     $666 = $665 & 8;
     $667 = ($666|0)==(0);
     if ($667) {
      $668 = ($630>>>0)>=($656>>>0);
      $669 = ($630>>>0)<($$749$i>>>0);
      $or$cond51$i = $669 & $668;
      if ($or$cond51$i) {
       $670 = (($658) + ($$723948$i))|0;
       HEAP32[$657>>2] = $670;
       $671 = HEAP32[(24056)>>2]|0;
       $672 = ((($630)) + 8|0);
       $673 = $672;
       $674 = $673 & 7;
       $675 = ($674|0)==(0);
       $676 = (0 - ($673))|0;
       $677 = $676 & 7;
       $678 = $675 ? 0 : $677;
       $679 = (($630) + ($678)|0);
       $680 = (($$723948$i) - ($678))|0;
       $681 = (($671) + ($680))|0;
       HEAP32[(24068)>>2] = $679;
       HEAP32[(24056)>>2] = $681;
       $682 = $681 | 1;
       $683 = ((($679)) + 4|0);
       HEAP32[$683>>2] = $682;
       $684 = (($679) + ($681)|0);
       $685 = ((($684)) + 4|0);
       HEAP32[$685>>2] = 40;
       $686 = HEAP32[(24532)>>2]|0;
       HEAP32[(24072)>>2] = $686;
       break;
      }
     }
    }
    $687 = HEAP32[(24060)>>2]|0;
    $688 = ($$749$i>>>0)<($687>>>0);
    if ($688) {
     HEAP32[(24060)>>2] = $$749$i;
     $752 = $$749$i;
    } else {
     $752 = $687;
    }
    $689 = (($$749$i) + ($$723948$i)|0);
    $$124470$i = (24492);
    while(1) {
     $690 = HEAP32[$$124470$i>>2]|0;
     $691 = ($690|0)==($689|0);
     if ($691) {
      label = 198;
      break;
     }
     $692 = ((($$124470$i)) + 8|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = ($693|0)==(0|0);
     if ($694) {
      break;
     } else {
      $$124470$i = $693;
     }
    }
    if ((label|0) == 198) {
     $695 = ((($$124470$i)) + 12|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = $696 & 8;
     $698 = ($697|0)==(0);
     if ($698) {
      HEAP32[$$124470$i>>2] = $$749$i;
      $699 = ((($$124470$i)) + 4|0);
      $700 = HEAP32[$699>>2]|0;
      $701 = (($700) + ($$723948$i))|0;
      HEAP32[$699>>2] = $701;
      $702 = ((($$749$i)) + 8|0);
      $703 = $702;
      $704 = $703 & 7;
      $705 = ($704|0)==(0);
      $706 = (0 - ($703))|0;
      $707 = $706 & 7;
      $708 = $705 ? 0 : $707;
      $709 = (($$749$i) + ($708)|0);
      $710 = ((($689)) + 8|0);
      $711 = $710;
      $712 = $711 & 7;
      $713 = ($712|0)==(0);
      $714 = (0 - ($711))|0;
      $715 = $714 & 7;
      $716 = $713 ? 0 : $715;
      $717 = (($689) + ($716)|0);
      $718 = $717;
      $719 = $709;
      $720 = (($718) - ($719))|0;
      $721 = (($709) + ($$0197)|0);
      $722 = (($720) - ($$0197))|0;
      $723 = $$0197 | 3;
      $724 = ((($709)) + 4|0);
      HEAP32[$724>>2] = $723;
      $725 = ($717|0)==($630|0);
      do {
       if ($725) {
        $726 = HEAP32[(24056)>>2]|0;
        $727 = (($726) + ($722))|0;
        HEAP32[(24056)>>2] = $727;
        HEAP32[(24068)>>2] = $721;
        $728 = $727 | 1;
        $729 = ((($721)) + 4|0);
        HEAP32[$729>>2] = $728;
       } else {
        $730 = HEAP32[(24064)>>2]|0;
        $731 = ($717|0)==($730|0);
        if ($731) {
         $732 = HEAP32[(24052)>>2]|0;
         $733 = (($732) + ($722))|0;
         HEAP32[(24052)>>2] = $733;
         HEAP32[(24064)>>2] = $721;
         $734 = $733 | 1;
         $735 = ((($721)) + 4|0);
         HEAP32[$735>>2] = $734;
         $736 = (($721) + ($733)|0);
         HEAP32[$736>>2] = $733;
         break;
        }
        $737 = ((($717)) + 4|0);
        $738 = HEAP32[$737>>2]|0;
        $739 = $738 & 3;
        $740 = ($739|0)==(1);
        if ($740) {
         $741 = $738 & -8;
         $742 = $738 >>> 3;
         $743 = ($738>>>0)<(256);
         L314: do {
          if ($743) {
           $744 = ((($717)) + 8|0);
           $745 = HEAP32[$744>>2]|0;
           $746 = ((($717)) + 12|0);
           $747 = HEAP32[$746>>2]|0;
           $748 = $742 << 1;
           $749 = (24084 + ($748<<2)|0);
           $750 = ($745|0)==($749|0);
           do {
            if (!($750)) {
             $751 = ($745>>>0)<($752>>>0);
             if ($751) {
              _abort();
              // unreachable;
             }
             $753 = ((($745)) + 12|0);
             $754 = HEAP32[$753>>2]|0;
             $755 = ($754|0)==($717|0);
             if ($755) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $756 = ($747|0)==($745|0);
           if ($756) {
            $757 = 1 << $742;
            $758 = $757 ^ -1;
            $759 = HEAP32[6011]|0;
            $760 = $759 & $758;
            HEAP32[6011] = $760;
            break;
           }
           $761 = ($747|0)==($749|0);
           do {
            if ($761) {
             $$pre10$i$i = ((($747)) + 8|0);
             $$pre$phi11$i$iZ2D = $$pre10$i$i;
            } else {
             $762 = ($747>>>0)<($752>>>0);
             if ($762) {
              _abort();
              // unreachable;
             }
             $763 = ((($747)) + 8|0);
             $764 = HEAP32[$763>>2]|0;
             $765 = ($764|0)==($717|0);
             if ($765) {
              $$pre$phi11$i$iZ2D = $763;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $766 = ((($745)) + 12|0);
           HEAP32[$766>>2] = $747;
           HEAP32[$$pre$phi11$i$iZ2D>>2] = $745;
          } else {
           $767 = ((($717)) + 24|0);
           $768 = HEAP32[$767>>2]|0;
           $769 = ((($717)) + 12|0);
           $770 = HEAP32[$769>>2]|0;
           $771 = ($770|0)==($717|0);
           do {
            if ($771) {
             $781 = ((($717)) + 16|0);
             $782 = ((($781)) + 4|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==(0|0);
             if ($784) {
              $785 = HEAP32[$781>>2]|0;
              $786 = ($785|0)==(0|0);
              if ($786) {
               $$3$i$i = 0;
               break;
              } else {
               $$1291$i$i = $785;$$1293$i$i = $781;
              }
             } else {
              $$1291$i$i = $783;$$1293$i$i = $782;
             }
             while(1) {
              $787 = ((($$1291$i$i)) + 20|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if (!($789)) {
               $$1291$i$i = $788;$$1293$i$i = $787;
               continue;
              }
              $790 = ((($$1291$i$i)) + 16|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if ($792) {
               break;
              } else {
               $$1291$i$i = $791;$$1293$i$i = $790;
              }
             }
             $793 = ($$1293$i$i>>>0)<($752>>>0);
             if ($793) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1293$i$i>>2] = 0;
              $$3$i$i = $$1291$i$i;
              break;
             }
            } else {
             $772 = ((($717)) + 8|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773>>>0)<($752>>>0);
             if ($774) {
              _abort();
              // unreachable;
             }
             $775 = ((($773)) + 12|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($717|0);
             if (!($777)) {
              _abort();
              // unreachable;
             }
             $778 = ((($770)) + 8|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($717|0);
             if ($780) {
              HEAP32[$775>>2] = $770;
              HEAP32[$778>>2] = $773;
              $$3$i$i = $770;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $794 = ($768|0)==(0|0);
           if ($794) {
            break;
           }
           $795 = ((($717)) + 28|0);
           $796 = HEAP32[$795>>2]|0;
           $797 = (24348 + ($796<<2)|0);
           $798 = HEAP32[$797>>2]|0;
           $799 = ($717|0)==($798|0);
           do {
            if ($799) {
             HEAP32[$797>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $800 = 1 << $796;
             $801 = $800 ^ -1;
             $802 = HEAP32[(24048)>>2]|0;
             $803 = $802 & $801;
             HEAP32[(24048)>>2] = $803;
             break L314;
            } else {
             $804 = HEAP32[(24060)>>2]|0;
             $805 = ($768>>>0)<($804>>>0);
             if ($805) {
              _abort();
              // unreachable;
             } else {
              $806 = ((($768)) + 16|0);
              $807 = HEAP32[$806>>2]|0;
              $not$$i17$i = ($807|0)!=($717|0);
              $$sink1$i$i = $not$$i17$i&1;
              $808 = (((($768)) + 16|0) + ($$sink1$i$i<<2)|0);
              HEAP32[$808>>2] = $$3$i$i;
              $809 = ($$3$i$i|0)==(0|0);
              if ($809) {
               break L314;
              } else {
               break;
              }
             }
            }
           } while(0);
           $810 = HEAP32[(24060)>>2]|0;
           $811 = ($$3$i$i>>>0)<($810>>>0);
           if ($811) {
            _abort();
            // unreachable;
           }
           $812 = ((($$3$i$i)) + 24|0);
           HEAP32[$812>>2] = $768;
           $813 = ((($717)) + 16|0);
           $814 = HEAP32[$813>>2]|0;
           $815 = ($814|0)==(0|0);
           do {
            if (!($815)) {
             $816 = ($814>>>0)<($810>>>0);
             if ($816) {
              _abort();
              // unreachable;
             } else {
              $817 = ((($$3$i$i)) + 16|0);
              HEAP32[$817>>2] = $814;
              $818 = ((($814)) + 24|0);
              HEAP32[$818>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $819 = ((($813)) + 4|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           if ($821) {
            break;
           }
           $822 = HEAP32[(24060)>>2]|0;
           $823 = ($820>>>0)<($822>>>0);
           if ($823) {
            _abort();
            // unreachable;
           } else {
            $824 = ((($$3$i$i)) + 20|0);
            HEAP32[$824>>2] = $820;
            $825 = ((($820)) + 24|0);
            HEAP32[$825>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $826 = (($717) + ($741)|0);
         $827 = (($741) + ($722))|0;
         $$0$i18$i = $826;$$0287$i$i = $827;
        } else {
         $$0$i18$i = $717;$$0287$i$i = $722;
        }
        $828 = ((($$0$i18$i)) + 4|0);
        $829 = HEAP32[$828>>2]|0;
        $830 = $829 & -2;
        HEAP32[$828>>2] = $830;
        $831 = $$0287$i$i | 1;
        $832 = ((($721)) + 4|0);
        HEAP32[$832>>2] = $831;
        $833 = (($721) + ($$0287$i$i)|0);
        HEAP32[$833>>2] = $$0287$i$i;
        $834 = $$0287$i$i >>> 3;
        $835 = ($$0287$i$i>>>0)<(256);
        if ($835) {
         $836 = $834 << 1;
         $837 = (24084 + ($836<<2)|0);
         $838 = HEAP32[6011]|0;
         $839 = 1 << $834;
         $840 = $838 & $839;
         $841 = ($840|0)==(0);
         do {
          if ($841) {
           $842 = $838 | $839;
           HEAP32[6011] = $842;
           $$pre$i19$i = ((($837)) + 8|0);
           $$0295$i$i = $837;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $843 = ((($837)) + 8|0);
           $844 = HEAP32[$843>>2]|0;
           $845 = HEAP32[(24060)>>2]|0;
           $846 = ($844>>>0)<($845>>>0);
           if (!($846)) {
            $$0295$i$i = $844;$$pre$phi$i20$iZ2D = $843;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $721;
         $847 = ((($$0295$i$i)) + 12|0);
         HEAP32[$847>>2] = $721;
         $848 = ((($721)) + 8|0);
         HEAP32[$848>>2] = $$0295$i$i;
         $849 = ((($721)) + 12|0);
         HEAP32[$849>>2] = $837;
         break;
        }
        $850 = $$0287$i$i >>> 8;
        $851 = ($850|0)==(0);
        do {
         if ($851) {
          $$0296$i$i = 0;
         } else {
          $852 = ($$0287$i$i>>>0)>(16777215);
          if ($852) {
           $$0296$i$i = 31;
           break;
          }
          $853 = (($850) + 1048320)|0;
          $854 = $853 >>> 16;
          $855 = $854 & 8;
          $856 = $850 << $855;
          $857 = (($856) + 520192)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 4;
          $860 = $859 | $855;
          $861 = $856 << $859;
          $862 = (($861) + 245760)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 2;
          $865 = $860 | $864;
          $866 = (14 - ($865))|0;
          $867 = $861 << $864;
          $868 = $867 >>> 15;
          $869 = (($866) + ($868))|0;
          $870 = $869 << 1;
          $871 = (($869) + 7)|0;
          $872 = $$0287$i$i >>> $871;
          $873 = $872 & 1;
          $874 = $873 | $870;
          $$0296$i$i = $874;
         }
        } while(0);
        $875 = (24348 + ($$0296$i$i<<2)|0);
        $876 = ((($721)) + 28|0);
        HEAP32[$876>>2] = $$0296$i$i;
        $877 = ((($721)) + 16|0);
        $878 = ((($877)) + 4|0);
        HEAP32[$878>>2] = 0;
        HEAP32[$877>>2] = 0;
        $879 = HEAP32[(24048)>>2]|0;
        $880 = 1 << $$0296$i$i;
        $881 = $879 & $880;
        $882 = ($881|0)==(0);
        if ($882) {
         $883 = $879 | $880;
         HEAP32[(24048)>>2] = $883;
         HEAP32[$875>>2] = $721;
         $884 = ((($721)) + 24|0);
         HEAP32[$884>>2] = $875;
         $885 = ((($721)) + 12|0);
         HEAP32[$885>>2] = $721;
         $886 = ((($721)) + 8|0);
         HEAP32[$886>>2] = $721;
         break;
        }
        $887 = HEAP32[$875>>2]|0;
        $888 = ($$0296$i$i|0)==(31);
        $889 = $$0296$i$i >>> 1;
        $890 = (25 - ($889))|0;
        $891 = $888 ? 0 : $890;
        $892 = $$0287$i$i << $891;
        $$0288$i$i = $892;$$0289$i$i = $887;
        while(1) {
         $893 = ((($$0289$i$i)) + 4|0);
         $894 = HEAP32[$893>>2]|0;
         $895 = $894 & -8;
         $896 = ($895|0)==($$0287$i$i|0);
         if ($896) {
          label = 265;
          break;
         }
         $897 = $$0288$i$i >>> 31;
         $898 = (((($$0289$i$i)) + 16|0) + ($897<<2)|0);
         $899 = $$0288$i$i << 1;
         $900 = HEAP32[$898>>2]|0;
         $901 = ($900|0)==(0|0);
         if ($901) {
          label = 262;
          break;
         } else {
          $$0288$i$i = $899;$$0289$i$i = $900;
         }
        }
        if ((label|0) == 262) {
         $902 = HEAP32[(24060)>>2]|0;
         $903 = ($898>>>0)<($902>>>0);
         if ($903) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$898>>2] = $721;
          $904 = ((($721)) + 24|0);
          HEAP32[$904>>2] = $$0289$i$i;
          $905 = ((($721)) + 12|0);
          HEAP32[$905>>2] = $721;
          $906 = ((($721)) + 8|0);
          HEAP32[$906>>2] = $721;
          break;
         }
        }
        else if ((label|0) == 265) {
         $907 = ((($$0289$i$i)) + 8|0);
         $908 = HEAP32[$907>>2]|0;
         $909 = HEAP32[(24060)>>2]|0;
         $910 = ($908>>>0)>=($909>>>0);
         $not$7$i$i = ($$0289$i$i>>>0)>=($909>>>0);
         $911 = $910 & $not$7$i$i;
         if ($911) {
          $912 = ((($908)) + 12|0);
          HEAP32[$912>>2] = $721;
          HEAP32[$907>>2] = $721;
          $913 = ((($721)) + 8|0);
          HEAP32[$913>>2] = $908;
          $914 = ((($721)) + 12|0);
          HEAP32[$914>>2] = $$0289$i$i;
          $915 = ((($721)) + 24|0);
          HEAP32[$915>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1047 = ((($709)) + 8|0);
      $$0 = $1047;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (24492);
    while(1) {
     $916 = HEAP32[$$0$i$i$i>>2]|0;
     $917 = ($916>>>0)>($630>>>0);
     if (!($917)) {
      $918 = ((($$0$i$i$i)) + 4|0);
      $919 = HEAP32[$918>>2]|0;
      $920 = (($916) + ($919)|0);
      $921 = ($920>>>0)>($630>>>0);
      if ($921) {
       break;
      }
     }
     $922 = ((($$0$i$i$i)) + 8|0);
     $923 = HEAP32[$922>>2]|0;
     $$0$i$i$i = $923;
    }
    $924 = ((($920)) + -47|0);
    $925 = ((($924)) + 8|0);
    $926 = $925;
    $927 = $926 & 7;
    $928 = ($927|0)==(0);
    $929 = (0 - ($926))|0;
    $930 = $929 & 7;
    $931 = $928 ? 0 : $930;
    $932 = (($924) + ($931)|0);
    $933 = ((($630)) + 16|0);
    $934 = ($932>>>0)<($933>>>0);
    $935 = $934 ? $630 : $932;
    $936 = ((($935)) + 8|0);
    $937 = ((($935)) + 24|0);
    $938 = (($$723948$i) + -40)|0;
    $939 = ((($$749$i)) + 8|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    $943 = (0 - ($940))|0;
    $944 = $943 & 7;
    $945 = $942 ? 0 : $944;
    $946 = (($$749$i) + ($945)|0);
    $947 = (($938) - ($945))|0;
    HEAP32[(24068)>>2] = $946;
    HEAP32[(24056)>>2] = $947;
    $948 = $947 | 1;
    $949 = ((($946)) + 4|0);
    HEAP32[$949>>2] = $948;
    $950 = (($946) + ($947)|0);
    $951 = ((($950)) + 4|0);
    HEAP32[$951>>2] = 40;
    $952 = HEAP32[(24532)>>2]|0;
    HEAP32[(24072)>>2] = $952;
    $953 = ((($935)) + 4|0);
    HEAP32[$953>>2] = 27;
    ;HEAP32[$936>>2]=HEAP32[(24492)>>2]|0;HEAP32[$936+4>>2]=HEAP32[(24492)+4>>2]|0;HEAP32[$936+8>>2]=HEAP32[(24492)+8>>2]|0;HEAP32[$936+12>>2]=HEAP32[(24492)+12>>2]|0;
    HEAP32[(24492)>>2] = $$749$i;
    HEAP32[(24496)>>2] = $$723948$i;
    HEAP32[(24504)>>2] = 0;
    HEAP32[(24500)>>2] = $936;
    $955 = $937;
    while(1) {
     $954 = ((($955)) + 4|0);
     HEAP32[$954>>2] = 7;
     $956 = ((($955)) + 8|0);
     $957 = ($956>>>0)<($920>>>0);
     if ($957) {
      $955 = $954;
     } else {
      break;
     }
    }
    $958 = ($935|0)==($630|0);
    if (!($958)) {
     $959 = $935;
     $960 = $630;
     $961 = (($959) - ($960))|0;
     $962 = HEAP32[$953>>2]|0;
     $963 = $962 & -2;
     HEAP32[$953>>2] = $963;
     $964 = $961 | 1;
     $965 = ((($630)) + 4|0);
     HEAP32[$965>>2] = $964;
     HEAP32[$935>>2] = $961;
     $966 = $961 >>> 3;
     $967 = ($961>>>0)<(256);
     if ($967) {
      $968 = $966 << 1;
      $969 = (24084 + ($968<<2)|0);
      $970 = HEAP32[6011]|0;
      $971 = 1 << $966;
      $972 = $970 & $971;
      $973 = ($972|0)==(0);
      if ($973) {
       $974 = $970 | $971;
       HEAP32[6011] = $974;
       $$pre$i$i = ((($969)) + 8|0);
       $$0211$i$i = $969;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $975 = ((($969)) + 8|0);
       $976 = HEAP32[$975>>2]|0;
       $977 = HEAP32[(24060)>>2]|0;
       $978 = ($976>>>0)<($977>>>0);
       if ($978) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $976;$$pre$phi$i$iZ2D = $975;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $630;
      $979 = ((($$0211$i$i)) + 12|0);
      HEAP32[$979>>2] = $630;
      $980 = ((($630)) + 8|0);
      HEAP32[$980>>2] = $$0211$i$i;
      $981 = ((($630)) + 12|0);
      HEAP32[$981>>2] = $969;
      break;
     }
     $982 = $961 >>> 8;
     $983 = ($982|0)==(0);
     if ($983) {
      $$0212$i$i = 0;
     } else {
      $984 = ($961>>>0)>(16777215);
      if ($984) {
       $$0212$i$i = 31;
      } else {
       $985 = (($982) + 1048320)|0;
       $986 = $985 >>> 16;
       $987 = $986 & 8;
       $988 = $982 << $987;
       $989 = (($988) + 520192)|0;
       $990 = $989 >>> 16;
       $991 = $990 & 4;
       $992 = $991 | $987;
       $993 = $988 << $991;
       $994 = (($993) + 245760)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 2;
       $997 = $992 | $996;
       $998 = (14 - ($997))|0;
       $999 = $993 << $996;
       $1000 = $999 >>> 15;
       $1001 = (($998) + ($1000))|0;
       $1002 = $1001 << 1;
       $1003 = (($1001) + 7)|0;
       $1004 = $961 >>> $1003;
       $1005 = $1004 & 1;
       $1006 = $1005 | $1002;
       $$0212$i$i = $1006;
      }
     }
     $1007 = (24348 + ($$0212$i$i<<2)|0);
     $1008 = ((($630)) + 28|0);
     HEAP32[$1008>>2] = $$0212$i$i;
     $1009 = ((($630)) + 20|0);
     HEAP32[$1009>>2] = 0;
     HEAP32[$933>>2] = 0;
     $1010 = HEAP32[(24048)>>2]|0;
     $1011 = 1 << $$0212$i$i;
     $1012 = $1010 & $1011;
     $1013 = ($1012|0)==(0);
     if ($1013) {
      $1014 = $1010 | $1011;
      HEAP32[(24048)>>2] = $1014;
      HEAP32[$1007>>2] = $630;
      $1015 = ((($630)) + 24|0);
      HEAP32[$1015>>2] = $1007;
      $1016 = ((($630)) + 12|0);
      HEAP32[$1016>>2] = $630;
      $1017 = ((($630)) + 8|0);
      HEAP32[$1017>>2] = $630;
      break;
     }
     $1018 = HEAP32[$1007>>2]|0;
     $1019 = ($$0212$i$i|0)==(31);
     $1020 = $$0212$i$i >>> 1;
     $1021 = (25 - ($1020))|0;
     $1022 = $1019 ? 0 : $1021;
     $1023 = $961 << $1022;
     $$0206$i$i = $1023;$$0207$i$i = $1018;
     while(1) {
      $1024 = ((($$0207$i$i)) + 4|0);
      $1025 = HEAP32[$1024>>2]|0;
      $1026 = $1025 & -8;
      $1027 = ($1026|0)==($961|0);
      if ($1027) {
       label = 292;
       break;
      }
      $1028 = $$0206$i$i >>> 31;
      $1029 = (((($$0207$i$i)) + 16|0) + ($1028<<2)|0);
      $1030 = $$0206$i$i << 1;
      $1031 = HEAP32[$1029>>2]|0;
      $1032 = ($1031|0)==(0|0);
      if ($1032) {
       label = 289;
       break;
      } else {
       $$0206$i$i = $1030;$$0207$i$i = $1031;
      }
     }
     if ((label|0) == 289) {
      $1033 = HEAP32[(24060)>>2]|0;
      $1034 = ($1029>>>0)<($1033>>>0);
      if ($1034) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1029>>2] = $630;
       $1035 = ((($630)) + 24|0);
       HEAP32[$1035>>2] = $$0207$i$i;
       $1036 = ((($630)) + 12|0);
       HEAP32[$1036>>2] = $630;
       $1037 = ((($630)) + 8|0);
       HEAP32[$1037>>2] = $630;
       break;
      }
     }
     else if ((label|0) == 292) {
      $1038 = ((($$0207$i$i)) + 8|0);
      $1039 = HEAP32[$1038>>2]|0;
      $1040 = HEAP32[(24060)>>2]|0;
      $1041 = ($1039>>>0)>=($1040>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1040>>>0);
      $1042 = $1041 & $not$$i$i;
      if ($1042) {
       $1043 = ((($1039)) + 12|0);
       HEAP32[$1043>>2] = $630;
       HEAP32[$1038>>2] = $630;
       $1044 = ((($630)) + 8|0);
       HEAP32[$1044>>2] = $1039;
       $1045 = ((($630)) + 12|0);
       HEAP32[$1045>>2] = $$0207$i$i;
       $1046 = ((($630)) + 24|0);
       HEAP32[$1046>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1048 = HEAP32[(24056)>>2]|0;
  $1049 = ($1048>>>0)>($$0197>>>0);
  if ($1049) {
   $1050 = (($1048) - ($$0197))|0;
   HEAP32[(24056)>>2] = $1050;
   $1051 = HEAP32[(24068)>>2]|0;
   $1052 = (($1051) + ($$0197)|0);
   HEAP32[(24068)>>2] = $1052;
   $1053 = $1050 | 1;
   $1054 = ((($1052)) + 4|0);
   HEAP32[$1054>>2] = $1053;
   $1055 = $$0197 | 3;
   $1056 = ((($1051)) + 4|0);
   HEAP32[$1056>>2] = $1055;
   $1057 = ((($1051)) + 8|0);
   $$0 = $1057;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1058 = (___errno_location()|0);
 HEAP32[$1058>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre = 0, $$pre$phi443Z2D = 0, $$pre$phi445Z2D = 0, $$pre$phiZ2D = 0, $$pre442 = 0;
 var $$pre444 = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond421 = 0, $cond422 = 0, $not$ = 0, $not$405 = 0, $not$437 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(24060)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 L10: do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(24064)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $104 = ((($10)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $$1 = $16;$$1382 = $17;$113 = $16;
     break;
    }
    $108 = (($16) + ($17)|0);
    $109 = ((($16)) + 4|0);
    $110 = $17 | 1;
    $111 = $105 & -2;
    HEAP32[(24052)>>2] = $17;
    HEAP32[$104>>2] = $111;
    HEAP32[$109>>2] = $110;
    HEAP32[$108>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (24084 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[6011]|0;
     $38 = $37 & $36;
     HEAP32[6011] = $38;
     $$1 = $16;$$1382 = $17;$113 = $16;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre444 = ((($26)) + 8|0);
     $$pre$phi445Z2D = $$pre444;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi445Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi445Z2D>>2] = $24;
    $$1 = $16;$$1382 = $17;$113 = $16;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1387 = $63;$$1390 = $59;
      }
     } else {
      $$1387 = $61;$$1390 = $60;
     }
     while(1) {
      $65 = ((($$1387)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1387 = $66;$$1390 = $65;
       continue;
      }
      $68 = ((($$1387)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1387 = $69;$$1390 = $68;
      }
     }
     $71 = ($$1390>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1390>>2] = 0;
      $$3 = $$1387;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1382 = $17;$113 = $16;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (24348 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    do {
     if ($77) {
      HEAP32[$75>>2] = $$3;
      $cond421 = ($$3|0)==(0|0);
      if ($cond421) {
       $78 = 1 << $74;
       $79 = $78 ^ -1;
       $80 = HEAP32[(24048)>>2]|0;
       $81 = $80 & $79;
       HEAP32[(24048)>>2] = $81;
       $$1 = $16;$$1382 = $17;$113 = $16;
       break L10;
      }
     } else {
      $82 = HEAP32[(24060)>>2]|0;
      $83 = ($46>>>0)<($82>>>0);
      if ($83) {
       _abort();
       // unreachable;
      } else {
       $84 = ((($46)) + 16|0);
       $85 = HEAP32[$84>>2]|0;
       $not$405 = ($85|0)!=($16|0);
       $$sink3 = $not$405&1;
       $86 = (((($46)) + 16|0) + ($$sink3<<2)|0);
       HEAP32[$86>>2] = $$3;
       $87 = ($$3|0)==(0|0);
       if ($87) {
        $$1 = $16;$$1382 = $17;$113 = $16;
        break L10;
       } else {
        break;
       }
      }
     }
    } while(0);
    $88 = HEAP32[(24060)>>2]|0;
    $89 = ($$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($$3)) + 24|0);
    HEAP32[$90>>2] = $46;
    $91 = ((($16)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $$1 = $16;$$1382 = $17;$113 = $16;
    } else {
     $100 = HEAP32[(24060)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $$3;
      $$1 = $16;$$1382 = $17;$113 = $16;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1382 = $9;$113 = $2;
  }
 } while(0);
 $112 = ($113>>>0)<($10>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(24068)>>2]|0;
  $121 = ($10|0)==($120|0);
  $122 = HEAP32[(24064)>>2]|0;
  if ($121) {
   $123 = HEAP32[(24056)>>2]|0;
   $124 = (($123) + ($$1382))|0;
   HEAP32[(24056)>>2] = $124;
   HEAP32[(24068)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = ($$1|0)==($122|0);
   if (!($127)) {
    return;
   }
   HEAP32[(24064)>>2] = 0;
   HEAP32[(24052)>>2] = 0;
   return;
  }
  $128 = ($10|0)==($122|0);
  if ($128) {
   $129 = HEAP32[(24052)>>2]|0;
   $130 = (($129) + ($$1382))|0;
   HEAP32[(24052)>>2] = $130;
   HEAP32[(24064)>>2] = $113;
   $131 = $130 | 1;
   $132 = ((($$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($113) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $115 & -8;
  $135 = (($134) + ($$1382))|0;
  $136 = $115 >>> 3;
  $137 = ($115>>>0)<(256);
  L108: do {
   if ($137) {
    $138 = ((($10)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($10)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (24084 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(24060)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($10|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[6011]|0;
     $154 = $153 & $152;
     HEAP32[6011] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre442 = ((($141)) + 8|0);
     $$pre$phi443Z2D = $$pre442;
    } else {
     $156 = HEAP32[(24060)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($10|0);
     if ($160) {
      $$pre$phi443Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi443Z2D>>2] = $139;
   } else {
    $162 = ((($10)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($10)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($10|0);
    do {
     if ($166) {
      $177 = ((($10)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $$3400 = 0;
        break;
       } else {
        $$1398 = $181;$$1402 = $177;
       }
      } else {
       $$1398 = $179;$$1402 = $178;
      }
      while(1) {
       $183 = ((($$1398)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $$1398 = $184;$$1402 = $183;
        continue;
       }
       $186 = ((($$1398)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $$1398 = $187;$$1402 = $186;
       }
      }
      $189 = HEAP32[(24060)>>2]|0;
      $190 = ($$1402>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1402>>2] = 0;
       $$3400 = $$1398;
       break;
      }
     } else {
      $167 = ((($10)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(24060)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($10|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($10|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $$3400 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($10)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (24348 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($10|0)==($195|0);
     do {
      if ($196) {
       HEAP32[$194>>2] = $$3400;
       $cond422 = ($$3400|0)==(0|0);
       if ($cond422) {
        $197 = 1 << $193;
        $198 = $197 ^ -1;
        $199 = HEAP32[(24048)>>2]|0;
        $200 = $199 & $198;
        HEAP32[(24048)>>2] = $200;
        break L108;
       }
      } else {
       $201 = HEAP32[(24060)>>2]|0;
       $202 = ($163>>>0)<($201>>>0);
       if ($202) {
        _abort();
        // unreachable;
       } else {
        $203 = ((($163)) + 16|0);
        $204 = HEAP32[$203>>2]|0;
        $not$ = ($204|0)!=($10|0);
        $$sink5 = $not$&1;
        $205 = (((($163)) + 16|0) + ($$sink5<<2)|0);
        HEAP32[$205>>2] = $$3400;
        $206 = ($$3400|0)==(0|0);
        if ($206) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while(0);
     $207 = HEAP32[(24060)>>2]|0;
     $208 = ($$3400>>>0)<($207>>>0);
     if ($208) {
      _abort();
      // unreachable;
     }
     $209 = ((($$3400)) + 24|0);
     HEAP32[$209>>2] = $163;
     $210 = ((($10)) + 16|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ($211|0)==(0|0);
     do {
      if (!($212)) {
       $213 = ($211>>>0)<($207>>>0);
       if ($213) {
        _abort();
        // unreachable;
       } else {
        $214 = ((($$3400)) + 16|0);
        HEAP32[$214>>2] = $211;
        $215 = ((($211)) + 24|0);
        HEAP32[$215>>2] = $$3400;
        break;
       }
      }
     } while(0);
     $216 = ((($210)) + 4|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = ($217|0)==(0|0);
     if (!($218)) {
      $219 = HEAP32[(24060)>>2]|0;
      $220 = ($217>>>0)<($219>>>0);
      if ($220) {
       _abort();
       // unreachable;
      } else {
       $221 = ((($$3400)) + 20|0);
       HEAP32[$221>>2] = $217;
       $222 = ((($217)) + 24|0);
       HEAP32[$222>>2] = $$3400;
       break;
      }
     }
    }
   }
  } while(0);
  $223 = $135 | 1;
  $224 = ((($$1)) + 4|0);
  HEAP32[$224>>2] = $223;
  $225 = (($113) + ($135)|0);
  HEAP32[$225>>2] = $135;
  $226 = HEAP32[(24064)>>2]|0;
  $227 = ($$1|0)==($226|0);
  if ($227) {
   HEAP32[(24052)>>2] = $135;
   return;
  } else {
   $$2 = $135;
  }
 } else {
  $228 = $115 & -2;
  HEAP32[$114>>2] = $228;
  $229 = $$1382 | 1;
  $230 = ((($$1)) + 4|0);
  HEAP32[$230>>2] = $229;
  $231 = (($113) + ($$1382)|0);
  HEAP32[$231>>2] = $$1382;
  $$2 = $$1382;
 }
 $232 = $$2 >>> 3;
 $233 = ($$2>>>0)<(256);
 if ($233) {
  $234 = $232 << 1;
  $235 = (24084 + ($234<<2)|0);
  $236 = HEAP32[6011]|0;
  $237 = 1 << $232;
  $238 = $236 & $237;
  $239 = ($238|0)==(0);
  if ($239) {
   $240 = $236 | $237;
   HEAP32[6011] = $240;
   $$pre = ((($235)) + 8|0);
   $$0403 = $235;$$pre$phiZ2D = $$pre;
  } else {
   $241 = ((($235)) + 8|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = HEAP32[(24060)>>2]|0;
   $244 = ($242>>>0)<($243>>>0);
   if ($244) {
    _abort();
    // unreachable;
   } else {
    $$0403 = $242;$$pre$phiZ2D = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $245 = ((($$0403)) + 12|0);
  HEAP32[$245>>2] = $$1;
  $246 = ((($$1)) + 8|0);
  HEAP32[$246>>2] = $$0403;
  $247 = ((($$1)) + 12|0);
  HEAP32[$247>>2] = $235;
  return;
 }
 $248 = $$2 >>> 8;
 $249 = ($248|0)==(0);
 if ($249) {
  $$0396 = 0;
 } else {
  $250 = ($$2>>>0)>(16777215);
  if ($250) {
   $$0396 = 31;
  } else {
   $251 = (($248) + 1048320)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 8;
   $254 = $248 << $253;
   $255 = (($254) + 520192)|0;
   $256 = $255 >>> 16;
   $257 = $256 & 4;
   $258 = $257 | $253;
   $259 = $254 << $257;
   $260 = (($259) + 245760)|0;
   $261 = $260 >>> 16;
   $262 = $261 & 2;
   $263 = $258 | $262;
   $264 = (14 - ($263))|0;
   $265 = $259 << $262;
   $266 = $265 >>> 15;
   $267 = (($264) + ($266))|0;
   $268 = $267 << 1;
   $269 = (($267) + 7)|0;
   $270 = $$2 >>> $269;
   $271 = $270 & 1;
   $272 = $271 | $268;
   $$0396 = $272;
  }
 }
 $273 = (24348 + ($$0396<<2)|0);
 $274 = ((($$1)) + 28|0);
 HEAP32[$274>>2] = $$0396;
 $275 = ((($$1)) + 16|0);
 $276 = ((($$1)) + 20|0);
 HEAP32[$276>>2] = 0;
 HEAP32[$275>>2] = 0;
 $277 = HEAP32[(24048)>>2]|0;
 $278 = 1 << $$0396;
 $279 = $277 & $278;
 $280 = ($279|0)==(0);
 do {
  if ($280) {
   $281 = $277 | $278;
   HEAP32[(24048)>>2] = $281;
   HEAP32[$273>>2] = $$1;
   $282 = ((($$1)) + 24|0);
   HEAP32[$282>>2] = $273;
   $283 = ((($$1)) + 12|0);
   HEAP32[$283>>2] = $$1;
   $284 = ((($$1)) + 8|0);
   HEAP32[$284>>2] = $$1;
  } else {
   $285 = HEAP32[$273>>2]|0;
   $286 = ($$0396|0)==(31);
   $287 = $$0396 >>> 1;
   $288 = (25 - ($287))|0;
   $289 = $286 ? 0 : $288;
   $290 = $$2 << $289;
   $$0383 = $290;$$0384 = $285;
   while(1) {
    $291 = ((($$0384)) + 4|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = $292 & -8;
    $294 = ($293|0)==($$2|0);
    if ($294) {
     label = 124;
     break;
    }
    $295 = $$0383 >>> 31;
    $296 = (((($$0384)) + 16|0) + ($295<<2)|0);
    $297 = $$0383 << 1;
    $298 = HEAP32[$296>>2]|0;
    $299 = ($298|0)==(0|0);
    if ($299) {
     label = 121;
     break;
    } else {
     $$0383 = $297;$$0384 = $298;
    }
   }
   if ((label|0) == 121) {
    $300 = HEAP32[(24060)>>2]|0;
    $301 = ($296>>>0)<($300>>>0);
    if ($301) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$296>>2] = $$1;
     $302 = ((($$1)) + 24|0);
     HEAP32[$302>>2] = $$0384;
     $303 = ((($$1)) + 12|0);
     HEAP32[$303>>2] = $$1;
     $304 = ((($$1)) + 8|0);
     HEAP32[$304>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 124) {
    $305 = ((($$0384)) + 8|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = HEAP32[(24060)>>2]|0;
    $308 = ($306>>>0)>=($307>>>0);
    $not$437 = ($$0384>>>0)>=($307>>>0);
    $309 = $308 & $not$437;
    if ($309) {
     $310 = ((($306)) + 12|0);
     HEAP32[$310>>2] = $$1;
     HEAP32[$305>>2] = $$1;
     $311 = ((($$1)) + 8|0);
     HEAP32[$311>>2] = $306;
     $312 = ((($$1)) + 12|0);
     HEAP32[$312>>2] = $$0384;
     $313 = ((($$1)) + 24|0);
     HEAP32[$313>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $314 = HEAP32[(24076)>>2]|0;
 $315 = (($314) + -1)|0;
 HEAP32[(24076)>>2] = $315;
 $316 = ($315|0)==(0);
 if ($316) {
  $$0212$in$i = (24500);
 } else {
  return;
 }
 while(1) {
  $$0212$i = HEAP32[$$0212$in$i>>2]|0;
  $317 = ($$0212$i|0)==(0|0);
  $318 = ((($$0212$i)) + 8|0);
  if ($317) {
   break;
  } else {
   $$0212$in$i = $318;
  }
 }
 HEAP32[(24076)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cond = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(24060)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(24524)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(24068)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(24056)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $41 = $39 | 1;
  $42 = ((($40)) + 4|0);
  $43 = $3 & 1;
  $44 = $43 | $1;
  $45 = $44 | 2;
  HEAP32[$2>>2] = $45;
  HEAP32[$42>>2] = $41;
  HEAP32[(24068)>>2] = $40;
  HEAP32[(24056)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(24064)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(24052)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  $53 = $3 & 1;
  if ($52) {
   $54 = (($0) + ($1)|0);
   $55 = (($54) + ($51)|0);
   $56 = $53 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($54)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$55>>2] = $51;
   $60 = ((($55)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $54;$storemerge1 = $51;
  } else {
   $63 = $53 | $49;
   $64 = $63 | 2;
   HEAP32[$2>>2] = $64;
   $65 = (($0) + ($49)|0);
   $66 = ((($65)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $67 | 1;
   HEAP32[$66>>2] = $68;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(24052)>>2] = $storemerge1;
  HEAP32[(24064)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $69 = $10 & 2;
 $70 = ($69|0)==(0);
 if (!($70)) {
  $$2 = 0;
  return ($$2|0);
 }
 $71 = $10 & -8;
 $72 = (($71) + ($4))|0;
 $73 = ($72>>>0)<($1>>>0);
 if ($73) {
  $$2 = 0;
  return ($$2|0);
 }
 $74 = (($72) - ($1))|0;
 $75 = $10 >>> 3;
 $76 = ($10>>>0)<(256);
 L49: do {
  if ($76) {
   $77 = ((($5)) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ((($5)) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $75 << 1;
   $82 = (24084 + ($81<<2)|0);
   $83 = ($78|0)==($82|0);
   if (!($83)) {
    $84 = ($78>>>0)<($6>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($78)) + 12|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($86|0)==($5|0);
    if (!($87)) {
     _abort();
     // unreachable;
    }
   }
   $88 = ($80|0)==($78|0);
   if ($88) {
    $89 = 1 << $75;
    $90 = $89 ^ -1;
    $91 = HEAP32[6011]|0;
    $92 = $91 & $90;
    HEAP32[6011] = $92;
    break;
   }
   $93 = ($80|0)==($82|0);
   if ($93) {
    $$pre = ((($80)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $94 = ($80>>>0)<($6>>>0);
    if ($94) {
     _abort();
     // unreachable;
    }
    $95 = ((($80)) + 8|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)==($5|0);
    if ($97) {
     $$pre$phiZ2D = $95;
    } else {
     _abort();
     // unreachable;
    }
   }
   $98 = ((($78)) + 12|0);
   HEAP32[$98>>2] = $80;
   HEAP32[$$pre$phiZ2D>>2] = $78;
  } else {
   $99 = ((($5)) + 24|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($5)) + 12|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)==($5|0);
   do {
    if ($103) {
     $113 = ((($5)) + 16|0);
     $114 = ((($113)) + 4|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ($115|0)==(0|0);
     if ($116) {
      $117 = HEAP32[$113>>2]|0;
      $118 = ($117|0)==(0|0);
      if ($118) {
       $$3 = 0;
       break;
      } else {
       $$1272 = $117;$$1275 = $113;
      }
     } else {
      $$1272 = $115;$$1275 = $114;
     }
     while(1) {
      $119 = ((($$1272)) + 20|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = ($120|0)==(0|0);
      if (!($121)) {
       $$1272 = $120;$$1275 = $119;
       continue;
      }
      $122 = ((($$1272)) + 16|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ($123|0)==(0|0);
      if ($124) {
       break;
      } else {
       $$1272 = $123;$$1275 = $122;
      }
     }
     $125 = ($$1275>>>0)<($6>>>0);
     if ($125) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1275>>2] = 0;
      $$3 = $$1272;
      break;
     }
    } else {
     $104 = ((($5)) + 8|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = ($105>>>0)<($6>>>0);
     if ($106) {
      _abort();
      // unreachable;
     }
     $107 = ((($105)) + 12|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ($108|0)==($5|0);
     if (!($109)) {
      _abort();
      // unreachable;
     }
     $110 = ((($102)) + 8|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($111|0)==($5|0);
     if ($112) {
      HEAP32[$107>>2] = $102;
      HEAP32[$110>>2] = $105;
      $$3 = $102;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $126 = ($100|0)==(0|0);
   if (!($126)) {
    $127 = ((($5)) + 28|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (24348 + ($128<<2)|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($5|0)==($130|0);
    do {
     if ($131) {
      HEAP32[$129>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $132 = 1 << $128;
       $133 = $132 ^ -1;
       $134 = HEAP32[(24048)>>2]|0;
       $135 = $134 & $133;
       HEAP32[(24048)>>2] = $135;
       break L49;
      }
     } else {
      $136 = HEAP32[(24060)>>2]|0;
      $137 = ($100>>>0)<($136>>>0);
      if ($137) {
       _abort();
       // unreachable;
      } else {
       $138 = ((($100)) + 16|0);
       $139 = HEAP32[$138>>2]|0;
       $not$ = ($139|0)!=($5|0);
       $$sink1 = $not$&1;
       $140 = (((($100)) + 16|0) + ($$sink1<<2)|0);
       HEAP32[$140>>2] = $$3;
       $141 = ($$3|0)==(0|0);
       if ($141) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while(0);
    $142 = HEAP32[(24060)>>2]|0;
    $143 = ($$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($$3)) + 24|0);
    HEAP32[$144>>2] = $100;
    $145 = ((($5)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(24060)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($74>>>0)<(16);
 $159 = $3 & 1;
 if ($158) {
  $160 = $72 | $159;
  $161 = $160 | 2;
  HEAP32[$2>>2] = $161;
  $162 = (($0) + ($72)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $$2 = $0;
  return ($$2|0);
 } else {
  $166 = (($0) + ($1)|0);
  $167 = $159 | $1;
  $168 = $167 | 2;
  HEAP32[$2>>2] = $168;
  $169 = ((($166)) + 4|0);
  $170 = $74 | 3;
  HEAP32[$169>>2] = $170;
  $171 = (($166) + ($74)|0);
  $172 = ((($171)) + 4|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $173 | 1;
  HEAP32[$172>>2] = $174;
  _dispose_chunk($166,$74);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre = 0, $$pre$phi24Z2D = 0, $$pre$phi26Z2D = 0, $$pre$phiZ2D = 0, $$pre23 = 0, $$pre25 = 0, $$sink2 = 0;
 var $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond17 = 0, $not$ = 0, $not$1 = 0, $not$19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(24060)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(24064)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $100 = ((($2)) + 4|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$1 = $11;$$1418 = $12;
     break;
    }
    $104 = (($11) + ($12)|0);
    $105 = ((($11)) + 4|0);
    $106 = $12 | 1;
    $107 = $101 & -2;
    HEAP32[(24052)>>2] = $12;
    HEAP32[$100>>2] = $107;
    HEAP32[$105>>2] = $106;
    HEAP32[$104>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (24084 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[6011]|0;
     $34 = $33 & $32;
     HEAP32[6011] = $34;
     $$1 = $11;$$1418 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre25 = ((($22)) + 8|0);
     $$pre$phi26Z2D = $$pre25;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi26Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi26Z2D>>2] = $20;
    $$1 = $11;$$1418 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1426 = $59;$$1429 = $55;
      }
     } else {
      $$1426 = $57;$$1429 = $56;
     }
     while(1) {
      $61 = ((($$1426)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1426 = $62;$$1429 = $61;
       continue;
      }
      $64 = ((($$1426)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1426 = $65;$$1429 = $64;
      }
     }
     $67 = ($$1429>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1429>>2] = 0;
      $$3 = $$1426;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1418 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (24348 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    do {
     if ($73) {
      HEAP32[$71>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $74 = 1 << $70;
       $75 = $74 ^ -1;
       $76 = HEAP32[(24048)>>2]|0;
       $77 = $76 & $75;
       HEAP32[(24048)>>2] = $77;
       $$1 = $11;$$1418 = $12;
       break L1;
      }
     } else {
      $78 = HEAP32[(24060)>>2]|0;
      $79 = ($42>>>0)<($78>>>0);
      if ($79) {
       _abort();
       // unreachable;
      } else {
       $80 = ((($42)) + 16|0);
       $81 = HEAP32[$80>>2]|0;
       $not$1 = ($81|0)!=($11|0);
       $$sink2 = $not$1&1;
       $82 = (((($42)) + 16|0) + ($$sink2<<2)|0);
       HEAP32[$82>>2] = $$3;
       $83 = ($$3|0)==(0|0);
       if ($83) {
        $$1 = $11;$$1418 = $12;
        break L1;
       } else {
        break;
       }
      }
     }
    } while(0);
    $84 = HEAP32[(24060)>>2]|0;
    $85 = ($$3>>>0)<($84>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($$3)) + 24|0);
    HEAP32[$86>>2] = $42;
    $87 = ((($11)) + 16|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ($88|0)==(0|0);
    do {
     if (!($89)) {
      $90 = ($88>>>0)<($84>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = ((($$3)) + 16|0);
       HEAP32[$91>>2] = $88;
       $92 = ((($88)) + 24|0);
       HEAP32[$92>>2] = $$3;
       break;
      }
     }
    } while(0);
    $93 = ((($87)) + 4|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$1 = $11;$$1418 = $12;
    } else {
     $96 = HEAP32[(24060)>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = ((($$3)) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = ((($94)) + 24|0);
      HEAP32[$99>>2] = $$3;
      $$1 = $11;$$1418 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1418 = $1;
  }
 } while(0);
 $108 = HEAP32[(24060)>>2]|0;
 $109 = ($2>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $110 = ((($2)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[(24068)>>2]|0;
  $115 = ($2|0)==($114|0);
  $116 = HEAP32[(24064)>>2]|0;
  if ($115) {
   $117 = HEAP32[(24056)>>2]|0;
   $118 = (($117) + ($$1418))|0;
   HEAP32[(24056)>>2] = $118;
   HEAP32[(24068)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = ($$1|0)==($116|0);
   if (!($121)) {
    return;
   }
   HEAP32[(24064)>>2] = 0;
   HEAP32[(24052)>>2] = 0;
   return;
  }
  $122 = ($2|0)==($116|0);
  if ($122) {
   $123 = HEAP32[(24052)>>2]|0;
   $124 = (($123) + ($$1418))|0;
   HEAP32[(24052)>>2] = $124;
   HEAP32[(24064)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $111 & -8;
  $129 = (($128) + ($$1418))|0;
  $130 = $111 >>> 3;
  $131 = ($111>>>0)<(256);
  L96: do {
   if ($131) {
    $132 = ((($2)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($2)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (24084 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($108>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[6011]|0;
     $147 = $146 & $145;
     HEAP32[6011] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre23 = ((($135)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $149 = ($135>>>0)<($108>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($2|0);
     if ($152) {
      $$pre$phi24Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi24Z2D>>2] = $133;
   } else {
    $154 = ((($2)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($2)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($2|0);
    do {
     if ($158) {
      $168 = ((($2)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $$3435 = 0;
        break;
       } else {
        $$1433 = $172;$$1437 = $168;
       }
      } else {
       $$1433 = $170;$$1437 = $169;
      }
      while(1) {
       $174 = ((($$1433)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $$1433 = $175;$$1437 = $174;
        continue;
       }
       $177 = ((($$1433)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        break;
       } else {
        $$1433 = $178;$$1437 = $177;
       }
      }
      $180 = ($$1437>>>0)<($108>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1437>>2] = 0;
       $$3435 = $$1433;
       break;
      }
     } else {
      $159 = ((($2)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($108>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($2|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($2|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $$3435 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($2)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (24348 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($2|0)==($185|0);
     do {
      if ($186) {
       HEAP32[$184>>2] = $$3435;
       $cond17 = ($$3435|0)==(0|0);
       if ($cond17) {
        $187 = 1 << $183;
        $188 = $187 ^ -1;
        $189 = HEAP32[(24048)>>2]|0;
        $190 = $189 & $188;
        HEAP32[(24048)>>2] = $190;
        break L96;
       }
      } else {
       $191 = HEAP32[(24060)>>2]|0;
       $192 = ($155>>>0)<($191>>>0);
       if ($192) {
        _abort();
        // unreachable;
       } else {
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $not$ = ($194|0)!=($2|0);
        $$sink4 = $not$&1;
        $195 = (((($155)) + 16|0) + ($$sink4<<2)|0);
        HEAP32[$195>>2] = $$3435;
        $196 = ($$3435|0)==(0|0);
        if ($196) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while(0);
     $197 = HEAP32[(24060)>>2]|0;
     $198 = ($$3435>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($$3435)) + 24|0);
     HEAP32[$199>>2] = $155;
     $200 = ((($2)) + 16|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($$3435)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $$3435;
        break;
       }
      }
     } while(0);
     $206 = ((($200)) + 4|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(24060)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($$3435)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $$3435;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $129 | 1;
  $214 = ((($$1)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$1) + ($129)|0);
  HEAP32[$215>>2] = $129;
  $216 = HEAP32[(24064)>>2]|0;
  $217 = ($$1|0)==($216|0);
  if ($217) {
   HEAP32[(24052)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $218 = $111 & -2;
  HEAP32[$110>>2] = $218;
  $219 = $$1418 | 1;
  $220 = ((($$1)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$1) + ($$1418)|0);
  HEAP32[$221>>2] = $$1418;
  $$2 = $$1418;
 }
 $222 = $$2 >>> 3;
 $223 = ($$2>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (24084 + ($224<<2)|0);
  $226 = HEAP32[6011]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[6011] = $230;
   $$pre = ((($225)) + 8|0);
   $$0438 = $225;$$pre$phiZ2D = $$pre;
  } else {
   $231 = ((($225)) + 8|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(24060)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$0438 = $232;$$pre$phiZ2D = $231;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $235 = ((($$0438)) + 12|0);
  HEAP32[$235>>2] = $$1;
  $236 = ((($$1)) + 8|0);
  HEAP32[$236>>2] = $$0438;
  $237 = ((($$1)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$2 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $$0431 = 0;
 } else {
  $240 = ($$2>>>0)>(16777215);
  if ($240) {
   $$0431 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$2 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $$0431 = $262;
  }
 }
 $263 = (24348 + ($$0431<<2)|0);
 $264 = ((($$1)) + 28|0);
 HEAP32[$264>>2] = $$0431;
 $265 = ((($$1)) + 16|0);
 $266 = ((($$1)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(24048)>>2]|0;
 $268 = 1 << $$0431;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(24048)>>2] = $271;
  HEAP32[$263>>2] = $$1;
  $272 = ((($$1)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$1)) + 12|0);
  HEAP32[$273>>2] = $$1;
  $274 = ((($$1)) + 8|0);
  HEAP32[$274>>2] = $$1;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($$0431|0)==(31);
 $277 = $$0431 >>> 1;
 $278 = (25 - ($277))|0;
 $279 = $276 ? 0 : $278;
 $280 = $$2 << $279;
 $$0419 = $280;$$0420 = $275;
 while(1) {
  $281 = ((($$0420)) + 4|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = $282 & -8;
  $284 = ($283|0)==($$2|0);
  if ($284) {
   label = 121;
   break;
  }
  $285 = $$0419 >>> 31;
  $286 = (((($$0420)) + 16|0) + ($285<<2)|0);
  $287 = $$0419 << 1;
  $288 = HEAP32[$286>>2]|0;
  $289 = ($288|0)==(0|0);
  if ($289) {
   label = 118;
   break;
  } else {
   $$0419 = $287;$$0420 = $288;
  }
 }
 if ((label|0) == 118) {
  $290 = HEAP32[(24060)>>2]|0;
  $291 = ($286>>>0)<($290>>>0);
  if ($291) {
   _abort();
   // unreachable;
  }
  HEAP32[$286>>2] = $$1;
  $292 = ((($$1)) + 24|0);
  HEAP32[$292>>2] = $$0420;
  $293 = ((($$1)) + 12|0);
  HEAP32[$293>>2] = $$1;
  $294 = ((($$1)) + 8|0);
  HEAP32[$294>>2] = $$1;
  return;
 }
 else if ((label|0) == 121) {
  $295 = ((($$0420)) + 8|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = HEAP32[(24060)>>2]|0;
  $298 = ($296>>>0)>=($297>>>0);
  $not$19 = ($$0420>>>0)>=($297>>>0);
  $299 = $298 & $not$19;
  if (!($299)) {
   _abort();
   // unreachable;
  }
  $300 = ((($296)) + 12|0);
  HEAP32[$300>>2] = $$1;
  HEAP32[$295>>2] = $$1;
  $301 = ((($$1)) + 8|0);
  HEAP32[$301>>2] = $296;
  $302 = ((($$1)) + 12|0);
  HEAP32[$302>>2] = $$0420;
  $303 = ((($$1)) + 24|0);
  HEAP32[$303>>2] = 0;
  return;
 }
}
function _internal_memalign($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0100 = 0, $$099 = 0, $$1 = 0, $$198 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)>(16);
 $$ = $2 ? $0 : 16;
 $3 = (($$) + -1)|0;
 $4 = $3 & $$;
 $5 = ($4|0)==(0);
 if ($5) {
  $$1 = $$;
 } else {
  $$099 = 16;
  while(1) {
   $6 = ($$099>>>0)<($$>>>0);
   $7 = $$099 << 1;
   if ($6) {
    $$099 = $7;
   } else {
    $$1 = $$099;
    break;
   }
  }
 }
 $8 = (-64 - ($$1))|0;
 $9 = ($8>>>0)>($1>>>0);
 if (!($9)) {
  $10 = (___errno_location()|0);
  HEAP32[$10>>2] = 12;
  $$198 = 0;
  return ($$198|0);
 }
 $11 = ($1>>>0)<(11);
 $12 = (($1) + 11)|0;
 $13 = $12 & -8;
 $14 = $11 ? 16 : $13;
 $15 = (($14) + 12)|0;
 $16 = (($15) + ($$1))|0;
 $17 = (_malloc($16)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  $$198 = 0;
  return ($$198|0);
 }
 $19 = ((($17)) + -8|0);
 $20 = $17;
 $21 = (($$1) + -1)|0;
 $22 = $20 & $21;
 $23 = ($22|0)==(0);
 do {
  if ($23) {
   $$0100 = $19;$72 = $19;
  } else {
   $24 = (($17) + ($$1)|0);
   $25 = ((($24)) + -1|0);
   $26 = $25;
   $27 = (0 - ($$1))|0;
   $28 = $26 & $27;
   $29 = $28;
   $30 = ((($29)) + -8|0);
   $31 = $30;
   $32 = $19;
   $33 = (($31) - ($32))|0;
   $34 = ($33>>>0)>(15);
   $35 = (($30) + ($$1)|0);
   $36 = $34 ? $30 : $35;
   $37 = $36;
   $38 = (($37) - ($32))|0;
   $39 = ((($17)) + -4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 & -8;
   $42 = (($41) - ($38))|0;
   $43 = $40 & 3;
   $44 = ($43|0)==(0);
   if ($44) {
    $45 = HEAP32[$19>>2]|0;
    $46 = (($45) + ($38))|0;
    HEAP32[$36>>2] = $46;
    $47 = ((($36)) + 4|0);
    HEAP32[$47>>2] = $42;
    $$0100 = $36;$72 = $36;
    break;
   } else {
    $48 = ((($36)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $49 & 1;
    $51 = $42 | $50;
    $52 = $51 | 2;
    HEAP32[$48>>2] = $52;
    $53 = (($36) + ($42)|0);
    $54 = ((($53)) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $55 | 1;
    HEAP32[$54>>2] = $56;
    $57 = HEAP32[$39>>2]|0;
    $58 = $57 & 1;
    $59 = $38 | $58;
    $60 = $59 | 2;
    HEAP32[$39>>2] = $60;
    $61 = HEAP32[$48>>2]|0;
    $62 = $61 | 1;
    HEAP32[$48>>2] = $62;
    _dispose_chunk($19,$38);
    $$0100 = $36;$72 = $36;
    break;
   }
  }
 } while(0);
 $63 = ((($$0100)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 3;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $67 = $64 & -8;
  $68 = (($14) + 16)|0;
  $69 = ($67>>>0)>($68>>>0);
  if ($69) {
   $70 = (($67) - ($14))|0;
   $71 = (($72) + ($14)|0);
   $73 = $64 & 1;
   $74 = $14 | $73;
   $75 = $74 | 2;
   HEAP32[$63>>2] = $75;
   $76 = ((($71)) + 4|0);
   $77 = $70 | 3;
   HEAP32[$76>>2] = $77;
   $78 = (($71) + ($70)|0);
   $79 = ((($78)) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $80 | 1;
   HEAP32[$79>>2] = $81;
   _dispose_chunk($71,$70);
  }
 }
 $82 = ((($72)) + 8|0);
 $$198 = $82;
 return ($$198|0);
}
function _posix_memalign($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(8);
 do {
  if ($3) {
   $4 = (_malloc($2)|0);
   $$2 = $4;
  } else {
   $5 = $1 >>> 2;
   $6 = $1 & 3;
   $7 = ($6|0)!=(0);
   $8 = ($5|0)==(0);
   $or$cond = $7 | $8;
   if ($or$cond) {
    $$1 = 22;
    return ($$1|0);
   }
   $9 = (($5) + 1073741823)|0;
   $10 = $9 & $5;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $$1 = 22;
    return ($$1|0);
   }
   $12 = (-64 - ($1))|0;
   $13 = ($12>>>0)<($2>>>0);
   if ($13) {
    $$1 = 12;
    return ($$1|0);
   } else {
    $14 = ($1>>>0)>(16);
    $$ = $14 ? $1 : 16;
    $15 = (_internal_memalign($$,$2)|0);
    $$2 = $15;
    break;
   }
  }
 } while(0);
 $16 = ($$2|0)==(0|0);
 if ($16) {
  $$1 = 12;
  return ($$1|0);
 }
 HEAP32[$0>>2] = $$2;
 $$1 = 0;
 return ($$1|0);
}
function __ZN2ww7command16CommandProcessor3get17h5d4759f671873019E() {
 var $$expand_i1_val = 0, $$expand_i1_val22 = 0, $$expand_i1_val23 = 0, $$expand_i1_val24 = 0, $$expand_i1_val25 = 0, $$expand_i1_val26 = 0, $$field = 0, $$field12 = 0, $$hi = 0, $$hi1 = 0, $$hi1$ext = 0, $$hi1$ext$sh = 0, $$index11 = 0, $$lo = 0, $$lo$ext = 0, $$sreg$field = 0, $$sreg$field9 = 0, $$sreg$index8 = 0, $$sreg7$field = 0, $$sreg7$field15 = 0;
 var $$sreg7$index14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $_0 = 0, $_10 = 0, $_17 = 0, $_23 = 0, $_31 = 0;
 var $_37 = 0, $_4 = 0, $_40 = 0, $_42 = 0, $_48 = 0, $_49 = 0, $_50 = 0, $_8 = 0, $abi_cast = 0, $cmd = 0, $input = 0, $k = 0, $k1 = 0, $or$cond = 0, $personalityslot = 0, $personalityslot$index17 = 0, $personalityslot$index19 = 0, $personalityslot$index21 = 0, $switch = 0, $switch1 = 0;
 var $switch3 = 0, $switch4 = 0, $switch6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $0 = sp + 16|0;
 $1 = sp;
 $abi_cast = sp + 192|0;
 $personalityslot = sp + 176|0;
 $_42 = sp + 152|0;
 $_40 = sp + 144|0;
 $cmd = sp + 136|0;
 $_37 = sp + 128|0;
 $_31 = sp + 104|0;
 $_23 = sp + 80|0;
 $k = sp + 184|0;
 $_10 = sp + 72|0;
 $_8 = sp + 64|0;
 $input = sp + 48|0;
 $_4 = sp + 32|0;
 $_0 = sp + 24|0;
 $_50 = 0;
 $_49 = 0;
 $_48 = 0;
 __ZN120__LT_ww__inventory__InventoryCommand_u20_as_u20_ww__command__CommandProcessor_LT_ww__inventory__InventoryCommand_GT__GT_6prompt17h31f6b5918aa037d4E($1);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index8 = ((($1)) + 4|0);
 $$sreg$field9 = HEAP32[$$sreg$index8>>2]|0;
 __ZN2ww8platform11show_prompt17hb4efc229f77a1980E($$sreg$field,$$sreg$field9);
 $_48 = 1;
 __ZN2ww8platform10read_input17hae23db9dad14741bE($_4);
 $2 = HEAP32[$_4>>2]|0;
 $3 = ($2|0)!=(0|0);
 $$expand_i1_val = $3&1;
 $$expand_i1_val22 = 1;
 $switch6 = ($$expand_i1_val&255)<($$expand_i1_val22&255);
 L1: do {
  if ($switch6) {
   HEAP8[$_0>>0] = 0;
   label = 33;
  } else {
   $_48 = 0;
   $_49 = 1;
   ;HEAP32[$input>>2]=HEAP32[$_4>>2]|0;HEAP32[$input+4>>2]=HEAP32[$_4+4>>2]|0;HEAP32[$input+8>>2]=HEAP32[$_4+8>>2]|0;
   __THREW__ = 0;
   invoke_v(234);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   L4: do {
    if (!($7)) {
     __THREW__ = 0;
     invoke_vii(178,($0|0),($input|0));
     $$sreg7$field = HEAP32[$0>>2]|0;
     $$sreg7$index14 = ((($0)) + 4|0);
     $$sreg7$field15 = HEAP32[$$sreg7$index14>>2]|0;
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if (!($9)) {
      __THREW__ = 0;
      invoke_viii(416,($_10|0),($$sreg7$field|0),($$sreg7$field15|0));
      $10 = __THREW__; __THREW__ = 0;
      $11 = $10&1;
      if (!($11)) {
       __THREW__ = 0;
       invoke_vii(417,($_8|0),($_10|0));
       $12 = __THREW__; __THREW__ = 0;
       $13 = $12&1;
       if (!($13)) {
        $14 = HEAP32[$_8>>2]|0;
        $switch1 = ($14>>>0)<(1);
        do {
         if (!($switch1)) {
          $15 = ((($_8)) + 4|0);
          $16 = HEAP32[$15>>2]|0;
          HEAP32[$k>>2] = $16;
          __THREW__ = 0;
          $17 = (invoke_ii(418,($k|0))|0);
          $18 = __THREW__; __THREW__ = 0;
          $19 = $18&1;
          if ($19) {
           break L4;
          }
          $k1 = $17;
          $24 = $k1;
          $25 = ($24|0)==(104);
          $26 = $k1;
          $27 = ($26|0)==(63);
          $or$cond = $25 | $27;
          if ($or$cond) {
           $_17 = 1;
          } else {
           $_17 = 0;
          }
          $28 = $_17;
          $29 = $28&1;
          if (!($29)) {
           $34 = $k1;
           __THREW__ = 0;
           $35 = (invoke_ii(419,($34|0))|0);
           $36 = __THREW__; __THREW__ = 0;
           $37 = $36&1;
           if ($37) {
            break L4;
           }
           HEAP32[$abi_cast>>2] = $35;
           ;HEAP8[$_37>>0]=HEAP8[$abi_cast>>0]|0;HEAP8[$_37+1>>0]=HEAP8[$abi_cast+1>>0]|0;HEAP8[$_37+2>>0]=HEAP8[$abi_cast+2>>0]|0;
           $_50 = 1;
           $51 = HEAP8[$_37>>0]|0;
           $switch4 = ($51&255)<(1);
           $_50 = 0;
           if ($switch4) {
            break;
           }
           $52 = ((($_37)) + 1|0);
           ;HEAP8[$cmd>>0]=HEAP8[$52>>0]|0;HEAP8[$cmd+1>>0]=HEAP8[$52+1>>0]|0;
           ;HEAP8[$_40>>0]=HEAP8[$cmd>>0]|0;HEAP8[$_40+1>>0]=HEAP8[$cmd+1>>0]|0;
           HEAP8[$_0>>0] = 1;
           $53 = ((($_0)) + 1|0);
           ;HEAP8[$53>>0]=HEAP8[$_40>>0]|0;HEAP8[$53+1>>0]=HEAP8[$_40+1>>0]|0;
           label = 33;
           break L1;
          }
          $30 = HEAP32[593]|0;
          $31 = HEAP32[(2376)>>2]|0;
          __THREW__ = 0;
          invoke_viiiii(130,($_23|0),($30|0),($31|0),(23968|0),0);
          $32 = __THREW__; __THREW__ = 0;
          $33 = $32&1;
          if ($33) {
           break L4;
          }
          __THREW__ = 0;
          invoke_vi(172,($_23|0));
          $38 = __THREW__; __THREW__ = 0;
          $39 = $38&1;
          if ($39) {
           break L4;
          }
          __THREW__ = 0;
          invoke_v(420);
          $40 = __THREW__; __THREW__ = 0;
          $41 = $40&1;
          if ($41) {
           break L4;
          }
          $42 = HEAP32[597]|0;
          $43 = HEAP32[(2392)>>2]|0;
          __THREW__ = 0;
          invoke_viiiii(130,($_31|0),($42|0),($43|0),(23968|0),0);
          $44 = __THREW__; __THREW__ = 0;
          $45 = $44&1;
          if ($45) {
           break L4;
          }
          __THREW__ = 0;
          invoke_vi(172,($_31|0));
          $46 = __THREW__; __THREW__ = 0;
          $47 = $46&1;
          if ($47) {
           break L4;
          }
          HEAP8[$_0>>0] = 0;
          label = 33;
          break L1;
         }
        } while(0);
        $20 = HEAP32[601]|0;
        $21 = HEAP32[(2408)>>2]|0;
        __THREW__ = 0;
        invoke_viiiii(130,($_42|0),($20|0),($21|0),(23968|0),0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         invoke_vi(172,($_42|0));
         $54 = __THREW__; __THREW__ = 0;
         $55 = $54&1;
         if (!($55)) {
          HEAP8[$_0>>0] = 0;
          label = 33;
          break L1;
         }
        }
       }
      }
     }
    }
   } while(0);
   $68 = ___cxa_find_matching_catch_2()|0;
   $69 = tempRet0;
   HEAP32[$personalityslot>>2] = $68;
   $personalityslot$index17 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index17>>2] = $69;
   $_49 = 0;
   __ZN4drop17hdd1638425ff7362fE($input);
  }
 } while(0);
 do {
  if ((label|0) == 33) {
   $60 = $_49;
   $61 = $60&1;
   if ($61) {
    $_49 = 0;
    __THREW__ = 0;
    invoke_vi(142,($input|0));
    $58 = __THREW__; __THREW__ = 0;
    $59 = $58&1;
    if ($59) {
     $70 = ___cxa_find_matching_catch_2()|0;
     $71 = tempRet0;
     HEAP32[$personalityslot>>2] = $70;
     $personalityslot$index19 = ((($personalityslot)) + 4|0);
     HEAP32[$personalityslot$index19>>2] = $71;
     break;
    }
   }
   $48 = HEAP32[$_4>>2]|0;
   $49 = ($48|0)!=(0|0);
   $$expand_i1_val25 = $49&1;
   $$expand_i1_val26 = 1;
   $switch3 = ($$expand_i1_val25&255)<($$expand_i1_val26&255);
   if ($switch3) {
    __THREW__ = 0;
    invoke_vi(170,($_4|0));
    $62 = __THREW__; __THREW__ = 0;
    $63 = $62&1;
    if (!($63)) {
     $$lo = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
     $$lo$ext = $$lo&65535;
     $$hi = ((($_0)) + 2|0);
     $$hi1 = HEAP8[$$hi>>0]|0;
     $$hi1$ext = $$hi1&255;
     $$hi1$ext$sh = $$hi1$ext << 16;
     $50 = $$lo$ext | $$hi1$ext$sh;
     STACKTOP = sp;return ($50|0);
    }
   } else {
    $64 = $_48;
    $65 = $64&1;
    if (!($65)) {
     $$lo = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
     $$lo$ext = $$lo&65535;
     $$hi = ((($_0)) + 2|0);
     $$hi1 = HEAP8[$$hi>>0]|0;
     $$hi1$ext = $$hi1&255;
     $$hi1$ext$sh = $$hi1$ext << 16;
     $50 = $$lo$ext | $$hi1$ext$sh;
     STACKTOP = sp;return ($50|0);
    }
    $_48 = 0;
    __THREW__ = 0;
    invoke_vi(142,($_4|0));
    $66 = __THREW__; __THREW__ = 0;
    $67 = $66&1;
    if (!($67)) {
     $$lo = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
     $$lo$ext = $$lo&65535;
     $$hi = ((($_0)) + 2|0);
     $$hi1 = HEAP8[$$hi>>0]|0;
     $$hi1$ext = $$hi1&255;
     $$hi1$ext$sh = $$hi1$ext << 16;
     $50 = $$lo$ext | $$hi1$ext$sh;
     STACKTOP = sp;return ($50|0);
    }
   }
   $72 = ___cxa_find_matching_catch_2()|0;
   $73 = tempRet0;
   HEAP32[$personalityslot>>2] = $72;
   $personalityslot$index21 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index21>>2] = $73;
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index11 = ((($personalityslot)) + 4|0);
   $$field12 = HEAP32[$$index11>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
 } while(0);
 $4 = HEAP32[$_4>>2]|0;
 $5 = ($4|0)!=(0|0);
 $$expand_i1_val23 = $5&1;
 $$expand_i1_val24 = 1;
 $switch = ($$expand_i1_val23&255)<($$expand_i1_val24&255);
 if ($switch) {
  __ZN4drop17h8d63afbc99eb0efaE($_4);
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index11 = ((($personalityslot)) + 4|0);
  $$field12 = HEAP32[$$index11>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $56 = $_48;
 $57 = $56&1;
 if (!($57)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index11 = ((($personalityslot)) + 4|0);
  $$field12 = HEAP32[$$index11>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_48 = 0;
 __ZN4drop17hdd1638425ff7362fE($_4);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index11 = ((($personalityslot)) + 4|0);
 $$field12 = HEAP32[$$index11>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
 return (0)|0;
}
function __ZN120__LT_ww__inventory__InventoryCommand_u20_as_u20_ww__command__CommandProcessor_LT_ww__inventory__InventoryCommand_GT__GT_9from_char17he96b559c865d3f96E($0) {
 $0 = $0|0;
 var $$hi = 0, $$hi1 = 0, $$hi1$ext = 0, $$hi1$ext$sh = 0, $$lo = 0, $$lo$ext = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_10 = 0, $_11 = 0, $_12 = 0, $_13 = 0, $_14 = 0, $_15 = 0, $_3 = 0, $_4 = 0, $_5 = 0, $_6 = 0, $_7 = 0;
 var $_8 = 0, $_9 = 0, $arg0 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $_15 = sp + 56|0;
 $_13 = sp + 48|0;
 $_11 = sp + 40|0;
 $_9 = sp + 32|0;
 $_7 = sp + 24|0;
 $_5 = sp + 16|0;
 $_3 = sp + 8|0;
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $c = $1;
 $2 = $c;
 switch ($2|0) {
 case 49:  {
  $_4 = 0;
  HEAP8[$_3>>0] = 0;
  $3 = $_4;
  $4 = ((($_3)) + 1|0);
  HEAP8[$4>>0] = $3;
  HEAP8[$_0>>0] = 1;
  $5 = ((($_0)) + 1|0);
  ;HEAP8[$5>>0]=HEAP8[$_3>>0]|0;HEAP8[$5+1>>0]=HEAP8[$_3+1>>0]|0;
  break;
 }
 case 50:  {
  $_6 = 1;
  HEAP8[$_5>>0] = 0;
  $6 = $_6;
  $7 = ((($_5)) + 1|0);
  HEAP8[$7>>0] = $6;
  HEAP8[$_0>>0] = 1;
  $8 = ((($_0)) + 1|0);
  ;HEAP8[$8>>0]=HEAP8[$_5>>0]|0;HEAP8[$8+1>>0]=HEAP8[$_5+1>>0]|0;
  break;
 }
 case 51:  {
  $_8 = 2;
  HEAP8[$_7>>0] = 0;
  $9 = $_8;
  $10 = ((($_7)) + 1|0);
  HEAP8[$10>>0] = $9;
  HEAP8[$_0>>0] = 1;
  $11 = ((($_0)) + 1|0);
  ;HEAP8[$11>>0]=HEAP8[$_7>>0]|0;HEAP8[$11+1>>0]=HEAP8[$_7+1>>0]|0;
  break;
 }
 case 52:  {
  $_10 = 3;
  HEAP8[$_9>>0] = 0;
  $12 = $_10;
  $13 = ((($_9)) + 1|0);
  HEAP8[$13>>0] = $12;
  HEAP8[$_0>>0] = 1;
  $14 = ((($_0)) + 1|0);
  ;HEAP8[$14>>0]=HEAP8[$_9>>0]|0;HEAP8[$14+1>>0]=HEAP8[$_9+1>>0]|0;
  break;
 }
 case 53:  {
  $_12 = 4;
  HEAP8[$_11>>0] = 0;
  $15 = $_12;
  $16 = ((($_11)) + 1|0);
  HEAP8[$16>>0] = $15;
  HEAP8[$_0>>0] = 1;
  $17 = ((($_0)) + 1|0);
  ;HEAP8[$17>>0]=HEAP8[$_11>>0]|0;HEAP8[$17+1>>0]=HEAP8[$_11+1>>0]|0;
  break;
 }
 case 54:  {
  $_14 = 5;
  HEAP8[$_13>>0] = 0;
  $18 = $_14;
  $19 = ((($_13)) + 1|0);
  HEAP8[$19>>0] = $18;
  HEAP8[$_0>>0] = 1;
  $20 = ((($_0)) + 1|0);
  ;HEAP8[$20>>0]=HEAP8[$_13>>0]|0;HEAP8[$20+1>>0]=HEAP8[$_13+1>>0]|0;
  break;
 }
 case 113: case 48:  {
  HEAP8[$_15>>0] = 1;
  HEAP8[$_0>>0] = 1;
  $21 = ((($_0)) + 1|0);
  ;HEAP8[$21>>0]=HEAP8[$_15>>0]|0;HEAP8[$21+1>>0]=HEAP8[$_15+1>>0]|0;
  break;
 }
 default: {
  HEAP8[$_0>>0] = 0;
 }
 }
 $$lo = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
 $$lo$ext = $$lo&65535;
 $$hi = ((($_0)) + 2|0);
 $$hi1 = HEAP8[$$hi>>0]|0;
 $$hi1$ext = $$hi1&255;
 $$hi1$ext$sh = $$hi1$ext << 16;
 $22 = $$lo$ext | $$hi1$ext$sh;
 STACKTOP = sp;return ($22|0);
}
function __ZN2ww7command16CommandProcessor3get17h1ca1a44cc721190aE() {
 var $$expand_i1_val = 0, $$expand_i1_val22 = 0, $$expand_i1_val23 = 0, $$expand_i1_val24 = 0, $$expand_i1_val25 = 0, $$expand_i1_val26 = 0, $$field = 0, $$field12 = 0, $$hi = 0, $$hi1 = 0, $$hi1$ext = 0, $$hi1$ext$sh = 0, $$index11 = 0, $$lo = 0, $$lo$ext = 0, $$sreg$field = 0, $$sreg$field9 = 0, $$sreg$index8 = 0, $$sreg7$field = 0, $$sreg7$field15 = 0;
 var $$sreg7$index14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $_0 = 0, $_10 = 0, $_17 = 0, $_23 = 0, $_31 = 0;
 var $_37 = 0, $_4 = 0, $_40 = 0, $_42 = 0, $_48 = 0, $_49 = 0, $_50 = 0, $_8 = 0, $abi_cast = 0, $cmd = 0, $input = 0, $k = 0, $k1 = 0, $or$cond = 0, $personalityslot = 0, $personalityslot$index17 = 0, $personalityslot$index19 = 0, $personalityslot$index21 = 0, $switch = 0, $switch1 = 0;
 var $switch3 = 0, $switch4 = 0, $switch6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $0 = sp + 16|0;
 $1 = sp;
 $abi_cast = sp + 192|0;
 $personalityslot = sp + 176|0;
 $_42 = sp + 152|0;
 $_40 = sp + 144|0;
 $cmd = sp + 136|0;
 $_37 = sp + 128|0;
 $_31 = sp + 104|0;
 $_23 = sp + 80|0;
 $k = sp + 184|0;
 $_10 = sp + 72|0;
 $_8 = sp + 64|0;
 $input = sp + 48|0;
 $_4 = sp + 32|0;
 $_0 = sp + 24|0;
 $_50 = 0;
 $_49 = 0;
 $_48 = 0;
 __ZN2ww7command16CommandProcessor6prompt17h8dbfd372223b0b15E($1);
 $$sreg$field = HEAP32[$1>>2]|0;
 $$sreg$index8 = ((($1)) + 4|0);
 $$sreg$field9 = HEAP32[$$sreg$index8>>2]|0;
 __ZN2ww8platform11show_prompt17hb4efc229f77a1980E($$sreg$field,$$sreg$field9);
 $_48 = 1;
 __ZN2ww8platform10read_input17hae23db9dad14741bE($_4);
 $2 = HEAP32[$_4>>2]|0;
 $3 = ($2|0)!=(0|0);
 $$expand_i1_val = $3&1;
 $$expand_i1_val22 = 1;
 $switch6 = ($$expand_i1_val&255)<($$expand_i1_val22&255);
 L1: do {
  if ($switch6) {
   HEAP8[$_0>>0] = 0;
   label = 33;
  } else {
   $_48 = 0;
   $_49 = 1;
   ;HEAP32[$input>>2]=HEAP32[$_4>>2]|0;HEAP32[$input+4>>2]=HEAP32[$_4+4>>2]|0;HEAP32[$input+8>>2]=HEAP32[$_4+8>>2]|0;
   __THREW__ = 0;
   invoke_v(234);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   L4: do {
    if (!($7)) {
     __THREW__ = 0;
     invoke_vii(178,($0|0),($input|0));
     $$sreg7$field = HEAP32[$0>>2]|0;
     $$sreg7$index14 = ((($0)) + 4|0);
     $$sreg7$field15 = HEAP32[$$sreg7$index14>>2]|0;
     $8 = __THREW__; __THREW__ = 0;
     $9 = $8&1;
     if (!($9)) {
      __THREW__ = 0;
      invoke_viii(416,($_10|0),($$sreg7$field|0),($$sreg7$field15|0));
      $10 = __THREW__; __THREW__ = 0;
      $11 = $10&1;
      if (!($11)) {
       __THREW__ = 0;
       invoke_vii(417,($_8|0),($_10|0));
       $12 = __THREW__; __THREW__ = 0;
       $13 = $12&1;
       if (!($13)) {
        $14 = HEAP32[$_8>>2]|0;
        $switch1 = ($14>>>0)<(1);
        do {
         if (!($switch1)) {
          $15 = ((($_8)) + 4|0);
          $16 = HEAP32[$15>>2]|0;
          HEAP32[$k>>2] = $16;
          __THREW__ = 0;
          $17 = (invoke_ii(418,($k|0))|0);
          $18 = __THREW__; __THREW__ = 0;
          $19 = $18&1;
          if ($19) {
           break L4;
          }
          $k1 = $17;
          $24 = $k1;
          $25 = ($24|0)==(104);
          $26 = $k1;
          $27 = ($26|0)==(63);
          $or$cond = $25 | $27;
          if ($or$cond) {
           $_17 = 1;
          } else {
           $_17 = 0;
          }
          $28 = $_17;
          $29 = $28&1;
          if (!($29)) {
           $34 = $k1;
           __THREW__ = 0;
           $35 = (invoke_ii(421,($34|0))|0);
           $36 = __THREW__; __THREW__ = 0;
           $37 = $36&1;
           if ($37) {
            break L4;
           }
           HEAP32[$abi_cast>>2] = $35;
           ;HEAP8[$_37>>0]=HEAP8[$abi_cast>>0]|0;HEAP8[$_37+1>>0]=HEAP8[$abi_cast+1>>0]|0;HEAP8[$_37+2>>0]=HEAP8[$abi_cast+2>>0]|0;
           $_50 = 1;
           $51 = HEAP8[$_37>>0]|0;
           $switch4 = ($51&255)<(1);
           $_50 = 0;
           if ($switch4) {
            break;
           }
           $52 = ((($_37)) + 1|0);
           ;HEAP8[$cmd>>0]=HEAP8[$52>>0]|0;HEAP8[$cmd+1>>0]=HEAP8[$52+1>>0]|0;
           ;HEAP8[$_40>>0]=HEAP8[$cmd>>0]|0;HEAP8[$_40+1>>0]=HEAP8[$cmd+1>>0]|0;
           HEAP8[$_0>>0] = 1;
           $53 = ((($_0)) + 1|0);
           ;HEAP8[$53>>0]=HEAP8[$_40>>0]|0;HEAP8[$53+1>>0]=HEAP8[$_40+1>>0]|0;
           label = 33;
           break L1;
          }
          $30 = HEAP32[593]|0;
          $31 = HEAP32[(2376)>>2]|0;
          __THREW__ = 0;
          invoke_viiiii(130,($_23|0),($30|0),($31|0),(23968|0),0);
          $32 = __THREW__; __THREW__ = 0;
          $33 = $32&1;
          if ($33) {
           break L4;
          }
          __THREW__ = 0;
          invoke_vi(172,($_23|0));
          $38 = __THREW__; __THREW__ = 0;
          $39 = $38&1;
          if ($39) {
           break L4;
          }
          __THREW__ = 0;
          invoke_v(422);
          $40 = __THREW__; __THREW__ = 0;
          $41 = $40&1;
          if ($41) {
           break L4;
          }
          $42 = HEAP32[597]|0;
          $43 = HEAP32[(2392)>>2]|0;
          __THREW__ = 0;
          invoke_viiiii(130,($_31|0),($42|0),($43|0),(23968|0),0);
          $44 = __THREW__; __THREW__ = 0;
          $45 = $44&1;
          if ($45) {
           break L4;
          }
          __THREW__ = 0;
          invoke_vi(172,($_31|0));
          $46 = __THREW__; __THREW__ = 0;
          $47 = $46&1;
          if ($47) {
           break L4;
          }
          HEAP8[$_0>>0] = 0;
          label = 33;
          break L1;
         }
        } while(0);
        $20 = HEAP32[601]|0;
        $21 = HEAP32[(2408)>>2]|0;
        __THREW__ = 0;
        invoke_viiiii(130,($_42|0),($20|0),($21|0),(23968|0),0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         invoke_vi(172,($_42|0));
         $54 = __THREW__; __THREW__ = 0;
         $55 = $54&1;
         if (!($55)) {
          HEAP8[$_0>>0] = 0;
          label = 33;
          break L1;
         }
        }
       }
      }
     }
    }
   } while(0);
   $68 = ___cxa_find_matching_catch_2()|0;
   $69 = tempRet0;
   HEAP32[$personalityslot>>2] = $68;
   $personalityslot$index17 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index17>>2] = $69;
   $_49 = 0;
   __ZN4drop17hdd1638425ff7362fE($input);
  }
 } while(0);
 do {
  if ((label|0) == 33) {
   $60 = $_49;
   $61 = $60&1;
   if ($61) {
    $_49 = 0;
    __THREW__ = 0;
    invoke_vi(142,($input|0));
    $58 = __THREW__; __THREW__ = 0;
    $59 = $58&1;
    if ($59) {
     $70 = ___cxa_find_matching_catch_2()|0;
     $71 = tempRet0;
     HEAP32[$personalityslot>>2] = $70;
     $personalityslot$index19 = ((($personalityslot)) + 4|0);
     HEAP32[$personalityslot$index19>>2] = $71;
     break;
    }
   }
   $48 = HEAP32[$_4>>2]|0;
   $49 = ($48|0)!=(0|0);
   $$expand_i1_val25 = $49&1;
   $$expand_i1_val26 = 1;
   $switch3 = ($$expand_i1_val25&255)<($$expand_i1_val26&255);
   if ($switch3) {
    __THREW__ = 0;
    invoke_vi(170,($_4|0));
    $62 = __THREW__; __THREW__ = 0;
    $63 = $62&1;
    if (!($63)) {
     $$lo = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
     $$lo$ext = $$lo&65535;
     $$hi = ((($_0)) + 2|0);
     $$hi1 = HEAP8[$$hi>>0]|0;
     $$hi1$ext = $$hi1&255;
     $$hi1$ext$sh = $$hi1$ext << 16;
     $50 = $$lo$ext | $$hi1$ext$sh;
     STACKTOP = sp;return ($50|0);
    }
   } else {
    $64 = $_48;
    $65 = $64&1;
    if (!($65)) {
     $$lo = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
     $$lo$ext = $$lo&65535;
     $$hi = ((($_0)) + 2|0);
     $$hi1 = HEAP8[$$hi>>0]|0;
     $$hi1$ext = $$hi1&255;
     $$hi1$ext$sh = $$hi1$ext << 16;
     $50 = $$lo$ext | $$hi1$ext$sh;
     STACKTOP = sp;return ($50|0);
    }
    $_48 = 0;
    __THREW__ = 0;
    invoke_vi(142,($_4|0));
    $66 = __THREW__; __THREW__ = 0;
    $67 = $66&1;
    if (!($67)) {
     $$lo = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
     $$lo$ext = $$lo&65535;
     $$hi = ((($_0)) + 2|0);
     $$hi1 = HEAP8[$$hi>>0]|0;
     $$hi1$ext = $$hi1&255;
     $$hi1$ext$sh = $$hi1$ext << 16;
     $50 = $$lo$ext | $$hi1$ext$sh;
     STACKTOP = sp;return ($50|0);
    }
   }
   $72 = ___cxa_find_matching_catch_2()|0;
   $73 = tempRet0;
   HEAP32[$personalityslot>>2] = $72;
   $personalityslot$index21 = ((($personalityslot)) + 4|0);
   HEAP32[$personalityslot$index21>>2] = $73;
   $$field = HEAP32[$personalityslot>>2]|0;
   $$index11 = ((($personalityslot)) + 4|0);
   $$field12 = HEAP32[$$index11>>2]|0;
   ___resumeException($$field|0);
   // unreachable;
  }
 } while(0);
 $4 = HEAP32[$_4>>2]|0;
 $5 = ($4|0)!=(0|0);
 $$expand_i1_val23 = $5&1;
 $$expand_i1_val24 = 1;
 $switch = ($$expand_i1_val23&255)<($$expand_i1_val24&255);
 if ($switch) {
  __ZN4drop17h8d63afbc99eb0efaE($_4);
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index11 = ((($personalityslot)) + 4|0);
  $$field12 = HEAP32[$$index11>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $56 = $_48;
 $57 = $56&1;
 if (!($57)) {
  $$field = HEAP32[$personalityslot>>2]|0;
  $$index11 = ((($personalityslot)) + 4|0);
  $$field12 = HEAP32[$$index11>>2]|0;
  ___resumeException($$field|0);
  // unreachable;
 }
 $_48 = 0;
 __ZN4drop17hdd1638425ff7362fE($_4);
 $$field = HEAP32[$personalityslot>>2]|0;
 $$index11 = ((($personalityslot)) + 4|0);
 $$field12 = HEAP32[$$index11>>2]|0;
 ___resumeException($$field|0);
 // unreachable;
 return (0)|0;
}
function __ZN122__LT_ww__primary_mode__PrimaryCommand_u20_as_u20_ww__command__CommandProcessor_LT_ww__primary_mode__PrimaryCommand_GT__GT_9from_char17h30385fc69a53bac8E($0) {
 $0 = $0|0;
 var $$hi = 0, $$hi1 = 0, $$hi1$ext = 0, $$hi1$ext$sh = 0, $$lo = 0, $$lo$ext = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, $_10 = 0, $_11 = 0, $_12 = 0, $_13 = 0, $_14 = 0;
 var $_15 = 0, $_16 = 0, $_17 = 0, $_18 = 0, $_19 = 0, $_20 = 0, $_21 = 0, $_3 = 0, $_4 = 0, $_5 = 0, $_6 = 0, $_7 = 0, $_8 = 0, $_9 = 0, $arg0 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $_21 = sp + 104|0;
 $_20 = sp + 96|0;
 $_19 = sp + 88|0;
 $_18 = sp + 80|0;
 $_17 = sp + 72|0;
 $_16 = sp + 64|0;
 $_15 = sp + 56|0;
 $_13 = sp + 48|0;
 $_11 = sp + 40|0;
 $_9 = sp + 32|0;
 $_7 = sp + 24|0;
 $_5 = sp + 16|0;
 $_3 = sp + 8|0;
 $_0 = sp;
 $arg0 = $0;
 $1 = $arg0;
 $c = $1;
 $2 = $c;
 do {
  switch ($2|0) {
  case 110:  {
   $_4 = 0;
   HEAP8[$_3>>0] = 0;
   $3 = $_4;
   $4 = ((($_3)) + 1|0);
   HEAP8[$4>>0] = $3;
   HEAP8[$_0>>0] = 1;
   $5 = ((($_0)) + 1|0);
   ;HEAP8[$5>>0]=HEAP8[$_3>>0]|0;HEAP8[$5+1>>0]=HEAP8[$_3+1>>0]|0;
   break;
  }
  case 115:  {
   $_6 = 1;
   HEAP8[$_5>>0] = 0;
   $6 = $_6;
   $7 = ((($_5)) + 1|0);
   HEAP8[$7>>0] = $6;
   HEAP8[$_0>>0] = 1;
   $8 = ((($_0)) + 1|0);
   ;HEAP8[$8>>0]=HEAP8[$_5>>0]|0;HEAP8[$8+1>>0]=HEAP8[$_5+1>>0]|0;
   break;
  }
  case 101:  {
   $_8 = 2;
   HEAP8[$_7>>0] = 0;
   $9 = $_8;
   $10 = ((($_7)) + 1|0);
   HEAP8[$10>>0] = $9;
   HEAP8[$_0>>0] = 1;
   $11 = ((($_0)) + 1|0);
   ;HEAP8[$11>>0]=HEAP8[$_7>>0]|0;HEAP8[$11+1>>0]=HEAP8[$_7+1>>0]|0;
   break;
  }
  case 119:  {
   $_10 = 3;
   HEAP8[$_9>>0] = 0;
   $12 = $_10;
   $13 = ((($_9)) + 1|0);
   HEAP8[$13>>0] = $12;
   HEAP8[$_0>>0] = 1;
   $14 = ((($_0)) + 1|0);
   ;HEAP8[$14>>0]=HEAP8[$_9>>0]|0;HEAP8[$14+1>>0]=HEAP8[$_9+1>>0]|0;
   break;
  }
  case 117:  {
   $_12 = 4;
   HEAP8[$_11>>0] = 0;
   $15 = $_12;
   $16 = ((($_11)) + 1|0);
   HEAP8[$16>>0] = $15;
   HEAP8[$_0>>0] = 1;
   $17 = ((($_0)) + 1|0);
   ;HEAP8[$17>>0]=HEAP8[$_11>>0]|0;HEAP8[$17+1>>0]=HEAP8[$_11+1>>0]|0;
   break;
  }
  case 100:  {
   $_14 = 5;
   HEAP8[$_13>>0] = 0;
   $18 = $_14;
   $19 = ((($_13)) + 1|0);
   HEAP8[$19>>0] = $18;
   HEAP8[$_0>>0] = 1;
   $20 = ((($_0)) + 1|0);
   ;HEAP8[$20>>0]=HEAP8[$_13>>0]|0;HEAP8[$20+1>>0]=HEAP8[$_13+1>>0]|0;
   break;
  }
  case 99:  {
   HEAP8[$_15>>0] = 3;
   HEAP8[$_0>>0] = 1;
   $21 = ((($_0)) + 1|0);
   ;HEAP8[$21>>0]=HEAP8[$_15>>0]|0;HEAP8[$21+1>>0]=HEAP8[$_15+1>>0]|0;
   break;
  }
  case 109:  {
   HEAP8[$_16>>0] = 4;
   HEAP8[$_0>>0] = 1;
   $22 = ((($_0)) + 1|0);
   ;HEAP8[$22>>0]=HEAP8[$_16>>0]|0;HEAP8[$22+1>>0]=HEAP8[$_16+1>>0]|0;
   break;
  }
  case 105:  {
   HEAP8[$_17>>0] = 1;
   HEAP8[$_0>>0] = 1;
   $23 = ((($_0)) + 1|0);
   ;HEAP8[$23>>0]=HEAP8[$_17>>0]|0;HEAP8[$23+1>>0]=HEAP8[$_17+1>>0]|0;
   break;
  }
  case 112:  {
   HEAP8[$_18>>0] = 5;
   HEAP8[$_0>>0] = 1;
   $24 = ((($_0)) + 1|0);
   ;HEAP8[$24>>0]=HEAP8[$_18>>0]|0;HEAP8[$24+1>>0]=HEAP8[$_18+1>>0]|0;
   break;
  }
  case 108:  {
   HEAP8[$_19>>0] = 2;
   HEAP8[$_0>>0] = 1;
   $25 = ((($_0)) + 1|0);
   ;HEAP8[$25>>0]=HEAP8[$_19>>0]|0;HEAP8[$25+1>>0]=HEAP8[$_19+1>>0]|0;
   break;
  }
  case 113:  {
   HEAP8[$_20>>0] = 6;
   HEAP8[$_0>>0] = 1;
   $26 = ((($_0)) + 1|0);
   ;HEAP8[$26>>0]=HEAP8[$_20>>0]|0;HEAP8[$26+1>>0]=HEAP8[$_20+1>>0]|0;
   break;
  }
  case 96:  {
   HEAP8[$_21>>0] = 7;
   HEAP8[$_0>>0] = 1;
   $27 = ((($_0)) + 1|0);
   ;HEAP8[$27>>0]=HEAP8[$_21>>0]|0;HEAP8[$27+1>>0]=HEAP8[$_21+1>>0]|0;
   break;
  }
  default: {
   HEAP8[$_0>>0] = 0;
  }
  }
 } while(0);
 $$lo = HEAPU8[$_0>>0]|(HEAPU8[$_0+1>>0]<<8);
 $$lo$ext = $$lo&65535;
 $$hi = ((($_0)) + 2|0);
 $$hi1 = HEAP8[$$hi>>0]|0;
 $$hi1$ext = $$hi1&255;
 $$hi1$ext$sh = $$hi1$ext << 16;
 $28 = $$lo$ext | $$hi1$ext$sh;
 STACKTOP = sp;return ($28|0);
}
function runPostSets() {
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _llvm_bswap_i16(x) {
    x = x|0;
    return (((x&0xff)<<8) | ((x>>8)&0xff))|0;
}

  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&511](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&511]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&511](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&511](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&511](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&511]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&255](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b2() {
 ; nullFunc_i(2);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function _emscripten_run_script__wrapper(p0) {
 p0 = p0|0; _emscripten_run_script(p0|0);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function b5(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function _emscripten_run_script_int__wrapper(p0) {
 p0 = p0|0; return _emscripten_run_script_int(p0|0)|0;
}
function _emscripten_run_script_string__wrapper(p0) {
 p0 = p0|0; return _emscripten_run_script_string(p0|0)|0;
}
function b6(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(6);
}
function _emscripten_set_main_loop__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_set_main_loop(p0|0,p1|0,p2|0);
}
function b7() {
 ; nullFunc_v(7);
}
function b8(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(8);return 0;
}
function b9(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(9);return 0;
}
function b10(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(10);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hb64ee06167af0f92E,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h7a06fd2d52ff0402E,b0,b0,b0,b0,b0,b0,b0,b0
,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hc8c5d472da731041E,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN94__LT_std__io__Write__write_fmt__Adaptor_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h0715d0ac7be8b949E,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hd48b8fbe210909dcE,b0,b0,b0,b0,b0,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17heb630ca2677a3383E,b0,b0,b0,b0,__ZN96__LT_core__fmt__builders__PadAdapter_LT__u27_a_C__u20__u27_b_GT__u20_as_u20_core__fmt__Write_GT_9write_str17h37b44e562102531bE,b0,b0
,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_str17hbb59877877bc7fa5E,b0,b0,b0,b0,b0,___stdout_write,___stdio_seek,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN38__LT_core__option__Option_LT_T_GT__GT_6expect17h162b53e09b2bd54cE,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17he36baae0fc8f3a94E,__ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17h9386c62bd6c518efE,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17h1a1b5c5686de848bE,b0,b0,b0,__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17h9fa7d23017992385E
,b0,b0,b0,b0,b0,__ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17h51e82828835561d9E,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_3get17h8f391ead05cb793dE,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_17get_unchecked_mut17h9bdc5a031e8bf821E,b0,b0,b0,b0,b0,b0,__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17h188d34ac8e81633fE,__ZN58__LT_usize_u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17h26ff76ca31745113E,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN4core3fmt5write17ha952368ac9616bb6E,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN40__LT_str_u20_as_u20_core__fmt__Debug_GT_3fmt17hc4ff3f3b2f08a94fE,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,___stdio_write,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,__ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN4core3fmt9Arguments6new_v117h85c5683880ea9035E_4,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_i = [b2,__ZN2ww8platform10emscripten18MAIN_LOOP_CALLBACK7__getit17h0018d6d769f9bbaaE,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN3std2io5stdio6stdout11stdout_init17hf41e2a08214bb190E,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN4core3ptr8null_mut17h5791f07b509476ecE,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN2ww10sized_enum9SizedEnum6random17hce5291f2bea86cd9E,b2
,b2,b2,b2,b2,b2,__ZN4core3mem13uninitialized17h5120c7d82f5fc734E,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN4core3mem7size_of17h654d63269c6e3139E,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN4core3mem7size_of17h9965611b72f5e5b5E,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN4core3mem7size_of17h2abed0450cf199c6E,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN3std9panicking18update_panic_count11PANIC_COUNT7__getit17h8a6a4da5328889bbE,b2,b2,b2,__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17h0465d50a8ec562c0E,__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4with17hf3bc66faa0ab5898E,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,__ZN3std2io5stdio6stdout17h08356fbd64c2b659E,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,b3,__ZN2ww8platform10emscripten18MAIN_LOOP_CALLBACK6__init17h5a6a0fe6b9c2894aE,__ZN3std6thread5local2os13destroy_value17h54ffd38e1f21b646E,__ZN4drop17habb2ce726888e3b1E,b3,b3,b3,__ZN4drop17h2696e6e5b421dd7aE,b3,b3,b3,__ZN4drop17h94022395611c34c1E,b3,__ZN3std6thread5local2os13destroy_value17h33fef26ab8ddde72E,b3,b3,b3,b3,__ZN4drop17he3e770d862a9ee94E,b3,b3,b3,__ZN4drop17h52595e8585967f0dE,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,__ZN3std6thread5local2os13destroy_value17h492a5afbf44832faE,__ZN3std6thread5local2os13destroy_value17ha60533f69151aac8E,b3,b3,__ZN50__LT_F_u20_as_u20_alloc__boxed__FnBox_LT_A_GT__GT_8call_box17h25f050d28cb6d859E,__ZN4drop17h13008f44e49bc3c9E,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4drop17h23fdef13404c14d7E,b3,b3,b3,b3,__ZN4drop17h7cc369624c73b9b7E,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4drop17h1863166ca397e003E,b3,b3,b3,__ZN4drop17hb7e7ef405614b0b2E,__ZN4drop17h2c129cc35e7403c4E,b3,__ZN4core9panicking5panic17hee9f4f8d26a91787E,b3,b3,b3,b3,b3,b3,__ZN2ww8platform10emscripten22set_main_loop_callback7wrapper28__u7b__u7b_closure_u7d__u7d_17h304161c5df279480E,b3,b3,__ZN4core3mem13uninitialized17hf7f2d6a3f31c020fE
,__ZN4core3mem6forget17hd44d3812666f2672E,b3,b3,b3,b3,b3,b3,b3,__ZN74__LT_core__cell__BorrowRefMut_LT__u27_b_GT__u20_as_u20_core__ops__Drop_GT_4drop17hb12697e7ebc09ef5E,__ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17hdc85bd2e897e8f1aE,__ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h1cd7a09ae111f7ebE,b3,b3,__ZN2ww8platform10emscripten22set_main_loop_callback17h4d0d30734935962dE,__ZN4drop17h893c6cd9675242b9E,b3,b3,b3,b3,b3,b3,b3,__ZN4core3mem4drop17h30468ed7e083db7aE,b3,__ZN4drop17h785b3f160ee48200E,b3,b3,b3,_emscripten_run_script__wrapper,__ZN4drop17hef2163b33501e4d7E
,b3,b3,b3,__ZN4drop17h7be469282d9f6135E,__ZN60__LT_std__ffi__c_str__CString_u20_as_u20_core__ops__Drop_GT_4drop17heb3849e008dc2039E,b3,b3,b3,b3,b3,b3,b3,__ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h7026c3db4a288476E,__ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h72aeeff4426c23c4E,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4drop17hdd1638425ff7362fE,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,__ZN4core3mem6forget17h2d0708ed624e1e9dE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4drop17h8d63afbc99eb0efaE,__ZN2ww6combat57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_7prepare17hd00d5b455d0219adE,__ZN3std2io5stdio6_print17hc89678418da2f1ecE,b3,b3,b3,__ZN2ww10debug_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_10print_help17h60cf7d12b90411b2E,__ZN2ww10debug_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_10list_rooms17hd2499cd1bf86fa9eE,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4drop17h4913d7746a6e2c06E,__ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h7826a516923ccc91E,__ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17ha9957561f22bb2ceE,b3,b3,b3,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3new17h24d33210cf834112E,b3,__ZN4drop17h8fa696974923d4f0E,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN2ww10game_state9GameState25accuse_player_of_cheating17hedcf8b8e600ae065E,b3,b3,b3,b3,b3
,__ZN4drop17hc6bc1b4e0e470747E,b3,b3,b3,b3,b3,b3,b3,__ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17he39e4ce3e8c2a303E,__ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h7a648972877fe091E,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4core3mem6forget17h395afdbb46afcfbaE,b3,b3,b3,b3,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3new17hbc661102f8057985E,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,__ZN4drop17h7829d82d7f4f54a4E,b3,b3,__ZN4drop17h9194ea0e910420dcE,__ZN4drop17he5822bbed473e100E,__ZN71__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17heeacf3c0b5fbf084E,__ZN4drop17h32c8c3073c92bf6fE,__ZN4drop17h88ffcfbb76e7d65aE,__ZN4drop17h750a45172de70821E,__ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h2cf86d84dde4ccceE,__ZN4core3mem13uninitialized17hf1a6464ab4c25411E,b3,b3,b3,b3,__ZN80__LT_collections__vec__SetLenOnDrop_LT__u27_a_GT__u20_as_u20_core__ops__Drop_GT_4drop17h9577a37c7dd66a2dE,b3,b3,b3,b3,b3,__ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17hfeed11434924bcbdE,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4core3mem6forget17hd76ab2d70996abb2E,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4drop17hbd0cf8368b25a29fE,__ZN71__LT_collections__vec__IntoIter_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17hde0a0c9bfce6b0cfE,__ZN4drop17h50deafdf82f9a66bE,__ZN67__LT_alloc__raw_vec__RawVec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h335ccd2b7fe36b67E,__ZN4core3mem13uninitialized17h9d0638578f45729eE,b3
,b3,b3,b3,__ZN66__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Drop_GT_4drop17h853e8f7f076bcc60E,b3,b3,b3,b3,b3,__ZN11collections6string6String3new17h698b5c52ae395e87E,b3,b3,b3,b3,__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17h60ba42fcf62b8c9bE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN3std10sys_common4util10dumb_print17h1a1da08255666722E,__ZN3std9panicking12default_hook17hac15801b7aa4881cE,b3,b3,b3
,b3,b3,b3,__ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17haa414254399d4f93E,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN3std3sys3imp7condvar7Condvar4init17h21ae92b74c1c3d7cE,b3,__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17h7e8c00e2d39bd852E,b3,b3,b3,b3,b3
,__ZN4core6result13unwrap_failed17ha19036a9a6322342E,b3,__ZN40__LT_alloc__raw_vec__RawVec_LT_T_GT__GT_6double17hba8cde8aeb456f77E,b3,b3,__ZN33__LT_alloc__arc__Arc_LT_T_GT__GT_9drop_slow17h011f944b815a0c26E,b3,b3,b3,b3,__ZN59__LT_std__sync__once__Finish_u20_as_u20_core__ops__Drop_GT_4drop17h57634ab1734b5b45E,b3,__ZN3std6thread6Thread6unpark17he675f222dec36481E,b3,b3,b3,b3,__ZN3std9panicking3try7do_call17hc15dcd58425f5321E,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5flush17h54413b0de3980724E,b4,b4,b4,b4,b4,b4,b4,__ZN287__LT_std__error___LT_impl_u20_core__convert__From_LT_collections__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Send_u20__u2b__u20_core__marker__Sync_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_std__error__Error_GT_11description17h2175996f8c64d355E,__ZN3std5error5Error5cause17h3c7ac94e0e5e1176E,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN3std4sync4once4Once9call_once28__u7b__u7b_closure_u7d__u7d_17hc18bcab76e9ca036E,__ZN4core3ops6FnOnce9call_once17h81d1b88e47def972E,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4with17hd740b52515a3abebE,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN4core6option13expect_failed17h8d3ef54cab66579bE,b4,b4,b4,b4,b4,b4,b4,b4,__ZN2ww8platform10emscripten22set_main_loop_callback28__u7b__u7b_closure_u7d__u7d_17h659e7a21d9dd259dE,__ZN4core6result13unwrap_failed17h8e1b7688e33f5345E,b4
,b4,__ZN4core3mem4swap17hf4c0713837ce1513E,b4,b4,b4,b4,b4,__ZN4core9panicking9panic_fmt17hbeea8425e52b5ca1E,b4,b4,b4,__ZN2ww10game_state9GameState3new17h2aaaff1098d34a47E,b4,b4,b4,b4,b4,b4,__ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3new17h0c4a8208fcd2cb27E,b4,__ZN3std10sys_common12thread_local9StaticKey3set17h4fea6024d6333c16E,b4,b4,b4,b4,__ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_6unwrap17h84af5b9b5f885ce8E,__ZN61__LT_std__ffi__c_str__CString_u20_as_u20_core__ops__Deref_GT_5deref17h6ee1892acd69117dE,b4,b4,b4
,b4,__ZN3std3ffi5c_str7CString4_new17h1f1ce767c4ad7e8fE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN124__LT_collections__string__String_u20_as_u20_core__convert__From_LT_collections__borrow__Cow_LT__u27_a_C__u20_str_GT__GT__GT_4from17hc574f3c368cacf17E,b4,__ZN11collections3fmt6format17h3afe4169e9ab9778E,__ZN11collections6string6String6as_str17h0072890a36cd2e34E,__ZN2ww8platform10emscripten10run_script17hf613816769d0fc19E,b4,b4,b4,__ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17h1e622e95cbd3b5a1E,__ZN4core4iter5range86__LT_impl_u20_core__iter__iterator__Iterator_u20_for_u20_core__ops__Range_LT_A_GT__GT_4next17h94625b459dbe340eE,b4,b4
,b4,b4,b4,b4,__ZN4core3mem4swap17h7f94d753ca8668c1E,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN2ww6combat57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_22tick_preparation_phase28__u7b__u7b_closure_u7d__u7d_17h5d5986fa73202728E,b4,b4,b4,__ZN2ww10debug_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_15tick_debug_mode28__u7b__u7b_closure_u7d__u7d_17ha14f268cc79a79d6E,b4,__ZN2ww10game_state9GameState8set_mode17h3a836e9183396082E,b4,b4,__ZN64__LT_collections__string__String_u20_as_u20_core__ops__Deref_GT_5deref17h9de4490adad97478E
,b4,b4,b4,b4,__ZN4core4iter8iterator8Iterator7collect17h7d4e7c095f564aa7E,__ZN2ww10debug_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_9goto_room17hb5521c077b63c979E,b4,__ZN92__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__iter__traits__FromIterator_LT_T_GT__GT_9from_iter17he2392cc97c822373E,b4,b4,b4,b4,b4,b4,b4,b4,__ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17h485c2cdbd7e9c021E,__ZN97__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT_T_C__u20_I_GT__GT_9from_iter17h221384275645b51dE,__ZN76__LT_core__iter__Skip_LT_I_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17h122e3f708f928bc8E,b4,__ZN76__LT_core__iter__Skip_LT_I_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17hf838f88ca6f943e9E,b4,b4,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_13with_capacity17hcf412a613ab2ab9aE,__ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17he1b775e0d9def71eE,b4,b4,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7set_len17h7102df9f9e5fb25fE,__ZN97__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT_T_C__u20_I_GT__GT_11spec_extend17h934ffc5288408ce9E,b4
,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_16extend_desugared17heb62cbebd2d6b1d7E,b4,b4,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h039b2a1a744e2833E,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN2ww10debug_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_10list_rooms28__u7b__u7b_closure_u7d__u7d_17h70ea689efb2f0e37E,b4,b4,__ZN2ww10game_state9GameState18tick_eat_food_mode28__u7b__u7b_closure_u7d__u7d_17habfbf6647442a1aeE,b4,b4,b4,b4,b4,__ZN67__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h138c4b62d99853bfE,b4,__ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hf9c68fa258a41a8eE,b4
,b4,b4,b4,b4,b4,b4,b4,__ZN2ww7command8HelpInfo4list17h9150d5bfe6564ebdE,b4,b4,b4,__ZN83__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17he337754150a86e9eE,__ZN4core4iter8iterator8Iterator3map17hf86e583604ce174aE,__ZN4core4iter8iterator8Iterator7collect17h77a7827f77e728d9E,__ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17ha9e6a616520e2702E,b4,b4,b4,b4,b4,b4,b4,__ZN92__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__iter__traits__FromIterator_LT_T_GT__GT_9from_iter17h85621ace315d652cE,__ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hb1853a056ddf51cbE,__ZN97__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT_T_C__u20_I_GT__GT_9from_iter17h52883eef9000904bE,b4,__ZN97__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT_T_C__u20_I_GT__GT_11spec_extend17h4c2cc869d47fc844E,__ZN84__LT_core__iter__Map_LT_I_C__u20_F_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17h9630f83df08b1e12E,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_16extend_desugared17h29e7b9cb3aa846aaE,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h0085521ebbdf13d2E
,__ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h61bb9a70bdf7e3f8E,b4,b4,b4,__ZN11collections3vec12SetLenOnDrop3new17hca534047e582cef6E,__ZN84__LT_core__iter__Map_LT_I_C__u20_F_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17ha9f03d82c8f4f538E,b4,__ZN4core3ptr5write17h5e3410e4db99b329E,__ZN11collections3vec12SetLenOnDrop13increment_len17h772867f4865908d9E,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7set_len17hbc541f3aca5ae48dE,b4,b4,b4,b4,__ZN79__LT_collections__string__String_u20_as_u20_core__convert__AsRef_LT_str_GT__GT_6as_ref17hb4f6cee6e3262948E,b4,b4,b4,b4,b4
,__ZN4core3mem6forget17h0f4d5b9f24386c02E,__ZN2ww12primary_mode57__LT_impl_u20_ww__game_state__GameState_LT__u27_a_GT__GT_14get_item_names17ha4fa749dc848eca3E,__ZN2ww4util13friendly_join17hc84e2e20c42768e7E,b4,__ZN2ww7command8HelpInfo4list17h840c95d9334207d2E,b4,__ZN83__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hf4bbb4aed4872c5bE,__ZN4core4iter8iterator8Iterator3map17he08d85f93eb0f510E,__ZN4core4iter8iterator8Iterator7collect17hf9276b258f7ba71eE,__ZN70__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17ha6f706f788e88f8aE,b4,b4,b4,b4,b4,b4,b4,__ZN92__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__iter__traits__FromIterator_LT_T_GT__GT_9from_iter17he659a6c711dc4305E,__ZN54__LT_I_u20_as_u20_core__iter__traits__IntoIterator_GT_9into_iter17hc9c13e5159a5b0c9E,__ZN97__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT_T_C__u20_I_GT__GT_9from_iter17h8364c7dedcf486c1E,__ZN97__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_collections__vec__SpecExtend_LT_T_C__u20_I_GT__GT_11spec_extend17hd8f9a3affcdc588bE,__ZN84__LT_core__iter__Map_LT_I_C__u20_F_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint17hd375f5e9eb1683d5E,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_16extend_desugared17hb2bb1c74331cbfe6E,__ZN84__LT_core__iter__Map_LT_I_C__u20_F_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hc320fb463e8c29f0E,b4,b4,b4,b4,b4,b4
,b4,b4,__ZN66__LT__RF__u27_a_u20_T_u20_as_u20_core__convert__AsRef_LT_U_GT__GT_6as_ref17hcf81b7cf8d5753cfE,b4,b4,b4,__ZN4core3mem6forget17h67399914790cc5c4E,__ZN2ww5items4Item6as_str17h91b3fa04d3b7bca5E,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN2ww10game_state9GameState18tick_ask_name_mode28__u7b__u7b_closure_u7d__u7d_17h2c12649ccef2c25dE,b4,b4,b4,b4,__ZN3std9panicking11begin_panic17h8856086820d78430E,b4,b4,b4,b4,b4,b4,__ZN4core5slice20slice_index_len_fail17hc8606abb7e325facE
,b4,b4,b4,b4,b4,b4,b4,__ZN3std3ffi5c_str104__LT_impl_u20_core__convert__From_LT_std__ffi__c_str__NulError_GT__u20_for_u20_std__io__error__Error_GT_4from17h0d6696448a24f156E,b4,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h9c7deba288fd694aE,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN11collections6string116__LT_impl_u20_core__convert__From_LT_collections__string__String_GT__u20_for_u20_collections__vec__Vec_LT_u8_GT__GT_4from17hb52ab81ead3af7e6E,b4,__ZN3std3ffi5c_str7CString18from_vec_unchecked17h1f03be756c19fa64E,b4,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_13reserve_exact17h512524501172e6e4E,b4,b4,b4,__ZN3std9panicking15begin_panic_fmt17h089a948b9fd65060E,b4,b4
,b4,b4,b4,__ZN46__LT_std__io__buffered__BufWriter_LT_W_GT__GT_9flush_buf17h68208c7a1c5b86cbE,__ZN4core5slice22slice_index_order_fail17ha914aac85326e558E,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN3std10sys_common11thread_info3set17h0470cb5897e3f00dE,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h34c086a965eb6719E,b4,b4,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_7reserve17h515ea29b320619f9E,b4,b4,b4,b4,b4,b4,b4,b4,__ZN81__LT_core__str__Chars_LT__u27_a_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hf3da5d788a8e951cE,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,b5,b5,b5,b5,__ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17h1cc01d057112a4f5E,b5,b5,b5,b5,b5,b5,b5,__ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17hf47d18b6ff39323fE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN3std5error5Error7type_id17h55b8face0c0321a0E,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN36__LT_T_u20_as_u20_core__any__Any_GT_11get_type_id17hcc748c3681889155E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,___stdio_close,b5,b5,b5,b5,b5,__ZN81__LT_core__cell__RefMut_LT__u27_b_C__u20_T_GT__u20_as_u20_core__ops__DerefMut_GT_9deref_mut17h3348ce00fc504f0dE,b5,__ZN78__LT_core__cell__RefMut_LT__u27_b_C__u20_T_GT__u20_as_u20_core__ops__Deref_GT_5deref17h947a0a5111ec7413E,b5,__ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3get17h5197c20167e701faE,b5,b5,b5,b5,__ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3get17hb2706f04494bf187E,b5,__ZN38__LT_core__option__Option_LT_T_GT__GT_6as_ref17hf28b6a605cfe0e01E,__ZN38__LT_core__option__Option_LT_T_GT__GT_6unwrap17h891553b5011c6070E,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN40__LT_core__cell__UnsafeCell_LT_T_GT__GT_3new17hd5002d4ac70ce0adE,__ZN34__LT_core__cell__Cell_LT_T_GT__GT_3new17hb89016dfe9aa6290E,b5,__ZN35__LT_alloc__boxed__Box_LT_T_GT__GT_8into_raw17hf6623cd94a84e7c9E,b5,__ZN35__LT_alloc__boxed__Box_LT_T_GT__GT_8from_raw17h9526b4845d357ff5E,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_emscripten_run_script_int__wrapper,_emscripten_run_script_string__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,__ZN38__LT_core__option__Option_LT_T_GT__GT_7is_none17h7f8ef4053ac9d840E,__ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_12allot_terror28__u7b__u7b_closure_u7d__u7d_17h56e6af1c5d503b28E,__ZN49__LT_usize_u20_as_u20_core__iter__range__Step_GT_7add_one17he2c185f5fc4c785eE,b5,b5,b5,__ZN2ww8game_map106__LT_impl_u20_ww__map__Map_LT__u27_a_C__u20_ww__game_map__RoomId_C__u20_ww__game_map__RoomContents_GT__GT_14allot_treasure28__u7b__u7b_closure_u7d__u7d_17h7f6cfd25a6a136ecE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,__ZN11collections6string6String3len17hebd056027d93226dE,b5,b5,b5,b5,b5,b5,b5,b5,__ZN10num_traits4cast13FromPrimitive10from_usize17h7b04aaccb4281adbE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3len17hca79356e14b920efE,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_8capacity17hf3674a3ffa7d3917E,b5,b5,b5,b5,__ZN54__LT_str_u20_as_u20_std_unicode__u_str__UnicodeStr_GT_16split_whitespace12is_not_empty17h754a72f48fb494d3E,__ZN54__LT_str_u20_as_u20_std_unicode__u_str__UnicodeStr_GT_16split_whitespace13is_whitespace17hd31aa0ee3721a03bE,b5,b5,b5,b5,__ZN48__LT_F_u20_as_u20_core__str__pattern__CharEq_GT_10only_ascii17h16043b68984edf22E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN91__LT_core__slice__Iter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next17hcc2cd525cdd7acb2E
,b5,b5,b5,__ZN81__LT_core__str__Chars_LT__u27_a_GT__u20_as_u20_core__iter__iterator__Iterator_GT_4next28__u7b__u7b_closure_u7d__u7d_17h565df38709532f75E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17he1ec6dd93e9e8d5bE,b5,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3len17he8c92ab3c2f52d77E,b5,b5,__ZN35__LT_core__ptr__Shared_LT_T_GT__GT_3new17h3b0b2338006050eeE,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3len17h12fc54c87468005dE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_8capacity17hdcaeed579e003183E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_7is_null17ha3a18ee0550f940cE,b5,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_3len17hb4c5eb21cd9833d3E,b5,b5,__ZN35__LT_core__ptr__Shared_LT_T_GT__GT_3new17ha3228e046e307d0cE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,__ZN45__LT_std__thread__local__os__Key_LT_T_GT__GT_3get17hc9a9cb9ff2588fffE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN3std6thread6Thread3new17h2f25155421daeb91E,b5,b5,b5,b5,b5,__ZN3std10sys_common12thread_local9StaticKey9lazy_init17hb781edeaf6c88045E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN45__LT_char_u20_as_u20_std__ascii__AsciiExt_GT_18to_ascii_lowercase17h752693d647320069E
,__ZN120__LT_ww__inventory__InventoryCommand_u20_as_u20_ww__command__CommandProcessor_LT_ww__inventory__InventoryCommand_GT__GT_9from_char17he96b559c865d3f96E,b5,__ZN122__LT_ww__primary_mode__PrimaryCommand_u20_as_u20_ww__command__CommandProcessor_LT_ww__primary_mode__PrimaryCommand_GT__GT_9from_char17h30385fc69a53bac8E,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_viii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_fmt17h68160d73c6c8a97eE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,_emscripten_set_main_loop__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN4core3mem7replace17h37e1d91d49acefd7E,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,__ZN4core3fmt10ArgumentV13new17hf9d968c6b2d5ba69E,b6,__ZN4core3fmt10ArgumentV13new17h985b93776cbea59aE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,__ZN50__LT_T_u20_as_u20_core__convert__Into_LT_U_GT__GT_4into17h4023c69fa1edb57aE,b6,__ZN4core6result13unwrap_failed17h04d3ddfb0e3269ecE,b6,b6,b6,b6,__ZN4core3fmt10ArgumentV13new17hbee887761b52d43aE,b6,__ZN4core3fmt10ArgumentV13new17h36a0f98c2347b476E,b6,b6,b6,b6,__ZN97__LT_collections__vec__Vec_LT_u8_GT__u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17h77fdee4d679ecc8eE,b6,b6,__ZN3std3ffi5c_str4CStr15to_string_lossy17h44d0b433f0f1a9d0E,b6,b6,b6,b6,b6,b6,__ZN4core3fmt10ArgumentV13new17hd62d016521c551c9E,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN3std9panicking20rust_panic_with_hook17h7796dc26b802a1f8E,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,__ZN11collections3str21__LT_impl_u20_str_GT_16split_whitespace17h64b089b160251ed8E,__ZN4core4iter8iterator8Iterator4skip17h68a105e2e990da8dE,b6,b6,b6,b6,b6,__ZN11collections3str21__LT_impl_u20_str_GT_5parse17hee49a1e0800e945fE,b6,__ZN4core3fmt10ArgumentV13new17h3f3aaa5a7922a908E,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN4core3ptr5write17hcc2c8443ee6cad10E,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN4core4iter8iterator8Iterator6filter17h4e38f894231df25cE,b6,b6,b6,b6,__ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_12char_indices17h52810c8711fa7491E,b6,b6,b6,b6,b6,b6,__ZN11collections3str21__LT_impl_u20_str_GT_5parse17hdc589f137f419668E,__ZN4core3fmt10ArgumentV13new17h25daa2abe202f87fE,b6,b6,b6,b6,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_4iter17h6cce08b63ddd772aE,b6,b6
,b6,__ZN4core3fmt10ArgumentV13new17h7810b41642379ea0E,b6,b6,__ZN120__LT_ww__inventory__InventoryCommand_u20_as_u20_ww__command__CommandProcessor_LT_ww__inventory__InventoryCommand_GT__GT_8get_help28__u7b__u7b_closure_u7d__u7d_17hbc4bf870d8e6c161E,__ZN93__LT_collections__string__String_u20_as_u20_core__convert__From_LT__RF__u27_a_u20_str_GT__GT_4from17hab70a9f6912d519dE,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_8into_vec17h51a762aad804ce9fE,b6,b6,b6,__ZN11collections5slice4hack8into_vec17h5258c54e0ea13581E,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN38__LT_core__option__Option_LT_T_GT__GT_3map17hdf6fa201f31a9de3E,b6,__ZN4core3ops5impls81__LT_impl_u20_core__ops__FnOnce_LT_A_GT__u20_for_u20__RF__u27_a_u20_mut_u20_F_GT_9call_once17he12a8860c1c01beaE,__ZN2ww7command8HelpInfo4list28__u7b__u7b_closure_u7d__u7d_17h12aa7e0bb9abc645E,b6,b6,b6,b6,b6,b6
,b6,b6,b6,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_8into_vec17hf6e7d3169b903ee0E,b6,__ZN11collections5slice4hack8into_vec17h361a858fb89a65ceE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN38__LT_core__option__Option_LT_T_GT__GT_3map17h11392028cf29d412E
,__ZN4core3ops5impls81__LT_impl_u20_core__ops__FnOnce_LT_A_GT__u20_for_u20__RF__u27_a_u20_mut_u20_F_GT_9call_once17haae7a9f3ae593f0cE,__ZN2ww7command8HelpInfo4list28__u7b__u7b_closure_u7d__u7d_17h3deefb92ae34bbbfE,b6,b6,b6,b6,b6,b6,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_4push17he4bbe5d579439778E,b6,__ZN11collections6string6String8push_str17h7a4b9fa9773bf26bE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN3std9panicking11begin_panic17h10fb5a0e6dedd3d3E,b6,b6,b6,b6,b6
,b6,b6,__ZN3std9panicking12default_hook28__u7b__u7b_closure_u7d__u7d_17h307cfef520f21c08E,b6,b6,b6,__ZN3std3ffi5c_str7CString3new17hafae188671cbf311E,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN4core6result13unwrap_failed17h32cac3d896be6be8E,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN57__LT_std__io__stdio__Stdout_u20_as_u20_std__io__Write_GT_9write_fmt17h6a23f2ec3c04c479E,b6,b6,b6,b6,__ZN11collections3str62__LT_impl_u20_collections__borrow__ToOwned_u20_for_u20_str_GT_8to_owned17h189157b2b25caa18E,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN11collections3str21__LT_impl_u20_str_GT_5chars17he50c96794c1a5161E,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_v = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN5alloc3oom19default_oom_handler17h0cf8585a424e1f73E,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN2ww8platform10emscripten22set_main_loop_callback7wrapper17h1d3b3ecee5938a61E,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN2ww8platform12clear_screen17ha9833ef1d45a571aE,b7,b7,__ZN23werewolves_and_wanderer4main17h8e4d9627c0b1bf56E,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN2ww10game_state9GameState5pause17h4700730896badf5fE,b7,__ZN2ww8platform11hide_prompt17hde14f6abb1819565E,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,__ZN4core6result13unwrap_failed17hf5231363403271c5E,b7,b7,b7,b7,b7,b7,__ZN5alloc3oom3oom17h3b36c708663c15cdE,b7,__ZN4core6result13unwrap_failed17h4ce4542d05d0fa71E,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN3std6thread4park17h733fc051835a06b9E,b7,__ZN3std3sys3imp4init11oom_handler17hcec2650c300a37b8E,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,__ZN2ww7command16CommandProcessor9show_help17h22d6aa41c0a7fba6E,b7,__ZN2ww7command16CommandProcessor9show_help17h782b966cb7deee89E,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_iiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,__ZN11collections3str21__LT_impl_u20_str_GT_11starts_with17h905b701b937e22e4E,b8,b8,b8,b8,b8,__ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_11starts_with17h3e4b01a2cafff54aE,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN80__LT__RF__u27_b_u20_str_u20_as_u20_core__str__pattern__Pattern_LT__u27_a_GT__GT_12is_prefix_of17hf42fdad5d2987353E,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iii = [b9,b9,b9,b9,b9,b9,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h77a14f50168ed328E,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hd99372fa4f51ec0cE,b9,b9,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h3e99aa961daf2312E,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hd56c4902f5f5f5daE,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN4core3fmt5Write10write_char17haa2deb48ceba2f45E,__ZN4core3fmt5Write9write_fmt17he689036ac98452afE,b9,b9,b9,b9,__ZN288__LT_std__error___LT_impl_u20_core__convert__From_LT_collections__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Send_u20__u2b__u20_core__marker__Sync_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_core__fmt__Display_GT_3fmt17h3e0df4ae0abba0a5E,__ZN286__LT_std__error___LT_impl_u20_core__convert__From_LT_collections__string__String_GT__u20_for_u20_alloc__boxed__Box_LT_std__error__Error_u20__u2b__u20_core__marker__Send_u20__u2b__u20_core__marker__Sync_u20__u2b__u20__u27_static_GT__GT___from__StringError_u20_as_u20_core__fmt__Debug_GT_3fmt17ha01bdc8f9eea359aE
,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h02302c765bb1ebdbE,b9,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h954f4db9bda51332E,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hfc1dfbe5ff36a678E,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hf2e39b2d6db957ccE,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hfb2ad4b44078f3e3E,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h01d1ee5ccd022616E,b9,b9,b9,b9,b9,b9,b9,__ZN4core3fmt5Write10write_char17hbe7e15265ee75335E,__ZN4core3fmt5Write9write_fmt17h215de9b8f10977b0E,b9,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17hb1479c193a44c5beE,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h44ae10c8ee931374E,b9,b9,b9,b9,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h321b7c7c450d7533E,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17hf3bfd8560df68002E,b9,b9,b9,__ZN4core3fmt5Write10write_char17h06a01587a9c79e0aE,__ZN4core3fmt5Write9write_fmt17h40a7168063601ff2E
,b9,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_10write_char17h5f120dc7ebaf285aE,__ZN96__LT_core__fmt__Write__write_fmt__Adapter_LT__u27_a_C__u20_T_GT__u20_as_u20_core__fmt__Write_GT_9write_fmt17h4b6e85232c40c198E,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h7b84da574e12974fE,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17hdea142439e160487E,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN46__LT_std__thread__local__LocalKey_LT_T_GT__GT_4init17h2d5db368fc3da676E,b9,b9,b9,b9
,b9,b9,b9,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h51a2f6e15ea41474E,b9,__ZN63__LT_core__cell__BorrowMutError_u20_as_u20_core__fmt__Debug_GT_3fmt17h3e79de746c1e082aE,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN3std3ffi5c_str4CStr6as_ptr17hc1fe027c94b47f14E,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17hcd4b2ba84906fb97E,b9,__ZN62__LT_std__ffi__c_str__NulError_u20_as_u20_core__fmt__Debug_GT_3fmt17heaaf9f4b4df3da4dE,b9,b9,b9,b9,b9,b9,b9,b9,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17haa5b23119fe53c19E,b9,b9,b9,b9,b9,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_u64_GT_3fmt17h974573b19c7c9934E,b9,b9,b9,__ZN4core3cmp9PartialEq2ne17hf809d2c016605710E
,__ZN53__LT_ww__map__Map_LT__u27_a_C__u20_T_C__u20_C_GT__GT_8mut_room17h91c38944d5aeb022E,b9,b9,b9,b9,b9,b9,b9,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h38c177e8f2debe3bE,__ZN5alloc4heap15exchange_malloc17hd01efcfa98f30e00E,b9,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_i32_GT_3fmt17ha659d9187fbcb19eE,__ZN38__LT_core__option__Option_LT_T_GT__GT_3map17hf8b714516cb14c6eE,__ZN66__LT_collections__string__String_u20_as_u20_core__fmt__Display_GT_3fmt17h8cb585a48140150eE,__ZN4core3fmt3num51__LT_impl_u20_core__fmt__Display_u20_for_u20_u8_GT_3fmt17h106b7670ae1de9daE,__ZN54__LT_ww__items__Item_u20_as_u20_core__fmt__Display_GT_3fmt17he9660b3b2e36c83fE,__ZN38__LT_core__option__Option_LT_T_GT__GT_3map17h72b10a3987d2b843E,__ZN38__LT_core__option__Option_LT_T_GT__GT_3map17h7a017fefee213dc5E,__ZN38__LT_core__option__Option_LT_T_GT__GT_3map17hb618677786d618baE,__ZN62__LT_ww__monsters__MonsterId_u20_as_u20_core__fmt__Display_GT_3fmt17h25e718e44c4112b8E,b9,b9,b9,b9,b9,__ZN94__LT_collections__string__String_u20_as_u20_core__cmp__PartialEq_LT__RF__u27_a_u20_str_GT__GT_2eq17hc9e44242e708368aE,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,__ZN80__LT_collections__vec__Vec_LT_T_GT__u20_as_u20_core__ops__Index_LT_usize_GT__GT_5index17h47f7258b22b34fb3E,b9,b9,b9,__ZN57__LT_ww__game_map__RoomId_u20_as_u20_core__fmt__Debug_GT_3fmt17h77dff659418224bdE,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN4core3num23__LT_impl_u20_usize_GT_14saturating_add17he71edaab7c231342E,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,__ZN4core3cmp5impls57__LT_impl_u20_core__cmp__PartialOrd_u20_for_u20_usize_GT_2ge17h1ee5d94244c32b0cE,b9,__ZN76__LT_core__iter__Skip_LT_I_GT__u20_as_u20_core__iter__iterator__Iterator_GT_9size_hint28__u7b__u7b_closure_u7d__u7d_17hdb2c11ffbfd97084E,b9,b9,b9,__ZN41__LT_str_u20_as_u20_core__str__StrExt_GT_3len17h1ca6363c47a16e0eE,b9,b9,b9,b9,b9,b9,b9,__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_usize_GT_3fmt17h47bc70a70176906cE,__ZN63__LT_ww__game_map__RoomContents_u20_as_u20_core__fmt__Debug_GT_3fmt17h1bee38966e16a4c2E,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,__ZN43__LT_char_u20_as_u20_core__fmt__Display_GT_3fmt17hc4d9580eeb78c2b7E,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h54b001162aeedf29E,b9,b9,b9,__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h2552e70c1e364140E,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h38db5c2ac0f13413E,b9,__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17ha7d5a441a64351feE,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17h76479bd8b01783fcE,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17hcaafa1069370acb9E,b9,b9,b9,__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17hd82c3fda4b6cc265E,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_3len17ha5bfcf1f670e8622E,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN11collections5slice29__LT_impl_u20__u5b_T_u5d__GT_10as_mut_ptr17h8f0d98638de064f9E,__ZN4core3ptr31__LT_impl_u20__BP_mut_u20_T_GT_6offset17h933bd129d2f9cf46E,b9,__ZN66__LT_collections__string__String_u20_as_u20_core__fmt__Display_GT_3fmt17h8cb585a48140150eE_59,__ZN4core3fmt9Formatter9write_fmt17hadece32d1a4edb44E,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17he2d714954e405b09E,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Display_u20_for_u20_u32_GT_3fmt17h550cffab2fb40d60E,__ZN73__LT_core__fmt__Arguments_LT__u27_a_GT__u20_as_u20_core__fmt__Display_GT_3fmt17h7599f74842116fddE,b9,b9,b9,b9,b9,b9,__ZN3std3sys3imp9backtrace7tracing3imp5write8trace_fn17hd022ef289dced322E,__ZN4core3fmt3num54__LT_impl_u20_core__fmt__Display_u20_for_u20_isize_GT_3fmt17h56e2258afbf9d866E,__ZN50__LT__BP_mut_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h87e41aa3c11cf168E,__ZN61__LT_core__num__ParseIntError_u20_as_u20_core__fmt__Debug_GT_3fmt17h473d7a476a96fc27E,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h7e3f5ca56b2fe355E,b9,__ZN60__LT_core__cell__BorrowError_u20_as_u20_core__fmt__Debug_GT_3fmt17ha8267545098840ceE,b9,b9,b9,b9,b9,b9,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h0d4524164d8e5f0cE,__ZN60__LT_std__io__error__Error_u20_as_u20_core__fmt__Display_GT_3fmt17hebe4f88fb6655947E,b9,b9,__ZN57__LT_core__str__Utf8Error_u20_as_u20_core__fmt__Debug_GT_3fmt17h633ebf9467a08838E
,b9,__ZN82__LT_std__sys_common__poison__PoisonError_LT_T_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h803ef17ec0db6d99E,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN55__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Display_GT_3fmt17h6a6831a043775741E,__ZN41__LT_char_u20_as_u20_core__fmt__Debug_GT_3fmt17h0fb18a40f03ac388E,__ZN64__LT_core__ops__Range_LT_Idx_GT__u20_as_u20_core__fmt__Debug_GT_3fmt17h605826c1f62e4f2aE,__ZN4core3fmt3num52__LT_impl_u20_core__fmt__Debug_u20_for_u20_usize_GT_3fmt17haa47cdcfcc45afc9E,__ZN4core3fmt10ArgumentV110show_usize17ha55ad8a12b4eb237E,__ZN53__LT__RF__u27_a_u20_T_u20_as_u20_core__fmt__Debug_GT_3fmt17h0541f07e46fa4d37E,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_viiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_5write17hc003e75bb332f9e3E,b10,__ZN3std2io5impls69__LT_impl_u20_std__io__Write_u20_for_u20__RF__u27_a_u20_mut_u20_W_GT_9write_all17h34d014f22c99df60E,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN47__LT_core__result__Result_LT_T_C__u20_E_GT__GT_6expect17ha0bf73898eb5cf38E,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN63__LT_F_u20_as_u20_core__str__pattern__Pattern_LT__u27_a_GT__GT_13into_searcher17h8ff74b076af33f72E,__ZN104__LT_core__str__pattern__CharEqPattern_LT_C_GT__u20_as_u20_core__str__pattern__Pattern_LT__u27_a_GT__GT_13into_searcher17hef8df7b9e8624350E,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_14from_raw_parts17h4da7737b43689b2aE
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,__ZN39__LT_collections__vec__Vec_LT_T_GT__GT_14from_raw_parts17h9ce074a6e58b8f16E,b10,b10,b10,b10,b10,__ZN53__LT__u5b_T_u5d__u20_as_u20_core__slice__SliceExt_GT_17get_unchecked_mut17h9c59bc2b47845f7cE,__ZN86__LT_core__ops__RangeFrom_LT_usize_GT__u20_as_u20_core__slice__SliceIndex_LT_T_GT__GT_17get_unchecked_mut17h908f8390bd613478E,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,__ZN3std3sys3imp6memchr7memrchr17h29114e8523cefb1aE,__ZN72__LT_std__io__buffered__BufWriter_LT_W_GT__u20_as_u20_std__io__Write_GT_5write17hc0c3cb76330357a1E,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN3std4sync4once4Once10call_inner17hca296050369f5029E,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];

  return { _main: _main, _llvm_cttz_i32: _llvm_cttz_i32, _ntohs: _ntohs, _fflush: _fflush, _memset: _memset, _sbrk: _sbrk, _memcpy: _memcpy, _llvm_bswap_i32: _llvm_bswap_i32, _bitshift64Shl: _bitshift64Shl, ___uremdi3: ___uremdi3, _i64Subtract: _i64Subtract, ___udivmoddi4: ___udivmoddi4, _htonl: _htonl, _i64Add: _i64Add, _pthread_mutex_unlock: _pthread_mutex_unlock, _llvm_bswap_i16: _llvm_bswap_i16, _emscripten_get_global_libc: _emscripten_get_global_libc, _htons: _htons, ___udivdi3: ___udivdi3, ___errno_location: ___errno_location, _free: _free, _memmove: _memmove, _malloc: _malloc, _pthread_mutex_lock: _pthread_mutex_lock, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setTempRet0: setTempRet0, getTempRet0: getTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackSave.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_getTempRet0.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_setThrew.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_setTempRet0.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackAlloc.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__ntohs = asm["_ntohs"]; asm["_ntohs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ntohs.apply(null, arguments);
};

var real__htonl = asm["_htonl"]; asm["_htonl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htonl.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__llvm_bswap_i16 = asm["_llvm_bswap_i16"]; asm["_llvm_bswap_i16"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i16.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_get_global_libc.apply(null, arguments);
};

var real__htons = asm["_htons"]; asm["_htons"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htons.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_establishStackSpace.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackRestore.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_lock.apply(null, arguments);
};
var _main = Module["_main"] = asm["_main"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _ntohs = Module["_ntohs"] = asm["_ntohs"];
var _htonl = Module["_htonl"] = asm["_htonl"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _llvm_bswap_i16 = Module["_llvm_bswap_i16"] = asm["_llvm_bswap_i16"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var _htons = Module["_htons"] = asm["_htons"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];

Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



